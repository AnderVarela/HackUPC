{"ast":null,"code":"var isMergeable = require('./is-mergeable');\nvar sortSelectors = require('../level-1/sort-selectors');\nvar tidyRules = require('../level-1/tidy-rules');\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\nvar Token = require('../../tokenizer/token');\nfunction unsafeSelector(value) {\n  return /\\.|\\*| :/.test(value);\n}\nfunction isBemElement(token) {\n  var asString = serializeRules(token[1]);\n  return asString.indexOf('__') > -1 || asString.indexOf('--') > -1;\n}\nfunction withoutModifier(selector) {\n  return selector.replace(/--[^ ,>+~:]+/g, '');\n}\nfunction removeAnyUnsafeElements(left, candidates) {\n  var leftSelector = withoutModifier(serializeRules(left[1]));\n  for (var body in candidates) {\n    var right = candidates[body];\n    var rightSelector = withoutModifier(serializeRules(right[1]));\n    if (rightSelector.indexOf(leftSelector) > -1 || leftSelector.indexOf(rightSelector) > -1) {\n      delete candidates[body];\n    }\n  }\n}\nfunction mergeNonAdjacentByBody(tokens, context) {\n  var options = context.options;\n  var mergeSemantically = options.level[OptimizationLevel.Two].mergeSemantically;\n  var adjacentSpace = options.compatibility.selectors.adjacentSpace;\n  var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var candidates = {};\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    var token = tokens[i];\n    if (token[0] != Token.RULE) {\n      continue;\n    }\n    if (token[2].length > 0 && !mergeSemantically && unsafeSelector(serializeRules(token[1]))) {\n      candidates = {};\n    }\n    if (token[2].length > 0 && mergeSemantically && isBemElement(token)) {\n      removeAnyUnsafeElements(token, candidates);\n    }\n    var candidateBody = serializeBody(token[2]);\n    var oldToken = candidates[candidateBody];\n    if (oldToken && isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && isMergeable(serializeRules(oldToken[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)) {\n      if (token[2].length > 0) {\n        token[1] = tidyRules(oldToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);\n        token[1] = token[1].length > 1 ? sortSelectors(token[1], selectorsSortingMethod) : token[1];\n      } else {\n        token[1] = oldToken[1].concat(token[1]);\n      }\n      oldToken[2] = [];\n      candidates[candidateBody] = null;\n    }\n    candidates[serializeBody(token[2])] = token;\n  }\n}\nmodule.exports = mergeNonAdjacentByBody;","map":{"version":3,"names":["isMergeable","require","sortSelectors","tidyRules","OptimizationLevel","serializeBody","body","serializeRules","rules","Token","unsafeSelector","value","test","isBemElement","token","asString","indexOf","withoutModifier","selector","replace","removeAnyUnsafeElements","left","candidates","leftSelector","right","rightSelector","mergeNonAdjacentByBody","tokens","context","options","mergeSemantically","level","Two","adjacentSpace","compatibility","selectors","selectorsSortingMethod","One","mergeablePseudoClasses","mergeablePseudoElements","multiplePseudoMerging","i","length","RULE","candidateBody","oldToken","concat","warnings","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/clean-css/lib/optimizer/level-2/merge-non-adjacent-by-body.js"],"sourcesContent":["var isMergeable = require('./is-mergeable');\n\nvar sortSelectors = require('../level-1/sort-selectors');\nvar tidyRules = require('../level-1/tidy-rules');\n\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\n\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\n\nvar Token = require('../../tokenizer/token');\n\nfunction unsafeSelector(value) {\n  return /\\.|\\*| :/.test(value);\n}\n\nfunction isBemElement(token) {\n  var asString = serializeRules(token[1]);\n  return asString.indexOf('__') > -1 || asString.indexOf('--') > -1;\n}\n\nfunction withoutModifier(selector) {\n  return selector.replace(/--[^ ,>+~:]+/g, '');\n}\n\nfunction removeAnyUnsafeElements(left, candidates) {\n  var leftSelector = withoutModifier(serializeRules(left[1]));\n\n  for (var body in candidates) {\n    var right = candidates[body];\n    var rightSelector = withoutModifier(serializeRules(right[1]));\n\n    if (rightSelector.indexOf(leftSelector) > -1 || leftSelector.indexOf(rightSelector) > -1) {\n      delete candidates[body];\n    }\n  }\n}\n\nfunction mergeNonAdjacentByBody(tokens, context) {\n  var options = context.options;\n  var mergeSemantically = options.level[OptimizationLevel.Two].mergeSemantically;\n  var adjacentSpace = options.compatibility.selectors.adjacentSpace;\n  var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var candidates = {};\n\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    var token = tokens[i];\n    if (token[0] != Token.RULE) { continue; }\n\n    if (token[2].length > 0 && (!mergeSemantically && unsafeSelector(serializeRules(token[1])))) { candidates = {}; }\n\n    if (token[2].length > 0 && mergeSemantically && isBemElement(token)) { removeAnyUnsafeElements(token, candidates); }\n\n    var candidateBody = serializeBody(token[2]);\n    var oldToken = candidates[candidateBody];\n    if (oldToken\n        && isMergeable(\n          serializeRules(token[1]),\n          mergeablePseudoClasses,\n          mergeablePseudoElements,\n          multiplePseudoMerging\n        )\n        && isMergeable(\n          serializeRules(oldToken[1]),\n          mergeablePseudoClasses,\n          mergeablePseudoElements,\n          multiplePseudoMerging\n        )\n    ) {\n      if (token[2].length > 0) {\n        token[1] = tidyRules(oldToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);\n        token[1] = token[1].length > 1 ? sortSelectors(token[1], selectorsSortingMethod) : token[1];\n      } else {\n        token[1] = oldToken[1].concat(token[1]);\n      }\n\n      oldToken[2] = [];\n      candidates[candidateBody] = null;\n    }\n\n    candidates[serializeBody(token[2])] = token;\n  }\n}\n\nmodule.exports = mergeNonAdjacentByBody;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}