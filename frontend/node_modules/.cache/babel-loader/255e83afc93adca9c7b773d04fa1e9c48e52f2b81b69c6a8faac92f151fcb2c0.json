{"ast":null,"code":"let parser = require('postcss-value-parser');\nlet list = require('postcss').list;\nlet uniq = require('../utils').uniq;\nlet escapeRegexp = require('../utils').escapeRegexp;\nlet splitSelector = require('../utils').splitSelector;\nfunction convert(value) {\n  if (value && value.length === 2 && value[0] === 'span' && parseInt(value[1], 10) > 0) {\n    return [false, parseInt(value[1], 10)];\n  }\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false];\n  }\n  return [false, false];\n}\nexports.translate = translate;\nfunction translate(values, startIndex, endIndex) {\n  let startValue = values[startIndex];\n  let endValue = values[endIndex];\n  if (!startValue) {\n    return [false, false];\n  }\n  let [start, spanStart] = convert(startValue);\n  let [end, spanEnd] = convert(endValue);\n  if (start && !endValue) {\n    return [start, false];\n  }\n  if (spanStart && end) {\n    return [end - spanStart, spanStart];\n  }\n  if (start && spanEnd) {\n    return [start, spanEnd];\n  }\n  if (start && end) {\n    return [start, end - start];\n  }\n  return [false, false];\n}\nexports.parse = parse;\nfunction parse(decl) {\n  let node = parser(decl.value);\n  let values = [];\n  let current = 0;\n  values[current] = [];\n  for (let i of node.nodes) {\n    if (i.type === 'div') {\n      current += 1;\n      values[current] = [];\n    } else if (i.type === 'word') {\n      values[current].push(i.value);\n    }\n  }\n  return values;\n}\nexports.insertDecl = insertDecl;\nfunction insertDecl(decl, prop, value) {\n  if (value && !decl.parent.some(i => i.prop === `-ms-${prop}`)) {\n    decl.cloneBefore({\n      prop: `-ms-${prop}`,\n      value: value.toString()\n    });\n  }\n}\n\n// Track transforms\n\nexports.prefixTrackProp = prefixTrackProp;\nfunction prefixTrackProp({\n  prefix,\n  prop\n}) {\n  return prefix + prop.replace('template-', '');\n}\nfunction transformRepeat({\n  nodes\n}, {\n  gap\n}) {\n  let {\n    count,\n    size\n  } = nodes.reduce((result, node) => {\n    if (node.type === 'div' && node.value === ',') {\n      result.key = 'size';\n    } else {\n      result[result.key].push(parser.stringify(node));\n    }\n    return result;\n  }, {\n    count: [],\n    key: 'count',\n    size: []\n  });\n\n  // insert gap values\n  if (gap) {\n    size = size.filter(i => i.trim());\n    let val = [];\n    for (let i = 1; i <= count; i++) {\n      size.forEach((item, index) => {\n        if (index > 0 || i > 1) {\n          val.push(gap);\n        }\n        val.push(item);\n      });\n    }\n    return val.join(' ');\n  }\n  return `(${size.join('')})[${count.join('')}]`;\n}\nexports.prefixTrackValue = prefixTrackValue;\nfunction prefixTrackValue({\n  gap,\n  value\n}) {\n  let result = parser(value).nodes.reduce((nodes, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, {\n          gap\n        })\n      });\n    }\n    if (gap && node.type === 'space') {\n      return nodes.concat({\n        type: 'space',\n        value: ' '\n      }, {\n        type: 'word',\n        value: gap\n      }, node);\n    }\n    return nodes.concat(node);\n  }, []);\n  return parser.stringify(result);\n}\n\n// Parse grid-template-areas\n\nlet DOTS = /^\\.+$/;\nfunction track(start, end) {\n  return {\n    end,\n    span: end - start,\n    start\n  };\n}\nfunction getColumns(line) {\n  return line.trim().split(/\\s+/g);\n}\nexports.parseGridAreas = parseGridAreas;\nfunction parseGridAreas({\n  gap,\n  rows\n}) {\n  return rows.reduce((areas, line, rowIndex) => {\n    if (gap.row) rowIndex *= 2;\n    if (line.trim() === '') return areas;\n    getColumns(line).forEach((area, columnIndex) => {\n      if (DOTS.test(area)) return;\n      if (gap.column) columnIndex *= 2;\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        };\n      } else {\n        let {\n          column,\n          row\n        } = areas[area];\n        column.start = Math.min(column.start, columnIndex + 1);\n        column.end = Math.max(column.end, columnIndex + 2);\n        column.span = column.end - column.start;\n        row.start = Math.min(row.start, rowIndex + 1);\n        row.end = Math.max(row.end, rowIndex + 2);\n        row.span = row.end - row.start;\n      }\n    });\n    return areas;\n  }, {});\n}\n\n// Parse grid-template\n\nfunction testTrack(node) {\n  return node.type === 'word' && /^\\[.+]$/.test(node.value);\n}\nfunction verifyRowSize(result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto');\n  }\n  return result;\n}\nexports.parseTemplate = parseTemplate;\nfunction parseTemplate({\n  decl,\n  gap\n}) {\n  let gridTemplate = parser(decl.value).nodes.reduce((result, node) => {\n    let {\n      type,\n      value\n    } = node;\n    if (testTrack(node) || type === 'space') return result;\n\n    // area\n    if (type === 'string') {\n      result = verifyRowSize(result);\n      result.areas.push(value);\n    }\n\n    // values and function\n    if (type === 'word' || type === 'function') {\n      result[result.key].push(parser.stringify(node));\n    }\n\n    // divider(/)\n    if (type === 'div' && value === '/') {\n      result.key = 'columns';\n      result = verifyRowSize(result);\n    }\n    return result;\n  }, {\n    areas: [],\n    columns: [],\n    key: 'rows',\n    rows: []\n  });\n  return {\n    areas: parseGridAreas({\n      gap,\n      rows: gridTemplate.areas\n    }),\n    columns: prefixTrackValue({\n      gap: gap.column,\n      value: gridTemplate.columns.join(' ')\n    }),\n    rows: prefixTrackValue({\n      gap: gap.row,\n      value: gridTemplate.rows.join(' ')\n    })\n  };\n}\n\n// Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\nfunction getMSDecls(area, addRowSpan = false, addColumnSpan = false) {\n  let result = [{\n    prop: '-ms-grid-row',\n    value: String(area.row.start)\n  }];\n  if (area.row.span > 1 || addRowSpan) {\n    result.push({\n      prop: '-ms-grid-row-span',\n      value: String(area.row.span)\n    });\n  }\n  result.push({\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  });\n  if (area.column.span > 1 || addColumnSpan) {\n    result.push({\n      prop: '-ms-grid-column-span',\n      value: String(area.column.span)\n    });\n  }\n  return result;\n}\nfunction getParentMedia(parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent;\n  }\n  if (!parent.parent) {\n    return false;\n  }\n  return getParentMedia(parent.parent);\n}\n\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\nfunction changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(selector => {\n    let selectorBySpace = list.space(selector);\n    let selectorByComma = list.comma(selector);\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('');\n    }\n    return selector;\n  });\n  return ruleSelectors.map(ruleSelector => {\n    let newSelector = templateSelectors.map((tplSelector, index) => {\n      let space = index === 0 ? '' : ' ';\n      return `${space}${tplSelector} > ${ruleSelector}`;\n    });\n    return newSelector;\n  });\n}\n\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\nfunction selectorsEqual(ruleA, ruleB) {\n  return ruleA.selectors.some(sel => {\n    return ruleB.selectors.includes(sel);\n  });\n}\n\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\nfunction parseGridTemplatesData(css) {\n  let parsed = [];\n\n  // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n  css.walkDecls(/grid-template(-areas)?$/, d => {\n    let rule = d.parent;\n    let media = getParentMedia(rule);\n    let gap = getGridGap(d);\n    let inheritedGap = inheritGridGap(d, gap);\n    let {\n      areas\n    } = parseTemplate({\n      decl: d,\n      gap: inheritedGap || gap\n    });\n    let areaNames = Object.keys(areas);\n\n    // skip node if it doesn't have areas\n    if (areaNames.length === 0) {\n      return true;\n    }\n\n    // check parsed array for item that include the same area names\n    // return index of that item\n    let index = parsed.reduce((acc, {\n      allAreas\n    }, idx) => {\n      let hasAreas = allAreas && areaNames.some(area => allAreas.includes(area));\n      return hasAreas ? idx : acc;\n    }, null);\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      let {\n        allAreas,\n        rules\n      } = parsed[index];\n\n      // check if rule has no duplicate area names\n      let hasNoDuplicates = rules.some(r => {\n        return r.hasDuplicates === false && selectorsEqual(r, rule);\n      });\n      let duplicatesFound = false;\n\n      // check need to gather all duplicate area names\n      let duplicateAreaNames = rules.reduce((acc, r) => {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true;\n          return r.duplicateAreaNames;\n        }\n        if (!duplicatesFound) {\n          areaNames.forEach(name => {\n            if (r.areas[name]) {\n              acc.push(name);\n            }\n          });\n        }\n        return uniq(acc);\n      }, []);\n\n      // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n      rules.forEach(r => {\n        areaNames.forEach(name => {\n          let area = r.areas[name];\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true;\n          }\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true;\n          }\n        });\n      });\n      parsed[index].allAreas = uniq([...allAreas, ...areaNames]);\n      parsed[index].rules.push({\n        areas,\n        duplicateAreaNames,\n        hasDuplicates: !hasNoDuplicates,\n        node: rule,\n        params: media.params,\n        selectors: rule.selectors\n      });\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [{\n          areas,\n          duplicateAreaNames: [],\n          duplicateRules: [],\n          hasDuplicates: false,\n          node: rule,\n          params: media.params,\n          selectors: rule.selectors\n        }]\n      });\n    }\n    return undefined;\n  });\n  return parsed;\n}\n\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\nexports.insertAreas = insertAreas;\nfunction insertAreas(css, isDisabled) {\n  // parse grid-template declarations\n  let gridTemplatesData = parseGridTemplatesData(css);\n\n  // return undefined if no declarations found\n  if (gridTemplatesData.length === 0) {\n    return undefined;\n  }\n\n  // we need to store the rules that we will insert later\n  let rulesToInsert = {};\n  css.walkDecls('grid-area', gridArea => {\n    let gridAreaRule = gridArea.parent;\n    let hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row';\n    let gridAreaMedia = getParentMedia(gridAreaRule);\n    if (isDisabled(gridArea)) {\n      return undefined;\n    }\n    let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule);\n    let value = gridArea.value;\n    // found the data that matches grid-area identifier\n    let data = gridTemplatesData.filter(d => d.allAreas.includes(value))[0];\n    if (!data) {\n      return true;\n    }\n    let lastArea = data.allAreas[data.allAreas.length - 1];\n    let selectorBySpace = list.space(gridAreaRule.selector);\n    let selectorByComma = list.comma(gridAreaRule.selector);\n    let selectorIsComplex = selectorBySpace.length > 1 && selectorBySpace.length > selectorByComma.length;\n\n    // prevent doubling of prefixes\n    if (hasPrefixedRow) {\n      return false;\n    }\n\n    // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {};\n    }\n    let lastRuleIsSet = false;\n\n    // walk through every grid-template rule data\n    for (let rule of data.rules) {\n      let area = rule.areas[value];\n      let hasDuplicateName = rule.duplicateAreaNames.includes(value);\n\n      // if we can't find the area name, update lastRule and continue\n      if (!area) {\n        let lastRule = rulesToInsert[lastArea].lastRule;\n        let lastRuleIndex;\n        if (lastRule) {\n          lastRuleIndex = css.index(lastRule);\n        } else {\n          /* c8 ignore next 2 */\n          lastRuleIndex = -1;\n        }\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n        }\n        continue;\n      }\n\n      // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = [];\n      }\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n\n        getMSDecls(area, false, false).reverse().forEach(i => gridAreaRule.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n        rulesToInsert[lastArea].lastRule = gridAreaRule;\n        lastRuleIsSet = true;\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        // grid-template has duplicates and not inside media rule\n        let cloned = gridAreaRule.clone();\n        cloned.removeAll();\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(i => cloned.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n        cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n        if (rulesToInsert[lastArea].lastRule) {\n          rulesToInsert[lastArea].lastRule.after(cloned);\n        }\n        rulesToInsert[lastArea].lastRule = cloned;\n        lastRuleIsSet = true;\n      } else if (rule.hasDuplicates && !rule.params && selectorIsComplex && gridAreaRule.selector.includes(rule.selectors[0])) {\n        // grid-template has duplicates and not inside media rule\n        // and the selector is complex\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, d => d.remove());\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(i => gridAreaRule.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n      } else if (rule.params) {\n        // grid-template is inside media rule\n        // if we're inside media rule, we need to store prefixed rules\n        // inside rulesToInsert object to be able to preserve the order of media\n        // rules and merge them easily\n        let cloned = gridAreaRule.clone();\n        cloned.removeAll();\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(i => cloned.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n        if (rule.hasDuplicates && hasDuplicateName) {\n          cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n        }\n        cloned.raws = rule.node.raws;\n        if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n          // append the prefixed rules right inside media rule\n          // with grid-template\n          rule.node.parent.append(cloned);\n        } else {\n          // store the rule to insert later\n          rulesToInsert[lastArea][rule.params].push(cloned);\n        }\n\n        // set new rule as last rule ONLY if we didn't set lastRule for\n        // this grid-area before\n        if (!lastRuleIsSet) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n        }\n      }\n    }\n    return undefined;\n  });\n\n  // append stored rules inside the media rules\n  Object.keys(rulesToInsert).forEach(area => {\n    let data = rulesToInsert[area];\n    let lastRule = data.lastRule;\n    Object.keys(data).reverse().filter(p => p !== 'lastRule').forEach(params => {\n      if (data[params].length > 0 && lastRule) {\n        lastRule.after({\n          name: 'media',\n          params\n        });\n        lastRule.next().append(data[params]);\n      }\n    });\n  });\n  return undefined;\n}\n\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnMissedAreas = warnMissedAreas;\nfunction warnMissedAreas(areas, decl, result) {\n  let missed = Object.keys(areas);\n  decl.root().walkDecls('grid-area', gridArea => {\n    missed = missed.filter(e => e !== gridArea.value);\n  });\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '));\n  }\n  return undefined;\n}\n\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnTemplateSelectorNotFound = warnTemplateSelectorNotFound;\nfunction warnTemplateSelectorNotFound(decl, result) {\n  let rule = decl.parent;\n  let root = decl.root();\n  let duplicatesFound = false;\n\n  // slice selector array. Remove the last part (for comparison)\n  let slicedSelectorArr = list.space(rule.selector).filter(str => str !== '>').slice(0, -1);\n\n  // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n  if (slicedSelectorArr.length > 0) {\n    let gridTemplateFound = false;\n    let foundAreaSelector = null;\n    root.walkDecls(/grid-template(-areas)?$/, d => {\n      let parent = d.parent;\n      let templateSelectors = parent.selectors;\n      let {\n        areas\n      } = parseTemplate({\n        decl: d,\n        gap: getGridGap(d)\n      });\n      let hasArea = areas[decl.value];\n\n      // find the the matching selectors\n      for (let tplSelector of templateSelectors) {\n        if (gridTemplateFound) {\n          break;\n        }\n        let tplSelectorArr = list.space(tplSelector).filter(str => str !== '>');\n        gridTemplateFound = tplSelectorArr.every((item, idx) => item === slicedSelectorArr[idx]);\n      }\n      if (gridTemplateFound || !hasArea) {\n        return true;\n      }\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector;\n      }\n\n      // if we found the duplicate area with different selector\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true;\n      }\n      return undefined;\n    });\n\n    // warn user if we didn't find template\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(result, 'Autoprefixer cannot find a grid-template ' + `containing the duplicate grid-area \"${decl.value}\" ` + `with full selector matching: ${slicedSelectorArr.join(' ')}`);\n    }\n  }\n}\n\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnIfGridRowColumnExists = warnIfGridRowColumnExists;\nfunction warnIfGridRowColumnExists(decl, result) {\n  let rule = decl.parent;\n  let decls = [];\n  rule.walkDecls(/^grid-(row|column)/, d => {\n    if (!d.prop.endsWith('-end') && !d.value.startsWith('span') && !d.prop.endsWith('-gap')) {\n      decls.push(d);\n    }\n  });\n  if (decls.length > 0) {\n    decls.forEach(d => {\n      d.warn(result, 'You already have a grid-area declaration present in the rule. ' + `You should use either grid-area or ${d.prop}, not both`);\n    });\n  }\n  return undefined;\n}\n\n// Gap utils\n\nexports.getGridGap = getGridGap;\nfunction getGridGap(decl) {\n  let gap = {};\n\n  // try to find gap\n  let testGap = /^(grid-)?((row|column)-)?gap$/;\n  decl.parent.walkDecls(testGap, ({\n    prop,\n    value\n  }) => {\n    if (/^(grid-)?gap$/.test(prop)) {\n      let [row,, column] = parser(value).nodes;\n      gap.row = row && parser.stringify(row);\n      gap.column = column ? parser.stringify(column) : gap.row;\n    }\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value;\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value;\n  });\n  return gap;\n}\n\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\nfunction parseMediaParams(params) {\n  if (!params) {\n    return [];\n  }\n  let parsed = parser(params);\n  let prop;\n  let value;\n  parsed.walk(node => {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value;\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''));\n    }\n  });\n  return [prop, value];\n}\n\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\nfunction shouldInheritGap(selA, selB) {\n  let result;\n\n  // get arrays of selector split in 3-deep array\n  let splitSelectorArrA = splitSelector(selA);\n  let splitSelectorArrB = splitSelector(selB);\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false;\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n\n    let idx = splitSelectorArrA[0].reduce((res, [item], index) => {\n      let firstSelectorPart = splitSelectorArrB[0][0][0];\n      if (item === firstSelectorPart) {\n        return index;\n      }\n      return false;\n    }, false);\n    if (idx) {\n      result = splitSelectorArrB[0].every((arr, index) => {\n        return arr.every((part, innerIndex) =>\n        // because selectorA has more space elements, we need to slice\n        // selectorA array by 'idx' number to compare them\n        splitSelectorArrA[0].slice(idx)[index][innerIndex] === part);\n      });\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(byCommaArr => {\n      return byCommaArr.every((bySpaceArr, index) => {\n        return bySpaceArr.every((part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part);\n      });\n    });\n  }\n  return result;\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\nexports.inheritGridGap = inheritGridGap;\nfunction inheritGridGap(decl, gap) {\n  let rule = decl.parent;\n  let mediaRule = getParentMedia(rule);\n  let root = rule.root();\n\n  // get an array of selector split in 3-deep array\n  let splitSelectorArr = splitSelector(rule.selector);\n\n  // abort if the rule already has gaps\n  if (Object.keys(gap).length > 0) {\n    return false;\n  }\n\n  // e.g ['min-width']\n  let [prop] = parseMediaParams(mediaRule.params);\n  let lastBySpace = splitSelectorArr[0];\n\n  // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n  let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);\n  let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`);\n\n  // find the closest rule with the same selector\n  let closestRuleGap;\n  root.walkRules(regexp, r => {\n    let gridGap;\n\n    // abort if are checking the same rule\n    if (rule.toString() === r.toString()) {\n      return false;\n    }\n\n    // find grid-gap values\n    r.walkDecls('grid-gap', d => gridGap = getGridGap(d));\n\n    // skip rule without gaps\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true;\n    }\n\n    // skip rules that should not be inherited from\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true;\n    }\n    let media = getParentMedia(r);\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      let propToCompare = parseMediaParams(media.params)[0];\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap;\n        return true;\n      }\n    } else {\n      closestRuleGap = gridGap;\n      return true;\n    }\n    return undefined;\n  });\n\n  // if we find the closest gap object\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap;\n  }\n  return false;\n}\nexports.warnGridGap = warnGridGap;\nfunction warnGridGap({\n  decl,\n  gap,\n  hasColumns,\n  result\n}) {\n  let hasBothGaps = gap.row && gap.column;\n  if (!hasColumns && (hasBothGaps || gap.column && !gap.row)) {\n    delete gap.column;\n    decl.warn(result, 'Can not implement grid-gap without grid-template-columns');\n  }\n}\n\n/**\n * normalize the grid-template-rows/columns values\n * @param  {String} str grid-template-rows/columns value\n * @return {Array} normalized array with values\n * @example\n * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')\n * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']\n */\nfunction normalizeRowColumn(str) {\n  let normalized = parser(str).nodes.reduce((result, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      let key = 'count';\n      let [count, value] = node.nodes.reduce((acc, n) => {\n        if (n.type === 'word' && key === 'count') {\n          acc[0] = Math.abs(parseInt(n.value));\n          return acc;\n        }\n        if (n.type === 'div' && n.value === ',') {\n          key = 'value';\n          return acc;\n        }\n        if (key === 'value') {\n          acc[1] += parser.stringify(n);\n        }\n        return acc;\n      }, [0, '']);\n      if (count) {\n        for (let i = 0; i < count; i++) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n    if (node.type === 'space') {\n      return result;\n    }\n    return result.concat(parser.stringify(node));\n  }, []);\n  return normalized;\n}\nexports.autoplaceGridItems = autoplaceGridItems;\n\n/**\n * Autoplace grid items\n * @param {Declaration} decl\n * @param {Result} result\n * @param {Object} gap gap values\n * @param {String} autoflowValue grid-auto-flow value\n * @return {void}\n * @see https://github.com/postcss/autoprefixer/issues/1148\n */\nfunction autoplaceGridItems(decl, result, gap, autoflowValue = 'row') {\n  let {\n    parent\n  } = decl;\n  let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');\n  let rows = normalizeRowColumn(rowDecl.value);\n  let columns = normalizeRowColumn(decl.value);\n\n  // Build array of area names with dummy values. If we have 3 columns and\n  // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']\n  let filledRows = rows.map((_, rowIndex) => {\n    return Array.from({\n      length: columns.length\n    }, (v, k) => k + rowIndex * columns.length + 1).join(' ');\n  });\n  let areas = parseGridAreas({\n    gap,\n    rows: filledRows\n  });\n  let keys = Object.keys(areas);\n  let items = keys.map(i => areas[i]);\n\n  // Change the order of cells if grid-auto-flow value is 'column'\n  if (autoflowValue.includes('column')) {\n    items = items.sort((a, b) => a.column.start - b.column.start);\n  }\n\n  // Insert new rules\n  items.reverse().forEach((item, index) => {\n    let {\n      column,\n      row\n    } = item;\n    let nodeSelector = parent.selectors.map(sel => sel + ` > *:nth-child(${keys.length - index})`).join(', ');\n\n    // create new rule\n    let node = parent.clone().removeAll();\n\n    // change rule selector\n    node.selector = nodeSelector;\n\n    // insert prefixed row/column values\n    node.append({\n      prop: '-ms-grid-row',\n      value: row.start\n    });\n    node.append({\n      prop: '-ms-grid-column',\n      value: column.start\n    });\n\n    // insert rule\n    parent.after(node);\n  });\n  return undefined;\n}","map":{"version":3,"names":["parser","require","list","uniq","escapeRegexp","splitSelector","convert","value","length","parseInt","exports","translate","values","startIndex","endIndex","startValue","endValue","start","spanStart","end","spanEnd","parse","decl","node","current","i","nodes","type","push","insertDecl","prop","parent","some","cloneBefore","toString","prefixTrackProp","prefix","replace","transformRepeat","gap","count","size","reduce","result","key","stringify","filter","trim","val","forEach","item","index","join","prefixTrackValue","concat","DOTS","track","span","getColumns","line","split","parseGridAreas","rows","areas","rowIndex","row","area","columnIndex","test","column","Math","min","max","testTrack","verifyRowSize","parseTemplate","gridTemplate","columns","getMSDecls","addRowSpan","addColumnSpan","String","getParentMedia","name","changeDuplicateAreaSelectors","ruleSelectors","templateSelectors","map","selector","selectorBySpace","space","selectorByComma","comma","slice","ruleSelector","newSelector","tplSelector","selectorsEqual","ruleA","ruleB","selectors","sel","includes","parseGridTemplatesData","css","parsed","walkDecls","d","rule","media","getGridGap","inheritedGap","inheritGridGap","areaNames","Object","keys","acc","allAreas","idx","hasAreas","rules","hasNoDuplicates","r","hasDuplicates","duplicatesFound","duplicateAreaNames","params","updateSpan","areasCount","duplicateRules","undefined","insertAreas","isDisabled","gridTemplatesData","rulesToInsert","gridArea","gridAreaRule","hasPrefixedRow","first","gridAreaMedia","gridAreaRuleIndex","data","lastArea","selectorIsComplex","lastRuleIsSet","hasDuplicateName","lastRule","lastRuleIndex","reverse","prepend","assign","raws","between","cloned","clone","removeAll","after","remove","append","p","next","warnMissedAreas","missed","root","e","warn","warnTemplateSelectorNotFound","slicedSelectorArr","str","gridTemplateFound","foundAreaSelector","hasArea","tplSelectorArr","every","warnIfGridRowColumnExists","decls","endsWith","startsWith","testGap","parseMediaParams","walk","shouldInheritGap","selA","selB","splitSelectorArrA","splitSelectorArrB","res","firstSelectorPart","arr","part","innerIndex","byCommaArr","bySpaceArr","mediaRule","splitSelectorArr","lastBySpace","escaped","regexp","RegExp","closestRuleGap","walkRules","gridGap","propToCompare","warnGridGap","hasColumns","hasBothGaps","normalizeRowColumn","normalized","n","abs","autoplaceGridItems","autoflowValue","rowDecl","find","filledRows","_","Array","from","v","k","items","sort","a","b","nodeSelector"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/autoprefixer/lib/hacks/grid-utils.js"],"sourcesContent":["let parser = require('postcss-value-parser')\nlet list = require('postcss').list\n\nlet uniq = require('../utils').uniq\nlet escapeRegexp = require('../utils').escapeRegexp\nlet splitSelector = require('../utils').splitSelector\n\nfunction convert(value) {\n  if (\n    value &&\n    value.length === 2 &&\n    value[0] === 'span' &&\n    parseInt(value[1], 10) > 0\n  ) {\n    return [false, parseInt(value[1], 10)]\n  }\n\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false]\n  }\n\n  return [false, false]\n}\n\nexports.translate = translate\n\nfunction translate(values, startIndex, endIndex) {\n  let startValue = values[startIndex]\n  let endValue = values[endIndex]\n\n  if (!startValue) {\n    return [false, false]\n  }\n\n  let [start, spanStart] = convert(startValue)\n  let [end, spanEnd] = convert(endValue)\n\n  if (start && !endValue) {\n    return [start, false]\n  }\n\n  if (spanStart && end) {\n    return [end - spanStart, spanStart]\n  }\n\n  if (start && spanEnd) {\n    return [start, spanEnd]\n  }\n\n  if (start && end) {\n    return [start, end - start]\n  }\n\n  return [false, false]\n}\n\nexports.parse = parse\n\nfunction parse(decl) {\n  let node = parser(decl.value)\n\n  let values = []\n  let current = 0\n  values[current] = []\n\n  for (let i of node.nodes) {\n    if (i.type === 'div') {\n      current += 1\n      values[current] = []\n    } else if (i.type === 'word') {\n      values[current].push(i.value)\n    }\n  }\n\n  return values\n}\n\nexports.insertDecl = insertDecl\n\nfunction insertDecl(decl, prop, value) {\n  if (value && !decl.parent.some(i => i.prop === `-ms-${prop}`)) {\n    decl.cloneBefore({\n      prop: `-ms-${prop}`,\n      value: value.toString()\n    })\n  }\n}\n\n// Track transforms\n\nexports.prefixTrackProp = prefixTrackProp\n\nfunction prefixTrackProp({ prefix, prop }) {\n  return prefix + prop.replace('template-', '')\n}\n\nfunction transformRepeat({ nodes }, { gap }) {\n  let { count, size } = nodes.reduce(\n    (result, node) => {\n      if (node.type === 'div' && node.value === ',') {\n        result.key = 'size'\n      } else {\n        result[result.key].push(parser.stringify(node))\n      }\n      return result\n    },\n    {\n      count: [],\n      key: 'count',\n      size: []\n    }\n  )\n\n  // insert gap values\n  if (gap) {\n    size = size.filter(i => i.trim())\n    let val = []\n    for (let i = 1; i <= count; i++) {\n      size.forEach((item, index) => {\n        if (index > 0 || i > 1) {\n          val.push(gap)\n        }\n        val.push(item)\n      })\n    }\n\n    return val.join(' ')\n  }\n\n  return `(${size.join('')})[${count.join('')}]`\n}\n\nexports.prefixTrackValue = prefixTrackValue\n\nfunction prefixTrackValue({ gap, value }) {\n  let result = parser(value).nodes.reduce((nodes, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, { gap })\n      })\n    }\n    if (gap && node.type === 'space') {\n      return nodes.concat(\n        {\n          type: 'space',\n          value: ' '\n        },\n        {\n          type: 'word',\n          value: gap\n        },\n        node\n      )\n    }\n    return nodes.concat(node)\n  }, [])\n\n  return parser.stringify(result)\n}\n\n// Parse grid-template-areas\n\nlet DOTS = /^\\.+$/\n\nfunction track(start, end) {\n  return { end, span: end - start, start }\n}\n\nfunction getColumns(line) {\n  return line.trim().split(/\\s+/g)\n}\n\nexports.parseGridAreas = parseGridAreas\n\nfunction parseGridAreas({ gap, rows }) {\n  return rows.reduce((areas, line, rowIndex) => {\n    if (gap.row) rowIndex *= 2\n\n    if (line.trim() === '') return areas\n\n    getColumns(line).forEach((area, columnIndex) => {\n      if (DOTS.test(area)) return\n\n      if (gap.column) columnIndex *= 2\n\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        }\n      } else {\n        let { column, row } = areas[area]\n\n        column.start = Math.min(column.start, columnIndex + 1)\n        column.end = Math.max(column.end, columnIndex + 2)\n        column.span = column.end - column.start\n\n        row.start = Math.min(row.start, rowIndex + 1)\n        row.end = Math.max(row.end, rowIndex + 2)\n        row.span = row.end - row.start\n      }\n    })\n\n    return areas\n  }, {})\n}\n\n// Parse grid-template\n\nfunction testTrack(node) {\n  return node.type === 'word' && /^\\[.+]$/.test(node.value)\n}\n\nfunction verifyRowSize(result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto')\n  }\n  return result\n}\n\nexports.parseTemplate = parseTemplate\n\nfunction parseTemplate({ decl, gap }) {\n  let gridTemplate = parser(decl.value).nodes.reduce(\n    (result, node) => {\n      let { type, value } = node\n\n      if (testTrack(node) || type === 'space') return result\n\n      // area\n      if (type === 'string') {\n        result = verifyRowSize(result)\n        result.areas.push(value)\n      }\n\n      // values and function\n      if (type === 'word' || type === 'function') {\n        result[result.key].push(parser.stringify(node))\n      }\n\n      // divider(/)\n      if (type === 'div' && value === '/') {\n        result.key = 'columns'\n        result = verifyRowSize(result)\n      }\n\n      return result\n    },\n    {\n      areas: [],\n      columns: [],\n      key: 'rows',\n      rows: []\n    }\n  )\n\n  return {\n    areas: parseGridAreas({\n      gap,\n      rows: gridTemplate.areas\n    }),\n    columns: prefixTrackValue({\n      gap: gap.column,\n      value: gridTemplate.columns.join(' ')\n    }),\n    rows: prefixTrackValue({\n      gap: gap.row,\n      value: gridTemplate.rows.join(' ')\n    })\n  }\n}\n\n// Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\nfunction getMSDecls(area, addRowSpan = false, addColumnSpan = false) {\n  let result = [\n    {\n      prop: '-ms-grid-row',\n      value: String(area.row.start)\n    }\n  ]\n  if (area.row.span > 1 || addRowSpan) {\n    result.push({\n      prop: '-ms-grid-row-span',\n      value: String(area.row.span)\n    })\n  }\n  result.push({\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  })\n  if (area.column.span > 1 || addColumnSpan) {\n    result.push({\n      prop: '-ms-grid-column-span',\n      value: String(area.column.span)\n    })\n  }\n  return result\n}\n\nfunction getParentMedia(parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent\n  }\n  if (!parent.parent) {\n    return false\n  }\n  return getParentMedia(parent.parent)\n}\n\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\nfunction changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(selector => {\n    let selectorBySpace = list.space(selector)\n    let selectorByComma = list.comma(selector)\n\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('')\n    }\n    return selector\n  })\n\n  return ruleSelectors.map(ruleSelector => {\n    let newSelector = templateSelectors.map((tplSelector, index) => {\n      let space = index === 0 ? '' : ' '\n      return `${space}${tplSelector} > ${ruleSelector}`\n    })\n\n    return newSelector\n  })\n}\n\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\nfunction selectorsEqual(ruleA, ruleB) {\n  return ruleA.selectors.some(sel => {\n    return ruleB.selectors.includes(sel)\n  })\n}\n\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\nfunction parseGridTemplatesData(css) {\n  let parsed = []\n\n  // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n  css.walkDecls(/grid-template(-areas)?$/, d => {\n    let rule = d.parent\n    let media = getParentMedia(rule)\n    let gap = getGridGap(d)\n    let inheritedGap = inheritGridGap(d, gap)\n    let { areas } = parseTemplate({ decl: d, gap: inheritedGap || gap })\n    let areaNames = Object.keys(areas)\n\n    // skip node if it doesn't have areas\n    if (areaNames.length === 0) {\n      return true\n    }\n\n    // check parsed array for item that include the same area names\n    // return index of that item\n    let index = parsed.reduce((acc, { allAreas }, idx) => {\n      let hasAreas = allAreas && areaNames.some(area => allAreas.includes(area))\n      return hasAreas ? idx : acc\n    }, null)\n\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      let { allAreas, rules } = parsed[index]\n\n      // check if rule has no duplicate area names\n      let hasNoDuplicates = rules.some(r => {\n        return r.hasDuplicates === false && selectorsEqual(r, rule)\n      })\n\n      let duplicatesFound = false\n\n      // check need to gather all duplicate area names\n      let duplicateAreaNames = rules.reduce((acc, r) => {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true\n          return r.duplicateAreaNames\n        }\n        if (!duplicatesFound) {\n          areaNames.forEach(name => {\n            if (r.areas[name]) {\n              acc.push(name)\n            }\n          })\n        }\n        return uniq(acc)\n      }, [])\n\n      // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n      rules.forEach(r => {\n        areaNames.forEach(name => {\n          let area = r.areas[name]\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true\n          }\n\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true\n          }\n        })\n      })\n\n      parsed[index].allAreas = uniq([...allAreas, ...areaNames])\n      parsed[index].rules.push({\n        areas,\n        duplicateAreaNames,\n        hasDuplicates: !hasNoDuplicates,\n        node: rule,\n        params: media.params,\n        selectors: rule.selectors\n      })\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [\n          {\n            areas,\n            duplicateAreaNames: [],\n            duplicateRules: [],\n            hasDuplicates: false,\n            node: rule,\n            params: media.params,\n            selectors: rule.selectors\n          }\n        ]\n      })\n    }\n\n    return undefined\n  })\n\n  return parsed\n}\n\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\nexports.insertAreas = insertAreas\n\nfunction insertAreas(css, isDisabled) {\n  // parse grid-template declarations\n  let gridTemplatesData = parseGridTemplatesData(css)\n\n  // return undefined if no declarations found\n  if (gridTemplatesData.length === 0) {\n    return undefined\n  }\n\n  // we need to store the rules that we will insert later\n  let rulesToInsert = {}\n\n  css.walkDecls('grid-area', gridArea => {\n    let gridAreaRule = gridArea.parent\n    let hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row'\n    let gridAreaMedia = getParentMedia(gridAreaRule)\n\n    if (isDisabled(gridArea)) {\n      return undefined\n    }\n\n    let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule)\n\n    let value = gridArea.value\n    // found the data that matches grid-area identifier\n    let data = gridTemplatesData.filter(d => d.allAreas.includes(value))[0]\n\n    if (!data) {\n      return true\n    }\n\n    let lastArea = data.allAreas[data.allAreas.length - 1]\n    let selectorBySpace = list.space(gridAreaRule.selector)\n    let selectorByComma = list.comma(gridAreaRule.selector)\n    let selectorIsComplex =\n      selectorBySpace.length > 1 &&\n      selectorBySpace.length > selectorByComma.length\n\n    // prevent doubling of prefixes\n    if (hasPrefixedRow) {\n      return false\n    }\n\n    // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {}\n    }\n\n    let lastRuleIsSet = false\n\n    // walk through every grid-template rule data\n    for (let rule of data.rules) {\n      let area = rule.areas[value]\n      let hasDuplicateName = rule.duplicateAreaNames.includes(value)\n\n      // if we can't find the area name, update lastRule and continue\n      if (!area) {\n        let lastRule = rulesToInsert[lastArea].lastRule\n        let lastRuleIndex\n        if (lastRule) {\n          lastRuleIndex = css.index(lastRule)\n        } else {\n          /* c8 ignore next 2 */\n          lastRuleIndex = -1\n        }\n\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule\n        }\n        continue\n      }\n\n      // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = []\n      }\n\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n\n        getMSDecls(area, false, false)\n          .reverse()\n          .forEach(i =>\n            gridAreaRule.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        rulesToInsert[lastArea].lastRule = gridAreaRule\n        lastRuleIsSet = true\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        // grid-template has duplicates and not inside media rule\n        let cloned = gridAreaRule.clone()\n        cloned.removeAll()\n\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            cloned.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        cloned.selectors = changeDuplicateAreaSelectors(\n          cloned.selectors,\n          rule.selectors\n        )\n\n        if (rulesToInsert[lastArea].lastRule) {\n          rulesToInsert[lastArea].lastRule.after(cloned)\n        }\n        rulesToInsert[lastArea].lastRule = cloned\n        lastRuleIsSet = true\n      } else if (\n        rule.hasDuplicates &&\n        !rule.params &&\n        selectorIsComplex &&\n        gridAreaRule.selector.includes(rule.selectors[0])\n      ) {\n        // grid-template has duplicates and not inside media rule\n        // and the selector is complex\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, d => d.remove())\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            gridAreaRule.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n      } else if (rule.params) {\n        // grid-template is inside media rule\n        // if we're inside media rule, we need to store prefixed rules\n        // inside rulesToInsert object to be able to preserve the order of media\n        // rules and merge them easily\n        let cloned = gridAreaRule.clone()\n        cloned.removeAll()\n\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            cloned.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        if (rule.hasDuplicates && hasDuplicateName) {\n          cloned.selectors = changeDuplicateAreaSelectors(\n            cloned.selectors,\n            rule.selectors\n          )\n        }\n\n        cloned.raws = rule.node.raws\n\n        if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n          // append the prefixed rules right inside media rule\n          // with grid-template\n          rule.node.parent.append(cloned)\n        } else {\n          // store the rule to insert later\n          rulesToInsert[lastArea][rule.params].push(cloned)\n        }\n\n        // set new rule as last rule ONLY if we didn't set lastRule for\n        // this grid-area before\n        if (!lastRuleIsSet) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule\n        }\n      }\n    }\n\n    return undefined\n  })\n\n  // append stored rules inside the media rules\n  Object.keys(rulesToInsert).forEach(area => {\n    let data = rulesToInsert[area]\n    let lastRule = data.lastRule\n    Object.keys(data)\n      .reverse()\n      .filter(p => p !== 'lastRule')\n      .forEach(params => {\n        if (data[params].length > 0 && lastRule) {\n          lastRule.after({ name: 'media', params })\n          lastRule.next().append(data[params])\n        }\n      })\n  })\n\n  return undefined\n}\n\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnMissedAreas = warnMissedAreas\n\nfunction warnMissedAreas(areas, decl, result) {\n  let missed = Object.keys(areas)\n\n  decl.root().walkDecls('grid-area', gridArea => {\n    missed = missed.filter(e => e !== gridArea.value)\n  })\n\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '))\n  }\n\n  return undefined\n}\n\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnTemplateSelectorNotFound = warnTemplateSelectorNotFound\n\nfunction warnTemplateSelectorNotFound(decl, result) {\n  let rule = decl.parent\n  let root = decl.root()\n  let duplicatesFound = false\n\n  // slice selector array. Remove the last part (for comparison)\n  let slicedSelectorArr = list\n    .space(rule.selector)\n    .filter(str => str !== '>')\n    .slice(0, -1)\n\n  // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n  if (slicedSelectorArr.length > 0) {\n    let gridTemplateFound = false\n    let foundAreaSelector = null\n\n    root.walkDecls(/grid-template(-areas)?$/, d => {\n      let parent = d.parent\n      let templateSelectors = parent.selectors\n\n      let { areas } = parseTemplate({ decl: d, gap: getGridGap(d) })\n      let hasArea = areas[decl.value]\n\n      // find the the matching selectors\n      for (let tplSelector of templateSelectors) {\n        if (gridTemplateFound) {\n          break\n        }\n        let tplSelectorArr = list.space(tplSelector).filter(str => str !== '>')\n\n        gridTemplateFound = tplSelectorArr.every(\n          (item, idx) => item === slicedSelectorArr[idx]\n        )\n      }\n\n      if (gridTemplateFound || !hasArea) {\n        return true\n      }\n\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector\n      }\n\n      // if we found the duplicate area with different selector\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true\n      }\n\n      return undefined\n    })\n\n    // warn user if we didn't find template\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(\n        result,\n        'Autoprefixer cannot find a grid-template ' +\n          `containing the duplicate grid-area \"${decl.value}\" ` +\n          `with full selector matching: ${slicedSelectorArr.join(' ')}`\n      )\n    }\n  }\n}\n\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnIfGridRowColumnExists = warnIfGridRowColumnExists\n\nfunction warnIfGridRowColumnExists(decl, result) {\n  let rule = decl.parent\n  let decls = []\n  rule.walkDecls(/^grid-(row|column)/, d => {\n    if (\n      !d.prop.endsWith('-end') &&\n      !d.value.startsWith('span') &&\n      !d.prop.endsWith('-gap')\n    ) {\n      decls.push(d)\n    }\n  })\n  if (decls.length > 0) {\n    decls.forEach(d => {\n      d.warn(\n        result,\n        'You already have a grid-area declaration present in the rule. ' +\n          `You should use either grid-area or ${d.prop}, not both`\n      )\n    })\n  }\n\n  return undefined\n}\n\n// Gap utils\n\nexports.getGridGap = getGridGap\n\nfunction getGridGap(decl) {\n  let gap = {}\n\n  // try to find gap\n  let testGap = /^(grid-)?((row|column)-)?gap$/\n  decl.parent.walkDecls(testGap, ({ prop, value }) => {\n    if (/^(grid-)?gap$/.test(prop)) {\n      let [row, , column] = parser(value).nodes\n\n      gap.row = row && parser.stringify(row)\n      gap.column = column ? parser.stringify(column) : gap.row\n    }\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value\n  })\n\n  return gap\n}\n\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\nfunction parseMediaParams(params) {\n  if (!params) {\n    return []\n  }\n  let parsed = parser(params)\n  let prop\n  let value\n\n  parsed.walk(node => {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''))\n    }\n  })\n\n  return [prop, value]\n}\n\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\nfunction shouldInheritGap(selA, selB) {\n  let result\n\n  // get arrays of selector split in 3-deep array\n  let splitSelectorArrA = splitSelector(selA)\n  let splitSelectorArrB = splitSelector(selB)\n\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n\n    let idx = splitSelectorArrA[0].reduce((res, [item], index) => {\n      let firstSelectorPart = splitSelectorArrB[0][0][0]\n      if (item === firstSelectorPart) {\n        return index\n      }\n      return false\n    }, false)\n\n    if (idx) {\n      result = splitSelectorArrB[0].every((arr, index) => {\n        return arr.every(\n          (part, innerIndex) =>\n            // because selectorA has more space elements, we need to slice\n            // selectorA array by 'idx' number to compare them\n            splitSelectorArrA[0].slice(idx)[index][innerIndex] === part\n        )\n      })\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(byCommaArr => {\n      return byCommaArr.every((bySpaceArr, index) => {\n        return bySpaceArr.every(\n          (part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part\n        )\n      })\n    })\n  }\n\n  return result\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\nexports.inheritGridGap = inheritGridGap\n\nfunction inheritGridGap(decl, gap) {\n  let rule = decl.parent\n  let mediaRule = getParentMedia(rule)\n  let root = rule.root()\n\n  // get an array of selector split in 3-deep array\n  let splitSelectorArr = splitSelector(rule.selector)\n\n  // abort if the rule already has gaps\n  if (Object.keys(gap).length > 0) {\n    return false\n  }\n\n  // e.g ['min-width']\n  let [prop] = parseMediaParams(mediaRule.params)\n\n  let lastBySpace = splitSelectorArr[0]\n\n  // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n  let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0])\n\n  let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`)\n\n  // find the closest rule with the same selector\n  let closestRuleGap\n  root.walkRules(regexp, r => {\n    let gridGap\n\n    // abort if are checking the same rule\n    if (rule.toString() === r.toString()) {\n      return false\n    }\n\n    // find grid-gap values\n    r.walkDecls('grid-gap', d => (gridGap = getGridGap(d)))\n\n    // skip rule without gaps\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true\n    }\n\n    // skip rules that should not be inherited from\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true\n    }\n\n    let media = getParentMedia(r)\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      let propToCompare = parseMediaParams(media.params)[0]\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap\n        return true\n      }\n    } else {\n      closestRuleGap = gridGap\n      return true\n    }\n\n    return undefined\n  })\n\n  // if we find the closest gap object\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap\n  }\n  return false\n}\n\nexports.warnGridGap = warnGridGap\n\nfunction warnGridGap({ decl, gap, hasColumns, result }) {\n  let hasBothGaps = gap.row && gap.column\n  if (!hasColumns && (hasBothGaps || (gap.column && !gap.row))) {\n    delete gap.column\n    decl.warn(\n      result,\n      'Can not implement grid-gap without grid-template-columns'\n    )\n  }\n}\n\n/**\n * normalize the grid-template-rows/columns values\n * @param  {String} str grid-template-rows/columns value\n * @return {Array} normalized array with values\n * @example\n * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')\n * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']\n */\nfunction normalizeRowColumn(str) {\n  let normalized = parser(str).nodes.reduce((result, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      let key = 'count'\n\n      let [count, value] = node.nodes.reduce(\n        (acc, n) => {\n          if (n.type === 'word' && key === 'count') {\n            acc[0] = Math.abs(parseInt(n.value))\n            return acc\n          }\n          if (n.type === 'div' && n.value === ',') {\n            key = 'value'\n            return acc\n          }\n          if (key === 'value') {\n            acc[1] += parser.stringify(n)\n          }\n          return acc\n        },\n        [0, '']\n      )\n\n      if (count) {\n        for (let i = 0; i < count; i++) {\n          result.push(value)\n        }\n      }\n\n      return result\n    }\n    if (node.type === 'space') {\n      return result\n    }\n    return result.concat(parser.stringify(node))\n  }, [])\n\n  return normalized\n}\n\nexports.autoplaceGridItems = autoplaceGridItems\n\n/**\n * Autoplace grid items\n * @param {Declaration} decl\n * @param {Result} result\n * @param {Object} gap gap values\n * @param {String} autoflowValue grid-auto-flow value\n * @return {void}\n * @see https://github.com/postcss/autoprefixer/issues/1148\n */\nfunction autoplaceGridItems(decl, result, gap, autoflowValue = 'row') {\n  let { parent } = decl\n\n  let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows')\n  let rows = normalizeRowColumn(rowDecl.value)\n  let columns = normalizeRowColumn(decl.value)\n\n  // Build array of area names with dummy values. If we have 3 columns and\n  // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']\n  let filledRows = rows.map((_, rowIndex) => {\n    return Array.from(\n      { length: columns.length },\n      (v, k) => k + rowIndex * columns.length + 1\n    ).join(' ')\n  })\n\n  let areas = parseGridAreas({ gap, rows: filledRows })\n  let keys = Object.keys(areas)\n  let items = keys.map(i => areas[i])\n\n  // Change the order of cells if grid-auto-flow value is 'column'\n  if (autoflowValue.includes('column')) {\n    items = items.sort((a, b) => a.column.start - b.column.start)\n  }\n\n  // Insert new rules\n  items.reverse().forEach((item, index) => {\n    let { column, row } = item\n    let nodeSelector = parent.selectors\n      .map(sel => sel + ` > *:nth-child(${keys.length - index})`)\n      .join(', ')\n\n    // create new rule\n    let node = parent.clone().removeAll()\n\n    // change rule selector\n    node.selector = nodeSelector\n\n    // insert prefixed row/column values\n    node.append({ prop: '-ms-grid-row', value: row.start })\n    node.append({ prop: '-ms-grid-column', value: column.start })\n\n    // insert rule\n    parent.after(node)\n  })\n\n  return undefined\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}