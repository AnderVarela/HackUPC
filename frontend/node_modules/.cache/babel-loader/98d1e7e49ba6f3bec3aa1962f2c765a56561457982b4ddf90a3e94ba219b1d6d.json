{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatDisplayName = void 0;\nvar utils_1 = require(\"./utils\");\nvar intl_messageformat_1 = require(\"intl-messageformat\");\nvar error_1 = require(\"./error\");\nvar DISPLAY_NAMES_OPTONS = ['style', 'type', 'fallback', 'languageDisplay'];\nfunction formatDisplayName(_a, getDisplayNames, value, options) {\n  var locale = _a.locale,\n    onError = _a.onError;\n  var DisplayNames = Intl.DisplayNames;\n  if (!DisplayNames) {\n    onError(new intl_messageformat_1.FormatError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\", intl_messageformat_1.ErrorCode.MISSING_INTL_API));\n  }\n  var filteredOptions = (0, utils_1.filterProps)(options, DISPLAY_NAMES_OPTONS);\n  try {\n    return getDisplayNames(locale, filteredOptions).of(value);\n  } catch (e) {\n    onError(new error_1.IntlFormatError('Error formatting display name.', locale, e));\n  }\n}\nexports.formatDisplayName = formatDisplayName;","map":{"version":3,"names":["Object","defineProperty","exports","value","formatDisplayName","utils_1","require","intl_messageformat_1","error_1","DISPLAY_NAMES_OPTONS","_a","getDisplayNames","options","locale","onError","DisplayNames","Intl","FormatError","ErrorCode","MISSING_INTL_API","filteredOptions","filterProps","of","e","IntlFormatError"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/intl/src/displayName.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatDisplayName = void 0;\nvar utils_1 = require(\"./utils\");\nvar intl_messageformat_1 = require(\"intl-messageformat\");\nvar error_1 = require(\"./error\");\nvar DISPLAY_NAMES_OPTONS = [\n    'style',\n    'type',\n    'fallback',\n    'languageDisplay',\n];\nfunction formatDisplayName(_a, getDisplayNames, value, options) {\n    var locale = _a.locale, onError = _a.onError;\n    var DisplayNames = Intl.DisplayNames;\n    if (!DisplayNames) {\n        onError(new intl_messageformat_1.FormatError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\", intl_messageformat_1.ErrorCode.MISSING_INTL_API));\n    }\n    var filteredOptions = (0, utils_1.filterProps)(options, DISPLAY_NAMES_OPTONS);\n    try {\n        return getDisplayNames(locale, filteredOptions).of(value);\n    }\n    catch (e) {\n        onError(new error_1.IntlFormatError('Error formatting display name.', locale, e));\n    }\n}\nexports.formatDisplayName = formatDisplayName;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACxD,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAChC,IAAIG,oBAAoB,GAAG,CACvB,OAAO,EACP,MAAM,EACN,UAAU,EACV,iBAAiB,CACpB;AACD,SAASL,iBAAiBA,CAACM,EAAE,EAAEC,eAAe,EAAER,KAAK,EAAES,OAAO,EAAE;EAC5D,IAAIC,MAAM,GAAGH,EAAE,CAACG,MAAM;IAAEC,OAAO,GAAGJ,EAAE,CAACI,OAAO;EAC5C,IAAIC,YAAY,GAAGC,IAAI,CAACD,YAAY;EACpC,IAAI,CAACA,YAAY,EAAE;IACfD,OAAO,CAAC,IAAIP,oBAAoB,CAACU,WAAW,CAAC,qHAAqH,EAAEV,oBAAoB,CAACW,SAAS,CAACC,gBAAgB,CAAC,CAAC;EACzN;EACA,IAAIC,eAAe,GAAG,CAAC,CAAC,EAAEf,OAAO,CAACgB,WAAW,EAAET,OAAO,EAAEH,oBAAoB,CAAC;EAC7E,IAAI;IACA,OAAOE,eAAe,CAACE,MAAM,EAAEO,eAAe,CAAC,CAACE,EAAE,CAACnB,KAAK,CAAC;EAC7D,CAAC,CACD,OAAOoB,CAAC,EAAE;IACNT,OAAO,CAAC,IAAIN,OAAO,CAACgB,eAAe,CAAC,gCAAgC,EAAEX,MAAM,EAAEU,CAAC,CAAC,CAAC;EACrF;AACJ;AACArB,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}