{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.hasMinVersion = hasMinVersion;\nvar _semver = _interopRequireDefault(require(\"semver\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction hasMinVersion(minVersion, runtimeVersion) {\n  // If the range is unavailable, we're running the script during Babel's\n  // build process, and we want to assume that all versions are satisfied so\n  // that the built output will include all definitions.\n  if (!runtimeVersion || !minVersion) return true;\n  runtimeVersion = String(runtimeVersion);\n\n  // semver.intersects() has some surprising behavior with comparing ranges\n  // with preprelease versions. We add '^' to ensure that we are always\n  // comparing ranges with ranges, which sidesteps this logic.\n  // For example:\n  //\n  //   semver.intersects(`<7.0.1`, \"7.0.0-beta.0\") // false - surprising\n  //   semver.intersects(`<7.0.1`, \"^7.0.0-beta.0\") // true - expected\n  //\n  // This is because the first falls back to\n  //\n  //   semver.satisfies(\"7.0.0-beta.0\", `<7.0.1`) // false - surprising\n  //\n  // and this fails because a prerelease version can only satisfy a range\n  // if it is a prerelease within the same major/minor/patch range.\n  //\n  // Note: If this is found to have issues, please also revist the logic in\n  // babel-core's availableHelper() API.\n  if (_semver.default.valid(runtimeVersion)) runtimeVersion = `^${runtimeVersion}`;\n  return !_semver.default.intersects(`<${minVersion}`, runtimeVersion) && !_semver.default.intersects(`>=8.0.0`, runtimeVersion);\n}","map":{"version":3,"names":["exports","__esModule","hasMinVersion","_semver","_interopRequireDefault","require","obj","default","minVersion","runtimeVersion","String","valid","intersects"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/babel-plugin-polyfill-corejs2/lib/helpers.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.hasMinVersion = hasMinVersion;\nvar _semver = _interopRequireDefault(require(\"semver\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction hasMinVersion(minVersion, runtimeVersion) {\n  // If the range is unavailable, we're running the script during Babel's\n  // build process, and we want to assume that all versions are satisfied so\n  // that the built output will include all definitions.\n  if (!runtimeVersion || !minVersion) return true;\n  runtimeVersion = String(runtimeVersion);\n\n  // semver.intersects() has some surprising behavior with comparing ranges\n  // with preprelease versions. We add '^' to ensure that we are always\n  // comparing ranges with ranges, which sidesteps this logic.\n  // For example:\n  //\n  //   semver.intersects(`<7.0.1`, \"7.0.0-beta.0\") // false - surprising\n  //   semver.intersects(`<7.0.1`, \"^7.0.0-beta.0\") // true - expected\n  //\n  // This is because the first falls back to\n  //\n  //   semver.satisfies(\"7.0.0-beta.0\", `<7.0.1`) // false - surprising\n  //\n  // and this fails because a prerelease version can only satisfy a range\n  // if it is a prerelease within the same major/minor/patch range.\n  //\n  // Note: If this is found to have issues, please also revist the logic in\n  // babel-core's availableHelper() API.\n  if (_semver.default.valid(runtimeVersion)) runtimeVersion = `^${runtimeVersion}`;\n  return !_semver.default.intersects(`<${minVersion}`, runtimeVersion) && !_semver.default.intersects(`>=8.0.0`, runtimeVersion);\n}"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,aAAa,GAAGA,aAAa;AACrC,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACvD,SAASD,sBAAsBA,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACL,UAAU,GAAGK,GAAG,GAAG;IAAEC,OAAO,EAAED;EAAI,CAAC;AAAE;AAC9F,SAASJ,aAAaA,CAACM,UAAU,EAAEC,cAAc,EAAE;EACjD;EACA;EACA;EACA,IAAI,CAACA,cAAc,IAAI,CAACD,UAAU,EAAE,OAAO,IAAI;EAC/CC,cAAc,GAAGC,MAAM,CAACD,cAAc,CAAC;;EAEvC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIN,OAAO,CAACI,OAAO,CAACI,KAAK,CAACF,cAAc,CAAC,EAAEA,cAAc,GAAI,IAAGA,cAAe,EAAC;EAChF,OAAO,CAACN,OAAO,CAACI,OAAO,CAACK,UAAU,CAAE,IAAGJ,UAAW,EAAC,EAAEC,cAAc,CAAC,IAAI,CAACN,OAAO,CAACI,OAAO,CAACK,UAAU,CAAE,SAAQ,EAAEH,cAAc,CAAC;AAChI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}