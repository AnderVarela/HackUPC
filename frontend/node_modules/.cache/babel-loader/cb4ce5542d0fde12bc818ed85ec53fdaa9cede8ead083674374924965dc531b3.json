{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst elements = ['svg', 'Svg'];\nconst plugin = ({\n  types: t\n}) => ({\n  visitor: {\n    JSXElement(path) {\n      if (!elements.some(element => path.get('openingElement.name').isJSXIdentifier({\n        name: element\n      }))) {\n        return;\n      }\n      function createTitle(children = [], attributes = []) {\n        return t.jsxElement(t.jsxOpeningElement(t.jsxIdentifier('title'), attributes), t.jsxClosingElement(t.jsxIdentifier('title')), children);\n      }\n      function createTitleIdAttribute() {\n        return t.jsxAttribute(t.jsxIdentifier('id'), t.jsxExpressionContainer(t.identifier('titleId')));\n      }\n      function enhanceAttributes(attributes) {\n        const existingId = attributes.find(attribute => attribute.name.name === 'id');\n        if (!existingId) {\n          return [...attributes, createTitleIdAttribute()];\n        }\n        existingId.value = t.jsxExpressionContainer(t.logicalExpression('||', t.identifier('titleId'), existingId.value));\n        return attributes;\n      }\n      function getTitleElement(existingTitle) {\n        const titleExpression = t.identifier('title');\n        if (existingTitle) {\n          existingTitle.openingElement.attributes = enhanceAttributes(existingTitle.openingElement.attributes);\n        }\n        let titleElement = t.conditionalExpression(titleExpression, createTitle([t.jsxExpressionContainer(titleExpression)], existingTitle ? existingTitle.openingElement.attributes : [t.jsxAttribute(t.jsxIdentifier('id'), t.jsxExpressionContainer(t.identifier('titleId')))]), t.nullLiteral());\n        if (existingTitle && existingTitle.children && existingTitle.children.length) {\n          // if title already exists\n          // render as follows\n          const fallbackTitleElement = existingTitle; // {title === undefined ? fallbackTitleElement : titleElement}\n\n          const conditionalExpressionForTitle = t.conditionalExpression(t.binaryExpression('===', titleExpression, t.identifier('undefined')), fallbackTitleElement, titleElement);\n          titleElement = t.jsxExpressionContainer(conditionalExpressionForTitle);\n        } else {\n          titleElement = t.jsxExpressionContainer(titleElement);\n        }\n        return titleElement;\n      } // store the title element\n\n      let titleElement;\n      const hasTitle = path.get('children').some(childPath => {\n        if (!childPath.isJSXElement()) return false;\n        if (childPath.node === titleElement) return false;\n        if (childPath.node.openingElement.name.name !== 'title') return false;\n        titleElement = getTitleElement(childPath.node);\n        childPath.replaceWith(titleElement);\n        return true;\n      }); // create a title element if not already create\n\n      titleElement = titleElement || getTitleElement();\n      if (!hasTitle) {\n        // path.unshiftContainer is not working well :(\n        // path.unshiftContainer('children', titleElement)\n        path.node.children.unshift(titleElement);\n        path.replaceWith(path.node);\n      }\n    }\n  }\n});\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","elements","plugin","types","t","visitor","JSXElement","path","some","element","get","isJSXIdentifier","name","createTitle","children","attributes","jsxElement","jsxOpeningElement","jsxIdentifier","jsxClosingElement","createTitleIdAttribute","jsxAttribute","jsxExpressionContainer","identifier","enhanceAttributes","existingId","find","attribute","value","logicalExpression","getTitleElement","existingTitle","titleExpression","openingElement","titleElement","conditionalExpression","nullLiteral","length","fallbackTitleElement","conditionalExpressionForTitle","binaryExpression","hasTitle","childPath","isJSXElement","node","replaceWith","unshift","_default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@svgr/babel-plugin-svg-dynamic-title/lib/index.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst elements = ['svg', 'Svg'];\n\nconst plugin = ({\n  types: t\n}) => ({\n  visitor: {\n    JSXElement(path) {\n      if (!elements.some(element => path.get('openingElement.name').isJSXIdentifier({\n        name: element\n      }))) {\n        return;\n      }\n\n      function createTitle(children = [], attributes = []) {\n        return t.jsxElement(t.jsxOpeningElement(t.jsxIdentifier('title'), attributes), t.jsxClosingElement(t.jsxIdentifier('title')), children);\n      }\n\n      function createTitleIdAttribute() {\n        return t.jsxAttribute(t.jsxIdentifier('id'), t.jsxExpressionContainer(t.identifier('titleId')));\n      }\n\n      function enhanceAttributes(attributes) {\n        const existingId = attributes.find(attribute => attribute.name.name === 'id');\n\n        if (!existingId) {\n          return [...attributes, createTitleIdAttribute()];\n        }\n\n        existingId.value = t.jsxExpressionContainer(t.logicalExpression('||', t.identifier('titleId'), existingId.value));\n        return attributes;\n      }\n\n      function getTitleElement(existingTitle) {\n        const titleExpression = t.identifier('title');\n\n        if (existingTitle) {\n          existingTitle.openingElement.attributes = enhanceAttributes(existingTitle.openingElement.attributes);\n        }\n\n        let titleElement = t.conditionalExpression(titleExpression, createTitle([t.jsxExpressionContainer(titleExpression)], existingTitle ? existingTitle.openingElement.attributes : [t.jsxAttribute(t.jsxIdentifier('id'), t.jsxExpressionContainer(t.identifier('titleId')))]), t.nullLiteral());\n\n        if (existingTitle && existingTitle.children && existingTitle.children.length) {\n          // if title already exists\n          // render as follows\n          const fallbackTitleElement = existingTitle; // {title === undefined ? fallbackTitleElement : titleElement}\n\n          const conditionalExpressionForTitle = t.conditionalExpression(t.binaryExpression('===', titleExpression, t.identifier('undefined')), fallbackTitleElement, titleElement);\n          titleElement = t.jsxExpressionContainer(conditionalExpressionForTitle);\n        } else {\n          titleElement = t.jsxExpressionContainer(titleElement);\n        }\n\n        return titleElement;\n      } // store the title element\n\n\n      let titleElement;\n      const hasTitle = path.get('children').some(childPath => {\n        if (!childPath.isJSXElement()) return false;\n        if (childPath.node === titleElement) return false;\n        if (childPath.node.openingElement.name.name !== 'title') return false;\n        titleElement = getTitleElement(childPath.node);\n        childPath.replaceWith(titleElement);\n        return true;\n      }); // create a title element if not already create\n\n      titleElement = titleElement || getTitleElement();\n\n      if (!hasTitle) {\n        // path.unshiftContainer is not working well :(\n        // path.unshiftContainer('children', titleElement)\n        path.node.children.unshift(titleElement);\n        path.replaceWith(path.node);\n      }\n    }\n\n  }\n});\n\nvar _default = plugin;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}