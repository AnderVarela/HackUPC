{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst compare_1 = require(\"./compare\");\nconst range_tree_1 = require(\"./range-tree\");\n/**\n * Normalizes a process coverage.\n *\n * Sorts the scripts alphabetically by `url`.\n * Reassigns script ids: the script at index `0` receives `\"0\"`, the script at\n * index `1` receives `\"1\"` etc.\n * This does not normalize the script coverages.\n *\n * @param processCov Process coverage to normalize.\n */\nfunction normalizeProcessCov(processCov) {\n  processCov.result.sort(compare_1.compareScriptCovs);\n  for (const [scriptId, scriptCov] of processCov.result.entries()) {\n    scriptCov.scriptId = scriptId.toString(10);\n  }\n}\nexports.normalizeProcessCov = normalizeProcessCov;\n/**\n * Normalizes a process coverage deeply.\n *\n * Normalizes the script coverages deeply, then normalizes the process coverage\n * itself.\n *\n * @param processCov Process coverage to normalize.\n */\nfunction deepNormalizeProcessCov(processCov) {\n  for (const scriptCov of processCov.result) {\n    deepNormalizeScriptCov(scriptCov);\n  }\n  normalizeProcessCov(processCov);\n}\nexports.deepNormalizeProcessCov = deepNormalizeProcessCov;\n/**\n * Normalizes a script coverage.\n *\n * Sorts the function by root range (pre-order sort).\n * This does not normalize the function coverages.\n *\n * @param scriptCov Script coverage to normalize.\n */\nfunction normalizeScriptCov(scriptCov) {\n  scriptCov.functions.sort(compare_1.compareFunctionCovs);\n}\nexports.normalizeScriptCov = normalizeScriptCov;\n/**\n * Normalizes a script coverage deeply.\n *\n * Normalizes the function coverages deeply, then normalizes the script coverage\n * itself.\n *\n * @param scriptCov Script coverage to normalize.\n */\nfunction deepNormalizeScriptCov(scriptCov) {\n  for (const funcCov of scriptCov.functions) {\n    normalizeFunctionCov(funcCov);\n  }\n  normalizeScriptCov(scriptCov);\n}\nexports.deepNormalizeScriptCov = deepNormalizeScriptCov;\n/**\n * Normalizes a function coverage.\n *\n * Sorts the ranges (pre-order sort).\n * TODO: Tree-based normalization of the ranges.\n *\n * @param funcCov Function coverage to normalize.\n */\nfunction normalizeFunctionCov(funcCov) {\n  funcCov.ranges.sort(compare_1.compareRangeCovs);\n  const tree = range_tree_1.RangeTree.fromSortedRanges(funcCov.ranges);\n  normalizeRangeTree(tree);\n  funcCov.ranges = tree.toRanges();\n}\nexports.normalizeFunctionCov = normalizeFunctionCov;\n/**\n * @internal\n */\nfunction normalizeRangeTree(tree) {\n  tree.normalize();\n}\nexports.normalizeRangeTree = normalizeRangeTree;","map":{"version":3,"names":["compare_1","require","range_tree_1","normalizeProcessCov","processCov","result","sort","compareScriptCovs","scriptId","scriptCov","entries","toString","exports","deepNormalizeProcessCov","deepNormalizeScriptCov","normalizeScriptCov","functions","compareFunctionCovs","funcCov","normalizeFunctionCov","ranges","compareRangeCovs","tree","RangeTree","fromSortedRanges","normalizeRangeTree","toRanges","normalize"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\normalize.ts"],"sourcesContent":["import { compareFunctionCovs, compareRangeCovs, compareScriptCovs } from \"./compare\";\nimport { RangeTree } from \"./range-tree\";\nimport { FunctionCov, ProcessCov, ScriptCov } from \"./types\";\n\n/**\n * Normalizes a process coverage.\n *\n * Sorts the scripts alphabetically by `url`.\n * Reassigns script ids: the script at index `0` receives `\"0\"`, the script at\n * index `1` receives `\"1\"` etc.\n * This does not normalize the script coverages.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function normalizeProcessCov(processCov: ProcessCov): void {\n  processCov.result.sort(compareScriptCovs);\n  for (const [scriptId, scriptCov] of processCov.result.entries()) {\n    scriptCov.scriptId = scriptId.toString(10);\n  }\n}\n\n/**\n * Normalizes a process coverage deeply.\n *\n * Normalizes the script coverages deeply, then normalizes the process coverage\n * itself.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function deepNormalizeProcessCov(processCov: ProcessCov): void {\n  for (const scriptCov of processCov.result) {\n    deepNormalizeScriptCov(scriptCov);\n  }\n  normalizeProcessCov(processCov);\n}\n\n/**\n * Normalizes a script coverage.\n *\n * Sorts the function by root range (pre-order sort).\n * This does not normalize the function coverages.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function normalizeScriptCov(scriptCov: ScriptCov): void {\n  scriptCov.functions.sort(compareFunctionCovs);\n}\n\n/**\n * Normalizes a script coverage deeply.\n *\n * Normalizes the function coverages deeply, then normalizes the script coverage\n * itself.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function deepNormalizeScriptCov(scriptCov: ScriptCov): void {\n  for (const funcCov of scriptCov.functions) {\n    normalizeFunctionCov(funcCov);\n  }\n  normalizeScriptCov(scriptCov);\n}\n\n/**\n * Normalizes a function coverage.\n *\n * Sorts the ranges (pre-order sort).\n * TODO: Tree-based normalization of the ranges.\n *\n * @param funcCov Function coverage to normalize.\n */\nexport function normalizeFunctionCov(funcCov: FunctionCov): void {\n  funcCov.ranges.sort(compareRangeCovs);\n  const tree: RangeTree = RangeTree.fromSortedRanges(funcCov.ranges)!;\n  normalizeRangeTree(tree);\n  funcCov.ranges = tree.toRanges();\n}\n\n/**\n * @internal\n */\nexport function normalizeRangeTree(tree: RangeTree): void {\n  tree.normalize();\n}\n"],"mappings":";;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AAGA;;;;;;;;;;AAUA,SAAgBE,mBAAmBA,CAACC,UAAsB;EACxDA,UAAU,CAACC,MAAM,CAACC,IAAI,CAACN,SAAA,CAAAO,iBAAiB,CAAC;EACzC,KAAK,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,IAAIL,UAAU,CAACC,MAAM,CAACK,OAAO,EAAE,EAAE;IAC/DD,SAAS,CAACD,QAAQ,GAAGA,QAAQ,CAACG,QAAQ,CAAC,EAAE,CAAC;;AAE9C;AALAC,OAAA,CAAAT,mBAAA,GAAAA,mBAAA;AAOA;;;;;;;;AAQA,SAAgBU,uBAAuBA,CAACT,UAAsB;EAC5D,KAAK,MAAMK,SAAS,IAAIL,UAAU,CAACC,MAAM,EAAE;IACzCS,sBAAsB,CAACL,SAAS,CAAC;;EAEnCN,mBAAmB,CAACC,UAAU,CAAC;AACjC;AALAQ,OAAA,CAAAC,uBAAA,GAAAA,uBAAA;AAOA;;;;;;;;AAQA,SAAgBE,kBAAkBA,CAACN,SAAoB;EACrDA,SAAS,CAACO,SAAS,CAACV,IAAI,CAACN,SAAA,CAAAiB,mBAAmB,CAAC;AAC/C;AAFAL,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;AAIA;;;;;;;;AAQA,SAAgBD,sBAAsBA,CAACL,SAAoB;EACzD,KAAK,MAAMS,OAAO,IAAIT,SAAS,CAACO,SAAS,EAAE;IACzCG,oBAAoB,CAACD,OAAO,CAAC;;EAE/BH,kBAAkB,CAACN,SAAS,CAAC;AAC/B;AALAG,OAAA,CAAAE,sBAAA,GAAAA,sBAAA;AAOA;;;;;;;;AAQA,SAAgBK,oBAAoBA,CAACD,OAAoB;EACvDA,OAAO,CAACE,MAAM,CAACd,IAAI,CAACN,SAAA,CAAAqB,gBAAgB,CAAC;EACrC,MAAMC,IAAI,GAAcpB,YAAA,CAAAqB,SAAS,CAACC,gBAAgB,CAACN,OAAO,CAACE,MAAM,CAAE;EACnEK,kBAAkB,CAACH,IAAI,CAAC;EACxBJ,OAAO,CAACE,MAAM,GAAGE,IAAI,CAACI,QAAQ,EAAE;AAClC;AALAd,OAAA,CAAAO,oBAAA,GAAAA,oBAAA;AAOA;;;AAGA,SAAgBM,kBAAkBA,CAACH,IAAe;EAChDA,IAAI,CAACK,SAAS,EAAE;AAClB;AAFAf,OAAA,CAAAa,kBAAA,GAAAA,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}