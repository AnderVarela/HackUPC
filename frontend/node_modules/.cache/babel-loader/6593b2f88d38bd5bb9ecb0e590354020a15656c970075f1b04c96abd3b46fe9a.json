{"ast":null,"code":"/**\n * Create a valid URL from parsed URL parts.\n * @param {import('./getSocketUrlParts').SocketUrlParts} urlParts The parsed URL parts.\n * @param {import('./getWDSMetadata').WDSMetaObj} [metadata] The parsed WDS metadata object.\n * @returns {string} The generated URL.\n */\nfunction urlFromParts(urlParts, metadata) {\n  if (typeof metadata === 'undefined') {\n    metadata = {};\n  }\n  let fullProtocol = 'http:';\n  if (urlParts.protocol) {\n    fullProtocol = urlParts.protocol;\n  }\n  if (metadata.enforceWs) {\n    fullProtocol = fullProtocol.replace(/^(?:http|.+-extension|file)/i, 'ws');\n  }\n  fullProtocol = fullProtocol + '//';\n  let fullHost = urlParts.hostname;\n  if (urlParts.auth) {\n    const fullAuth = urlParts.auth.split(':').map(encodeURIComponent).join(':') + '@';\n    fullHost = fullAuth + fullHost;\n  }\n  if (urlParts.port) {\n    fullHost = fullHost + ':' + urlParts.port;\n  }\n  const url = new URL(urlParts.pathname, fullProtocol + fullHost);\n  return url.href;\n}\nmodule.exports = urlFromParts;","map":{"version":3,"names":["urlFromParts","urlParts","metadata","fullProtocol","protocol","enforceWs","replace","fullHost","hostname","auth","fullAuth","split","map","encodeURIComponent","join","port","url","URL","pathname","href","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getUrlFromParts.js"],"sourcesContent":["/**\n * Create a valid URL from parsed URL parts.\n * @param {import('./getSocketUrlParts').SocketUrlParts} urlParts The parsed URL parts.\n * @param {import('./getWDSMetadata').WDSMetaObj} [metadata] The parsed WDS metadata object.\n * @returns {string} The generated URL.\n */\nfunction urlFromParts(urlParts, metadata) {\n  if (typeof metadata === 'undefined') {\n    metadata = {};\n  }\n\n  let fullProtocol = 'http:';\n  if (urlParts.protocol) {\n    fullProtocol = urlParts.protocol;\n  }\n  if (metadata.enforceWs) {\n    fullProtocol = fullProtocol.replace(/^(?:http|.+-extension|file)/i, 'ws');\n  }\n\n  fullProtocol = fullProtocol + '//';\n\n  let fullHost = urlParts.hostname;\n  if (urlParts.auth) {\n    const fullAuth = urlParts.auth.split(':').map(encodeURIComponent).join(':') + '@';\n    fullHost = fullAuth + fullHost;\n  }\n  if (urlParts.port) {\n    fullHost = fullHost + ':' + urlParts.port;\n  }\n\n  const url = new URL(urlParts.pathname, fullProtocol + fullHost);\n  return url.href;\n}\n\nmodule.exports = urlFromParts;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAYA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EACxC,IAAI,OAAOA,QAAQ,KAAK,WAAW,EAAE;IACnCA,QAAQ,GAAG,CAAC,CAAC;EACf;EAEA,IAAIC,YAAY,GAAG,OAAO;EAC1B,IAAIF,QAAQ,CAACG,QAAQ,EAAE;IACrBD,YAAY,GAAGF,QAAQ,CAACG,QAAQ;EAClC;EACA,IAAIF,QAAQ,CAACG,SAAS,EAAE;IACtBF,YAAY,GAAGA,YAAY,CAACG,OAAO,CAAC,8BAA8B,EAAE,IAAI,CAAC;EAC3E;EAEAH,YAAY,GAAGA,YAAY,GAAG,IAAI;EAElC,IAAII,QAAQ,GAAGN,QAAQ,CAACO,QAAQ;EAChC,IAAIP,QAAQ,CAACQ,IAAI,EAAE;IACjB,MAAMC,QAAQ,GAAGT,QAAQ,CAACQ,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,kBAAkB,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;IACjFP,QAAQ,GAAGG,QAAQ,GAAGH,QAAQ;EAChC;EACA,IAAIN,QAAQ,CAACc,IAAI,EAAE;IACjBR,QAAQ,GAAGA,QAAQ,GAAG,GAAG,GAAGN,QAAQ,CAACc,IAAI;EAC3C;EAEA,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAChB,QAAQ,CAACiB,QAAQ,EAAEf,YAAY,GAAGI,QAAQ,CAAC;EAC/D,OAAOS,GAAG,CAACG,IAAI;AACjB;AAEAC,MAAM,CAACC,OAAO,GAAGrB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}