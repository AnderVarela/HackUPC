{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nconst accessibilityLevel = {\n  oneOf: [{\n    const: 'explicit',\n    description: 'Always require an accessor.'\n  }, {\n    const: 'no-public',\n    description: 'Require an accessor except when public.'\n  }, {\n    const: 'off',\n    description: 'Never check whether there is an accessor.'\n  }]\n};\nexports.default = util.createRule({\n  name: 'explicit-member-accessibility',\n  meta: {\n    hasSuggestions: true,\n    type: 'problem',\n    docs: {\n      description: 'Require explicit accessibility modifiers on class properties and methods',\n      // too opinionated to be recommended\n      recommended: false\n    },\n    fixable: 'code',\n    messages: {\n      missingAccessibility: 'Missing accessibility modifier on {{type}} {{name}}.',\n      unwantedPublicAccessibility: 'Public accessibility modifier on {{type}} {{name}}.',\n      addExplicitAccessibility: \"Add '{{ type }}' accessibility modifier\"\n    },\n    schema: {\n      $defs: {\n        accessibilityLevel\n      },\n      prefixItems: [{\n        type: 'object',\n        properties: {\n          accessibility: {\n            $ref: '#/$defs/accessibilityLevel'\n          },\n          overrides: {\n            type: 'object',\n            properties: {\n              accessors: {\n                $ref: '#/$defs/accessibilityLevel'\n              },\n              constructors: {\n                $ref: '#/$defs/accessibilityLevel'\n              },\n              methods: {\n                $ref: '#/$defs/accessibilityLevel'\n              },\n              properties: {\n                $ref: '#/$defs/accessibilityLevel'\n              },\n              parameterProperties: {\n                $ref: '#/$defs/accessibilityLevel'\n              }\n            },\n            additionalProperties: false\n          },\n          ignoredMethodNames: {\n            type: 'array',\n            items: {\n              type: 'string'\n            }\n          }\n        },\n        additionalProperties: false\n      }],\n      type: 'array'\n    }\n  },\n  defaultOptions: [{\n    accessibility: 'explicit'\n  }],\n  create(context, [option]) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const sourceCode = context.getSourceCode();\n    const baseCheck = (_a = option.accessibility) !== null && _a !== void 0 ? _a : 'explicit';\n    const overrides = (_b = option.overrides) !== null && _b !== void 0 ? _b : {};\n    const ctorCheck = (_c = overrides.constructors) !== null && _c !== void 0 ? _c : baseCheck;\n    const accessorCheck = (_d = overrides.accessors) !== null && _d !== void 0 ? _d : baseCheck;\n    const methodCheck = (_e = overrides.methods) !== null && _e !== void 0 ? _e : baseCheck;\n    const propCheck = (_f = overrides.properties) !== null && _f !== void 0 ? _f : baseCheck;\n    const paramPropCheck = (_g = overrides.parameterProperties) !== null && _g !== void 0 ? _g : baseCheck;\n    const ignoredMethodNames = new Set((_h = option.ignoredMethodNames) !== null && _h !== void 0 ? _h : []);\n    /**\n     * Checks if a method declaration has an accessibility modifier.\n     * @param methodDefinition The node representing a MethodDefinition.\n     */\n    function checkMethodAccessibilityModifier(methodDefinition) {\n      if (methodDefinition.key.type === utils_1.AST_NODE_TYPES.PrivateIdentifier) {\n        return;\n      }\n      let nodeType = 'method definition';\n      let check = baseCheck;\n      switch (methodDefinition.kind) {\n        case 'method':\n          check = methodCheck;\n          break;\n        case 'constructor':\n          check = ctorCheck;\n          break;\n        case 'get':\n        case 'set':\n          check = accessorCheck;\n          nodeType = `${methodDefinition.kind} property accessor`;\n          break;\n      }\n      const {\n        name: methodName\n      } = util.getNameFromMember(methodDefinition, sourceCode);\n      if (check === 'off' || ignoredMethodNames.has(methodName)) {\n        return;\n      }\n      if (check === 'no-public' && methodDefinition.accessibility === 'public') {\n        context.report({\n          node: methodDefinition,\n          messageId: 'unwantedPublicAccessibility',\n          data: {\n            type: nodeType,\n            name: methodName\n          },\n          fix: getUnwantedPublicAccessibilityFixer(methodDefinition)\n        });\n      } else if (check === 'explicit' && !methodDefinition.accessibility) {\n        context.report({\n          node: methodDefinition,\n          messageId: 'missingAccessibility',\n          data: {\n            type: nodeType,\n            name: methodName\n          },\n          suggest: getMissingAccessibilitySuggestions(methodDefinition)\n        });\n      }\n    }\n    /**\n     * Creates a fixer that removes a \"public\" keyword with following spaces\n     */\n    function getUnwantedPublicAccessibilityFixer(node) {\n      return function (fixer) {\n        const tokens = sourceCode.getTokens(node);\n        let rangeToRemove;\n        for (let i = 0; i < tokens.length; i++) {\n          const token = tokens[i];\n          if (token.type === utils_1.AST_TOKEN_TYPES.Keyword && token.value === 'public') {\n            const commensAfterPublicKeyword = sourceCode.getCommentsAfter(token);\n            if (commensAfterPublicKeyword.length) {\n              // public /* Hi there! */ static foo()\n              // ^^^^^^^\n              rangeToRemove = [token.range[0], commensAfterPublicKeyword[0].range[0]];\n              break;\n            } else {\n              // public static foo()\n              // ^^^^^^^\n              rangeToRemove = [token.range[0], tokens[i + 1].range[0]];\n              break;\n            }\n          }\n        }\n        return fixer.removeRange(rangeToRemove);\n      };\n    }\n    /**\n     * Creates a fixer that adds a \"public\" keyword with following spaces\n     */\n    function getMissingAccessibilitySuggestions(node) {\n      function fix(accessibility, fixer) {\n        var _a;\n        if ((_a = node === null || node === void 0 ? void 0 : node.decorators) === null || _a === void 0 ? void 0 : _a.length) {\n          const lastDecorator = node.decorators[node.decorators.length - 1];\n          const nextToken = sourceCode.getTokenAfter(lastDecorator);\n          return fixer.insertTextBefore(nextToken, `${accessibility} `);\n        }\n        return fixer.insertTextBefore(node, `${accessibility} `);\n      }\n      return [{\n        messageId: 'addExplicitAccessibility',\n        data: {\n          type: 'public'\n        },\n        fix: fixer => fix('public', fixer)\n      }, {\n        messageId: 'addExplicitAccessibility',\n        data: {\n          type: 'private'\n        },\n        fix: fixer => fix('private', fixer)\n      }, {\n        messageId: 'addExplicitAccessibility',\n        data: {\n          type: 'protected'\n        },\n        fix: fixer => fix('protected', fixer)\n      }];\n    }\n    /**\n     * Checks if property has an accessibility modifier.\n     * @param propertyDefinition The node representing a PropertyDefinition.\n     */\n    function checkPropertyAccessibilityModifier(propertyDefinition) {\n      if (propertyDefinition.key.type === utils_1.AST_NODE_TYPES.PrivateIdentifier) {\n        return;\n      }\n      const nodeType = 'class property';\n      const {\n        name: propertyName\n      } = util.getNameFromMember(propertyDefinition, sourceCode);\n      if (propCheck === 'no-public' && propertyDefinition.accessibility === 'public') {\n        context.report({\n          node: propertyDefinition,\n          messageId: 'unwantedPublicAccessibility',\n          data: {\n            type: nodeType,\n            name: propertyName\n          },\n          fix: getUnwantedPublicAccessibilityFixer(propertyDefinition)\n        });\n      } else if (propCheck === 'explicit' && !propertyDefinition.accessibility) {\n        context.report({\n          node: propertyDefinition,\n          messageId: 'missingAccessibility',\n          data: {\n            type: nodeType,\n            name: propertyName\n          },\n          suggest: getMissingAccessibilitySuggestions(propertyDefinition)\n        });\n      }\n    }\n    /**\n     * Checks that the parameter property has the desired accessibility modifiers set.\n     * @param node The node representing a Parameter Property\n     */\n    function checkParameterPropertyAccessibilityModifier(node) {\n      const nodeType = 'parameter property';\n      // HAS to be an identifier or assignment or TSC will throw\n      if (node.parameter.type !== utils_1.AST_NODE_TYPES.Identifier && node.parameter.type !== utils_1.AST_NODE_TYPES.AssignmentPattern) {\n        return;\n      }\n      const nodeName = node.parameter.type === utils_1.AST_NODE_TYPES.Identifier ? node.parameter.name :\n      // has to be an Identifier or TSC will throw an error\n      node.parameter.left.name;\n      switch (paramPropCheck) {\n        case 'explicit':\n          {\n            if (!node.accessibility) {\n              context.report({\n                node,\n                messageId: 'missingAccessibility',\n                data: {\n                  type: nodeType,\n                  name: nodeName\n                },\n                suggest: getMissingAccessibilitySuggestions(node)\n              });\n            }\n            break;\n          }\n        case 'no-public':\n          {\n            if (node.accessibility === 'public' && node.readonly) {\n              context.report({\n                node,\n                messageId: 'unwantedPublicAccessibility',\n                data: {\n                  type: nodeType,\n                  name: nodeName\n                },\n                fix: getUnwantedPublicAccessibilityFixer(node)\n              });\n            }\n            break;\n          }\n      }\n    }\n    return {\n      'MethodDefinition, TSAbstractMethodDefinition': checkMethodAccessibilityModifier,\n      'PropertyDefinition, TSAbstractPropertyDefinition': checkPropertyAccessibilityModifier,\n      TSParameterProperty: checkParameterPropertyAccessibilityModifier\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","accessibilityLevel","oneOf","const","description","exports","default","createRule","name","meta","hasSuggestions","type","docs","recommended","fixable","messages","missingAccessibility","unwantedPublicAccessibility","addExplicitAccessibility","schema","$defs","prefixItems","properties","accessibility","$ref","overrides","accessors","constructors","methods","parameterProperties","additionalProperties","ignoredMethodNames","items","defaultOptions","create","context","option","sourceCode","getSourceCode","baseCheck","_a","_b","ctorCheck","_c","accessorCheck","_d","methodCheck","_e","propCheck","_f","paramPropCheck","_g","Set","_h","checkMethodAccessibilityModifier","methodDefinition","key","AST_NODE_TYPES","PrivateIdentifier","nodeType","check","kind","methodName","getNameFromMember","has","report","node","messageId","data","fix","getUnwantedPublicAccessibilityFixer","suggest","getMissingAccessibilitySuggestions","fixer","tokens","getTokens","rangeToRemove","i","length","token","AST_TOKEN_TYPES","Keyword","value","commensAfterPublicKeyword","getCommentsAfter","range","removeRange","decorators","lastDecorator","nextToken","getTokenAfter","insertTextBefore","checkPropertyAccessibilityModifier","propertyDefinition","propertyName","checkParameterPropertyAccessibilityModifier","parameter","Identifier","AssignmentPattern","nodeName","left","readonly","TSParameterProperty"],"sources":["../../src/rules/explicit-member-accessibility.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}