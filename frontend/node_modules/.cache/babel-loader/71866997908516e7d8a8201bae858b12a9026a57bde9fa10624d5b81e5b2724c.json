{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;\nvar _queryHelpers = require(\"../query-helpers\");\nvar _helpers = require(\"../helpers\");\nvar _allUtils = require(\"./all-utils\");\nconst queryAllByText = (container, text, {\n  selector = '*',\n  exact = true,\n  collapseWhitespace,\n  trim,\n  ignore = (0, _allUtils.getConfig)().defaultIgnore,\n  normalizer\n} = {}) => {\n  (0, _helpers.checkContainerType)(container);\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  let baseArray = [];\n  if (typeof container.matches === 'function' && container.matches(selector)) {\n    baseArray = [container];\n  }\n  return [...baseArray, ...Array.from(container.querySelectorAll(selector))]\n  // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)\n  .filter(node => !ignore || !node.matches(ignore)).filter(node => matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));\n};\nconst getMultipleError = (c, text) => `Found multiple elements with the text: ${text}`;\nconst getMissingError = (c, text, options = {}) => {\n  const {\n    collapseWhitespace,\n    trim,\n    normalizer,\n    selector\n  } = options;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const normalizedText = matchNormalizer(text.toString());\n  const isNormalizedDifferent = normalizedText !== text.toString();\n  const isCustomSelector = (selector != null ? selector : '*') !== '*';\n  return `Unable to find an element with the text: ${isNormalizedDifferent ? `${normalizedText} (normalized from '${text}')` : text}${isCustomSelector ? `, which matches selector '${selector}'` : ''}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`;\n};\nconst queryAllByTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');\nexports.queryAllByText = queryAllByTextWithSuggestions;\nconst [queryByText, getAllByText, getByText, findAllByText, findByText] = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError);\nexports.findByText = findByText;\nexports.findAllByText = findAllByText;\nexports.getByText = getByText;\nexports.getAllByText = getAllByText;\nexports.queryByText = queryByText;","map":{"version":3,"names":["Object","defineProperty","exports","value","queryByText","queryAllByText","getByText","getAllByText","findByText","findAllByText","_queryHelpers","require","_helpers","_allUtils","container","text","selector","exact","collapseWhitespace","trim","ignore","getConfig","defaultIgnore","normalizer","checkContainerType","matcher","matches","fuzzyMatches","matchNormalizer","makeNormalizer","baseArray","Array","from","querySelectorAll","filter","node","getNodeText","getMultipleError","c","getMissingError","options","normalizedText","toString","isNormalizedDifferent","isCustomSelector","queryAllByTextWithSuggestions","wrapAllByQueryWithSuggestion","name","buildQueries"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/queries/text.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;\nvar _queryHelpers = require(\"../query-helpers\");\nvar _helpers = require(\"../helpers\");\nvar _allUtils = require(\"./all-utils\");\nconst queryAllByText = (container, text, {\n  selector = '*',\n  exact = true,\n  collapseWhitespace,\n  trim,\n  ignore = (0, _allUtils.getConfig)().defaultIgnore,\n  normalizer\n} = {}) => {\n  (0, _helpers.checkContainerType)(container);\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  let baseArray = [];\n  if (typeof container.matches === 'function' && container.matches(selector)) {\n    baseArray = [container];\n  }\n  return [...baseArray, ...Array.from(container.querySelectorAll(selector))]\n  // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)\n  .filter(node => !ignore || !node.matches(ignore)).filter(node => matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));\n};\nconst getMultipleError = (c, text) => `Found multiple elements with the text: ${text}`;\nconst getMissingError = (c, text, options = {}) => {\n  const {\n    collapseWhitespace,\n    trim,\n    normalizer,\n    selector\n  } = options;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const normalizedText = matchNormalizer(text.toString());\n  const isNormalizedDifferent = normalizedText !== text.toString();\n  const isCustomSelector = (selector != null ? selector : '*') !== '*';\n  return `Unable to find an element with the text: ${isNormalizedDifferent ? `${normalizedText} (normalized from '${text}')` : text}${isCustomSelector ? `, which matches selector '${selector}'` : ''}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`;\n};\nconst queryAllByTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');\nexports.queryAllByText = queryAllByTextWithSuggestions;\nconst [queryByText, getAllByText, getByText, findAllByText, findByText] = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError);\nexports.findByText = findByText;\nexports.findAllByText = findAllByText;\nexports.getByText = getByText;\nexports.getAllByText = getAllByText;\nexports.queryByText = queryByText;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}