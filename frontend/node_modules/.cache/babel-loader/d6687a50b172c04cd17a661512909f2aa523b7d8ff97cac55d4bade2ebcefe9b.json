{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n  name: 'comma-spacing',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent spacing before and after commas',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'whitespace',\n    schema: [{\n      type: 'object',\n      properties: {\n        before: {\n          type: 'boolean',\n          default: false\n        },\n        after: {\n          type: 'boolean',\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: `There should be no space {{loc}} ','.`,\n      missing: `A space is required {{loc}} ','.`\n    }\n  },\n  defaultOptions: [{\n    before: false,\n    after: true\n  }],\n  create(context, [{\n    before: spaceBefore,\n    after: spaceAfter\n  }]) {\n    const sourceCode = context.getSourceCode();\n    const tokensAndComments = sourceCode.tokensAndComments;\n    const ignoredTokens = new Set();\n    /**\n     * Adds null elements of the ArrayExpression or ArrayPattern node to the ignore list\n     * @param node node to evaluate\n     */\n    function addNullElementsToIgnoreList(node) {\n      let previousToken = sourceCode.getFirstToken(node);\n      for (const element of node.elements) {\n        let token;\n        if (element == null) {\n          token = sourceCode.getTokenAfter(previousToken);\n          if (token && (0, util_1.isCommaToken)(token)) {\n            ignoredTokens.add(token);\n          }\n        } else {\n          token = sourceCode.getTokenAfter(element);\n        }\n        previousToken = token;\n      }\n    }\n    /**\n     * Adds type parameters trailing comma token to the ignore list\n     * @param node node to evaluate\n     */\n    function addTypeParametersTrailingCommaToIgnoreList(node) {\n      const paramLength = node.params.length;\n      if (paramLength) {\n        const param = node.params[paramLength - 1];\n        const afterToken = sourceCode.getTokenAfter(param);\n        if (afterToken && (0, util_1.isCommaToken)(afterToken)) {\n          ignoredTokens.add(afterToken);\n        }\n      }\n    }\n    /**\n     * Validates the spacing around a comma token.\n     * @param commaToken The token representing the comma\n     * @param prevToken The last token before the comma\n     * @param nextToken The first token after the comma\n     */\n    function validateCommaSpacing(commaToken, prevToken, nextToken) {\n      if (prevToken && (0, util_1.isTokenOnSameLine)(prevToken, commaToken) &&\n      // eslint-disable-next-line deprecation/deprecation -- TODO - switch once our min ESLint version is 6.7.0\n      spaceBefore !== sourceCode.isSpaceBetweenTokens(prevToken, commaToken)) {\n        context.report({\n          node: commaToken,\n          data: {\n            loc: 'before'\n          },\n          messageId: spaceBefore ? 'missing' : 'unexpected',\n          fix: fixer => spaceBefore ? fixer.insertTextBefore(commaToken, ' ') : fixer.replaceTextRange([prevToken.range[1], commaToken.range[0]], '')\n        });\n      }\n      if (nextToken && (0, util_1.isClosingParenToken)(nextToken)) {\n        return;\n      }\n      if (spaceAfter && nextToken && ((0, util_1.isClosingBraceToken)(nextToken) || (0, util_1.isClosingBracketToken)(nextToken))) {\n        return;\n      }\n      if (!spaceAfter && nextToken && nextToken.type === utils_1.AST_TOKEN_TYPES.Line) {\n        return;\n      }\n      if (nextToken && (0, util_1.isTokenOnSameLine)(commaToken, nextToken) &&\n      // eslint-disable-next-line deprecation/deprecation -- TODO - switch once our min ESLint version is 6.7.0\n      spaceAfter !== sourceCode.isSpaceBetweenTokens(commaToken, nextToken)) {\n        context.report({\n          node: commaToken,\n          data: {\n            loc: 'after'\n          },\n          messageId: spaceAfter ? 'missing' : 'unexpected',\n          fix: fixer => spaceAfter ? fixer.insertTextAfter(commaToken, ' ') : fixer.replaceTextRange([commaToken.range[1], nextToken.range[0]], '')\n        });\n      }\n    }\n    return {\n      TSTypeParameterDeclaration: addTypeParametersTrailingCommaToIgnoreList,\n      ArrayExpression: addNullElementsToIgnoreList,\n      ArrayPattern: addNullElementsToIgnoreList,\n      'Program:exit'() {\n        tokensAndComments.forEach((token, i) => {\n          if (!(0, util_1.isCommaToken)(token)) {\n            return;\n          }\n          const prevToken = tokensAndComments[i - 1];\n          const nextToken = tokensAndComments[i + 1];\n          validateCommaSpacing(token, (0, util_1.isCommaToken)(prevToken) || ignoredTokens.has(token) ? null : prevToken, nextToken && (0, util_1.isCommaToken)(nextToken) || ignoredTokens.has(token) ? null : nextToken);\n        });\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util_1","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","schema","properties","before","after","additionalProperties","messages","unexpected","missing","defaultOptions","create","context","spaceBefore","spaceAfter","sourceCode","getSourceCode","tokensAndComments","ignoredTokens","Set","addNullElementsToIgnoreList","node","previousToken","getFirstToken","element","elements","token","getTokenAfter","isCommaToken","add","addTypeParametersTrailingCommaToIgnoreList","paramLength","params","length","param","afterToken","validateCommaSpacing","commaToken","prevToken","nextToken","isTokenOnSameLine","isSpaceBetweenTokens","report","data","loc","messageId","fix","fixer","insertTextBefore","replaceTextRange","range","isClosingParenToken","isClosingBraceToken","isClosingBracketToken","AST_TOKEN_TYPES","Line","insertTextAfter","TSTypeParameterDeclaration","ArrayExpression","ArrayPattern","Program:exit","forEach","i","has"],"sources":["../../src/rules/comma-spacing.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}