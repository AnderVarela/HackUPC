{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { filterProps, getNamedFormat } from './utils';\nimport { IntlFormatError } from './error';\nvar DATE_TIME_FORMAT_OPTIONS = ['formatMatcher', 'timeZone', 'hour12', 'weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName', 'hourCycle', 'dateStyle', 'timeStyle', 'calendar',\n// 'dayPeriod',\n'numberingSystem', 'fractionalSecondDigits'];\nexport function getFormatter(_a, type, getDateTimeFormat, options) {\n  var locale = _a.locale,\n    formats = _a.formats,\n    onError = _a.onError,\n    timeZone = _a.timeZone;\n  if (options === void 0) {\n    options = {};\n  }\n  var format = options.format;\n  var defaults = __assign(__assign({}, timeZone && {\n    timeZone: timeZone\n  }), format && getNamedFormat(formats, type, format, onError));\n  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n  if (type === 'time' && !filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second && !filteredOptions.timeStyle && !filteredOptions.dateStyle) {\n    // Add default formatting options if hour, minute, or second isn't defined.\n    filteredOptions = __assign(__assign({}, filteredOptions), {\n      hour: 'numeric',\n      minute: 'numeric'\n    });\n  }\n  return getDateTimeFormat(locale, filteredOptions);\n}\nexport function formatDate(config, getDateTimeFormat) {\n  var _a = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    _a[_i - 2] = arguments[_i];\n  }\n  var value = _a[0],\n    _b = _a[1],\n    options = _b === void 0 ? {} : _b;\n  var date = typeof value === 'string' ? new Date(value || 0) : value;\n  try {\n    return getFormatter(config, 'date', getDateTimeFormat, options).format(date);\n  } catch (e) {\n    config.onError(new IntlFormatError('Error formatting date.', config.locale, e));\n  }\n  return String(date);\n}\nexport function formatTime(config, getDateTimeFormat) {\n  var _a = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    _a[_i - 2] = arguments[_i];\n  }\n  var value = _a[0],\n    _b = _a[1],\n    options = _b === void 0 ? {} : _b;\n  var date = typeof value === 'string' ? new Date(value || 0) : value;\n  try {\n    return getFormatter(config, 'time', getDateTimeFormat, options).format(date);\n  } catch (e) {\n    config.onError(new IntlFormatError('Error formatting time.', config.locale, e));\n  }\n  return String(date);\n}\nexport function formatDateTimeRange(config, getDateTimeFormat) {\n  var _a = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    _a[_i - 2] = arguments[_i];\n  }\n  var from = _a[0],\n    to = _a[1],\n    _b = _a[2],\n    options = _b === void 0 ? {} : _b;\n  var timeZone = config.timeZone,\n    locale = config.locale,\n    onError = config.onError;\n  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, timeZone ? {\n    timeZone: timeZone\n  } : {});\n  try {\n    return getDateTimeFormat(locale, filteredOptions).formatRange(from, to);\n  } catch (e) {\n    onError(new IntlFormatError('Error formatting date time range.', config.locale, e));\n  }\n  return String(from);\n}\nexport function formatDateToParts(config, getDateTimeFormat) {\n  var _a = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    _a[_i - 2] = arguments[_i];\n  }\n  var value = _a[0],\n    _b = _a[1],\n    options = _b === void 0 ? {} : _b;\n  var date = typeof value === 'string' ? new Date(value || 0) : value;\n  try {\n    return getFormatter(config, 'date', getDateTimeFormat, options).formatToParts(date); // TODO: remove this when https://github.com/microsoft/TypeScript/pull/50402 is merged\n  } catch (e) {\n    config.onError(new IntlFormatError('Error formatting date.', config.locale, e));\n  }\n  return [];\n}\nexport function formatTimeToParts(config, getDateTimeFormat) {\n  var _a = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    _a[_i - 2] = arguments[_i];\n  }\n  var value = _a[0],\n    _b = _a[1],\n    options = _b === void 0 ? {} : _b;\n  var date = typeof value === 'string' ? new Date(value || 0) : value;\n  try {\n    return getFormatter(config, 'time', getDateTimeFormat, options).formatToParts(date); // TODO: remove this when https://github.com/microsoft/TypeScript/pull/50402 is merged\n  } catch (e) {\n    config.onError(new IntlFormatError('Error formatting time.', config.locale, e));\n  }\n  return [];\n}","map":{"version":3,"names":["__assign","filterProps","getNamedFormat","IntlFormatError","DATE_TIME_FORMAT_OPTIONS","getFormatter","_a","type","getDateTimeFormat","options","locale","formats","onError","timeZone","format","defaults","filteredOptions","hour","minute","second","timeStyle","dateStyle","formatDate","config","_i","arguments","length","value","_b","date","Date","e","String","formatTime","formatDateTimeRange","from","to","formatRange","formatDateToParts","formatToParts","formatTimeToParts"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/intl/lib/src/dateTime.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { filterProps, getNamedFormat } from './utils';\nimport { IntlFormatError } from './error';\nvar DATE_TIME_FORMAT_OPTIONS = [\n    'formatMatcher',\n    'timeZone',\n    'hour12',\n    'weekday',\n    'era',\n    'year',\n    'month',\n    'day',\n    'hour',\n    'minute',\n    'second',\n    'timeZoneName',\n    'hourCycle',\n    'dateStyle',\n    'timeStyle',\n    'calendar',\n    // 'dayPeriod',\n    'numberingSystem',\n    'fractionalSecondDigits',\n];\nexport function getFormatter(_a, type, getDateTimeFormat, options) {\n    var locale = _a.locale, formats = _a.formats, onError = _a.onError, timeZone = _a.timeZone;\n    if (options === void 0) { options = {}; }\n    var format = options.format;\n    var defaults = __assign(__assign({}, (timeZone && { timeZone: timeZone })), (format && getNamedFormat(formats, type, format, onError)));\n    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n    if (type === 'time' &&\n        !filteredOptions.hour &&\n        !filteredOptions.minute &&\n        !filteredOptions.second &&\n        !filteredOptions.timeStyle &&\n        !filteredOptions.dateStyle) {\n        // Add default formatting options if hour, minute, or second isn't defined.\n        filteredOptions = __assign(__assign({}, filteredOptions), { hour: 'numeric', minute: 'numeric' });\n    }\n    return getDateTimeFormat(locale, filteredOptions);\n}\nexport function formatDate(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'date', getDateTimeFormat, options).format(date);\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting date.', config.locale, e));\n    }\n    return String(date);\n}\nexport function formatTime(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'time', getDateTimeFormat, options).format(date);\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting time.', config.locale, e));\n    }\n    return String(date);\n}\nexport function formatDateTimeRange(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var from = _a[0], to = _a[1], _b = _a[2], options = _b === void 0 ? {} : _b;\n    var timeZone = config.timeZone, locale = config.locale, onError = config.onError;\n    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, timeZone ? { timeZone: timeZone } : {});\n    try {\n        return getDateTimeFormat(locale, filteredOptions).formatRange(from, to);\n    }\n    catch (e) {\n        onError(new IntlFormatError('Error formatting date time range.', config.locale, e));\n    }\n    return String(from);\n}\nexport function formatDateToParts(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'date', getDateTimeFormat, options).formatToParts(date); // TODO: remove this when https://github.com/microsoft/TypeScript/pull/50402 is merged\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting date.', config.locale, e));\n    }\n    return [];\n}\nexport function formatTimeToParts(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'time', getDateTimeFormat, options).formatToParts(date); // TODO: remove this when https://github.com/microsoft/TypeScript/pull/50402 is merged\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting time.', config.locale, e));\n    }\n    return [];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}