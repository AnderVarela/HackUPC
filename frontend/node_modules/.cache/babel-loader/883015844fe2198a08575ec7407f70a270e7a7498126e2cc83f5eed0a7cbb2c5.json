{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('keyword-spacing');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst baseSchema = Array.isArray(baseRule.meta.schema) ? baseRule.meta.schema[0] : baseRule.meta.schema;\nconst schema = util.deepMerge(\n// eslint-disable-next-line @typescript-eslint/no-unsafe-argument -- https://github.com/microsoft/TypeScript/issues/17002\nbaseSchema, {\n  properties: {\n    overrides: {\n      properties: {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        type: baseSchema.properties.overrides.properties.import\n      }\n    }\n  }\n});\nexports.default = util.createRule({\n  name: 'keyword-spacing',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent spacing before and after keywords',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'whitespace',\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: [schema],\n    messages: baseRule.meta.messages\n  },\n  defaultOptions: [{}],\n  create(context, [{\n    after,\n    overrides\n  }]) {\n    const sourceCode = context.getSourceCode();\n    const baseRules = baseRule.create(context);\n    return Object.assign(Object.assign({}, baseRules), {\n      TSAsExpression(node) {\n        const asToken = util.nullThrows(sourceCode.getTokenAfter(node.expression, token => token.value === 'as'), util.NullThrowsReasons.MissingToken('as', node.type));\n        const oldTokenType = asToken.type;\n        // as is a contextual keyword, so it's always reported as an Identifier\n        // the rule looks for keyword tokens, so we temporarily override it\n        // we mutate it at the token level because the rule calls sourceCode.getFirstToken,\n        // so mutating a copy would not change the underlying copy returned by that method\n        asToken.type = utils_1.AST_TOKEN_TYPES.Keyword;\n        // use this selector just because it is just a call to `checkSpacingAroundFirstToken`\n        baseRules.DebuggerStatement(asToken);\n        // make sure to reset the type afterward so we don't permanently mutate the AST\n        asToken.type = oldTokenType;\n      },\n      'ImportDeclaration[importKind=type]'(node) {\n        var _a, _b, _c, _d;\n        const {\n          type: typeOptionOverride = {}\n        } = overrides !== null && overrides !== void 0 ? overrides : {};\n        const typeToken = sourceCode.getFirstToken(node, {\n          skip: 1\n        });\n        const punctuatorToken = sourceCode.getTokenAfter(typeToken);\n        if (((_b = (_a = node.specifiers) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.type) === utils_1.AST_NODE_TYPES.ImportDefaultSpecifier) {\n          return;\n        }\n        const spacesBetweenTypeAndPunctuator = punctuatorToken.range[0] - typeToken.range[1];\n        if (((_c = typeOptionOverride.after) !== null && _c !== void 0 ? _c : after) === true && spacesBetweenTypeAndPunctuator === 0) {\n          context.report({\n            loc: typeToken.loc,\n            messageId: 'expectedAfter',\n            data: {\n              value: 'type'\n            },\n            fix(fixer) {\n              return fixer.insertTextAfter(typeToken, ' ');\n            }\n          });\n        }\n        if (((_d = typeOptionOverride.after) !== null && _d !== void 0 ? _d : after) === false && spacesBetweenTypeAndPunctuator > 0) {\n          context.report({\n            loc: typeToken.loc,\n            messageId: 'unexpectedAfter',\n            data: {\n              value: 'type'\n            },\n            fix(fixer) {\n              return fixer.removeRange([typeToken.range[1], typeToken.range[1] + spacesBetweenTypeAndPunctuator]);\n            }\n          });\n        }\n      }\n    });\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","getESLintCoreRule_1","baseRule","getESLintCoreRule","baseSchema","Array","isArray","meta","schema","deepMerge","properties","overrides","type","import","exports","default","createRule","name","docs","description","recommended","extendsBaseRule","fixable","hasSuggestions","messages","defaultOptions","create","context","after","sourceCode","getSourceCode","baseRules","Object","assign","TSAsExpression","node","asToken","nullThrows","getTokenAfter","expression","token","value","NullThrowsReasons","MissingToken","oldTokenType","AST_TOKEN_TYPES","Keyword","DebuggerStatement","ImportDeclaration[importKind=type]","typeOptionOverride","typeToken","getFirstToken","skip","punctuatorToken","_b","_a","specifiers","AST_NODE_TYPES","ImportDefaultSpecifier","spacesBetweenTypeAndPunctuator","range","_c","report","loc","messageId","data","fix","fixer","insertTextAfter","_d","removeRange"],"sources":["../../src/rules/keyword-spacing.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AACA,MAAAG,mBAAA,GAAAH,OAAA;AAEA,MAAMI,QAAQ,GAAG,IAAAD,mBAAA,CAAAE,iBAAiB,EAAC,iBAAiB,CAAC;AAKrD;AACA,MAAMC,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACK,IAAI,CAACC,MAAM,CAAC,GAClDN,QAAQ,CAACK,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,GACvBN,QAAQ,CAACK,IAAI,CAACC,MAAM;AACxB,MAAMA,MAAM,GAAGT,IAAI,CAACU,SAAS;AAC3B;AACAL,UAAU,EACV;EACEM,UAAU,EAAE;IACVC,SAAS,EAAE;MACTD,UAAU,EAAE;QACV;QACAE,IAAI,EAAER,UAAU,CAACM,UAAU,CAACC,SAAS,CAACD,UAAU,CAACG;;;;CAIxD,CACF;AAEDC,OAAA,CAAAC,OAAA,GAAehB,IAAI,CAACiB,UAAU,CAAsB;EAClDC,IAAI,EAAE,iBAAiB;EACvBV,IAAI,EAAE;IACJK,IAAI,EAAE,QAAQ;IACdM,IAAI,EAAE;MACJC,WAAW,EAAE,sDAAsD;MACnEC,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE;KAClB;IACDC,OAAO,EAAE,YAAY;IACrBC,cAAc,EAAErB,QAAQ,CAACK,IAAI,CAACgB,cAAc;IAC5Cf,MAAM,EAAE,CAACA,MAAM,CAAC;IAChBgB,QAAQ,EAAEtB,QAAQ,CAACK,IAAI,CAACiB;GACzB;EACDC,cAAc,EAAE,CAAC,EAAE,CAAC;EAEpBC,MAAMA,CAACC,OAAO,EAAE,CAAC;IAAEC,KAAK;IAAEjB;EAAS,CAAE,CAAC;IACpC,MAAMkB,UAAU,GAAGF,OAAO,CAACG,aAAa,EAAE;IAC1C,MAAMC,SAAS,GAAG7B,QAAQ,CAACwB,MAAM,CAACC,OAAO,CAAC;IAC1C,OAAAK,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKF,SAAS;MACZG,cAAcA,CAACC,IAAI;QACjB,MAAMC,OAAO,GAAGrC,IAAI,CAACsC,UAAU,CAC7BR,UAAU,CAACS,aAAa,CACtBH,IAAI,CAACI,UAAU,EACfC,KAAK,IAAIA,KAAK,CAACC,KAAK,KAAK,IAAI,CAC9B,EACD1C,IAAI,CAAC2C,iBAAiB,CAACC,YAAY,CAAC,IAAI,EAAER,IAAI,CAACvB,IAAI,CAAC,CACrD;QACD,MAAMgC,YAAY,GAAGR,OAAO,CAACxB,IAAI;QACjC;QACA;QACA;QACA;QACAwB,OAAO,CAACxB,IAAI,GAAGf,OAAA,CAAAgD,eAAe,CAACC,OAAO;QAEtC;QACAf,SAAS,CAACgB,iBAAiB,CAACX,OAAgB,CAAC;QAE7C;QACAA,OAAO,CAACxB,IAAI,GAAGgC,YAAY;MAC7B,CAAC;MACD,oCAAoCI,CAClCb,IAAgC;;QAEhC,MAAM;UAAEvB,IAAI,EAAEqC,kBAAkB,GAAG;QAAE,CAAE,GAAGtC,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,EAAE;QACzD,MAAMuC,SAAS,GAAGrB,UAAU,CAACsB,aAAa,CAAChB,IAAI,EAAE;UAAEiB,IAAI,EAAE;QAAC,CAAE,CAAE;QAC9D,MAAMC,eAAe,GAAGxB,UAAU,CAACS,aAAa,CAACY,SAAS,CAAE;QAC5D,IACE,EAAAI,EAAA,IAAAC,EAAA,GAAApB,IAAI,CAACqB,UAAU,cAAAD,EAAA,uBAAAA,EAAA,CAAG,CAAC,CAAC,cAAAD,EAAA,uBAAAA,EAAA,CAAE1C,IAAI,MAAKf,OAAA,CAAA4D,cAAc,CAACC,sBAAsB,EACpE;UACA;;QAEF,MAAMC,8BAA8B,GAClCN,eAAe,CAACO,KAAK,CAAC,CAAC,CAAC,GAAGV,SAAS,CAACU,KAAK,CAAC,CAAC,CAAC;QAC/C,IACE,CAAC,CAAAC,EAAA,GAAAZ,kBAAkB,CAACrB,KAAK,cAAAiC,EAAA,cAAAA,EAAA,GAAIjC,KAAK,MAAM,IAAI,IAC5C+B,8BAA8B,KAAK,CAAC,EACpC;UACAhC,OAAO,CAACmC,MAAM,CAAC;YACbC,GAAG,EAAEb,SAAS,CAACa,GAAG;YAClBC,SAAS,EAAE,eAAe;YAC1BC,IAAI,EAAE;cAAExB,KAAK,EAAE;YAAM,CAAE;YACvByB,GAAGA,CAACC,KAAK;cACP,OAAOA,KAAK,CAACC,eAAe,CAAClB,SAAS,EAAE,GAAG,CAAC;YAC9C;WACD,CAAC;;QAEJ,IACE,CAAC,CAAAmB,EAAA,GAAApB,kBAAkB,CAACrB,KAAK,cAAAyC,EAAA,cAAAA,EAAA,GAAIzC,KAAK,MAAM,KAAK,IAC7C+B,8BAA8B,GAAG,CAAC,EAClC;UACAhC,OAAO,CAACmC,MAAM,CAAC;YACbC,GAAG,EAAEb,SAAS,CAACa,GAAG;YAClBC,SAAS,EAAE,iBAAiB;YAC5BC,IAAI,EAAE;cAAExB,KAAK,EAAE;YAAM,CAAE;YACvByB,GAAGA,CAACC,KAAK;cACP,OAAOA,KAAK,CAACG,WAAW,CAAC,CACvBpB,SAAS,CAACU,KAAK,CAAC,CAAC,CAAC,EAClBV,SAAS,CAACU,KAAK,CAAC,CAAC,CAAC,GAAGD,8BAA8B,CACpD,CAAC;YACJ;WACD,CAAC;;MAEN;IAAC;EAEL;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}