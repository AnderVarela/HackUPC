{"ast":null,"code":"/* global ʎɐɹɔosǝʌɹǝs */\nconst {\n  ClientSocket\n} = require('webpack-plugin-serve/lib/client/ClientSocket');\n\n/**\n * Initializes a socket server for HMR for webpack-plugin-serve.\n * @param {function(*): void} messageHandler A handler to consume Webpack compilation messages.\n * @returns {void}\n */\nfunction initWPSSocket(messageHandler) {\n  /**\n   * The hard-coded options injection key from webpack-plugin-serve.\n   *\n   * [Ref](https://github.com/shellscape/webpack-plugin-serve/blob/aeb49f14e900802c98df4a4607a76bc67b1cffdf/lib/index.js#L258)\n   * @type {Object | undefined}\n   */\n  let options;\n  try {\n    options = ʎɐɹɔosǝʌɹǝs;\n  } catch (e) {\n    // Bail out because this indicates the plugin is not included\n    return;\n  }\n  const {\n    address,\n    client = {},\n    secure\n  } = options;\n  const protocol = secure ? 'wss' : 'ws';\n  const socket = new ClientSocket(client, protocol + '://' + (client.address || address) + '/wps');\n  socket.addEventListener('message', function listener(message) {\n    const {\n      action,\n      data\n    } = JSON.parse(message.data);\n    switch (action) {\n      case 'done':\n        {\n          messageHandler({\n            type: 'ok'\n          });\n          break;\n        }\n      case 'problems':\n        {\n          if (data.errors.length) {\n            messageHandler({\n              type: 'errors',\n              data: data.errors\n            });\n          } else if (data.warnings.length) {\n            messageHandler({\n              type: 'warnings',\n              data: data.warnings\n            });\n          }\n          break;\n        }\n      default:\n        {\n          // Do nothing\n        }\n    }\n  });\n}\nmodule.exports = {\n  init: initWPSSocket\n};","map":{"version":3,"names":["ClientSocket","require","initWPSSocket","messageHandler","options","ʎɐɹɔosǝʌɹǝs","e","address","client","secure","protocol","socket","addEventListener","listener","message","action","data","JSON","parse","type","errors","length","warnings","module","exports","init"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/WPSSocket.js"],"sourcesContent":["/* global ʎɐɹɔosǝʌɹǝs */\nconst { ClientSocket } = require('webpack-plugin-serve/lib/client/ClientSocket');\n\n/**\n * Initializes a socket server for HMR for webpack-plugin-serve.\n * @param {function(*): void} messageHandler A handler to consume Webpack compilation messages.\n * @returns {void}\n */\nfunction initWPSSocket(messageHandler) {\n  /**\n   * The hard-coded options injection key from webpack-plugin-serve.\n   *\n   * [Ref](https://github.com/shellscape/webpack-plugin-serve/blob/aeb49f14e900802c98df4a4607a76bc67b1cffdf/lib/index.js#L258)\n   * @type {Object | undefined}\n   */\n  let options;\n  try {\n    options = ʎɐɹɔosǝʌɹǝs;\n  } catch (e) {\n    // Bail out because this indicates the plugin is not included\n    return;\n  }\n\n  const { address, client = {}, secure } = options;\n  const protocol = secure ? 'wss' : 'ws';\n  const socket = new ClientSocket(client, protocol + '://' + (client.address || address) + '/wps');\n\n  socket.addEventListener('message', function listener(message) {\n    const { action, data } = JSON.parse(message.data);\n\n    switch (action) {\n      case 'done': {\n        messageHandler({ type: 'ok' });\n        break;\n      }\n      case 'problems': {\n        if (data.errors.length) {\n          messageHandler({ type: 'errors', data: data.errors });\n        } else if (data.warnings.length) {\n          messageHandler({ type: 'warnings', data: data.warnings });\n        }\n        break;\n      }\n      default: {\n        // Do nothing\n      }\n    }\n  });\n}\n\nmodule.exports = { init: initWPSSocket };\n"],"mappings":"AAAA;AACA,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,8CAA8C,CAAC;;AAEhF;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,cAAc,EAAE;EACrC;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,OAAO;EACX,IAAI;IACFA,OAAO,GAAGC,WAAW;EACvB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV;IACA;EACF;EAEA,MAAM;IAAEC,OAAO;IAAEC,MAAM,GAAG,CAAC,CAAC;IAAEC;EAAO,CAAC,GAAGL,OAAO;EAChD,MAAMM,QAAQ,GAAGD,MAAM,GAAG,KAAK,GAAG,IAAI;EACtC,MAAME,MAAM,GAAG,IAAIX,YAAY,CAACQ,MAAM,EAAEE,QAAQ,GAAG,KAAK,IAAIF,MAAM,CAACD,OAAO,IAAIA,OAAO,CAAC,GAAG,MAAM,CAAC;EAEhGI,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,SAASC,QAAQA,CAACC,OAAO,EAAE;IAC5D,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACE,IAAI,CAAC;IAEjD,QAAQD,MAAM;MACZ,KAAK,MAAM;QAAE;UACXZ,cAAc,CAAC;YAAEgB,IAAI,EAAE;UAAK,CAAC,CAAC;UAC9B;QACF;MACA,KAAK,UAAU;QAAE;UACf,IAAIH,IAAI,CAACI,MAAM,CAACC,MAAM,EAAE;YACtBlB,cAAc,CAAC;cAAEgB,IAAI,EAAE,QAAQ;cAAEH,IAAI,EAAEA,IAAI,CAACI;YAAO,CAAC,CAAC;UACvD,CAAC,MAAM,IAAIJ,IAAI,CAACM,QAAQ,CAACD,MAAM,EAAE;YAC/BlB,cAAc,CAAC;cAAEgB,IAAI,EAAE,UAAU;cAAEH,IAAI,EAAEA,IAAI,CAACM;YAAS,CAAC,CAAC;UAC3D;UACA;QACF;MACA;QAAS;UACP;QAAA;IAEJ;EACF,CAAC,CAAC;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAG;EAAEC,IAAI,EAAEvB;AAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}