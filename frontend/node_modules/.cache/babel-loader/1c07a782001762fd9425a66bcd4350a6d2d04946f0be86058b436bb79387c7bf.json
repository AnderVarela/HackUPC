{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// This is a workaround for ESLint's requirement to consume shareable configurations from package names prefixed\n// with \"eslint-config\".\n//\n// To remove this requirement, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/custom-config-package-names\");\n//\nconst _patch_base_1 = require(\"./_patch-base\");\nif (!_patch_base_1.configArrayFactory.__loadExtendedShareableConfigPatched) {\n  _patch_base_1.configArrayFactory.__loadExtendedShareableConfigPatched = true;\n  // eslint-disable-next-line @typescript-eslint/typedef\n  const originalLoadExtendedShareableConfig = _patch_base_1.configArrayFactory.prototype._loadExtendedShareableConfig;\n  // Common between ESLint versions\n  // https://github.com/eslint/eslintrc/blob/242d569020dfe4f561e4503787b99ec016337457/lib/config-array-factory.js#L910\n  _patch_base_1.configArrayFactory.prototype._loadExtendedShareableConfig = function (extendName) {\n    const originalResolve = _patch_base_1.ModuleResolver.resolve;\n    try {\n      _patch_base_1.ModuleResolver.resolve = function (moduleName, relativeToPath) {\n        try {\n          return originalResolve.call(this, moduleName, relativeToPath);\n        } catch (e) {\n          // Only change the name we resolve if we cannot find the normalized module, since it is\n          // valid to rely on the normalized package name. Use the originally provided module path\n          // instead of the normalized module path.\n          if ((e === null || e === void 0 ? void 0 : e.code) === 'MODULE_NOT_FOUND' && moduleName !== extendName && moduleName === _patch_base_1.Naming.normalizePackageName(extendName, 'eslint-config')) {\n            return originalResolve.call(this, extendName, relativeToPath);\n          } else {\n            throw e;\n          }\n        }\n      };\n      return originalLoadExtendedShareableConfig.apply(this, arguments);\n    } finally {\n      _patch_base_1.ModuleResolver.resolve = originalResolve;\n    }\n  };\n}","map":{"version":3,"names":["_patch_base_1","require","configArrayFactory","__loadExtendedShareableConfigPatched","originalLoadExtendedShareableConfig","prototype","_loadExtendedShareableConfig","extendName","originalResolve","ModuleResolver","resolve","moduleName","relativeToPath","call","e","code","Naming","normalizePackageName","apply","arguments"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@rushstack\\eslint-patch\\src\\custom-config-package-names.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// This is a workaround for ESLint's requirement to consume shareable configurations from package names prefixed\n// with \"eslint-config\".\n//\n// To remove this requirement, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/custom-config-package-names\");\n//\nimport { configArrayFactory, ModuleResolver, Naming } from './_patch-base';\n\nif (!configArrayFactory.__loadExtendedShareableConfigPatched) {\n  configArrayFactory.__loadExtendedShareableConfigPatched = true;\n  // eslint-disable-next-line @typescript-eslint/typedef\n  const originalLoadExtendedShareableConfig = configArrayFactory.prototype._loadExtendedShareableConfig;\n\n  // Common between ESLint versions\n  // https://github.com/eslint/eslintrc/blob/242d569020dfe4f561e4503787b99ec016337457/lib/config-array-factory.js#L910\n  configArrayFactory.prototype._loadExtendedShareableConfig = function (extendName: string): unknown {\n    const originalResolve: (moduleName: string, relativeToPath: string) => string = ModuleResolver.resolve;\n    try {\n      ModuleResolver.resolve = function (moduleName: string, relativeToPath: string): string {\n        try {\n          return originalResolve.call(this, moduleName, relativeToPath);\n        } catch (e) {\n          // Only change the name we resolve if we cannot find the normalized module, since it is\n          // valid to rely on the normalized package name. Use the originally provided module path\n          // instead of the normalized module path.\n          if (\n            (e as NodeJS.ErrnoException)?.code === 'MODULE_NOT_FOUND' &&\n            moduleName !== extendName &&\n            moduleName === Naming.normalizePackageName(extendName, 'eslint-config')\n          ) {\n            return originalResolve.call(this, extendName, relativeToPath);\n          } else {\n            throw e;\n          }\n        }\n      };\n      return originalLoadExtendedShareableConfig.apply(this, arguments);\n    } finally {\n      ModuleResolver.resolve = originalResolve;\n    }\n  };\n}\n"],"mappings":";;AAAA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAAA,aAAA,GAAAC,OAAA;AAEA,IAAI,CAACD,aAAA,CAAAE,kBAAkB,CAACC,oCAAoC,EAAE;EAC5DH,aAAA,CAAAE,kBAAkB,CAACC,oCAAoC,GAAG,IAAI;EAC9D;EACA,MAAMC,mCAAmC,GAAGJ,aAAA,CAAAE,kBAAkB,CAACG,SAAS,CAACC,4BAA4B;EAErG;EACA;EACAN,aAAA,CAAAE,kBAAkB,CAACG,SAAS,CAACC,4BAA4B,GAAG,UAAUC,UAAkB;IACtF,MAAMC,eAAe,GAA2DR,aAAA,CAAAS,cAAc,CAACC,OAAO;IACtG,IAAI;MACFV,aAAA,CAAAS,cAAc,CAACC,OAAO,GAAG,UAAUC,UAAkB,EAAEC,cAAsB;QAC3E,IAAI;UACF,OAAOJ,eAAe,CAACK,IAAI,CAAC,IAAI,EAAEF,UAAU,EAAEC,cAAc,CAAC;QAC/D,CAAC,CAAC,OAAOE,CAAC,EAAE;UACV;UACA;UACA;UACA,IACE,CAACA,CAA2B,aAA3BA,CAAC,uBAADA,CAAC,CAA4BC,IAAI,MAAK,kBAAkB,IACzDJ,UAAU,KAAKJ,UAAU,IACzBI,UAAU,KAAKX,aAAA,CAAAgB,MAAM,CAACC,oBAAoB,CAACV,UAAU,EAAE,eAAe,CAAC,EACvE;YACA,OAAOC,eAAe,CAACK,IAAI,CAAC,IAAI,EAAEN,UAAU,EAAEK,cAAc,CAAC;UAC/D,CAAC,MAAM;YACL,MAAME,CAAC;UACT;QACF;MACF,CAAC;MACD,OAAOV,mCAAmC,CAACc,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACnE,CAAC,SAAS;MACRnB,aAAA,CAAAS,cAAc,CAACC,OAAO,GAAGF,eAAe;IAC1C;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}