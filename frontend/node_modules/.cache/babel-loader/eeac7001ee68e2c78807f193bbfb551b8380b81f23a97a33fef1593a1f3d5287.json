{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isModuleResolutionError = exports.ESLINT_MAJOR_VERSION = exports.Naming = exports.ModuleResolver = exports.configArrayFactory = exports.eslintFolder = exports.eslintPackageVersion = void 0;\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\n//\n// To correct how ESLint searches for plugin packages, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/modern-module-resolution\");\n//\nconst path_1 = __importDefault(require(\"path\"));\nconst isModuleResolutionError = ex => typeof ex === 'object' && !!ex && 'code' in ex && ex.code === 'MODULE_NOT_FOUND';\nexports.isModuleResolutionError = isModuleResolutionError;\n// Module path for eslintrc.cjs\n// Example: \".../@eslint/eslintrc/dist/eslintrc.cjs\"\nlet eslintrcBundlePath = undefined;\n// Module path for config-array-factory.js\n// Example: \".../@eslint/eslintrc/lib/config-array-factory\"\nlet configArrayFactoryPath = undefined;\n// Module path for relative-module-resolver.js\n// Example: \".../@eslint/eslintrc/lib/shared/relative-module-resolver\"\nlet moduleResolverPath = undefined;\n// Module path for naming.js\n// Example: \".../@eslint/eslintrc/lib/shared/naming\"\nlet namingPath = undefined;\n// Folder path where ESLint's package.json can be found\n// Example: \".../node_modules/eslint\"\nlet eslintFolder = undefined;\nexports.eslintFolder = eslintFolder;\n// Probe for the ESLint >=8.0.0 layout:\nfor (let currentModule = module;;) {\n  if (!eslintrcBundlePath) {\n    if (currentModule.filename.endsWith('eslintrc.cjs')) {\n      // For ESLint >=8.0.0, all @eslint/eslintrc code is bundled at this path:\n      //   .../@eslint/eslintrc/dist/eslintrc.cjs\n      try {\n        const eslintrcFolderPath = path_1.default.dirname(require.resolve('@eslint/eslintrc/package.json', {\n          paths: [currentModule.path]\n        }));\n        // Make sure we actually resolved the module in our call path\n        // and not some other spurious dependency.\n        const resolvedEslintrcBundlePath = path_1.default.join(eslintrcFolderPath, 'dist/eslintrc.cjs');\n        if (resolvedEslintrcBundlePath === currentModule.filename) {\n          eslintrcBundlePath = resolvedEslintrcBundlePath;\n        }\n      } catch (ex) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are re-thrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    }\n  } else {\n    // Next look for a file in ESLint's folder\n    //   .../eslint/lib/cli-engine/cli-engine.js\n    try {\n      const eslintCandidateFolder = path_1.default.dirname(require.resolve('eslint/package.json', {\n        paths: [currentModule.path]\n      }));\n      // Make sure we actually resolved the module in our call path\n      // and not some other spurious dependency.\n      if (currentModule.filename.startsWith(eslintCandidateFolder + path_1.default.sep)) {\n        exports.eslintFolder = eslintFolder = eslintCandidateFolder;\n        break;\n      }\n    } catch (ex) {\n      // Module resolution failures are expected, as we're walking\n      // up our require stack to look for eslint. All other errors\n      // are re-thrown.\n      if (!isModuleResolutionError(ex)) {\n        throw ex;\n      }\n    }\n  }\n  if (!currentModule.parent) {\n    break;\n  }\n  currentModule = currentModule.parent;\n}\nif (!eslintFolder) {\n  // Probe for the ESLint >=7.12.0 layout:\n  for (let currentModule = module;;) {\n    if (!configArrayFactoryPath) {\n      // For ESLint >=7.12.0, config-array-factory.js is at this path:\n      //   .../@eslint/eslintrc/lib/config-array-factory.js\n      try {\n        const eslintrcFolder = path_1.default.dirname(require.resolve('@eslint/eslintrc/package.json', {\n          paths: [currentModule.path]\n        }));\n        const resolvedConfigArrayFactoryPath = path_1.default.join(eslintrcFolder, '/lib/config-array-factory.js');\n        if (resolvedConfigArrayFactoryPath === currentModule.filename) {\n          configArrayFactoryPath = resolvedConfigArrayFactoryPath;\n          moduleResolverPath = `${eslintrcFolder}/lib/shared/relative-module-resolver`;\n          namingPath = `${eslintrcFolder}/lib/shared/naming`;\n        }\n      } catch (ex) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are re-thrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    } else if (currentModule.filename.endsWith('cli-engine.js')) {\n      // Next look for a file in ESLint's folder\n      //   .../eslint/lib/cli-engine/cli-engine.js\n      try {\n        const eslintCandidateFolder = path_1.default.dirname(require.resolve('eslint/package.json', {\n          paths: [currentModule.path]\n        }));\n        if (path_1.default.join(eslintCandidateFolder, 'lib/cli-engine/cli-engine.js') === currentModule.filename) {\n          exports.eslintFolder = eslintFolder = eslintCandidateFolder;\n          break;\n        }\n      } catch (ex) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are rethrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    }\n    if (!currentModule.parent) {\n      break;\n    }\n    currentModule = currentModule.parent;\n  }\n}\nif (!eslintFolder) {\n  // Probe for the <7.12.0 layout:\n  for (let currentModule = module;;) {\n    // For ESLint <7.12.0, config-array-factory.js was at this path:\n    //   .../eslint/lib/cli-engine/config-array-factory.js\n    if (/[\\\\/]eslint[\\\\/]lib[\\\\/]cli-engine[\\\\/]config-array-factory\\.js$/i.test(currentModule.filename)) {\n      exports.eslintFolder = eslintFolder = path_1.default.join(path_1.default.dirname(currentModule.filename), '../..');\n      configArrayFactoryPath = `${eslintFolder}/lib/cli-engine/config-array-factory`;\n      moduleResolverPath = `${eslintFolder}/lib/shared/relative-module-resolver`;\n      // The naming module was moved to @eslint/eslintrc in ESLint 7.8.0, which is also when the @eslint/eslintrc\n      // package was created and added to ESLint, so we need to probe for whether it's in the old or new location.\n      let eslintrcFolder;\n      try {\n        eslintrcFolder = path_1.default.dirname(require.resolve('@eslint/eslintrc/package.json', {\n          paths: [currentModule.path]\n        }));\n      } catch (ex) {\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n      namingPath = `${eslintrcFolder !== null && eslintrcFolder !== void 0 ? eslintrcFolder : eslintFolder}/lib/shared/naming`;\n      break;\n    }\n    if (!currentModule.parent) {\n      // This was tested with ESLint 6.1.0 .. 7.12.1.\n      throw new Error('Failed to patch ESLint because the calling module was not recognized.\\n' + 'If you are using a newer ESLint version that may be unsupported, please create a GitHub issue:\\n' + 'https://github.com/microsoft/rushstack/issues');\n    }\n    currentModule = currentModule.parent;\n  }\n}\n// Detect the ESLint package version\nconst eslintPackageJsonPath = `${eslintFolder}/package.json`;\nconst eslintPackageObject = require(eslintPackageJsonPath);\nexports.eslintPackageVersion = eslintPackageObject.version;\nconst ESLINT_MAJOR_VERSION = parseInt(exports.eslintPackageVersion, 10);\nexports.ESLINT_MAJOR_VERSION = ESLINT_MAJOR_VERSION;\nif (isNaN(ESLINT_MAJOR_VERSION)) {\n  throw new Error(`Unable to parse ESLint version \"${exports.eslintPackageVersion}\" in file \"${eslintPackageJsonPath}\"`);\n}\nif (!(ESLINT_MAJOR_VERSION >= 6 && ESLINT_MAJOR_VERSION <= 8)) {\n  throw new Error('The ESLint patch script has only been tested with ESLint version 6.x, 7.x, and 8.x.' + ` (Your version: ${exports.eslintPackageVersion})\\n` + 'Consider reporting a GitHub issue:\\n' + 'https://github.com/microsoft/rushstack/issues');\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet configArrayFactory;\nif (ESLINT_MAJOR_VERSION === 8) {\n  exports.configArrayFactory = configArrayFactory = require(eslintrcBundlePath).Legacy.ConfigArrayFactory;\n} else {\n  exports.configArrayFactory = configArrayFactory = require(configArrayFactoryPath).ConfigArrayFactory;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet ModuleResolver;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet Naming;\nif (ESLINT_MAJOR_VERSION === 8) {\n  exports.ModuleResolver = ModuleResolver = require(eslintrcBundlePath).Legacy.ModuleResolver;\n  exports.Naming = Naming = require(eslintrcBundlePath).Legacy.naming;\n} else {\n  exports.ModuleResolver = ModuleResolver = require(moduleResolverPath);\n  exports.Naming = Naming = require(namingPath);\n}","map":{"version":3,"names":["path_1","__importDefault","require","isModuleResolutionError","ex","code","exports","eslintrcBundlePath","undefined","configArrayFactoryPath","moduleResolverPath","namingPath","eslintFolder","currentModule","module","filename","endsWith","eslintrcFolderPath","default","dirname","resolve","paths","path","resolvedEslintrcBundlePath","join","eslintCandidateFolder","startsWith","sep","parent","eslintrcFolder","resolvedConfigArrayFactoryPath","test","Error","eslintPackageJsonPath","eslintPackageObject","eslintPackageVersion","version","ESLINT_MAJOR_VERSION","parseInt","isNaN","configArrayFactory","Legacy","ConfigArrayFactory","ModuleResolver","Naming","naming"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@rushstack\\eslint-patch\\src\\_patch-base.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\n//\n// To correct how ESLint searches for plugin packages, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/modern-module-resolution\");\n//\n\nimport path from 'path';\n\nconst isModuleResolutionError: (ex: unknown) => boolean = (ex) =>\n  typeof ex === 'object' && !!ex && 'code' in ex && (ex as { code: unknown }).code === 'MODULE_NOT_FOUND';\n\n// Module path for eslintrc.cjs\n// Example: \".../@eslint/eslintrc/dist/eslintrc.cjs\"\nlet eslintrcBundlePath: string | undefined = undefined;\n\n// Module path for config-array-factory.js\n// Example: \".../@eslint/eslintrc/lib/config-array-factory\"\nlet configArrayFactoryPath: string | undefined = undefined;\n\n// Module path for relative-module-resolver.js\n// Example: \".../@eslint/eslintrc/lib/shared/relative-module-resolver\"\nlet moduleResolverPath: string | undefined = undefined;\n\n// Module path for naming.js\n// Example: \".../@eslint/eslintrc/lib/shared/naming\"\nlet namingPath: string | undefined = undefined;\n\n// Folder path where ESLint's package.json can be found\n// Example: \".../node_modules/eslint\"\nlet eslintFolder: string | undefined = undefined;\n\n// Probe for the ESLint >=8.0.0 layout:\nfor (let currentModule: NodeModule = module; ; ) {\n  if (!eslintrcBundlePath) {\n    if (currentModule.filename.endsWith('eslintrc.cjs')) {\n      // For ESLint >=8.0.0, all @eslint/eslintrc code is bundled at this path:\n      //   .../@eslint/eslintrc/dist/eslintrc.cjs\n      try {\n        const eslintrcFolderPath: string = path.dirname(\n          require.resolve('@eslint/eslintrc/package.json', { paths: [currentModule.path] })\n        );\n\n        // Make sure we actually resolved the module in our call path\n        // and not some other spurious dependency.\n        const resolvedEslintrcBundlePath: string = path.join(eslintrcFolderPath, 'dist/eslintrc.cjs');\n        if (resolvedEslintrcBundlePath === currentModule.filename) {\n          eslintrcBundlePath = resolvedEslintrcBundlePath;\n        }\n      } catch (ex: unknown) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are re-thrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    }\n  } else {\n    // Next look for a file in ESLint's folder\n    //   .../eslint/lib/cli-engine/cli-engine.js\n    try {\n      const eslintCandidateFolder: string = path.dirname(\n        require.resolve('eslint/package.json', {\n          paths: [currentModule.path]\n        })\n      );\n\n      // Make sure we actually resolved the module in our call path\n      // and not some other spurious dependency.\n      if (currentModule.filename.startsWith(eslintCandidateFolder + path.sep)) {\n        eslintFolder = eslintCandidateFolder;\n        break;\n      }\n    } catch (ex: unknown) {\n      // Module resolution failures are expected, as we're walking\n      // up our require stack to look for eslint. All other errors\n      // are re-thrown.\n      if (!isModuleResolutionError(ex)) {\n        throw ex;\n      }\n    }\n  }\n\n  if (!currentModule.parent) {\n    break;\n  }\n  currentModule = currentModule.parent;\n}\n\nif (!eslintFolder) {\n  // Probe for the ESLint >=7.12.0 layout:\n  for (let currentModule: NodeModule = module; ; ) {\n    if (!configArrayFactoryPath) {\n      // For ESLint >=7.12.0, config-array-factory.js is at this path:\n      //   .../@eslint/eslintrc/lib/config-array-factory.js\n      try {\n        const eslintrcFolder: string = path.dirname(\n          require.resolve('@eslint/eslintrc/package.json', {\n            paths: [currentModule.path]\n          })\n        );\n\n        const resolvedConfigArrayFactoryPath: string = path.join(\n          eslintrcFolder,\n          '/lib/config-array-factory.js'\n        );\n        if (resolvedConfigArrayFactoryPath === currentModule.filename) {\n          configArrayFactoryPath = resolvedConfigArrayFactoryPath;\n          moduleResolverPath = `${eslintrcFolder}/lib/shared/relative-module-resolver`;\n          namingPath = `${eslintrcFolder}/lib/shared/naming`;\n        }\n      } catch (ex: unknown) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are re-thrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    } else if (currentModule.filename.endsWith('cli-engine.js')) {\n      // Next look for a file in ESLint's folder\n      //   .../eslint/lib/cli-engine/cli-engine.js\n      try {\n        const eslintCandidateFolder: string = path.dirname(\n          require.resolve('eslint/package.json', {\n            paths: [currentModule.path]\n          })\n        );\n\n        if (path.join(eslintCandidateFolder, 'lib/cli-engine/cli-engine.js') === currentModule.filename) {\n          eslintFolder = eslintCandidateFolder;\n          break;\n        }\n      } catch (ex: unknown) {\n        // Module resolution failures are expected, as we're walking\n        // up our require stack to look for eslint. All other errors\n        // are rethrown.\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n    }\n\n    if (!currentModule.parent) {\n      break;\n    }\n    currentModule = currentModule.parent;\n  }\n}\n\nif (!eslintFolder) {\n  // Probe for the <7.12.0 layout:\n  for (let currentModule: NodeModule = module; ; ) {\n    // For ESLint <7.12.0, config-array-factory.js was at this path:\n    //   .../eslint/lib/cli-engine/config-array-factory.js\n    if (/[\\\\/]eslint[\\\\/]lib[\\\\/]cli-engine[\\\\/]config-array-factory\\.js$/i.test(currentModule.filename)) {\n      eslintFolder = path.join(path.dirname(currentModule.filename), '../..');\n      configArrayFactoryPath = `${eslintFolder}/lib/cli-engine/config-array-factory`;\n      moduleResolverPath = `${eslintFolder}/lib/shared/relative-module-resolver`;\n\n      // The naming module was moved to @eslint/eslintrc in ESLint 7.8.0, which is also when the @eslint/eslintrc\n      // package was created and added to ESLint, so we need to probe for whether it's in the old or new location.\n      let eslintrcFolder: string | undefined;\n      try {\n        eslintrcFolder = path.dirname(\n          require.resolve('@eslint/eslintrc/package.json', {\n            paths: [currentModule.path]\n          })\n        );\n      } catch (ex: unknown) {\n        if (!isModuleResolutionError(ex)) {\n          throw ex;\n        }\n      }\n\n      namingPath = `${eslintrcFolder ?? eslintFolder}/lib/shared/naming`;\n      break;\n    }\n\n    if (!currentModule.parent) {\n      // This was tested with ESLint 6.1.0 .. 7.12.1.\n      throw new Error(\n        'Failed to patch ESLint because the calling module was not recognized.\\n' +\n          'If you are using a newer ESLint version that may be unsupported, please create a GitHub issue:\\n' +\n          'https://github.com/microsoft/rushstack/issues'\n      );\n    }\n    currentModule = currentModule.parent;\n  }\n}\n\n// Detect the ESLint package version\nconst eslintPackageJsonPath: string = `${eslintFolder}/package.json`;\nconst eslintPackageObject: { version: string } = require(eslintPackageJsonPath);\nexport const eslintPackageVersion: string = eslintPackageObject.version;\nconst ESLINT_MAJOR_VERSION: number = parseInt(eslintPackageVersion, 10);\nif (isNaN(ESLINT_MAJOR_VERSION)) {\n  throw new Error(\n    `Unable to parse ESLint version \"${eslintPackageVersion}\" in file \"${eslintPackageJsonPath}\"`\n  );\n}\n\nif (!(ESLINT_MAJOR_VERSION >= 6 && ESLINT_MAJOR_VERSION <= 8)) {\n  throw new Error(\n    'The ESLint patch script has only been tested with ESLint version 6.x, 7.x, and 8.x.' +\n      ` (Your version: ${eslintPackageVersion})\\n` +\n      'Consider reporting a GitHub issue:\\n' +\n      'https://github.com/microsoft/rushstack/issues'\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet configArrayFactory: any;\nif (ESLINT_MAJOR_VERSION === 8) {\n  configArrayFactory = require(eslintrcBundlePath!).Legacy.ConfigArrayFactory;\n} else {\n  configArrayFactory = require(configArrayFactoryPath!).ConfigArrayFactory;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet ModuleResolver: { resolve: any };\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet Naming: { normalizePackageName: any };\nif (ESLINT_MAJOR_VERSION === 8) {\n  ModuleResolver = require(eslintrcBundlePath!).Legacy.ModuleResolver;\n  Naming = require(eslintrcBundlePath!).Legacy.naming;\n} else {\n  ModuleResolver = require(moduleResolverPath!);\n  Naming = require(namingPath!);\n}\n\nexport {\n  eslintFolder,\n  configArrayFactory,\n  ModuleResolver,\n  Naming,\n  ESLINT_MAJOR_VERSION,\n  isModuleResolutionError\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}