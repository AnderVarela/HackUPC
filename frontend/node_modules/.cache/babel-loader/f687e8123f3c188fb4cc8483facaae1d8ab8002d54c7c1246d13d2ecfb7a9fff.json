{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseNumberSkeleton = exports.parseNumberSkeletonFromString = void 0;\nvar tslib_1 = require(\"tslib\");\nvar regex_generated_1 = require(\"./regex.generated\");\nfunction parseNumberSkeletonFromString(skeleton) {\n  if (skeleton.length === 0) {\n    throw new Error('Number skeleton cannot be empty');\n  }\n  // Parse the skeleton\n  var stringTokens = skeleton.split(regex_generated_1.WHITE_SPACE_REGEX).filter(function (x) {\n    return x.length > 0;\n  });\n  var tokens = [];\n  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n    var stringToken = stringTokens_1[_i];\n    var stemAndOptions = stringToken.split('/');\n    if (stemAndOptions.length === 0) {\n      throw new Error('Invalid number skeleton');\n    }\n    var stem = stemAndOptions[0],\n      options = stemAndOptions.slice(1);\n    for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n      var option = options_1[_a];\n      if (option.length === 0) {\n        throw new Error('Invalid number skeleton');\n      }\n    }\n    tokens.push({\n      stem: stem,\n      options: options\n    });\n  }\n  return tokens;\n}\nexports.parseNumberSkeletonFromString = parseNumberSkeletonFromString;\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  if (str[str.length - 1] === 'r') {\n    result.roundingPriority = 'morePrecision';\n  } else if (str[str.length - 1] === 's') {\n    result.roundingPriority = 'lessPrecision';\n  }\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    }\n    // @@@+ case\n    else if (g2 === '+') {\n      result.minimumSignificantDigits = g1.length;\n    }\n    // .### case\n    else if (g1[0] === '#') {\n      result.maximumSignificantDigits = g1.length;\n    }\n    // .@@## or .@@@ case\n    else {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n    }\n    return '';\n  });\n  return result;\n}\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n    case 'sign-accounting':\n    case '()':\n      return {\n        currencySign: 'accounting'\n      };\n    case 'sign-always':\n    case '+!':\n      return {\n        signDisplay: 'always'\n      };\n    case 'sign-accounting-always':\n    case '()!':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n    case 'sign-except-zero':\n    case '+?':\n      return {\n        signDisplay: 'exceptZero'\n      };\n    case 'sign-accounting-except-zero':\n    case '()?':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n    case 'sign-never':\n    case '+_':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n  // Engineering\n  var result;\n  if (stem[0] === 'E' && stem[1] === 'E') {\n    result = {\n      notation: 'engineering'\n    };\n    stem = stem.slice(2);\n  } else if (stem[0] === 'E') {\n    result = {\n      notation: 'scientific'\n    };\n    stem = stem.slice(1);\n  }\n  if (result) {\n    var signDisplay = stem.slice(0, 2);\n    if (signDisplay === '+!') {\n      result.signDisplay = 'always';\n      stem = stem.slice(2);\n    } else if (signDisplay === '+?') {\n      result.signDisplay = 'exceptZero';\n      stem = stem.slice(2);\n    }\n    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n      throw new Error('Malformed concise eng/scientific notation');\n    }\n    result.minimumIntegerDigits = stem.length;\n  }\n  return result;\n}\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n  if (signOpts) {\n    return signOpts;\n  }\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nfunction parseNumberSkeleton(tokens) {\n  var result = {};\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    switch (token.stem) {\n      case 'percent':\n      case '%':\n        result.style = 'percent';\n        continue;\n      case '%x100':\n        result.style = 'percent';\n        result.scale = 100;\n        continue;\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n      case 'group-off':\n      case ',_':\n        result.useGrouping = false;\n        continue;\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n      case 'measure-unit':\n      case 'unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n      case 'compact-short':\n      case 'K':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n      case 'compact-long':\n      case 'KK':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n      case 'scientific':\n        result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'engineering':\n        result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n      case 'scale':\n        result.scale = parseFloat(token.options[0]);\n        continue;\n      case 'rounding-mode-floor':\n        result.roundingMode = 'floor';\n        continue;\n      case 'rounding-mode-ceiling':\n        result.roundingMode = 'ceil';\n        continue;\n      case 'rounding-mode-down':\n        result.roundingMode = 'trunc';\n        continue;\n      case 'rounding-mode-up':\n        result.roundingMode = 'expand';\n        continue;\n      case 'rounding-mode-half-even':\n        result.roundingMode = 'halfEven';\n        continue;\n      case 'rounding-mode-half-down':\n        result.roundingMode = 'halfTrunc';\n        continue;\n      case 'rounding-mode-half-up':\n        result.roundingMode = 'halfExpand';\n        continue;\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n      case 'integer-width':\n        if (token.options.length > 1) {\n          throw new RangeError('integer-width stems only accept a single optional option');\n        }\n        token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n          if (g1) {\n            result.minimumIntegerDigits = g2.length;\n          } else if (g3 && g4) {\n            throw new Error('We currently do not support maximum integer digits');\n          } else if (g5) {\n            throw new Error('We currently do not support exact integer digits');\n          }\n          return '';\n        });\n        continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n      result.minimumIntegerDigits = token.stem.length;\n      continue;\n    }\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      // Precision\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n      // precision-integer case\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        }\n        // .### case\n        else if (g3 && g3[0] === '#') {\n          result.maximumFractionDigits = g3.length;\n        }\n        // .00## case\n        else if (g4 && g5) {\n          result.minimumFractionDigits = g4.length;\n          result.maximumFractionDigits = g4.length + g5.length;\n        } else {\n          result.minimumFractionDigits = g1.length;\n          result.maximumFractionDigits = g1.length;\n        }\n        return '';\n      });\n      var opt = token.options[0];\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n      if (opt === 'w') {\n        result = tslib_1.__assign(tslib_1.__assign({}, result), {\n          trailingZeroDisplay: 'stripIfInteger'\n        });\n      } else if (opt) {\n        result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(opt));\n      }\n      continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n    var signOpts = parseSign(token.stem);\n    if (signOpts) {\n      result = tslib_1.__assign(tslib_1.__assign({}, result), signOpts);\n    }\n    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n    if (conciseScientificAndEngineeringOpts) {\n      result = tslib_1.__assign(tslib_1.__assign({}, result), conciseScientificAndEngineeringOpts);\n    }\n  }\n  return result;\n}\nexports.parseNumberSkeleton = parseNumberSkeleton;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseNumberSkeleton","parseNumberSkeletonFromString","tslib_1","require","regex_generated_1","skeleton","length","Error","stringTokens","split","WHITE_SPACE_REGEX","filter","x","tokens","_i","stringTokens_1","stringToken","stemAndOptions","stem","options","slice","_a","options_1","option","push","icuUnitToEcma","unit","replace","FRACTION_PRECISION_REGEX","SIGNIFICANT_PRECISION_REGEX","INTEGER_WIDTH_REGEX","CONCISE_INTEGER_WIDTH_REGEX","parseSignificantPrecision","str","result","roundingPriority","_","g1","g2","minimumSignificantDigits","maximumSignificantDigits","parseSign","signDisplay","currencySign","parseConciseScientificAndEngineeringStem","notation","test","minimumIntegerDigits","parseNotationOptions","opt","signOpts","tokens_1","token","style","scale","currency","useGrouping","maximumFractionDigits","compactDisplay","__assign","reduce","all","currencyDisplay","unitDisplay","parseFloat","roundingMode","RangeError","g3","g4","g5","minimumFractionDigits","trailingZeroDisplay","conciseScientificAndEngineeringOpts"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/icu-skeleton-parser/number.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseNumberSkeleton = exports.parseNumberSkeletonFromString = void 0;\nvar tslib_1 = require(\"tslib\");\nvar regex_generated_1 = require(\"./regex.generated\");\nfunction parseNumberSkeletonFromString(skeleton) {\n    if (skeleton.length === 0) {\n        throw new Error('Number skeleton cannot be empty');\n    }\n    // Parse the skeleton\n    var stringTokens = skeleton\n        .split(regex_generated_1.WHITE_SPACE_REGEX)\n        .filter(function (x) { return x.length > 0; });\n    var tokens = [];\n    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n        var stringToken = stringTokens_1[_i];\n        var stemAndOptions = stringToken.split('/');\n        if (stemAndOptions.length === 0) {\n            throw new Error('Invalid number skeleton');\n        }\n        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);\n        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n            var option = options_1[_a];\n            if (option.length === 0) {\n                throw new Error('Invalid number skeleton');\n            }\n        }\n        tokens.push({ stem: stem, options: options });\n    }\n    return tokens;\n}\nexports.parseNumberSkeletonFromString = parseNumberSkeletonFromString;\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?[rs]?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    if (str[str.length - 1] === 'r') {\n        result.roundingPriority = 'morePrecision';\n    }\n    else if (str[str.length - 1] === 's') {\n        result.roundingPriority = 'lessPrecision';\n    }\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== 'string') {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        }\n        // @@@+ case\n        else if (g2 === '+') {\n            result.minimumSignificantDigits = g1.length;\n        }\n        // .### case\n        else if (g1[0] === '#') {\n            result.maximumSignificantDigits = g1.length;\n        }\n        // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits =\n                g1.length + (typeof g2 === 'string' ? g2.length : 0);\n        }\n        return '';\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch (str) {\n        case 'sign-auto':\n            return {\n                signDisplay: 'auto',\n            };\n        case 'sign-accounting':\n        case '()':\n            return {\n                currencySign: 'accounting',\n            };\n        case 'sign-always':\n        case '+!':\n            return {\n                signDisplay: 'always',\n            };\n        case 'sign-accounting-always':\n        case '()!':\n            return {\n                signDisplay: 'always',\n                currencySign: 'accounting',\n            };\n        case 'sign-except-zero':\n        case '+?':\n            return {\n                signDisplay: 'exceptZero',\n            };\n        case 'sign-accounting-except-zero':\n        case '()?':\n            return {\n                signDisplay: 'exceptZero',\n                currencySign: 'accounting',\n            };\n        case 'sign-never':\n        case '+_':\n            return {\n                signDisplay: 'never',\n            };\n    }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n    // Engineering\n    var result;\n    if (stem[0] === 'E' && stem[1] === 'E') {\n        result = {\n            notation: 'engineering',\n        };\n        stem = stem.slice(2);\n    }\n    else if (stem[0] === 'E') {\n        result = {\n            notation: 'scientific',\n        };\n        stem = stem.slice(1);\n    }\n    if (result) {\n        var signDisplay = stem.slice(0, 2);\n        if (signDisplay === '+!') {\n            result.signDisplay = 'always';\n            stem = stem.slice(2);\n        }\n        else if (signDisplay === '+?') {\n            result.signDisplay = 'exceptZero';\n            stem = stem.slice(2);\n        }\n        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n            throw new Error('Malformed concise eng/scientific notation');\n        }\n        result.minimumIntegerDigits = stem.length;\n    }\n    return result;\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nfunction parseNumberSkeleton(tokens) {\n    var result = {};\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        switch (token.stem) {\n            case 'percent':\n            case '%':\n                result.style = 'percent';\n                continue;\n            case '%x100':\n                result.style = 'percent';\n                result.scale = 100;\n                continue;\n            case 'currency':\n                result.style = 'currency';\n                result.currency = token.options[0];\n                continue;\n            case 'group-off':\n            case ',_':\n                result.useGrouping = false;\n                continue;\n            case 'precision-integer':\n            case '.':\n                result.maximumFractionDigits = 0;\n                continue;\n            case 'measure-unit':\n            case 'unit':\n                result.style = 'unit';\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case 'compact-short':\n            case 'K':\n                result.notation = 'compact';\n                result.compactDisplay = 'short';\n                continue;\n            case 'compact-long':\n            case 'KK':\n                result.notation = 'compact';\n                result.compactDisplay = 'long';\n                continue;\n            case 'scientific':\n                result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'engineering':\n                result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'notation-simple':\n                result.notation = 'standard';\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case 'unit-width-narrow':\n                result.currencyDisplay = 'narrowSymbol';\n                result.unitDisplay = 'narrow';\n                continue;\n            case 'unit-width-short':\n                result.currencyDisplay = 'code';\n                result.unitDisplay = 'short';\n                continue;\n            case 'unit-width-full-name':\n                result.currencyDisplay = 'name';\n                result.unitDisplay = 'long';\n                continue;\n            case 'unit-width-iso-code':\n                result.currencyDisplay = 'symbol';\n                continue;\n            case 'scale':\n                result.scale = parseFloat(token.options[0]);\n                continue;\n            case 'rounding-mode-floor':\n                result.roundingMode = 'floor';\n                continue;\n            case 'rounding-mode-ceiling':\n                result.roundingMode = 'ceil';\n                continue;\n            case 'rounding-mode-down':\n                result.roundingMode = 'trunc';\n                continue;\n            case 'rounding-mode-up':\n                result.roundingMode = 'expand';\n                continue;\n            case 'rounding-mode-half-even':\n                result.roundingMode = 'halfEven';\n                continue;\n            case 'rounding-mode-half-down':\n                result.roundingMode = 'halfTrunc';\n                continue;\n            case 'rounding-mode-half-up':\n                result.roundingMode = 'halfExpand';\n                continue;\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n            case 'integer-width':\n                if (token.options.length > 1) {\n                    throw new RangeError('integer-width stems only accept a single optional option');\n                }\n                token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n                    if (g1) {\n                        result.minimumIntegerDigits = g2.length;\n                    }\n                    else if (g3 && g4) {\n                        throw new Error('We currently do not support maximum integer digits');\n                    }\n                    else if (g5) {\n                        throw new Error('We currently do not support exact integer digits');\n                    }\n                    return '';\n                });\n                continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n            result.minimumIntegerDigits = token.stem.length;\n            continue;\n        }\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            // Precision\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n            // precision-integer case\n            if (token.options.length > 1) {\n                throw new RangeError('Fraction-precision stems only accept a single optional option');\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n                // .000* case (before ICU67 it was .000+)\n                if (g2 === '*') {\n                    result.minimumFractionDigits = g1.length;\n                }\n                // .### case\n                else if (g3 && g3[0] === '#') {\n                    result.maximumFractionDigits = g3.length;\n                }\n                // .00## case\n                else if (g4 && g5) {\n                    result.minimumFractionDigits = g4.length;\n                    result.maximumFractionDigits = g4.length + g5.length;\n                }\n                else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits = g1.length;\n                }\n                return '';\n            });\n            var opt = token.options[0];\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display\n            if (opt === 'w') {\n                result = tslib_1.__assign(tslib_1.__assign({}, result), { trailingZeroDisplay: 'stripIfInteger' });\n            }\n            else if (opt) {\n                result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(opt));\n            }\n            continue;\n        }\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = tslib_1.__assign(tslib_1.__assign({}, result), signOpts);\n        }\n        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n        if (conciseScientificAndEngineeringOpts) {\n            result = tslib_1.__assign(tslib_1.__assign({}, result), conciseScientificAndEngineeringOpts);\n        }\n    }\n    return result;\n}\nexports.parseNumberSkeleton = parseNumberSkeleton;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}