{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createIntl = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"./utils\");\nvar error_1 = require(\"./error\");\nvar number_1 = require(\"./number\");\nvar relativeTime_1 = require(\"./relativeTime\");\nvar dateTime_1 = require(\"./dateTime\");\nvar plural_1 = require(\"./plural\");\nvar message_1 = require(\"./message\");\nvar list_1 = require(\"./list\");\nvar displayName_1 = require(\"./displayName\");\nfunction messagesContainString(messages) {\n  var firstMessage = messages ? messages[Object.keys(messages)[0]] : undefined;\n  return typeof firstMessage === 'string';\n}\nfunction verifyConfigMessages(config) {\n  if (config.onWarn && config.defaultRichTextElements && messagesContainString(config.messages || {})) {\n    config.onWarn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n  }\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nfunction createIntl(config, cache) {\n  var formatters = (0, utils_1.createFormatters)(cache);\n  var resolvedConfig = tslib_1.__assign(tslib_1.__assign({}, utils_1.DEFAULT_INTL_CONFIG), config);\n  var locale = resolvedConfig.locale,\n    defaultLocale = resolvedConfig.defaultLocale,\n    onError = resolvedConfig.onError;\n  if (!locale) {\n    if (onError) {\n      onError(new error_1.InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\".concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\")));\n    }\n    // Since there's no registered locale data for `locale`, this will\n    // fallback to the `defaultLocale` to make sure things can render.\n    // The `messages` are overridden to the `defaultProps` empty object\n    // to maintain referential equality across re-renders. It's assumed\n    // each <FormattedMessage> contains a `defaultMessage` prop.\n    resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n  } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new error_1.MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.NumberFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n  } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new error_1.MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n  }\n  verifyConfigMessages(resolvedConfig);\n  return tslib_1.__assign(tslib_1.__assign({}, resolvedConfig), {\n    formatters: formatters,\n    formatNumber: number_1.formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatNumberToParts: number_1.formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatRelativeTime: relativeTime_1.formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat),\n    formatDate: dateTime_1.formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateToParts: dateTime_1.formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTime: dateTime_1.formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateTimeRange: dateTime_1.formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTimeToParts: dateTime_1.formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatPlural: plural_1.formatPlural.bind(null, resolvedConfig, formatters.getPluralRules),\n    // @ts-expect-error TODO: will get to this later\n    formatMessage: message_1.formatMessage.bind(null, resolvedConfig, formatters),\n    // @ts-expect-error TODO: will get to this later\n    $t: message_1.formatMessage.bind(null, resolvedConfig, formatters),\n    formatList: list_1.formatList.bind(null, resolvedConfig, formatters.getListFormat),\n    formatListToParts: list_1.formatListToParts.bind(null, resolvedConfig, formatters.getListFormat),\n    formatDisplayName: displayName_1.formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames)\n  });\n}\nexports.createIntl = createIntl;","map":{"version":3,"names":["Object","defineProperty","exports","value","createIntl","tslib_1","require","utils_1","error_1","number_1","relativeTime_1","dateTime_1","plural_1","message_1","list_1","displayName_1","messagesContainString","messages","firstMessage","keys","undefined","verifyConfigMessages","config","onWarn","defaultRichTextElements","cache","formatters","createFormatters","resolvedConfig","__assign","DEFAULT_INTL_CONFIG","locale","defaultLocale","onError","InvalidConfigError","concat","Intl","NumberFormat","supportedLocalesOf","length","MissingDataError","DateTimeFormat","formatNumber","bind","getNumberFormat","formatNumberToParts","formatRelativeTime","getRelativeTimeFormat","formatDate","getDateTimeFormat","formatDateToParts","formatTime","formatDateTimeRange","formatTimeToParts","formatPlural","getPluralRules","formatMessage","$t","formatList","getListFormat","formatListToParts","formatDisplayName","getDisplayNames"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/intl/src/create-intl.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIntl = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"./utils\");\nvar error_1 = require(\"./error\");\nvar number_1 = require(\"./number\");\nvar relativeTime_1 = require(\"./relativeTime\");\nvar dateTime_1 = require(\"./dateTime\");\nvar plural_1 = require(\"./plural\");\nvar message_1 = require(\"./message\");\nvar list_1 = require(\"./list\");\nvar displayName_1 = require(\"./displayName\");\nfunction messagesContainString(messages) {\n    var firstMessage = messages ? messages[Object.keys(messages)[0]] : undefined;\n    return typeof firstMessage === 'string';\n}\nfunction verifyConfigMessages(config) {\n    if (config.onWarn &&\n        config.defaultRichTextElements &&\n        messagesContainString(config.messages || {})) {\n        config.onWarn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n    }\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nfunction createIntl(config, cache) {\n    var formatters = (0, utils_1.createFormatters)(cache);\n    var resolvedConfig = tslib_1.__assign(tslib_1.__assign({}, utils_1.DEFAULT_INTL_CONFIG), config);\n    var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;\n    if (!locale) {\n        if (onError) {\n            onError(new error_1.InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\".concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\")));\n        }\n        // Since there's no registered locale data for `locale`, this will\n        // fallback to the `defaultLocale` to make sure things can render.\n        // The `messages` are overridden to the `defaultProps` empty object\n        // to maintain referential equality across re-renders. It's assumed\n        // each <FormattedMessage> contains a `defaultMessage` prop.\n        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n    }\n    else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n        onError(new error_1.MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.NumberFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n    }\n    else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length &&\n        onError) {\n        onError(new error_1.MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n    }\n    verifyConfigMessages(resolvedConfig);\n    return tslib_1.__assign(tslib_1.__assign({}, resolvedConfig), { formatters: formatters, formatNumber: number_1.formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: number_1.formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: relativeTime_1.formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: dateTime_1.formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: dateTime_1.formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: dateTime_1.formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: dateTime_1.formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: dateTime_1.formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: plural_1.formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), \n        // @ts-expect-error TODO: will get to this later\n        formatMessage: message_1.formatMessage.bind(null, resolvedConfig, formatters), \n        // @ts-expect-error TODO: will get to this later\n        $t: message_1.formatMessage.bind(null, resolvedConfig, formatters), formatList: list_1.formatList.bind(null, resolvedConfig, formatters.getListFormat), formatListToParts: list_1.formatListToParts.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: displayName_1.formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });\n}\nexports.createIntl = createIntl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}