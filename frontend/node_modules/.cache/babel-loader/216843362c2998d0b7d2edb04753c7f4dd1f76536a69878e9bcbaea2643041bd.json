{"ast":null,"code":"'use strict';\n\n// This example is used in the documentation.\n\n// How might I add my own support for --no-foo?\n\n// 1. const { parseArgs } = require('node:util'); // from node\n// 2. const { parseArgs } = require('@pkgjs/parseargs'); // from package\nconst {\n  parseArgs\n} = require('..'); // in repo\n\nconst options = {\n  'color': {\n    type: 'boolean'\n  },\n  'no-color': {\n    type: 'boolean'\n  },\n  'logfile': {\n    type: 'string'\n  },\n  'no-logfile': {\n    type: 'boolean'\n  }\n};\nconst {\n  values,\n  tokens\n} = parseArgs({\n  options,\n  tokens: true\n});\n\n// Reprocess the option tokens and overwrite the returned values.\ntokens.filter(token => token.kind === 'option').forEach(token => {\n  if (token.name.startsWith('no-')) {\n    // Store foo:false for --no-foo\n    const positiveName = token.name.slice(3);\n    values[positiveName] = false;\n    delete values[token.name];\n  } else {\n    // Resave value so last one wins if both --foo and --no-foo.\n    values[token.name] = token.value ?? true;\n  }\n});\nconst color = values.color;\nconst logfile = values.logfile ?? 'default.log';\nconsole.log({\n  logfile,\n  color\n});\n\n// Try the following:\n//    node negate.js\n//    node negate.js --no-logfile --no-color\n//    negate.js --logfile=test.log --color\n//    node negate.js --no-logfile --logfile=test.log --color --no-color","map":{"version":3,"names":["parseArgs","require","options","type","values","tokens","filter","token","kind","forEach","name","startsWith","positiveName","slice","value","color","logfile","console","log"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pkgjs/parseargs/examples/negate.js"],"sourcesContent":["'use strict';\n\n// This example is used in the documentation.\n\n// How might I add my own support for --no-foo?\n\n// 1. const { parseArgs } = require('node:util'); // from node\n// 2. const { parseArgs } = require('@pkgjs/parseargs'); // from package\nconst { parseArgs } = require('..'); // in repo\n\nconst options = {\n  'color': { type: 'boolean' },\n  'no-color': { type: 'boolean' },\n  'logfile': { type: 'string' },\n  'no-logfile': { type: 'boolean' },\n};\nconst { values, tokens } = parseArgs({ options, tokens: true });\n\n// Reprocess the option tokens and overwrite the returned values.\ntokens\n  .filter((token) => token.kind === 'option')\n  .forEach((token) => {\n    if (token.name.startsWith('no-')) {\n      // Store foo:false for --no-foo\n      const positiveName = token.name.slice(3);\n      values[positiveName] = false;\n      delete values[token.name];\n    } else {\n      // Resave value so last one wins if both --foo and --no-foo.\n      values[token.name] = token.value ?? true;\n    }\n  });\n\nconst color = values.color;\nconst logfile = values.logfile ?? 'default.log';\n\nconsole.log({ logfile, color });\n\n// Try the following:\n//    node negate.js\n//    node negate.js --no-logfile --no-color\n//    negate.js --logfile=test.log --color\n//    node negate.js --no-logfile --logfile=test.log --color --no-color\n"],"mappings":"AAAA,YAAY;;AAEZ;;AAEA;;AAEA;AACA;AACA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;AAErC,MAAMC,OAAO,GAAG;EACd,OAAO,EAAE;IAAEC,IAAI,EAAE;EAAU,CAAC;EAC5B,UAAU,EAAE;IAAEA,IAAI,EAAE;EAAU,CAAC;EAC/B,SAAS,EAAE;IAAEA,IAAI,EAAE;EAAS,CAAC;EAC7B,YAAY,EAAE;IAAEA,IAAI,EAAE;EAAU;AAClC,CAAC;AACD,MAAM;EAAEC,MAAM;EAAEC;AAAO,CAAC,GAAGL,SAAS,CAAC;EAAEE,OAAO;EAAEG,MAAM,EAAE;AAAK,CAAC,CAAC;;AAE/D;AACAA,MAAM,CACHC,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,KAAK,QAAQ,CAAC,CAC1CC,OAAO,CAAEF,KAAK,IAAK;EAClB,IAAIA,KAAK,CAACG,IAAI,CAACC,UAAU,CAAC,KAAK,CAAC,EAAE;IAChC;IACA,MAAMC,YAAY,GAAGL,KAAK,CAACG,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;IACxCT,MAAM,CAACQ,YAAY,CAAC,GAAG,KAAK;IAC5B,OAAOR,MAAM,CAACG,KAAK,CAACG,IAAI,CAAC;EAC3B,CAAC,MAAM;IACL;IACAN,MAAM,CAACG,KAAK,CAACG,IAAI,CAAC,GAAGH,KAAK,CAACO,KAAK,IAAI,IAAI;EAC1C;AACF,CAAC,CAAC;AAEJ,MAAMC,KAAK,GAAGX,MAAM,CAACW,KAAK;AAC1B,MAAMC,OAAO,GAAGZ,MAAM,CAACY,OAAO,IAAI,aAAa;AAE/CC,OAAO,CAACC,GAAG,CAAC;EAAEF,OAAO;EAAED;AAAM,CAAC,CAAC;;AAE/B;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}