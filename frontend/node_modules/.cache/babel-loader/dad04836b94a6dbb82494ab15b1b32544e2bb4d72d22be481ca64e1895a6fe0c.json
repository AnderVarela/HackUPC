{"ast":null,"code":"\"use strict\";\n\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/value\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValueCheck = exports.ValueCheckDereferenceError = exports.ValueCheckUnknownTypeError = void 0;\nconst Types = require(\"../typebox\");\nconst index_1 = require(\"../system/index\");\nconst hash_1 = require(\"./hash\");\n// -------------------------------------------------------------------------\n// Errors\n// -------------------------------------------------------------------------\nclass ValueCheckUnknownTypeError extends Error {\n  constructor(schema) {\n    super(`ValueCheck: ${schema[Types.Kind] ? `Unknown type '${schema[Types.Kind]}'` : 'Unknown type'}`);\n    this.schema = schema;\n  }\n}\nexports.ValueCheckUnknownTypeError = ValueCheckUnknownTypeError;\nclass ValueCheckDereferenceError extends Error {\n  constructor(schema) {\n    super(`ValueCheck: Unable to dereference schema with $id '${schema.$ref}'`);\n    this.schema = schema;\n  }\n}\nexports.ValueCheckDereferenceError = ValueCheckDereferenceError;\nvar ValueCheck;\n(function (ValueCheck) {\n  // ----------------------------------------------------------------------\n  // Guards\n  // ----------------------------------------------------------------------\n  function IsBigInt(value) {\n    return typeof value === 'bigint';\n  }\n  function IsInteger(value) {\n    return globalThis.Number.isInteger(value);\n  }\n  function IsString(value) {\n    return typeof value === 'string';\n  }\n  function IsDefined(value) {\n    return value !== undefined;\n  }\n  // ----------------------------------------------------------------------\n  // Policies\n  // ----------------------------------------------------------------------\n  function IsExactOptionalProperty(value, key) {\n    return index_1.TypeSystem.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n  }\n  function IsObject(value) {\n    const result = typeof value === 'object' && value !== null;\n    return index_1.TypeSystem.AllowArrayObjects ? result : result && !globalThis.Array.isArray(value);\n  }\n  function IsRecordObject(value) {\n    return IsObject(value) && !(value instanceof globalThis.Date) && !(value instanceof globalThis.Uint8Array);\n  }\n  function IsNumber(value) {\n    const result = typeof value === 'number';\n    return index_1.TypeSystem.AllowNaN ? result : result && globalThis.Number.isFinite(value);\n  }\n  function IsVoid(value) {\n    const result = value === undefined;\n    return index_1.TypeSystem.AllowVoidNull ? result || value === null : result;\n  }\n  // ----------------------------------------------------------------------\n  // Types\n  // ----------------------------------------------------------------------\n  function Any(schema, references, value) {\n    return true;\n  }\n  function Array(schema, references, value) {\n    if (!globalThis.Array.isArray(value)) {\n      return false;\n    }\n    if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {\n      return false;\n    }\n    if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {\n      return false;\n    }\n    // prettier-ignore\n    if (schema.uniqueItems === true && !function () {\n      const set = new Set();\n      for (const element of value) {\n        const hashed = hash_1.ValueHash.Create(element);\n        if (set.has(hashed)) {\n          return false;\n        } else {\n          set.add(hashed);\n        }\n      }\n      return true;\n    }()) {\n      return false;\n    }\n    return value.every(value => Visit(schema.items, references, value));\n  }\n  function BigInt(schema, references, value) {\n    if (!IsBigInt(value)) {\n      return false;\n    }\n    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === globalThis.BigInt(0))) {\n      return false;\n    }\n    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n      return false;\n    }\n    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n      return false;\n    }\n    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n      return false;\n    }\n    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n      return false;\n    }\n    return true;\n  }\n  function Boolean(schema, references, value) {\n    return typeof value === 'boolean';\n  }\n  function Constructor(schema, references, value) {\n    return Visit(schema.returns, references, value.prototype);\n  }\n  function Date(schema, references, value) {\n    if (!(value instanceof globalThis.Date)) {\n      return false;\n    }\n    if (!IsNumber(value.getTime())) {\n      return false;\n    }\n    if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {\n      return false;\n    }\n    if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {\n      return false;\n    }\n    if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {\n      return false;\n    }\n    if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {\n      return false;\n    }\n    return true;\n  }\n  function Function(schema, references, value) {\n    return typeof value === 'function';\n  }\n  function Integer(schema, references, value) {\n    if (!IsInteger(value)) {\n      return false;\n    }\n    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n      return false;\n    }\n    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n      return false;\n    }\n    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n      return false;\n    }\n    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n      return false;\n    }\n    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n      return false;\n    }\n    return true;\n  }\n  function Intersect(schema, references, value) {\n    if (!schema.allOf.every(schema => Visit(schema, references, value))) {\n      return false;\n    } else if (schema.unevaluatedProperties === false) {\n      const schemaKeys = Types.KeyResolver.Resolve(schema);\n      const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n      return valueKeys.every(key => schemaKeys.includes(key));\n    } else if (Types.TypeGuard.TSchema(schema.unevaluatedProperties)) {\n      const schemaKeys = Types.KeyResolver.Resolve(schema);\n      const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n      return valueKeys.every(key => schemaKeys.includes(key) || Visit(schema.unevaluatedProperties, references, value[key]));\n    } else {\n      return true;\n    }\n  }\n  function Literal(schema, references, value) {\n    return value === schema.const;\n  }\n  function Never(schema, references, value) {\n    return false;\n  }\n  function Not(schema, references, value) {\n    return !Visit(schema.allOf[0].not, references, value) && Visit(schema.allOf[1], references, value);\n  }\n  function Null(schema, references, value) {\n    return value === null;\n  }\n  function Number(schema, references, value) {\n    if (!IsNumber(value)) {\n      return false;\n    }\n    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n      return false;\n    }\n    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n      return false;\n    }\n    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n      return false;\n    }\n    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n      return false;\n    }\n    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n      return false;\n    }\n    return true;\n  }\n  function Object(schema, references, value) {\n    if (!IsObject(value)) {\n      return false;\n    }\n    if (IsDefined(schema.minProperties) && !(globalThis.Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n      return false;\n    }\n    if (IsDefined(schema.maxProperties) && !(globalThis.Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n      return false;\n    }\n    const knownKeys = globalThis.Object.getOwnPropertyNames(schema.properties);\n    for (const knownKey of knownKeys) {\n      const property = schema.properties[knownKey];\n      if (schema.required && schema.required.includes(knownKey)) {\n        if (!Visit(property, references, value[knownKey])) {\n          return false;\n        }\n        if (Types.ExtendsUndefined.Check(property)) {\n          return knownKey in value;\n        }\n      } else {\n        if (IsExactOptionalProperty(value, knownKey) && !Visit(property, references, value[knownKey])) {\n          return false;\n        }\n      }\n    }\n    if (schema.additionalProperties === false) {\n      const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n      // optimization: value is valid if schemaKey length matches the valueKey length\n      if (schema.required && schema.required.length === knownKeys.length && valueKeys.length === knownKeys.length) {\n        return true;\n      } else {\n        return valueKeys.every(valueKey => knownKeys.includes(valueKey));\n      }\n    } else if (typeof schema.additionalProperties === 'object') {\n      const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n      return valueKeys.every(key => knownKeys.includes(key) || Visit(schema.additionalProperties, references, value[key]));\n    } else {\n      return true;\n    }\n  }\n  function Promise(schema, references, value) {\n    return typeof value === 'object' && typeof value.then === 'function';\n  }\n  function Record(schema, references, value) {\n    if (!IsRecordObject(value)) {\n      return false;\n    }\n    if (IsDefined(schema.minProperties) && !(globalThis.Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n      return false;\n    }\n    if (IsDefined(schema.maxProperties) && !(globalThis.Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n      return false;\n    }\n    const [keyPattern, valueSchema] = globalThis.Object.entries(schema.patternProperties)[0];\n    const regex = new RegExp(keyPattern);\n    if (!globalThis.Object.getOwnPropertyNames(value).every(key => regex.test(key))) {\n      return false;\n    }\n    for (const propValue of globalThis.Object.values(value)) {\n      if (!Visit(valueSchema, references, propValue)) return false;\n    }\n    return true;\n  }\n  function Ref(schema, references, value) {\n    const index = references.findIndex(foreign => foreign.$id === schema.$ref);\n    if (index === -1) throw new ValueCheckDereferenceError(schema);\n    const target = references[index];\n    return Visit(target, references, value);\n  }\n  function String(schema, references, value) {\n    if (!IsString(value)) {\n      return false;\n    }\n    if (IsDefined(schema.minLength)) {\n      if (!(value.length >= schema.minLength)) return false;\n    }\n    if (IsDefined(schema.maxLength)) {\n      if (!(value.length <= schema.maxLength)) return false;\n    }\n    if (IsDefined(schema.pattern)) {\n      const regex = new RegExp(schema.pattern);\n      if (!regex.test(value)) return false;\n    }\n    if (IsDefined(schema.format)) {\n      if (!Types.FormatRegistry.Has(schema.format)) return false;\n      const func = Types.FormatRegistry.Get(schema.format);\n      return func(value);\n    }\n    return true;\n  }\n  function Symbol(schema, references, value) {\n    if (!(typeof value === 'symbol')) {\n      return false;\n    }\n    return true;\n  }\n  function TemplateLiteral(schema, references, value) {\n    if (!IsString(value)) {\n      return false;\n    }\n    return new RegExp(schema.pattern).test(value);\n  }\n  function This(schema, references, value) {\n    const index = references.findIndex(foreign => foreign.$id === schema.$ref);\n    if (index === -1) throw new ValueCheckDereferenceError(schema);\n    const target = references[index];\n    return Visit(target, references, value);\n  }\n  function Tuple(schema, references, value) {\n    if (!globalThis.Array.isArray(value)) {\n      return false;\n    }\n    if (schema.items === undefined && !(value.length === 0)) {\n      return false;\n    }\n    if (!(value.length === schema.maxItems)) {\n      return false;\n    }\n    if (!schema.items) {\n      return true;\n    }\n    for (let i = 0; i < schema.items.length; i++) {\n      if (!Visit(schema.items[i], references, value[i])) return false;\n    }\n    return true;\n  }\n  function Undefined(schema, references, value) {\n    return value === undefined;\n  }\n  function Union(schema, references, value) {\n    return schema.anyOf.some(inner => Visit(inner, references, value));\n  }\n  function Uint8Array(schema, references, value) {\n    if (!(value instanceof globalThis.Uint8Array)) {\n      return false;\n    }\n    if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {\n      return false;\n    }\n    if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {\n      return false;\n    }\n    return true;\n  }\n  function Unknown(schema, references, value) {\n    return true;\n  }\n  function Void(schema, references, value) {\n    return IsVoid(value);\n  }\n  function UserDefined(schema, references, value) {\n    if (!Types.TypeRegistry.Has(schema[Types.Kind])) return false;\n    const func = Types.TypeRegistry.Get(schema[Types.Kind]);\n    return func(schema, value);\n  }\n  function Visit(schema, references, value) {\n    const references_ = IsDefined(schema.$id) ? [...references, schema] : references;\n    const schema_ = schema;\n    switch (schema_[Types.Kind]) {\n      case 'Any':\n        return Any(schema_, references_, value);\n      case 'Array':\n        return Array(schema_, references_, value);\n      case 'BigInt':\n        return BigInt(schema_, references_, value);\n      case 'Boolean':\n        return Boolean(schema_, references_, value);\n      case 'Constructor':\n        return Constructor(schema_, references_, value);\n      case 'Date':\n        return Date(schema_, references_, value);\n      case 'Function':\n        return Function(schema_, references_, value);\n      case 'Integer':\n        return Integer(schema_, references_, value);\n      case 'Intersect':\n        return Intersect(schema_, references_, value);\n      case 'Literal':\n        return Literal(schema_, references_, value);\n      case 'Never':\n        return Never(schema_, references_, value);\n      case 'Not':\n        return Not(schema_, references_, value);\n      case 'Null':\n        return Null(schema_, references_, value);\n      case 'Number':\n        return Number(schema_, references_, value);\n      case 'Object':\n        return Object(schema_, references_, value);\n      case 'Promise':\n        return Promise(schema_, references_, value);\n      case 'Record':\n        return Record(schema_, references_, value);\n      case 'Ref':\n        return Ref(schema_, references_, value);\n      case 'String':\n        return String(schema_, references_, value);\n      case 'Symbol':\n        return Symbol(schema_, references_, value);\n      case 'TemplateLiteral':\n        return TemplateLiteral(schema_, references_, value);\n      case 'This':\n        return This(schema_, references_, value);\n      case 'Tuple':\n        return Tuple(schema_, references_, value);\n      case 'Undefined':\n        return Undefined(schema_, references_, value);\n      case 'Union':\n        return Union(schema_, references_, value);\n      case 'Uint8Array':\n        return Uint8Array(schema_, references_, value);\n      case 'Unknown':\n        return Unknown(schema_, references_, value);\n      case 'Void':\n        return Void(schema_, references_, value);\n      default:\n        if (!Types.TypeRegistry.Has(schema_[Types.Kind])) throw new ValueCheckUnknownTypeError(schema_);\n        return UserDefined(schema_, references_, value);\n    }\n  }\n  // -------------------------------------------------------------------------\n  // Check\n  // -------------------------------------------------------------------------\n  function Check(schema, references, value) {\n    return Visit(schema, references, value);\n  }\n  ValueCheck.Check = Check;\n})(ValueCheck = exports.ValueCheck || (exports.ValueCheck = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","ValueCheck","ValueCheckDereferenceError","ValueCheckUnknownTypeError","Types","require","index_1","hash_1","Error","constructor","schema","Kind","$ref","IsBigInt","IsInteger","globalThis","Number","isInteger","IsString","IsDefined","undefined","IsExactOptionalProperty","key","TypeSystem","ExactOptionalPropertyTypes","IsObject","result","AllowArrayObjects","Array","isArray","IsRecordObject","Date","Uint8Array","IsNumber","AllowNaN","isFinite","IsVoid","AllowVoidNull","Any","references","minItems","length","maxItems","uniqueItems","set","Set","element","hashed","ValueHash","Create","has","add","every","Visit","items","BigInt","multipleOf","exclusiveMinimum","exclusiveMaximum","minimum","maximum","Boolean","Constructor","returns","prototype","getTime","exclusiveMinimumTimestamp","exclusiveMaximumTimestamp","minimumTimestamp","maximumTimestamp","Function","Integer","Intersect","allOf","unevaluatedProperties","schemaKeys","KeyResolver","Resolve","valueKeys","getOwnPropertyNames","includes","TypeGuard","TSchema","Literal","const","Never","Not","not","Null","minProperties","maxProperties","knownKeys","properties","knownKey","property","required","ExtendsUndefined","Check","additionalProperties","valueKey","Promise","then","Record","keyPattern","valueSchema","entries","patternProperties","regex","RegExp","test","propValue","values","Ref","index","findIndex","foreign","$id","target","String","minLength","maxLength","pattern","format","FormatRegistry","Has","func","Get","Symbol","TemplateLiteral","This","Tuple","i","Undefined","Union","anyOf","some","inner","maxByteLength","minByteLength","Unknown","Void","UserDefined","TypeRegistry","references_","schema_"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@sinclair/typebox/value/check.js"],"sourcesContent":["\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/value\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueCheck = exports.ValueCheckDereferenceError = exports.ValueCheckUnknownTypeError = void 0;\nconst Types = require(\"../typebox\");\nconst index_1 = require(\"../system/index\");\nconst hash_1 = require(\"./hash\");\n// -------------------------------------------------------------------------\n// Errors\n// -------------------------------------------------------------------------\nclass ValueCheckUnknownTypeError extends Error {\n    constructor(schema) {\n        super(`ValueCheck: ${schema[Types.Kind] ? `Unknown type '${schema[Types.Kind]}'` : 'Unknown type'}`);\n        this.schema = schema;\n    }\n}\nexports.ValueCheckUnknownTypeError = ValueCheckUnknownTypeError;\nclass ValueCheckDereferenceError extends Error {\n    constructor(schema) {\n        super(`ValueCheck: Unable to dereference schema with $id '${schema.$ref}'`);\n        this.schema = schema;\n    }\n}\nexports.ValueCheckDereferenceError = ValueCheckDereferenceError;\nvar ValueCheck;\n(function (ValueCheck) {\n    // ----------------------------------------------------------------------\n    // Guards\n    // ----------------------------------------------------------------------\n    function IsBigInt(value) {\n        return typeof value === 'bigint';\n    }\n    function IsInteger(value) {\n        return globalThis.Number.isInteger(value);\n    }\n    function IsString(value) {\n        return typeof value === 'string';\n    }\n    function IsDefined(value) {\n        return value !== undefined;\n    }\n    // ----------------------------------------------------------------------\n    // Policies\n    // ----------------------------------------------------------------------\n    function IsExactOptionalProperty(value, key) {\n        return index_1.TypeSystem.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n    }\n    function IsObject(value) {\n        const result = typeof value === 'object' && value !== null;\n        return index_1.TypeSystem.AllowArrayObjects ? result : result && !globalThis.Array.isArray(value);\n    }\n    function IsRecordObject(value) {\n        return IsObject(value) && !(value instanceof globalThis.Date) && !(value instanceof globalThis.Uint8Array);\n    }\n    function IsNumber(value) {\n        const result = typeof value === 'number';\n        return index_1.TypeSystem.AllowNaN ? result : result && globalThis.Number.isFinite(value);\n    }\n    function IsVoid(value) {\n        const result = value === undefined;\n        return index_1.TypeSystem.AllowVoidNull ? result || value === null : result;\n    }\n    // ----------------------------------------------------------------------\n    // Types\n    // ----------------------------------------------------------------------\n    function Any(schema, references, value) {\n        return true;\n    }\n    function Array(schema, references, value) {\n        if (!globalThis.Array.isArray(value)) {\n            return false;\n        }\n        if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {\n            return false;\n        }\n        if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {\n            return false;\n        }\n        // prettier-ignore\n        if (schema.uniqueItems === true && !((function () { const set = new Set(); for (const element of value) {\n            const hashed = hash_1.ValueHash.Create(element);\n            if (set.has(hashed)) {\n                return false;\n            }\n            else {\n                set.add(hashed);\n            }\n        } return true; })())) {\n            return false;\n        }\n        return value.every((value) => Visit(schema.items, references, value));\n    }\n    function BigInt(schema, references, value) {\n        if (!IsBigInt(value)) {\n            return false;\n        }\n        if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === globalThis.BigInt(0))) {\n            return false;\n        }\n        if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n            return false;\n        }\n        if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n            return false;\n        }\n        if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n            return false;\n        }\n        if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n            return false;\n        }\n        return true;\n    }\n    function Boolean(schema, references, value) {\n        return typeof value === 'boolean';\n    }\n    function Constructor(schema, references, value) {\n        return Visit(schema.returns, references, value.prototype);\n    }\n    function Date(schema, references, value) {\n        if (!(value instanceof globalThis.Date)) {\n            return false;\n        }\n        if (!IsNumber(value.getTime())) {\n            return false;\n        }\n        if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {\n            return false;\n        }\n        if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {\n            return false;\n        }\n        if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {\n            return false;\n        }\n        if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {\n            return false;\n        }\n        return true;\n    }\n    function Function(schema, references, value) {\n        return typeof value === 'function';\n    }\n    function Integer(schema, references, value) {\n        if (!IsInteger(value)) {\n            return false;\n        }\n        if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n            return false;\n        }\n        if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n            return false;\n        }\n        if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n            return false;\n        }\n        if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n            return false;\n        }\n        if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n            return false;\n        }\n        return true;\n    }\n    function Intersect(schema, references, value) {\n        if (!schema.allOf.every((schema) => Visit(schema, references, value))) {\n            return false;\n        }\n        else if (schema.unevaluatedProperties === false) {\n            const schemaKeys = Types.KeyResolver.Resolve(schema);\n            const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n            return valueKeys.every((key) => schemaKeys.includes(key));\n        }\n        else if (Types.TypeGuard.TSchema(schema.unevaluatedProperties)) {\n            const schemaKeys = Types.KeyResolver.Resolve(schema);\n            const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n            return valueKeys.every((key) => schemaKeys.includes(key) || Visit(schema.unevaluatedProperties, references, value[key]));\n        }\n        else {\n            return true;\n        }\n    }\n    function Literal(schema, references, value) {\n        return value === schema.const;\n    }\n    function Never(schema, references, value) {\n        return false;\n    }\n    function Not(schema, references, value) {\n        return !Visit(schema.allOf[0].not, references, value) && Visit(schema.allOf[1], references, value);\n    }\n    function Null(schema, references, value) {\n        return value === null;\n    }\n    function Number(schema, references, value) {\n        if (!IsNumber(value)) {\n            return false;\n        }\n        if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n            return false;\n        }\n        if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n            return false;\n        }\n        if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n            return false;\n        }\n        if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n            return false;\n        }\n        if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n            return false;\n        }\n        return true;\n    }\n    function Object(schema, references, value) {\n        if (!IsObject(value)) {\n            return false;\n        }\n        if (IsDefined(schema.minProperties) && !(globalThis.Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n            return false;\n        }\n        if (IsDefined(schema.maxProperties) && !(globalThis.Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n            return false;\n        }\n        const knownKeys = globalThis.Object.getOwnPropertyNames(schema.properties);\n        for (const knownKey of knownKeys) {\n            const property = schema.properties[knownKey];\n            if (schema.required && schema.required.includes(knownKey)) {\n                if (!Visit(property, references, value[knownKey])) {\n                    return false;\n                }\n                if (Types.ExtendsUndefined.Check(property)) {\n                    return knownKey in value;\n                }\n            }\n            else {\n                if (IsExactOptionalProperty(value, knownKey) && !Visit(property, references, value[knownKey])) {\n                    return false;\n                }\n            }\n        }\n        if (schema.additionalProperties === false) {\n            const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n            // optimization: value is valid if schemaKey length matches the valueKey length\n            if (schema.required && schema.required.length === knownKeys.length && valueKeys.length === knownKeys.length) {\n                return true;\n            }\n            else {\n                return valueKeys.every((valueKey) => knownKeys.includes(valueKey));\n            }\n        }\n        else if (typeof schema.additionalProperties === 'object') {\n            const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n            return valueKeys.every((key) => knownKeys.includes(key) || Visit(schema.additionalProperties, references, value[key]));\n        }\n        else {\n            return true;\n        }\n    }\n    function Promise(schema, references, value) {\n        return typeof value === 'object' && typeof value.then === 'function';\n    }\n    function Record(schema, references, value) {\n        if (!IsRecordObject(value)) {\n            return false;\n        }\n        if (IsDefined(schema.minProperties) && !(globalThis.Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n            return false;\n        }\n        if (IsDefined(schema.maxProperties) && !(globalThis.Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n            return false;\n        }\n        const [keyPattern, valueSchema] = globalThis.Object.entries(schema.patternProperties)[0];\n        const regex = new RegExp(keyPattern);\n        if (!globalThis.Object.getOwnPropertyNames(value).every((key) => regex.test(key))) {\n            return false;\n        }\n        for (const propValue of globalThis.Object.values(value)) {\n            if (!Visit(valueSchema, references, propValue))\n                return false;\n        }\n        return true;\n    }\n    function Ref(schema, references, value) {\n        const index = references.findIndex((foreign) => foreign.$id === schema.$ref);\n        if (index === -1)\n            throw new ValueCheckDereferenceError(schema);\n        const target = references[index];\n        return Visit(target, references, value);\n    }\n    function String(schema, references, value) {\n        if (!IsString(value)) {\n            return false;\n        }\n        if (IsDefined(schema.minLength)) {\n            if (!(value.length >= schema.minLength))\n                return false;\n        }\n        if (IsDefined(schema.maxLength)) {\n            if (!(value.length <= schema.maxLength))\n                return false;\n        }\n        if (IsDefined(schema.pattern)) {\n            const regex = new RegExp(schema.pattern);\n            if (!regex.test(value))\n                return false;\n        }\n        if (IsDefined(schema.format)) {\n            if (!Types.FormatRegistry.Has(schema.format))\n                return false;\n            const func = Types.FormatRegistry.Get(schema.format);\n            return func(value);\n        }\n        return true;\n    }\n    function Symbol(schema, references, value) {\n        if (!(typeof value === 'symbol')) {\n            return false;\n        }\n        return true;\n    }\n    function TemplateLiteral(schema, references, value) {\n        if (!IsString(value)) {\n            return false;\n        }\n        return new RegExp(schema.pattern).test(value);\n    }\n    function This(schema, references, value) {\n        const index = references.findIndex((foreign) => foreign.$id === schema.$ref);\n        if (index === -1)\n            throw new ValueCheckDereferenceError(schema);\n        const target = references[index];\n        return Visit(target, references, value);\n    }\n    function Tuple(schema, references, value) {\n        if (!globalThis.Array.isArray(value)) {\n            return false;\n        }\n        if (schema.items === undefined && !(value.length === 0)) {\n            return false;\n        }\n        if (!(value.length === schema.maxItems)) {\n            return false;\n        }\n        if (!schema.items) {\n            return true;\n        }\n        for (let i = 0; i < schema.items.length; i++) {\n            if (!Visit(schema.items[i], references, value[i]))\n                return false;\n        }\n        return true;\n    }\n    function Undefined(schema, references, value) {\n        return value === undefined;\n    }\n    function Union(schema, references, value) {\n        return schema.anyOf.some((inner) => Visit(inner, references, value));\n    }\n    function Uint8Array(schema, references, value) {\n        if (!(value instanceof globalThis.Uint8Array)) {\n            return false;\n        }\n        if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {\n            return false;\n        }\n        if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {\n            return false;\n        }\n        return true;\n    }\n    function Unknown(schema, references, value) {\n        return true;\n    }\n    function Void(schema, references, value) {\n        return IsVoid(value);\n    }\n    function UserDefined(schema, references, value) {\n        if (!Types.TypeRegistry.Has(schema[Types.Kind]))\n            return false;\n        const func = Types.TypeRegistry.Get(schema[Types.Kind]);\n        return func(schema, value);\n    }\n    function Visit(schema, references, value) {\n        const references_ = IsDefined(schema.$id) ? [...references, schema] : references;\n        const schema_ = schema;\n        switch (schema_[Types.Kind]) {\n            case 'Any':\n                return Any(schema_, references_, value);\n            case 'Array':\n                return Array(schema_, references_, value);\n            case 'BigInt':\n                return BigInt(schema_, references_, value);\n            case 'Boolean':\n                return Boolean(schema_, references_, value);\n            case 'Constructor':\n                return Constructor(schema_, references_, value);\n            case 'Date':\n                return Date(schema_, references_, value);\n            case 'Function':\n                return Function(schema_, references_, value);\n            case 'Integer':\n                return Integer(schema_, references_, value);\n            case 'Intersect':\n                return Intersect(schema_, references_, value);\n            case 'Literal':\n                return Literal(schema_, references_, value);\n            case 'Never':\n                return Never(schema_, references_, value);\n            case 'Not':\n                return Not(schema_, references_, value);\n            case 'Null':\n                return Null(schema_, references_, value);\n            case 'Number':\n                return Number(schema_, references_, value);\n            case 'Object':\n                return Object(schema_, references_, value);\n            case 'Promise':\n                return Promise(schema_, references_, value);\n            case 'Record':\n                return Record(schema_, references_, value);\n            case 'Ref':\n                return Ref(schema_, references_, value);\n            case 'String':\n                return String(schema_, references_, value);\n            case 'Symbol':\n                return Symbol(schema_, references_, value);\n            case 'TemplateLiteral':\n                return TemplateLiteral(schema_, references_, value);\n            case 'This':\n                return This(schema_, references_, value);\n            case 'Tuple':\n                return Tuple(schema_, references_, value);\n            case 'Undefined':\n                return Undefined(schema_, references_, value);\n            case 'Union':\n                return Union(schema_, references_, value);\n            case 'Uint8Array':\n                return Uint8Array(schema_, references_, value);\n            case 'Unknown':\n                return Unknown(schema_, references_, value);\n            case 'Void':\n                return Void(schema_, references_, value);\n            default:\n                if (!Types.TypeRegistry.Has(schema_[Types.Kind]))\n                    throw new ValueCheckUnknownTypeError(schema_);\n                return UserDefined(schema_, references_, value);\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Check\n    // -------------------------------------------------------------------------\n    function Check(schema, references, value) {\n        return Visit(schema, references, value);\n    }\n    ValueCheck.Check = Check;\n})(ValueCheck = exports.ValueCheck || (exports.ValueCheck = {}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}