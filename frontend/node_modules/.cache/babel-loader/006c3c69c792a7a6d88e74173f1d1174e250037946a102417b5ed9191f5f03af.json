{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\n// tslint regex\n// https://github.com/palantir/tslint/blob/95d9d958833fd9dc0002d18cbe34db20d0fbf437/src/enableDisableRules.ts#L32\nconst ENABLE_DISABLE_REGEX = /^\\s*tslint:(enable|disable)(?:-(line|next-line))?(:|\\s|$)/;\nconst toText = (text, type) => type === utils_1.AST_TOKEN_TYPES.Line ? ['//', text.trim()].join(' ') : ['/*', text.trim(), '*/'].join(' ');\nexports.default = util.createRule({\n  name: 'ban-tslint-comment',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow `// tslint:<rule-flag>` comments',\n      recommended: 'strict'\n    },\n    messages: {\n      commentDetected: 'tslint comment detected: \"{{ text }}\"'\n    },\n    schema: [],\n    fixable: 'code'\n  },\n  defaultOptions: [],\n  create: context => {\n    const sourceCode = context.getSourceCode();\n    return {\n      Program() {\n        const comments = sourceCode.getAllComments();\n        comments.forEach(c => {\n          if (ENABLE_DISABLE_REGEX.test(c.value)) {\n            context.report({\n              data: {\n                text: toText(c.value, c.type)\n              },\n              node: c,\n              messageId: 'commentDetected',\n              fix(fixer) {\n                const rangeStart = sourceCode.getIndexFromLoc({\n                  column: c.loc.start.column > 0 ? c.loc.start.column - 1 : 0,\n                  line: c.loc.start.line\n                });\n                const rangeEnd = sourceCode.getIndexFromLoc({\n                  column: c.loc.end.column,\n                  line: c.loc.end.line\n                });\n                return fixer.removeRange([rangeStart, rangeEnd + 1]);\n              }\n            });\n          }\n        });\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","ENABLE_DISABLE_REGEX","toText","text","type","AST_TOKEN_TYPES","Line","trim","join","exports","default","createRule","name","meta","docs","description","recommended","messages","commentDetected","schema","fixable","defaultOptions","create","context","sourceCode","getSourceCode","Program","comments","getAllComments","forEach","c","test","value","report","data","node","messageId","fix","fixer","rangeStart","getIndexFromLoc","column","loc","start","line","rangeEnd","end","removeRange"],"sources":["../../src/rules/ban-tslint-comment.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AAEA;AACA;AACA,MAAMG,oBAAoB,GACxB,2DAA2D;AAE7D,MAAMC,MAAM,GAAGA,CACbC,IAAY,EACZC,IAAkD,KAElDA,IAAI,KAAKP,OAAA,CAAAQ,eAAe,CAACC,IAAI,GACzB,CAAC,IAAI,EAAEH,IAAI,CAACI,IAAI,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAC7B,CAAC,IAAI,EAAEL,IAAI,CAACI,IAAI,EAAE,EAAE,IAAI,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AAEzCC,OAAA,CAAAC,OAAA,GAAeX,IAAI,CAACY,UAAU,CAAC;EAC7BC,IAAI,EAAE,oBAAoB;EAC1BC,IAAI,EAAE;IACJT,IAAI,EAAE,YAAY;IAClBU,IAAI,EAAE;MACJC,WAAW,EAAE,2CAA2C;MACxDC,WAAW,EAAE;KACd;IACDC,QAAQ,EAAE;MACRC,eAAe,EAAE;KAClB;IACDC,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE;GACV;EACDC,cAAc,EAAE,EAAE;EAClBC,MAAM,EAAEC,OAAO,IAAG;IAChB,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,EAAE;IAC1C,OAAO;MACLC,OAAOA,CAAA;QACL,MAAMC,QAAQ,GAAGH,UAAU,CAACI,cAAc,EAAE;QAC5CD,QAAQ,CAACE,OAAO,CAACC,CAAC,IAAG;UACnB,IAAI7B,oBAAoB,CAAC8B,IAAI,CAACD,CAAC,CAACE,KAAK,CAAC,EAAE;YACtCT,OAAO,CAACU,MAAM,CAAC;cACbC,IAAI,EAAE;gBAAE/B,IAAI,EAAED,MAAM,CAAC4B,CAAC,CAACE,KAAK,EAAEF,CAAC,CAAC1B,IAAI;cAAC,CAAE;cACvC+B,IAAI,EAAEL,CAAC;cACPM,SAAS,EAAE,iBAAiB;cAC5BC,GAAGA,CAACC,KAAK;gBACP,MAAMC,UAAU,GAAGf,UAAU,CAACgB,eAAe,CAAC;kBAC5CC,MAAM,EAAEX,CAAC,CAACY,GAAG,CAACC,KAAK,CAACF,MAAM,GAAG,CAAC,GAAGX,CAAC,CAACY,GAAG,CAACC,KAAK,CAACF,MAAM,GAAG,CAAC,GAAG,CAAC;kBAC3DG,IAAI,EAAEd,CAAC,CAACY,GAAG,CAACC,KAAK,CAACC;iBACnB,CAAC;gBACF,MAAMC,QAAQ,GAAGrB,UAAU,CAACgB,eAAe,CAAC;kBAC1CC,MAAM,EAAEX,CAAC,CAACY,GAAG,CAACI,GAAG,CAACL,MAAM;kBACxBG,IAAI,EAAEd,CAAC,CAACY,GAAG,CAACI,GAAG,CAACF;iBACjB,CAAC;gBACF,OAAON,KAAK,CAACS,WAAW,CAAC,CAACR,UAAU,EAAEM,QAAQ,GAAG,CAAC,CAAC,CAAC;cACtD;aACD,CAAC;;QAEN,CAAC,CAAC;MACJ;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}