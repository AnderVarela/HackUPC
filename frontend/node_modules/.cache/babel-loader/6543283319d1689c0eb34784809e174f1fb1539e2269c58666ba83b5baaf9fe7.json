{"ast":null,"code":"var isMergeable = require('./is-mergeable');\nvar optimizeProperties = require('./properties/optimize');\nvar cloneArray = require('../../utils/clone-array');\nvar Token = require('../../tokenizer/token');\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\nfunction reduceNonAdjacent(tokens, context) {\n  var options = context.options;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var candidates = {};\n  var repeated = [];\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    var token = tokens[i];\n    if (token[0] != Token.RULE) {\n      continue;\n    } else if (token[2].length === 0) {\n      continue;\n    }\n    var selectorAsString = serializeRules(token[1]);\n    var isComplexAndNotSpecial = token[1].length > 1 && isMergeable(selectorAsString, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging);\n    var wrappedSelectors = wrappedSelectorsFrom(token[1]);\n    var selectors = isComplexAndNotSpecial ? [selectorAsString].concat(wrappedSelectors) : [selectorAsString];\n    for (var j = 0, m = selectors.length; j < m; j++) {\n      var selector = selectors[j];\n      if (!candidates[selector]) {\n        candidates[selector] = [];\n      } else {\n        repeated.push(selector);\n      }\n      candidates[selector].push({\n        where: i,\n        list: wrappedSelectors,\n        isPartial: isComplexAndNotSpecial && j > 0,\n        isComplex: isComplexAndNotSpecial && j === 0\n      });\n    }\n  }\n  reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context);\n  reduceComplexNonAdjacentCases(tokens, candidates, options, context);\n}\nfunction wrappedSelectorsFrom(list) {\n  var wrapped = [];\n  for (var i = 0; i < list.length; i++) {\n    wrapped.push([list[i][1]]);\n  }\n  return wrapped;\n}\nfunction reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context) {\n  function filterOut(idx, bodies) {\n    return data[idx].isPartial && bodies.length === 0;\n  }\n  function reduceBody(token, newBody, processedCount, tokenIdx) {\n    if (!data[processedCount - tokenIdx - 1].isPartial) {\n      token[2] = newBody;\n    }\n  }\n  for (var i = 0, l = repeated.length; i < l; i++) {\n    var selector = repeated[i];\n    var data = candidates[selector];\n    reduceSelector(tokens, data, {\n      filterOut: filterOut,\n      callback: reduceBody\n    }, options, context);\n  }\n}\nfunction reduceComplexNonAdjacentCases(tokens, candidates, options, context) {\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var localContext = {};\n  function filterOut(idx) {\n    return localContext.data[idx].where < localContext.intoPosition;\n  }\n  function collectReducedBodies(token, newBody, processedCount, tokenIdx) {\n    if (tokenIdx === 0) {\n      localContext.reducedBodies.push(newBody);\n    }\n  }\n  allSelectors: for (var complexSelector in candidates) {\n    var into = candidates[complexSelector];\n    if (!into[0].isComplex) {\n      continue;\n    }\n    var intoPosition = into[into.length - 1].where;\n    var intoToken = tokens[intoPosition];\n    var reducedBodies = [];\n    var selectors = isMergeable(complexSelector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) ? into[0].list : [complexSelector];\n    localContext.intoPosition = intoPosition;\n    localContext.reducedBodies = reducedBodies;\n    for (var j = 0, m = selectors.length; j < m; j++) {\n      var selector = selectors[j];\n      var data = candidates[selector];\n      if (data.length < 2) {\n        continue allSelectors;\n      }\n      localContext.data = data;\n      reduceSelector(tokens, data, {\n        filterOut: filterOut,\n        callback: collectReducedBodies\n      }, options, context);\n      if (serializeBody(reducedBodies[reducedBodies.length - 1]) != serializeBody(reducedBodies[0])) {\n        continue allSelectors;\n      }\n    }\n    intoToken[2] = reducedBodies[0];\n  }\n}\nfunction reduceSelector(tokens, data, context, options, outerContext) {\n  var bodies = [];\n  var bodiesAsList = [];\n  var processedTokens = [];\n  for (var j = data.length - 1; j >= 0; j--) {\n    if (context.filterOut(j, bodies)) {\n      continue;\n    }\n    var where = data[j].where;\n    var token = tokens[where];\n    var clonedBody = cloneArray(token[2]);\n    bodies = bodies.concat(clonedBody);\n    bodiesAsList.push(clonedBody);\n    processedTokens.push(where);\n  }\n  optimizeProperties(bodies, true, false, outerContext);\n  var processedCount = processedTokens.length;\n  var propertyIdx = bodies.length - 1;\n  var tokenIdx = processedCount - 1;\n  while (tokenIdx >= 0) {\n    if ((tokenIdx === 0 || bodies[propertyIdx] && bodiesAsList[tokenIdx].indexOf(bodies[propertyIdx]) > -1) && propertyIdx > -1) {\n      propertyIdx--;\n      continue;\n    }\n    var newBody = bodies.splice(propertyIdx + 1);\n    context.callback(tokens[processedTokens[tokenIdx]], newBody, processedCount, tokenIdx);\n    tokenIdx--;\n  }\n}\nmodule.exports = reduceNonAdjacent;","map":{"version":3,"names":["isMergeable","require","optimizeProperties","cloneArray","Token","serializeBody","body","serializeRules","rules","reduceNonAdjacent","tokens","context","options","mergeablePseudoClasses","compatibility","selectors","mergeablePseudoElements","multiplePseudoMerging","candidates","repeated","i","length","token","RULE","selectorAsString","isComplexAndNotSpecial","wrappedSelectors","wrappedSelectorsFrom","concat","j","m","selector","push","where","list","isPartial","isComplex","reduceSimpleNonAdjacentCases","reduceComplexNonAdjacentCases","wrapped","filterOut","idx","bodies","data","reduceBody","newBody","processedCount","tokenIdx","l","reduceSelector","callback","localContext","intoPosition","collectReducedBodies","reducedBodies","allSelectors","complexSelector","into","intoToken","outerContext","bodiesAsList","processedTokens","clonedBody","propertyIdx","indexOf","splice","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/clean-css/lib/optimizer/level-2/reduce-non-adjacent.js"],"sourcesContent":["var isMergeable = require('./is-mergeable');\n\nvar optimizeProperties = require('./properties/optimize');\n\nvar cloneArray = require('../../utils/clone-array');\n\nvar Token = require('../../tokenizer/token');\n\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\n\nfunction reduceNonAdjacent(tokens, context) {\n  var options = context.options;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var candidates = {};\n  var repeated = [];\n\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    var token = tokens[i];\n\n    if (token[0] != Token.RULE) {\n      continue;\n    } else if (token[2].length === 0) {\n      continue;\n    }\n\n    var selectorAsString = serializeRules(token[1]);\n    var isComplexAndNotSpecial = token[1].length > 1\n      && isMergeable(selectorAsString, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging);\n    var wrappedSelectors = wrappedSelectorsFrom(token[1]);\n    var selectors = isComplexAndNotSpecial\n      ? [selectorAsString].concat(wrappedSelectors)\n      : [selectorAsString];\n\n    for (var j = 0, m = selectors.length; j < m; j++) {\n      var selector = selectors[j];\n\n      if (!candidates[selector]) { candidates[selector] = []; } else { repeated.push(selector); }\n\n      candidates[selector].push({\n        where: i,\n        list: wrappedSelectors,\n        isPartial: isComplexAndNotSpecial && j > 0,\n        isComplex: isComplexAndNotSpecial && j === 0\n      });\n    }\n  }\n\n  reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context);\n  reduceComplexNonAdjacentCases(tokens, candidates, options, context);\n}\n\nfunction wrappedSelectorsFrom(list) {\n  var wrapped = [];\n\n  for (var i = 0; i < list.length; i++) {\n    wrapped.push([list[i][1]]);\n  }\n\n  return wrapped;\n}\n\nfunction reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context) {\n  function filterOut(idx, bodies) {\n    return data[idx].isPartial && bodies.length === 0;\n  }\n\n  function reduceBody(token, newBody, processedCount, tokenIdx) {\n    if (!data[processedCount - tokenIdx - 1].isPartial) { token[2] = newBody; }\n  }\n\n  for (var i = 0, l = repeated.length; i < l; i++) {\n    var selector = repeated[i];\n    var data = candidates[selector];\n\n    reduceSelector(tokens, data, {\n      filterOut: filterOut,\n      callback: reduceBody\n    }, options, context);\n  }\n}\n\nfunction reduceComplexNonAdjacentCases(tokens, candidates, options, context) {\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  var localContext = {};\n\n  function filterOut(idx) {\n    return localContext.data[idx].where < localContext.intoPosition;\n  }\n\n  function collectReducedBodies(token, newBody, processedCount, tokenIdx) {\n    if (tokenIdx === 0) { localContext.reducedBodies.push(newBody); }\n  }\n\n  allSelectors:\n  for (var complexSelector in candidates) {\n    var into = candidates[complexSelector];\n    if (!into[0].isComplex) { continue; }\n\n    var intoPosition = into[into.length - 1].where;\n    var intoToken = tokens[intoPosition];\n    var reducedBodies = [];\n\n    var selectors = isMergeable(complexSelector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)\n      ? into[0].list\n      : [complexSelector];\n\n    localContext.intoPosition = intoPosition;\n    localContext.reducedBodies = reducedBodies;\n\n    for (var j = 0, m = selectors.length; j < m; j++) {\n      var selector = selectors[j];\n      var data = candidates[selector];\n\n      if (data.length < 2) { continue allSelectors; }\n\n      localContext.data = data;\n\n      reduceSelector(tokens, data, {\n        filterOut: filterOut,\n        callback: collectReducedBodies\n      }, options, context);\n\n      if (serializeBody(reducedBodies[reducedBodies.length - 1]) != serializeBody(reducedBodies[0])) {\n        continue allSelectors;\n      }\n    }\n\n    intoToken[2] = reducedBodies[0];\n  }\n}\n\nfunction reduceSelector(tokens, data, context, options, outerContext) {\n  var bodies = [];\n  var bodiesAsList = [];\n  var processedTokens = [];\n\n  for (var j = data.length - 1; j >= 0; j--) {\n    if (context.filterOut(j, bodies)) { continue; }\n\n    var where = data[j].where;\n    var token = tokens[where];\n    var clonedBody = cloneArray(token[2]);\n\n    bodies = bodies.concat(clonedBody);\n    bodiesAsList.push(clonedBody);\n    processedTokens.push(where);\n  }\n\n  optimizeProperties(bodies, true, false, outerContext);\n\n  var processedCount = processedTokens.length;\n  var propertyIdx = bodies.length - 1;\n  var tokenIdx = processedCount - 1;\n\n  while (tokenIdx >= 0) {\n    if ((tokenIdx === 0\n      || (bodies[propertyIdx] && bodiesAsList[tokenIdx].indexOf(bodies[propertyIdx]) > -1)) && propertyIdx > -1) {\n      propertyIdx--;\n      continue;\n    }\n\n    var newBody = bodies.splice(propertyIdx + 1);\n    context.callback(tokens[processedTokens[tokenIdx]], newBody, processedCount, tokenIdx);\n\n    tokenIdx--;\n  }\n}\n\nmodule.exports = reduceNonAdjacent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}