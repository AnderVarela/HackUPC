{"ast":null,"code":"/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n      side = side.toLowerCase();\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\nexport default trimResultTransformer;","map":{"version":3,"names":["trimResultTransformer","side","arguments","length","undefined","onEndResult","endResult","trim","toLowerCase","replace","Error"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\common-tags\\src\\trimResultTransformer\\trimResultTransformer.js"],"sourcesContent":["/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nconst trimResultTransformer = (side = '') => ({\n  onEndResult(endResult) {\n    if (side === '') {\n      return endResult.trim();\n    }\n\n    side = side.toLowerCase();\n\n    if (side === 'start' || side === 'left') {\n      return endResult.replace(/^\\s*/, '');\n    }\n\n    if (side === 'end' || side === 'right') {\n      return endResult.replace(/\\s*$/, '');\n    }\n\n    throw new Error(`Side not supported: ${side}`);\n  },\n});\n\nexport default trimResultTransformer;\n"],"mappings":"AAAA;;;;;AAKA,IAAMA,qBAAA,GAAwB,SAAxBA,qBAAwBA,CAAA;EAAA,IAACC,IAAD,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQ,EAAR;EAAA,OAAgB;IAC5CG,WAD4C,WAAAA,YAChCC,SADgC,EACrB;MACrB,IAAIL,IAAA,KAAS,EAAb,EAAiB;QACf,OAAOK,SAAA,CAAUC,IAAV,EAAP;MACD;MAEDN,IAAA,GAAOA,IAAA,CAAKO,WAAL,EAAP;MAEA,IAAIP,IAAA,KAAS,OAAT,IAAoBA,IAAA,KAAS,MAAjC,EAAyC;QACvC,OAAOK,SAAA,CAAUG,OAAV,CAAkB,MAAlB,EAA0B,EAA1B,CAAP;MACD;MAED,IAAIR,IAAA,KAAS,KAAT,IAAkBA,IAAA,KAAS,OAA/B,EAAwC;QACtC,OAAOK,SAAA,CAAUG,OAAV,CAAkB,MAAlB,EAA0B,EAA1B,CAAP;MACD;MAED,MAAM,IAAIC,KAAJ,0BAAiCT,IAAjC,CAAN;IACD;EAjB2C,CAAhB;AAAA,CAA9B;AAoBA,eAAeD,qBAAf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}