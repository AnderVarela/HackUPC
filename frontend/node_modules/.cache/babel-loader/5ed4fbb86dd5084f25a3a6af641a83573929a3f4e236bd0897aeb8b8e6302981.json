{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial;\n        // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        }\n        // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n      return substitution;\n    }\n  };\n};\nexports.default = inlineArrayTransformer;\nmodule.exports = exports['default'];","map":{"version":3,"names":["defaults","separator","conjunction","serial","inlineArrayTransformer","opts","arguments","length","undefined","onSubstitution","substitution","resultSoFar","Array","isArray","arrayLength","indent","match","join","separatorIndex","lastIndexOf","slice"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\common-tags\\src\\inlineArrayTransformer\\inlineArrayTransformer.js"],"sourcesContent":["const defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false,\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nconst inlineArrayTransformer = (opts = defaults) => ({\n  onSubstitution(substitution, resultSoFar) {\n    // only operate on arrays\n    if (Array.isArray(substitution)) {\n      const arrayLength = substitution.length;\n      const separator = opts.separator;\n      const conjunction = opts.conjunction;\n      const serial = opts.serial;\n      // join each item in the array into a string where each item is separated by separator\n      // be sure to maintain indentation\n      const indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n      if (indent) {\n        substitution = substitution.join(separator + indent[1]);\n      } else {\n        substitution = substitution.join(separator + ' ');\n      }\n      // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n      if (conjunction && arrayLength > 1) {\n        const separatorIndex = substitution.lastIndexOf(separator);\n        substitution =\n          substitution.slice(0, separatorIndex) +\n          (serial ? separator : '') +\n          ' ' +\n          conjunction +\n          substitution.slice(separatorIndex + 1);\n      }\n    }\n    return substitution;\n  },\n});\n\nexport default inlineArrayTransformer;\n"],"mappings":";;;;;AAAA,IAAMA,QAAA,GAAW;EACfC,SAAA,EAAW,EADI;EAEfC,WAAA,EAAa,EAFE;EAGfC,MAAA,EAAQ;AAHO,CAAjB;;AAMA;;;;;;;;AAQA,IAAMC,sBAAA,GAAyB,SAAzBA,sBAAyBA,CAAA;EAAA,IAACC,IAAD,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQN,QAAR;EAAA,OAAsB;IACnDS,cADmD,WAAAA,eACpCC,YADoC,EACtBC,WADsB,EACT;MACxC;MACA,IAAIC,KAAA,CAAMC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;QAC/B,IAAMI,WAAA,GAAcJ,YAAA,CAAaH,MAAjC;QACA,IAAMN,SAAA,GAAYI,IAAA,CAAKJ,SAAvB;QACA,IAAMC,WAAA,GAAcG,IAAA,CAAKH,WAAzB;QACA,IAAMC,MAAA,GAASE,IAAA,CAAKF,MAApB;QACA;QACA;QACA,IAAMY,MAAA,GAASJ,WAAA,CAAYK,KAAZ,CAAkB,gBAAlB,CAAf;QACA,IAAID,MAAJ,EAAY;UACVL,YAAA,GAAeA,YAAA,CAAaO,IAAb,CAAkBhB,SAAA,GAAYc,MAAA,CAAO,CAAP,CAA9B,CAAf;QACD,CAFD,MAEO;UACLL,YAAA,GAAeA,YAAA,CAAaO,IAAb,CAAkBhB,SAAA,GAAY,GAA9B,CAAf;QACD;QACD;QACA,IAAIC,WAAA,IAAeY,WAAA,GAAc,CAAjC,EAAoC;UAClC,IAAMI,cAAA,GAAiBR,YAAA,CAAaS,WAAb,CAAyBlB,SAAzB,CAAvB;UACAS,YAAA,GACEA,YAAA,CAAaU,KAAb,CAAmB,CAAnB,EAAsBF,cAAtB,KACCf,MAAA,GAASF,SAAT,GAAqB,EADtB,IAEA,GAFA,GAGAC,WAHA,GAIAQ,YAAA,CAAaU,KAAb,CAAmBF,cAAA,GAAiB,CAApC,CALF;QAMD;MACF;MACD,OAAOR,YAAP;IACD;EA5BkD,CAAtB;AAAA,CAA/B;kBA+BeN,sB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}