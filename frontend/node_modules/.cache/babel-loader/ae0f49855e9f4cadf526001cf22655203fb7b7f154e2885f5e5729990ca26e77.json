{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\nconst check = require('check-types');\nconst parse = require('./parse');\nmodule.exports = unpipe;\n\n/**\n * Public function `unpipe`.\n *\n * Returns a writeable stream that can be passed to stream.pipe, then parses JSON\n * data read from the stream. If there are no errors, the callback is invoked with\n * the result as the second argument. If errors occur, the first error is passed to\n * the callback as the first argument.\n *\n * @param callback:   Function that will be called after parsing is complete.\n *\n * @option reviver:   Transformation function, invoked depth-first.\n *\n * @option discard:   The number of characters to process before discarding them\n *                    to save memory. The default value is `1048576`.\n *\n * @option yieldRate: The number of data items to process per timeslice,\n *                    default is 16384.\n **/\nfunction unpipe(callback, options) {\n  check.assert.function(callback, 'Invalid callback argument');\n  const jsonstream = new stream.PassThrough();\n  parse(jsonstream, {\n    ...options,\n    ndjson: false\n  }).then(data => callback(null, data)).catch(error => callback(error));\n  return jsonstream;\n}","map":{"version":3,"names":["stream","require","check","parse","module","exports","unpipe","callback","options","assert","function","jsonstream","PassThrough","ndjson","then","data","catch","error"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/bfj/src/unpipe.js"],"sourcesContent":["'use strict'\n\nconst stream = require('stream')\nconst check = require('check-types')\nconst parse = require('./parse')\n\nmodule.exports = unpipe\n\n/**\n * Public function `unpipe`.\n *\n * Returns a writeable stream that can be passed to stream.pipe, then parses JSON\n * data read from the stream. If there are no errors, the callback is invoked with\n * the result as the second argument. If errors occur, the first error is passed to\n * the callback as the first argument.\n *\n * @param callback:   Function that will be called after parsing is complete.\n *\n * @option reviver:   Transformation function, invoked depth-first.\n *\n * @option discard:   The number of characters to process before discarding them\n *                    to save memory. The default value is `1048576`.\n *\n * @option yieldRate: The number of data items to process per timeslice,\n *                    default is 16384.\n **/\nfunction unpipe (callback, options) {\n  check.assert.function(callback, 'Invalid callback argument')\n\n  const jsonstream = new stream.PassThrough()\n\n  parse(jsonstream, { ...options, ndjson: false })\n    .then(data => callback(null, data))\n    .catch(error => callback(error))\n\n  return jsonstream\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAa,CAAC;AACpC,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAS,CAAC;AAEhCG,MAAM,CAACC,OAAO,GAAGC,MAAM;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAMA,CAAEC,QAAQ,EAAEC,OAAO,EAAE;EAClCN,KAAK,CAACO,MAAM,CAACC,QAAQ,CAACH,QAAQ,EAAE,2BAA2B,CAAC;EAE5D,MAAMI,UAAU,GAAG,IAAIX,MAAM,CAACY,WAAW,CAAC,CAAC;EAE3CT,KAAK,CAACQ,UAAU,EAAE;IAAE,GAAGH,OAAO;IAAEK,MAAM,EAAE;EAAM,CAAC,CAAC,CAC7CC,IAAI,CAACC,IAAI,IAAIR,QAAQ,CAAC,IAAI,EAAEQ,IAAI,CAAC,CAAC,CAClCC,KAAK,CAACC,KAAK,IAAIV,QAAQ,CAACU,KAAK,CAAC,CAAC;EAElC,OAAON,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}