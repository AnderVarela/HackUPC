{"ast":null,"code":"const {\n  InvalidArgumentError\n} = require('./error.js');\n\n// @ts-check\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n    switch (name[0]) {\n      case '<':\n        // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[':\n        // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n  /**\n   * Make option-argument required.\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make option-argument optional.\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n}\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;","map":{"version":3,"names":["InvalidArgumentError","require","Argument","constructor","name","description","variadic","parseArg","undefined","defaultValue","defaultValueDescription","argChoices","required","_name","slice","length","_concatValue","value","previous","Array","isArray","concat","default","argParser","fn","choices","values","arg","includes","join","argRequired","argOptional","humanReadableArgName","nameOutput","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/commander/lib/argument.js"],"sourcesContent":["const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  };\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  };\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  };\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  };\n\n  /**\n   * Make option-argument required.\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make option-argument optional.\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}