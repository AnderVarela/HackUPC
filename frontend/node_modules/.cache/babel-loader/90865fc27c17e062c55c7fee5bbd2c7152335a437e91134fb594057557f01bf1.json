{"ast":null,"code":"'use strict';\n\n/*eslint-disable max-len*/\nvar YAMLException = require('./exception');\nvar Type = require('./type');\nfunction compileList(schema, name) {\n  var result = [];\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {\n        newIndex = previousIndex;\n      }\n    });\n    result[newIndex] = currentType;\n  });\n  return result;\n}\nfunction compileMap( /* lists... */\n) {\n  var result = {\n      scalar: {},\n      sequence: {},\n      mapping: {},\n      fallback: {},\n      multi: {\n        scalar: [],\n        sequence: [],\n        mapping: [],\n        fallback: []\n      }\n    },\n    index,\n    length;\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\nfunction Schema(definition) {\n  return this.extend(definition);\n}\nSchema.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n  if (definition instanceof Type) {\n    // Schema.extend(type)\n    explicit.push(definition);\n  } else if (Array.isArray(definition)) {\n    // Schema.extend([ type1, type2, ... ])\n    explicit = explicit.concat(definition);\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n  } else {\n    throw new YAMLException('Schema.extend argument should be a Type, [ Type ], ' + 'or a schema definition ({ implicit: [...], explicit: [...] })');\n  }\n  implicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n    if (type.multi) {\n      throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n  explicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n  var result = Object.create(Schema.prototype);\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n  result.compiledImplicit = compileList(result, 'implicit');\n  result.compiledExplicit = compileList(result, 'explicit');\n  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);\n  return result;\n};\nmodule.exports = Schema;","map":{"version":3,"names":["YAMLException","require","Type","compileList","schema","name","result","forEach","currentType","newIndex","length","previousType","previousIndex","tag","kind","multi","compileMap","scalar","sequence","mapping","fallback","index","collectType","type","push","arguments","Schema","definition","extend","prototype","implicit","explicit","Array","isArray","concat","loadKind","Object","create","compiledImplicit","compiledExplicit","compiledTypeMap","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@eslint/eslintrc/node_modules/js-yaml/lib/schema.js"],"sourcesContent":["'use strict';\n\n/*eslint-disable max-len*/\n\nvar YAMLException = require('./exception');\nvar Type          = require('./type');\n\n\nfunction compileList(schema, name) {\n  var result = [];\n\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag &&\n          previousType.kind === currentType.kind &&\n          previousType.multi === currentType.multi) {\n\n        newIndex = previousIndex;\n      }\n    });\n\n    result[newIndex] = currentType;\n  });\n\n  return result;\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {},\n        multi: {\n          scalar: [],\n          sequence: [],\n          mapping: [],\n          fallback: []\n        }\n      }, index, length;\n\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\n\n\nfunction Schema(definition) {\n  return this.extend(definition);\n}\n\n\nSchema.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n\n  if (definition instanceof Type) {\n    // Schema.extend(type)\n    explicit.push(definition);\n\n  } else if (Array.isArray(definition)) {\n    // Schema.extend([ type1, type2, ... ])\n    explicit = explicit.concat(definition);\n\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n\n  } else {\n    throw new YAMLException('Schema.extend argument should be a Type, [ Type ], ' +\n      'or a schema definition ({ implicit: [...], explicit: [...] })');\n  }\n\n  implicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n\n    if (type.multi) {\n      throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n\n  explicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n\n  var result = Object.create(Schema.prototype);\n\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n\n  result.compiledImplicit = compileList(result, 'implicit');\n  result.compiledExplicit = compileList(result, 'explicit');\n  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);\n\n  return result;\n};\n\n\nmodule.exports = Schema;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}