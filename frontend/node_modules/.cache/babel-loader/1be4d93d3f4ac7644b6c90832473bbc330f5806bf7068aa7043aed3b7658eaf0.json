{"ast":null,"code":"var hasInherit = require('./has-inherit');\nvar hasUnset = require('./has-unset');\nvar everyValuesPair = require('./every-values-pair');\nvar findComponentIn = require('./find-component-in');\nvar isComponentOf = require('./is-component-of');\nvar isMergeableShorthand = require('./is-mergeable-shorthand');\nvar overridesNonComponentShorthand = require('./overrides-non-component-shorthand');\nvar sameVendorPrefixesIn = require('./../../vendor-prefixes').same;\nvar configuration = require('../../configuration');\nvar deepClone = require('../../clone').deep;\nvar restoreWithComponents = require('../restore-with-components');\nvar shallowClone = require('../../clone').shallow;\nvar restoreFromOptimizing = require('../../restore-from-optimizing');\nvar Token = require('../../../tokenizer/token');\nvar Marker = require('../../../tokenizer/marker');\nvar serializeProperty = require('../../../writer/one-time').property;\nfunction sameValue(_validator, value1, value2) {\n  return value1 === value2;\n}\nfunction wouldBreakCompatibility(property, validator) {\n  for (var i = 0; i < property.components.length; i++) {\n    var component = property.components[i];\n    var descriptor = configuration[component.name];\n    var canOverride = descriptor && descriptor.canOverride || sameValue;\n    var _component = shallowClone(component);\n    _component.value = [[Token.PROPERTY_VALUE, descriptor.defaultValue]];\n    if (!everyValuesPair(canOverride.bind(null, validator), _component, component)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction overrideIntoMultiplex(property, by) {\n  by.unused = true;\n  turnIntoMultiplex(by, multiplexSize(property));\n  property.value = by.value;\n}\nfunction overrideByMultiplex(property, by) {\n  by.unused = true;\n  property.multiplex = true;\n  property.value = by.value;\n}\nfunction overrideSimple(property, by) {\n  by.unused = true;\n  property.value = by.value;\n}\nfunction override(property, by) {\n  if (by.multiplex) {\n    overrideByMultiplex(property, by);\n  } else if (property.multiplex) {\n    overrideIntoMultiplex(property, by);\n  } else {\n    overrideSimple(property, by);\n  }\n}\nfunction overrideShorthand(property, by) {\n  by.unused = true;\n  for (var i = 0, l = property.components.length; i < l; i++) {\n    override(property.components[i], by.components[i]);\n  }\n}\nfunction turnIntoMultiplex(property, size) {\n  property.multiplex = true;\n  if (configuration[property.name].shorthand) {\n    turnShorthandValueIntoMultiplex(property, size);\n  } else {\n    turnLonghandValueIntoMultiplex(property, size);\n  }\n}\nfunction turnShorthandValueIntoMultiplex(property, size) {\n  var component;\n  var i, l;\n  for (i = 0, l = property.components.length; i < l; i++) {\n    component = property.components[i];\n    if (!component.multiplex) {\n      turnLonghandValueIntoMultiplex(component, size);\n    }\n  }\n}\nfunction turnLonghandValueIntoMultiplex(property, size) {\n  var descriptor = configuration[property.name];\n  var withRealValue = descriptor.intoMultiplexMode == 'real';\n  var withValue = descriptor.intoMultiplexMode == 'real' ? property.value.slice(0) : descriptor.intoMultiplexMode == 'placeholder' ? descriptor.placeholderValue : descriptor.defaultValue;\n  var i = multiplexSize(property);\n  var j;\n  var m = withValue.length;\n  for (; i < size; i++) {\n    property.value.push([Token.PROPERTY_VALUE, Marker.COMMA]);\n    if (Array.isArray(withValue)) {\n      for (j = 0; j < m; j++) {\n        property.value.push(withRealValue ? withValue[j] : [Token.PROPERTY_VALUE, withValue[j]]);\n      }\n    } else {\n      property.value.push(withRealValue ? withValue : [Token.PROPERTY_VALUE, withValue]);\n    }\n  }\n}\nfunction multiplexSize(component) {\n  var size = 0;\n  for (var i = 0, l = component.value.length; i < l; i++) {\n    if (component.value[i][1] == Marker.COMMA) {\n      size++;\n    }\n  }\n  return size + 1;\n}\nfunction lengthOf(property) {\n  var fakeAsArray = [Token.PROPERTY, [Token.PROPERTY_NAME, property.name]].concat(property.value);\n  return serializeProperty([fakeAsArray], 0).length;\n}\nfunction moreSameShorthands(properties, startAt, name) {\n  // Since we run the main loop in `compactOverrides` backwards, at this point some\n  // properties may not be marked as unused.\n  // We should consider reverting the order if possible\n  var count = 0;\n  for (var i = startAt; i >= 0; i--) {\n    if (properties[i].name == name && !properties[i].unused) {\n      count++;\n    }\n    if (count > 1) {\n      break;\n    }\n  }\n  return count > 1;\n}\nfunction overridingFunction(shorthand, validator) {\n  for (var i = 0, l = shorthand.components.length; i < l; i++) {\n    if (!anyValue(validator.isUrl, shorthand.components[i]) && anyValue(validator.isFunction, shorthand.components[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction anyValue(fn, property) {\n  for (var i = 0, l = property.value.length; i < l; i++) {\n    if (property.value[i][1] == Marker.COMMA) {\n      continue;\n    }\n    if (fn(property.value[i][1])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction wouldResultInLongerValue(left, right) {\n  if (!left.multiplex && !right.multiplex || left.multiplex && right.multiplex) {\n    return false;\n  }\n  var multiplex = left.multiplex ? left : right;\n  var simple = left.multiplex ? right : left;\n  var component;\n  var multiplexClone = deepClone(multiplex);\n  restoreFromOptimizing([multiplexClone], restoreWithComponents);\n  var simpleClone = deepClone(simple);\n  restoreFromOptimizing([simpleClone], restoreWithComponents);\n  var lengthBefore = lengthOf(multiplexClone) + 1 + lengthOf(simpleClone);\n  if (left.multiplex) {\n    component = findComponentIn(multiplexClone, simpleClone);\n    overrideIntoMultiplex(component, simpleClone);\n  } else {\n    component = findComponentIn(simpleClone, multiplexClone);\n    turnIntoMultiplex(simpleClone, multiplexSize(multiplexClone));\n    overrideByMultiplex(component, multiplexClone);\n  }\n  restoreFromOptimizing([simpleClone], restoreWithComponents);\n  var lengthAfter = lengthOf(simpleClone);\n  return lengthBefore <= lengthAfter;\n}\nfunction isCompactable(property) {\n  return property.name in configuration;\n}\nfunction noneOverrideHack(left, right) {\n  return !left.multiplex && (left.name == 'background' || left.name == 'background-image') && right.multiplex && (right.name == 'background' || right.name == 'background-image') && anyLayerIsNone(right.value);\n}\nfunction anyLayerIsNone(values) {\n  var layers = intoLayers(values);\n  for (var i = 0, l = layers.length; i < l; i++) {\n    if (layers[i].length == 1 && layers[i][0][1] == 'none') {\n      return true;\n    }\n  }\n  return false;\n}\nfunction intoLayers(values) {\n  var layers = [];\n  for (var i = 0, layer = [], l = values.length; i < l; i++) {\n    var value = values[i];\n    if (value[1] == Marker.COMMA) {\n      layers.push(layer);\n      layer = [];\n    } else {\n      layer.push(value);\n    }\n  }\n  layers.push(layer);\n  return layers;\n}\nfunction overrideProperties(properties, withMerging, compatibility, validator) {\n  var mayOverride, right, left, component;\n  var overriddenComponents;\n  var overriddenComponent;\n  var overridingComponent;\n  var overridable;\n  var i, j, k;\n  propertyLoop: for (i = properties.length - 1; i >= 0; i--) {\n    right = properties[i];\n    if (!isCompactable(right)) {\n      continue;\n    }\n    if (right.block) {\n      continue;\n    }\n    mayOverride = configuration[right.name].canOverride || sameValue;\n    traverseLoop: for (j = i - 1; j >= 0; j--) {\n      left = properties[j];\n      if (!isCompactable(left)) {\n        continue;\n      }\n      if (left.block) {\n        continue;\n      }\n      if (left.dynamic || right.dynamic) {\n        continue;\n      }\n      if (left.unused || right.unused) {\n        continue;\n      }\n      if (left.hack && !right.hack && !right.important || !left.hack && !left.important && right.hack) {\n        continue;\n      }\n      if (left.important == right.important && left.hack[0] != right.hack[0]) {\n        continue;\n      }\n      if (left.important == right.important && (left.hack[0] != right.hack[0] || left.hack[1] && left.hack[1] != right.hack[1])) {\n        continue;\n      }\n      if (hasInherit(right)) {\n        continue;\n      }\n      if (noneOverrideHack(left, right)) {\n        continue;\n      }\n      if (right.shorthand && isComponentOf(right, left)) {\n        // maybe `left` can be overridden by `right` which is a shorthand?\n        if (!right.important && left.important) {\n          continue;\n        }\n        if (!sameVendorPrefixesIn([left], right.components)) {\n          continue;\n        }\n        if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) {\n          continue;\n        }\n        if (!isMergeableShorthand(right)) {\n          left.unused = true;\n          continue;\n        }\n        component = findComponentIn(right, left);\n        mayOverride = configuration[left.name].canOverride || sameValue;\n        if (everyValuesPair(mayOverride.bind(null, validator), left, component)) {\n          left.unused = true;\n        }\n      } else if (right.shorthand && overridesNonComponentShorthand(right, left)) {\n        // `right` is a shorthand while `left` can be overriden by it, think `border` and `border-top`\n        if (!right.important && left.important) {\n          continue;\n        }\n        if (!sameVendorPrefixesIn([left], right.components)) {\n          continue;\n        }\n        if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) {\n          continue;\n        }\n        overriddenComponents = left.shorthand ? left.components : [left];\n        for (k = overriddenComponents.length - 1; k >= 0; k--) {\n          overriddenComponent = overriddenComponents[k];\n          overridingComponent = findComponentIn(right, overriddenComponent);\n          mayOverride = configuration[overriddenComponent.name].canOverride || sameValue;\n          if (!everyValuesPair(mayOverride.bind(null, validator), left, overridingComponent)) {\n            continue traverseLoop;\n          }\n        }\n        left.unused = true;\n      } else if (withMerging && left.shorthand && !right.shorthand && isComponentOf(left, right, true)) {\n        // maybe `right` can be pulled into `left` which is a shorthand?\n        if (right.important && !left.important) {\n          continue;\n        }\n        if (!right.important && left.important) {\n          right.unused = true;\n          continue;\n        }\n\n        // Pending more clever algorithm in #527\n        if (moreSameShorthands(properties, i - 1, left.name)) {\n          continue;\n        }\n        if (overridingFunction(left, validator)) {\n          continue;\n        }\n        if (!isMergeableShorthand(left)) {\n          continue;\n        }\n        if (hasUnset(left) || hasUnset(right)) {\n          continue;\n        }\n        component = findComponentIn(left, right);\n        if (everyValuesPair(mayOverride.bind(null, validator), component, right)) {\n          var disabledBackgroundMerging = !compatibility.properties.backgroundClipMerging && component.name.indexOf('background-clip') > -1 || !compatibility.properties.backgroundOriginMerging && component.name.indexOf('background-origin') > -1 || !compatibility.properties.backgroundSizeMerging && component.name.indexOf('background-size') > -1;\n          var nonMergeableValue = configuration[right.name].nonMergeableValue === right.value[0][1];\n          if (disabledBackgroundMerging || nonMergeableValue) {\n            continue;\n          }\n          if (!compatibility.properties.merging && wouldBreakCompatibility(left, validator)) {\n            continue;\n          }\n          if (component.value[0][1] != right.value[0][1] && (hasInherit(left) || hasInherit(right))) {\n            continue;\n          }\n          if (wouldResultInLongerValue(left, right)) {\n            continue;\n          }\n          if (!left.multiplex && right.multiplex) {\n            turnIntoMultiplex(left, multiplexSize(right));\n          }\n          override(component, right);\n          left.dirty = true;\n        }\n      } else if (withMerging && left.shorthand && right.shorthand && left.name == right.name) {\n        // merge if all components can be merged\n\n        if (!left.multiplex && right.multiplex) {\n          continue;\n        }\n        if (!right.important && left.important) {\n          right.unused = true;\n          continue propertyLoop;\n        }\n        if (right.important && !left.important) {\n          left.unused = true;\n          continue;\n        }\n        if (!isMergeableShorthand(right)) {\n          left.unused = true;\n          continue;\n        }\n        for (k = left.components.length - 1; k >= 0; k--) {\n          var leftComponent = left.components[k];\n          var rightComponent = right.components[k];\n          mayOverride = configuration[leftComponent.name].canOverride || sameValue;\n          if (!everyValuesPair(mayOverride.bind(null, validator), leftComponent, rightComponent)) {\n            continue propertyLoop;\n          }\n        }\n        overrideShorthand(left, right);\n        left.dirty = true;\n      } else if (withMerging && left.shorthand && right.shorthand && isComponentOf(left, right)) {\n        // border is a shorthand but any of its components is a shorthand too\n\n        if (!left.important && right.important) {\n          continue;\n        }\n        component = findComponentIn(left, right);\n        mayOverride = configuration[right.name].canOverride || sameValue;\n        if (!everyValuesPair(mayOverride.bind(null, validator), component, right)) {\n          continue;\n        }\n        if (left.important && !right.important) {\n          right.unused = true;\n          continue;\n        }\n        var rightRestored = configuration[right.name].restore(right, configuration);\n        if (rightRestored.length > 1) {\n          continue;\n        }\n        component = findComponentIn(left, right);\n        override(component, right);\n        right.dirty = true;\n      } else if (left.name == right.name) {\n        // two non-shorthands should be merged based on understandability\n        overridable = true;\n        if (right.shorthand) {\n          for (k = right.components.length - 1; k >= 0 && overridable; k--) {\n            overriddenComponent = left.components[k];\n            overridingComponent = right.components[k];\n            mayOverride = configuration[overridingComponent.name].canOverride || sameValue;\n            overridable = everyValuesPair(mayOverride.bind(null, validator), overriddenComponent, overridingComponent);\n          }\n        } else {\n          mayOverride = configuration[right.name].canOverride || sameValue;\n          overridable = everyValuesPair(mayOverride.bind(null, validator), left, right);\n        }\n        if (left.important && !right.important && overridable) {\n          right.unused = true;\n          continue;\n        }\n        if (!left.important && right.important && overridable) {\n          left.unused = true;\n          continue;\n        }\n        if (!overridable) {\n          continue;\n        }\n        left.unused = true;\n      }\n    }\n  }\n}\nmodule.exports = overrideProperties;","map":{"version":3,"names":["hasInherit","require","hasUnset","everyValuesPair","findComponentIn","isComponentOf","isMergeableShorthand","overridesNonComponentShorthand","sameVendorPrefixesIn","same","configuration","deepClone","deep","restoreWithComponents","shallowClone","shallow","restoreFromOptimizing","Token","Marker","serializeProperty","property","sameValue","_validator","value1","value2","wouldBreakCompatibility","validator","i","components","length","component","descriptor","name","canOverride","_component","value","PROPERTY_VALUE","defaultValue","bind","overrideIntoMultiplex","by","unused","turnIntoMultiplex","multiplexSize","overrideByMultiplex","multiplex","overrideSimple","override","overrideShorthand","l","size","shorthand","turnShorthandValueIntoMultiplex","turnLonghandValueIntoMultiplex","withRealValue","intoMultiplexMode","withValue","slice","placeholderValue","j","m","push","COMMA","Array","isArray","lengthOf","fakeAsArray","PROPERTY","PROPERTY_NAME","concat","moreSameShorthands","properties","startAt","count","overridingFunction","anyValue","isUrl","isFunction","fn","wouldResultInLongerValue","left","right","simple","multiplexClone","simpleClone","lengthBefore","lengthAfter","isCompactable","noneOverrideHack","anyLayerIsNone","values","layers","intoLayers","layer","overrideProperties","withMerging","compatibility","mayOverride","overriddenComponents","overriddenComponent","overridingComponent","overridable","k","propertyLoop","block","traverseLoop","dynamic","hack","important","disabledBackgroundMerging","backgroundClipMerging","indexOf","backgroundOriginMerging","backgroundSizeMerging","nonMergeableValue","merging","dirty","leftComponent","rightComponent","rightRestored","restore","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/clean-css/lib/optimizer/level-2/properties/override-properties.js"],"sourcesContent":["var hasInherit = require('./has-inherit');\nvar hasUnset = require('./has-unset');\nvar everyValuesPair = require('./every-values-pair');\nvar findComponentIn = require('./find-component-in');\nvar isComponentOf = require('./is-component-of');\nvar isMergeableShorthand = require('./is-mergeable-shorthand');\nvar overridesNonComponentShorthand = require('./overrides-non-component-shorthand');\nvar sameVendorPrefixesIn = require('./../../vendor-prefixes').same;\n\nvar configuration = require('../../configuration');\nvar deepClone = require('../../clone').deep;\nvar restoreWithComponents = require('../restore-with-components');\nvar shallowClone = require('../../clone').shallow;\n\nvar restoreFromOptimizing = require('../../restore-from-optimizing');\n\nvar Token = require('../../../tokenizer/token');\nvar Marker = require('../../../tokenizer/marker');\n\nvar serializeProperty = require('../../../writer/one-time').property;\n\nfunction sameValue(_validator, value1, value2) {\n  return value1 === value2;\n}\n\nfunction wouldBreakCompatibility(property, validator) {\n  for (var i = 0; i < property.components.length; i++) {\n    var component = property.components[i];\n    var descriptor = configuration[component.name];\n    var canOverride = descriptor && descriptor.canOverride || sameValue;\n\n    var _component = shallowClone(component);\n    _component.value = [[Token.PROPERTY_VALUE, descriptor.defaultValue]];\n\n    if (!everyValuesPair(canOverride.bind(null, validator), _component, component)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction overrideIntoMultiplex(property, by) {\n  by.unused = true;\n\n  turnIntoMultiplex(by, multiplexSize(property));\n  property.value = by.value;\n}\n\nfunction overrideByMultiplex(property, by) {\n  by.unused = true;\n  property.multiplex = true;\n  property.value = by.value;\n}\n\nfunction overrideSimple(property, by) {\n  by.unused = true;\n  property.value = by.value;\n}\n\nfunction override(property, by) {\n  if (by.multiplex) {\n    overrideByMultiplex(property, by);\n  } else if (property.multiplex) {\n    overrideIntoMultiplex(property, by);\n  } else {\n    overrideSimple(property, by);\n  }\n}\n\nfunction overrideShorthand(property, by) {\n  by.unused = true;\n\n  for (var i = 0, l = property.components.length; i < l; i++) {\n    override(property.components[i], by.components[i]);\n  }\n}\n\nfunction turnIntoMultiplex(property, size) {\n  property.multiplex = true;\n\n  if (configuration[property.name].shorthand) {\n    turnShorthandValueIntoMultiplex(property, size);\n  } else {\n    turnLonghandValueIntoMultiplex(property, size);\n  }\n}\n\nfunction turnShorthandValueIntoMultiplex(property, size) {\n  var component;\n  var i, l;\n\n  for (i = 0, l = property.components.length; i < l; i++) {\n    component = property.components[i];\n\n    if (!component.multiplex) {\n      turnLonghandValueIntoMultiplex(component, size);\n    }\n  }\n}\n\nfunction turnLonghandValueIntoMultiplex(property, size) {\n  var descriptor = configuration[property.name];\n  var withRealValue = descriptor.intoMultiplexMode == 'real';\n  var withValue = descriptor.intoMultiplexMode == 'real'\n    ? property.value.slice(0)\n    : (descriptor.intoMultiplexMode == 'placeholder' ? descriptor.placeholderValue : descriptor.defaultValue);\n  var i = multiplexSize(property);\n  var j;\n  var m = withValue.length;\n\n  for (; i < size; i++) {\n    property.value.push([Token.PROPERTY_VALUE, Marker.COMMA]);\n\n    if (Array.isArray(withValue)) {\n      for (j = 0; j < m; j++) {\n        property.value.push(withRealValue ? withValue[j] : [Token.PROPERTY_VALUE, withValue[j]]);\n      }\n    } else {\n      property.value.push(withRealValue ? withValue : [Token.PROPERTY_VALUE, withValue]);\n    }\n  }\n}\n\nfunction multiplexSize(component) {\n  var size = 0;\n\n  for (var i = 0, l = component.value.length; i < l; i++) {\n    if (component.value[i][1] == Marker.COMMA) { size++; }\n  }\n\n  return size + 1;\n}\n\nfunction lengthOf(property) {\n  var fakeAsArray = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, property.name]\n  ].concat(property.value);\n  return serializeProperty([fakeAsArray], 0).length;\n}\n\nfunction moreSameShorthands(properties, startAt, name) {\n  // Since we run the main loop in `compactOverrides` backwards, at this point some\n  // properties may not be marked as unused.\n  // We should consider reverting the order if possible\n  var count = 0;\n\n  for (var i = startAt; i >= 0; i--) {\n    if (properties[i].name == name && !properties[i].unused) { count++; }\n    if (count > 1) { break; }\n  }\n\n  return count > 1;\n}\n\nfunction overridingFunction(shorthand, validator) {\n  for (var i = 0, l = shorthand.components.length; i < l; i++) {\n    if (!anyValue(validator.isUrl, shorthand.components[i])\n      && anyValue(validator.isFunction, shorthand.components[i])) { return true; }\n  }\n\n  return false;\n}\n\nfunction anyValue(fn, property) {\n  for (var i = 0, l = property.value.length; i < l; i++) {\n    if (property.value[i][1] == Marker.COMMA) { continue; }\n\n    if (fn(property.value[i][1])) { return true; }\n  }\n\n  return false;\n}\n\nfunction wouldResultInLongerValue(left, right) {\n  if (!left.multiplex && !right.multiplex || left.multiplex && right.multiplex) { return false; }\n\n  var multiplex = left.multiplex ? left : right;\n  var simple = left.multiplex ? right : left;\n  var component;\n\n  var multiplexClone = deepClone(multiplex);\n  restoreFromOptimizing([multiplexClone], restoreWithComponents);\n\n  var simpleClone = deepClone(simple);\n  restoreFromOptimizing([simpleClone], restoreWithComponents);\n\n  var lengthBefore = lengthOf(multiplexClone) + 1 + lengthOf(simpleClone);\n\n  if (left.multiplex) {\n    component = findComponentIn(multiplexClone, simpleClone);\n    overrideIntoMultiplex(component, simpleClone);\n  } else {\n    component = findComponentIn(simpleClone, multiplexClone);\n    turnIntoMultiplex(simpleClone, multiplexSize(multiplexClone));\n    overrideByMultiplex(component, multiplexClone);\n  }\n\n  restoreFromOptimizing([simpleClone], restoreWithComponents);\n\n  var lengthAfter = lengthOf(simpleClone);\n\n  return lengthBefore <= lengthAfter;\n}\n\nfunction isCompactable(property) {\n  return property.name in configuration;\n}\n\nfunction noneOverrideHack(left, right) {\n  return !left.multiplex\n    && (left.name == 'background' || left.name == 'background-image')\n    && right.multiplex\n    && (right.name == 'background' || right.name == 'background-image')\n    && anyLayerIsNone(right.value);\n}\n\nfunction anyLayerIsNone(values) {\n  var layers = intoLayers(values);\n\n  for (var i = 0, l = layers.length; i < l; i++) {\n    if (layers[i].length == 1 && layers[i][0][1] == 'none') { return true; }\n  }\n\n  return false;\n}\n\nfunction intoLayers(values) {\n  var layers = [];\n\n  for (var i = 0, layer = [], l = values.length; i < l; i++) {\n    var value = values[i];\n    if (value[1] == Marker.COMMA) {\n      layers.push(layer);\n      layer = [];\n    } else {\n      layer.push(value);\n    }\n  }\n\n  layers.push(layer);\n  return layers;\n}\n\nfunction overrideProperties(properties, withMerging, compatibility, validator) {\n  var mayOverride, right, left, component;\n  var overriddenComponents;\n  var overriddenComponent;\n  var overridingComponent;\n  var overridable;\n  var i, j, k;\n\n  propertyLoop:\n  for (i = properties.length - 1; i >= 0; i--) {\n    right = properties[i];\n\n    if (!isCompactable(right)) { continue; }\n\n    if (right.block) { continue; }\n\n    mayOverride = configuration[right.name].canOverride || sameValue;\n\n    traverseLoop:\n    for (j = i - 1; j >= 0; j--) {\n      left = properties[j];\n\n      if (!isCompactable(left)) { continue; }\n\n      if (left.block) { continue; }\n\n      if (left.dynamic || right.dynamic) { continue; }\n\n      if (left.unused || right.unused) { continue; }\n\n      if (left.hack && !right.hack && !right.important || !left.hack && !left.important && right.hack) { continue; }\n\n      if (left.important == right.important && left.hack[0] != right.hack[0]) { continue; }\n\n      if (left.important == right.important\n        && (left.hack[0] != right.hack[0] || (left.hack[1] && left.hack[1] != right.hack[1]))) { continue; }\n\n      if (hasInherit(right)) { continue; }\n\n      if (noneOverrideHack(left, right)) { continue; }\n\n      if (right.shorthand && isComponentOf(right, left)) {\n        // maybe `left` can be overridden by `right` which is a shorthand?\n        if (!right.important && left.important) { continue; }\n\n        if (!sameVendorPrefixesIn([left], right.components)) { continue; }\n\n        if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) { continue; }\n\n        if (!isMergeableShorthand(right)) {\n          left.unused = true;\n          continue;\n        }\n\n        component = findComponentIn(right, left);\n        mayOverride = configuration[left.name].canOverride || sameValue;\n        if (everyValuesPair(mayOverride.bind(null, validator), left, component)) {\n          left.unused = true;\n        }\n      } else if (right.shorthand && overridesNonComponentShorthand(right, left)) {\n        // `right` is a shorthand while `left` can be overriden by it, think `border` and `border-top`\n        if (!right.important && left.important) {\n          continue;\n        }\n\n        if (!sameVendorPrefixesIn([left], right.components)) {\n          continue;\n        }\n\n        if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) {\n          continue;\n        }\n\n        overriddenComponents = left.shorthand\n          ? left.components\n          : [left];\n\n        for (k = overriddenComponents.length - 1; k >= 0; k--) {\n          overriddenComponent = overriddenComponents[k];\n          overridingComponent = findComponentIn(right, overriddenComponent);\n          mayOverride = configuration[overriddenComponent.name].canOverride || sameValue;\n\n          if (!everyValuesPair(mayOverride.bind(null, validator), left, overridingComponent)) {\n            continue traverseLoop;\n          }\n        }\n\n        left.unused = true;\n      } else if (withMerging && left.shorthand && !right.shorthand && isComponentOf(left, right, true)) {\n        // maybe `right` can be pulled into `left` which is a shorthand?\n        if (right.important && !left.important) { continue; }\n\n        if (!right.important && left.important) {\n          right.unused = true;\n          continue;\n        }\n\n        // Pending more clever algorithm in #527\n        if (moreSameShorthands(properties, i - 1, left.name)) { continue; }\n\n        if (overridingFunction(left, validator)) { continue; }\n\n        if (!isMergeableShorthand(left)) { continue; }\n\n        if (hasUnset(left) || hasUnset(right)) { continue; }\n\n        component = findComponentIn(left, right);\n        if (everyValuesPair(mayOverride.bind(null, validator), component, right)) {\n          var disabledBackgroundMerging = !compatibility.properties.backgroundClipMerging && component.name.indexOf('background-clip') > -1\n            || !compatibility.properties.backgroundOriginMerging && component.name.indexOf('background-origin') > -1\n            || !compatibility.properties.backgroundSizeMerging && component.name.indexOf('background-size') > -1;\n          var nonMergeableValue = configuration[right.name].nonMergeableValue === right.value[0][1];\n\n          if (disabledBackgroundMerging || nonMergeableValue) { continue; }\n\n          if (!compatibility.properties.merging && wouldBreakCompatibility(left, validator)) { continue; }\n\n          if (component.value[0][1] != right.value[0][1] && (hasInherit(left) || hasInherit(right))) { continue; }\n\n          if (wouldResultInLongerValue(left, right)) { continue; }\n\n          if (!left.multiplex && right.multiplex) { turnIntoMultiplex(left, multiplexSize(right)); }\n\n          override(component, right);\n          left.dirty = true;\n        }\n      } else if (withMerging && left.shorthand && right.shorthand && left.name == right.name) {\n        // merge if all components can be merged\n\n        if (!left.multiplex && right.multiplex) { continue; }\n\n        if (!right.important && left.important) {\n          right.unused = true;\n          continue propertyLoop;\n        }\n\n        if (right.important && !left.important) {\n          left.unused = true;\n          continue;\n        }\n\n        if (!isMergeableShorthand(right)) {\n          left.unused = true;\n          continue;\n        }\n\n        for (k = left.components.length - 1; k >= 0; k--) {\n          var leftComponent = left.components[k];\n          var rightComponent = right.components[k];\n\n          mayOverride = configuration[leftComponent.name].canOverride || sameValue;\n          if (!everyValuesPair(mayOverride.bind(null, validator), leftComponent, rightComponent)) {\n            continue propertyLoop;\n          }\n        }\n\n        overrideShorthand(left, right);\n        left.dirty = true;\n      } else if (withMerging && left.shorthand && right.shorthand && isComponentOf(left, right)) {\n        // border is a shorthand but any of its components is a shorthand too\n\n        if (!left.important && right.important) { continue; }\n\n        component = findComponentIn(left, right);\n        mayOverride = configuration[right.name].canOverride || sameValue;\n        if (!everyValuesPair(mayOverride.bind(null, validator), component, right)) { continue; }\n\n        if (left.important && !right.important) {\n          right.unused = true;\n          continue;\n        }\n\n        var rightRestored = configuration[right.name].restore(right, configuration);\n        if (rightRestored.length > 1) { continue; }\n\n        component = findComponentIn(left, right);\n        override(component, right);\n        right.dirty = true;\n      } else if (left.name == right.name) {\n        // two non-shorthands should be merged based on understandability\n        overridable = true;\n\n        if (right.shorthand) {\n          for (k = right.components.length - 1; k >= 0 && overridable; k--) {\n            overriddenComponent = left.components[k];\n            overridingComponent = right.components[k];\n            mayOverride = configuration[overridingComponent.name].canOverride || sameValue;\n\n            overridable = everyValuesPair(mayOverride.bind(null, validator), overriddenComponent, overridingComponent);\n          }\n        } else {\n          mayOverride = configuration[right.name].canOverride || sameValue;\n          overridable = everyValuesPair(mayOverride.bind(null, validator), left, right);\n        }\n\n        if (left.important && !right.important && overridable) {\n          right.unused = true;\n          continue;\n        }\n\n        if (!left.important && right.important && overridable) {\n          left.unused = true;\n          continue;\n        }\n\n        if (!overridable) {\n          continue;\n        }\n\n        left.unused = true;\n      }\n    }\n  }\n}\n\nmodule.exports = overrideProperties;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}