{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"tsutils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util = __importStar(require(\"../util\"));\nconst FUNCTION_CONSTRUCTOR = 'Function';\nconst GLOBAL_CANDIDATES = new Set(['global', 'window', 'globalThis']);\nconst EVAL_LIKE_METHODS = new Set(['setImmediate', 'setInterval', 'setTimeout', 'execScript']);\nexports.default = util.createRule({\n  name: 'no-implied-eval',\n  meta: {\n    docs: {\n      description: 'Disallow the use of `eval()`-like methods',\n      recommended: 'error',\n      extendsBaseRule: true,\n      requiresTypeChecking: true\n    },\n    messages: {\n      noImpliedEvalError: 'Implied eval. Consider passing a function.',\n      noFunctionConstructor: 'Implied eval. Do not use the Function constructor to create functions.'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n  create(context) {\n    const parserServices = util.getParserServices(context);\n    const program = parserServices.program;\n    const checker = parserServices.program.getTypeChecker();\n    function getCalleeName(node) {\n      if (node.type === utils_1.AST_NODE_TYPES.Identifier) {\n        return node.name;\n      }\n      if (node.type === utils_1.AST_NODE_TYPES.MemberExpression && node.object.type === utils_1.AST_NODE_TYPES.Identifier && GLOBAL_CANDIDATES.has(node.object.name)) {\n        if (node.property.type === utils_1.AST_NODE_TYPES.Identifier) {\n          return node.property.name;\n        }\n        if (node.property.type === utils_1.AST_NODE_TYPES.Literal && typeof node.property.value === 'string') {\n          return node.property.value;\n        }\n      }\n      return null;\n    }\n    function isFunctionType(node) {\n      var _a;\n      const tsNode = parserServices.esTreeNodeToTSNodeMap.get(node);\n      const type = checker.getTypeAtLocation(tsNode);\n      const symbol = type.getSymbol();\n      if (symbol && tsutils.isSymbolFlagSet(symbol, ts.SymbolFlags.Function | ts.SymbolFlags.Method)) {\n        return true;\n      }\n      if (symbol && symbol.escapedName === FUNCTION_CONSTRUCTOR) {\n        const declarations = (_a = symbol.getDeclarations()) !== null && _a !== void 0 ? _a : [];\n        for (const declaration of declarations) {\n          const sourceFile = declaration.getSourceFile();\n          if (program.isSourceFileDefaultLibrary(sourceFile)) {\n            return true;\n          }\n        }\n      }\n      const signatures = checker.getSignaturesOfType(type, ts.SignatureKind.Call);\n      return signatures.length > 0;\n    }\n    function isBind(node) {\n      return node.type === utils_1.AST_NODE_TYPES.MemberExpression ? isBind(node.property) : node.type === utils_1.AST_NODE_TYPES.Identifier && node.name === 'bind';\n    }\n    function isFunction(node) {\n      switch (node.type) {\n        case utils_1.AST_NODE_TYPES.ArrowFunctionExpression:\n        case utils_1.AST_NODE_TYPES.FunctionDeclaration:\n        case utils_1.AST_NODE_TYPES.FunctionExpression:\n          return true;\n        case utils_1.AST_NODE_TYPES.Literal:\n        case utils_1.AST_NODE_TYPES.TemplateLiteral:\n          return false;\n        case utils_1.AST_NODE_TYPES.CallExpression:\n          return isBind(node.callee) || isFunctionType(node);\n        default:\n          return isFunctionType(node);\n      }\n    }\n    function isReferenceToGlobalFunction(calleeName) {\n      const ref = context.getScope().references.find(ref => ref.identifier.name === calleeName);\n      // ensure it's the \"global\" version\n      return !(ref === null || ref === void 0 ? void 0 : ref.resolved) || ref.resolved.defs.length === 0;\n    }\n    function checkImpliedEval(node) {\n      var _a;\n      const calleeName = getCalleeName(node.callee);\n      if (calleeName == null) {\n        return;\n      }\n      if (calleeName === FUNCTION_CONSTRUCTOR) {\n        const tsNode = parserServices.esTreeNodeToTSNodeMap.get(node.callee);\n        const type = checker.getTypeAtLocation(tsNode);\n        const symbol = type.getSymbol();\n        if (symbol) {\n          const declarations = (_a = symbol.getDeclarations()) !== null && _a !== void 0 ? _a : [];\n          for (const declaration of declarations) {\n            const sourceFile = declaration.getSourceFile();\n            if (program.isSourceFileDefaultLibrary(sourceFile)) {\n              context.report({\n                node,\n                messageId: 'noFunctionConstructor'\n              });\n              return;\n            }\n          }\n        } else {\n          context.report({\n            node,\n            messageId: 'noFunctionConstructor'\n          });\n          return;\n        }\n      }\n      if (node.arguments.length === 0) {\n        return;\n      }\n      const [handler] = node.arguments;\n      if (EVAL_LIKE_METHODS.has(calleeName) && !isFunction(handler) && isReferenceToGlobalFunction(calleeName)) {\n        context.report({\n          node: handler,\n          messageId: 'noImpliedEvalError'\n        });\n      }\n    }\n    return {\n      NewExpression: checkImpliedEval,\n      CallExpression: checkImpliedEval\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","tsutils","__importStar","ts","util","FUNCTION_CONSTRUCTOR","GLOBAL_CANDIDATES","Set","EVAL_LIKE_METHODS","exports","default","createRule","name","meta","docs","description","recommended","extendsBaseRule","requiresTypeChecking","messages","noImpliedEvalError","noFunctionConstructor","schema","type","defaultOptions","create","context","parserServices","getParserServices","program","checker","getTypeChecker","getCalleeName","node","AST_NODE_TYPES","Identifier","MemberExpression","object","has","property","Literal","value","isFunctionType","tsNode","esTreeNodeToTSNodeMap","get","getTypeAtLocation","symbol","getSymbol","isSymbolFlagSet","SymbolFlags","Function","Method","escapedName","declarations","_a","getDeclarations","declaration","sourceFile","getSourceFile","isSourceFileDefaultLibrary","signatures","getSignaturesOfType","SignatureKind","Call","length","isBind","isFunction","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression","TemplateLiteral","CallExpression","callee","isReferenceToGlobalFunction","calleeName","ref","getScope","references","find","identifier","resolved","defs","checkImpliedEval","report","messageId","arguments","handler","NewExpression"],"sources":["../../src/rules/no-implied-eval.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}