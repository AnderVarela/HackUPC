{"ast":null,"code":"// Matches the scheme of a URL, eg \"http://\"\nconst schemeRegex = /^[\\w+.-]+:\\/\\//;\n/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n * 6. Query, including \"?\", optional.\n * 7. Hash, including \"#\", optional.\n */\nconst urlRegex = /^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?(\\?[^#]*)?(#.*)?/;\n/**\n * File URLs are weird. They dont' need the regular `//` in the scheme, they may or may not start\n * with a leading `/`, they can have a domain (but only if they don't start with a Windows drive).\n *\n * 1. Host, optional.\n * 2. Path, which may include \"/\", guaranteed.\n * 3. Query, including \"?\", optional.\n * 4. Hash, including \"#\", optional.\n */\nconst fileRegex = /^file:(?:\\/\\/((?![a-z]:)[^/#?]*)?)?(\\/?[^#?]*)(\\?[^#]*)?(#.*)?/i;\nfunction isAbsoluteUrl(input) {\n  return schemeRegex.test(input);\n}\nfunction isSchemeRelativeUrl(input) {\n  return input.startsWith('//');\n}\nfunction isAbsolutePath(input) {\n  return input.startsWith('/');\n}\nfunction isFileUrl(input) {\n  return input.startsWith('file:');\n}\nfunction isRelative(input) {\n  return /^[.?#]/.test(input);\n}\nfunction parseAbsoluteUrl(input) {\n  const match = urlRegex.exec(input);\n  return makeUrl(match[1], match[2] || '', match[3], match[4] || '', match[5] || '/', match[6] || '', match[7] || '');\n}\nfunction parseFileUrl(input) {\n  const match = fileRegex.exec(input);\n  const path = match[2];\n  return makeUrl('file:', '', match[1] || '', '', isAbsolutePath(path) ? path : '/' + path, match[3] || '', match[4] || '');\n}\nfunction makeUrl(scheme, user, host, port, path, query, hash) {\n  return {\n    scheme,\n    user,\n    host,\n    port,\n    path,\n    query,\n    hash,\n    type: 7 /* Absolute */\n  };\n}\nfunction parseUrl(input) {\n  if (isSchemeRelativeUrl(input)) {\n    const url = parseAbsoluteUrl('http:' + input);\n    url.scheme = '';\n    url.type = 6 /* SchemeRelative */;\n    return url;\n  }\n  if (isAbsolutePath(input)) {\n    const url = parseAbsoluteUrl('http://foo.com' + input);\n    url.scheme = '';\n    url.host = '';\n    url.type = 5 /* AbsolutePath */;\n    return url;\n  }\n  if (isFileUrl(input)) return parseFileUrl(input);\n  if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);\n  const url = parseAbsoluteUrl('http://foo.com/' + input);\n  url.scheme = '';\n  url.host = '';\n  url.type = input ? input.startsWith('?') ? 3 /* Query */ : input.startsWith('#') ? 2 /* Hash */ : 4 /* RelativePath */ : 1 /* Empty */;\n  return url;\n}\nfunction stripPathFilename(path) {\n  // If a path ends with a parent directory \"..\", then it's a relative path with excess parent\n  // paths. It's not a file, so we can't strip it.\n  if (path.endsWith('/..')) return path;\n  const index = path.lastIndexOf('/');\n  return path.slice(0, index + 1);\n}\nfunction mergePaths(url, base) {\n  normalizePath(base, base.type);\n  // If the path is just a \"/\", then it was an empty path to begin with (remember, we're a relative\n  // path).\n  if (url.path === '/') {\n    url.path = base.path;\n  } else {\n    // Resolution happens relative to the base path's directory, not the file.\n    url.path = stripPathFilename(base.path) + url.path;\n  }\n}\n/**\n * The path can have empty directories \"//\", unneeded parents \"foo/..\", or current directory\n * \"foo/.\". We need to normalize to a standard representation.\n */\nfunction normalizePath(url, type) {\n  const rel = type <= 4 /* RelativePath */;\n  const pieces = url.path.split('/');\n  // We need to preserve the first piece always, so that we output a leading slash. The item at\n  // pieces[0] is an empty string.\n  let pointer = 1;\n  // Positive is the number of real directories we've output, used for popping a parent directory.\n  // Eg, \"foo/bar/..\" will have a positive 2, and we can decrement to be left with just \"foo\".\n  let positive = 0;\n  // We need to keep a trailing slash if we encounter an empty directory (eg, splitting \"foo/\" will\n  // generate `[\"foo\", \"\"]` pieces). And, if we pop a parent directory. But once we encounter a\n  // real directory, we won't need to append, unless the other conditions happen again.\n  let addTrailingSlash = false;\n  for (let i = 1; i < pieces.length; i++) {\n    const piece = pieces[i];\n    // An empty directory, could be a trailing slash, or just a double \"//\" in the path.\n    if (!piece) {\n      addTrailingSlash = true;\n      continue;\n    }\n    // If we encounter a real directory, then we don't need to append anymore.\n    addTrailingSlash = false;\n    // A current directory, which we can always drop.\n    if (piece === '.') continue;\n    // A parent directory, we need to see if there are any real directories we can pop. Else, we\n    // have an excess of parents, and we'll need to keep the \"..\".\n    if (piece === '..') {\n      if (positive) {\n        addTrailingSlash = true;\n        positive--;\n        pointer--;\n      } else if (rel) {\n        // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute\n        // URL, protocol relative URL, or an absolute path, we don't need to keep excess.\n        pieces[pointer++] = piece;\n      }\n      continue;\n    }\n    // We've encountered a real directory. Move it to the next insertion pointer, which accounts for\n    // any popped or dropped directories.\n    pieces[pointer++] = piece;\n    positive++;\n  }\n  let path = '';\n  for (let i = 1; i < pointer; i++) {\n    path += '/' + pieces[i];\n  }\n  if (!path || addTrailingSlash && !path.endsWith('/..')) {\n    path += '/';\n  }\n  url.path = path;\n}\n/**\n * Attempts to resolve `input` URL/path relative to `base`.\n */\nfunction resolve(input, base) {\n  if (!input && !base) return '';\n  const url = parseUrl(input);\n  let inputType = url.type;\n  if (base && inputType !== 7 /* Absolute */) {\n    const baseUrl = parseUrl(base);\n    const baseType = baseUrl.type;\n    switch (inputType) {\n      case 1 /* Empty */:\n        url.hash = baseUrl.hash;\n      // fall through\n      case 2 /* Hash */:\n        url.query = baseUrl.query;\n      // fall through\n      case 3 /* Query */:\n      case 4 /* RelativePath */:\n        mergePaths(url, baseUrl);\n      // fall through\n      case 5 /* AbsolutePath */:\n        // The host, user, and port are joined, you can't copy one without the others.\n        url.user = baseUrl.user;\n        url.host = baseUrl.host;\n        url.port = baseUrl.port;\n      // fall through\n      case 6 /* SchemeRelative */:\n        // The input doesn't have a schema at least, so we need to copy at least that over.\n        url.scheme = baseUrl.scheme;\n    }\n    if (baseType > inputType) inputType = baseType;\n  }\n  normalizePath(url, inputType);\n  const queryHash = url.query + url.hash;\n  switch (inputType) {\n    // This is impossible, because of the empty checks at the start of the function.\n    // case UrlType.Empty:\n    case 2 /* Hash */:\n    case 3 /* Query */:\n      return queryHash;\n    case 4 /* RelativePath */:\n      {\n        // The first char is always a \"/\", and we need it to be relative.\n        const path = url.path.slice(1);\n        if (!path) return queryHash || '.';\n        if (isRelative(base || input) && !isRelative(path)) {\n          // If base started with a leading \".\", or there is no base and input started with a \".\",\n          // then we need to ensure that the relative path starts with a \".\". We don't know if\n          // relative starts with a \"..\", though, so check before prepending.\n          return './' + path + queryHash;\n        }\n        return path + queryHash;\n      }\n    case 5 /* AbsolutePath */:\n      return url.path + queryHash;\n    default:\n      return url.scheme + '//' + url.user + url.host + url.port + url.path + queryHash;\n  }\n}\nexport { resolve as default };","map":{"version":3,"names":["schemeRegex","urlRegex","fileRegex","isAbsoluteUrl","input","test","isSchemeRelativeUrl","startsWith","isAbsolutePath","isFileUrl","isRelative","parseAbsoluteUrl","match","exec","makeUrl","parseFileUrl","path","scheme","user","host","port","query","hash","type","parseUrl","url","stripPathFilename","endsWith","index","lastIndexOf","slice","mergePaths","base","normalizePath","rel","pieces","split","pointer","positive","addTrailingSlash","i","length","piece","resolve","inputType","baseUrl","baseType","queryHash"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@jridgewell\\resolve-uri\\src\\resolve-uri.ts"],"sourcesContent":["// Matches the scheme of a URL, eg \"http://\"\nconst schemeRegex = /^[\\w+.-]+:\\/\\//;\n\n/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n * 6. Query, including \"?\", optional.\n * 7. Hash, including \"#\", optional.\n */\nconst urlRegex = /^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?(\\?[^#]*)?(#.*)?/;\n\n/**\n * File URLs are weird. They dont' need the regular `//` in the scheme, they may or may not start\n * with a leading `/`, they can have a domain (but only if they don't start with a Windows drive).\n *\n * 1. Host, optional.\n * 2. Path, which may include \"/\", guaranteed.\n * 3. Query, including \"?\", optional.\n * 4. Hash, including \"#\", optional.\n */\nconst fileRegex = /^file:(?:\\/\\/((?![a-z]:)[^/#?]*)?)?(\\/?[^#?]*)(\\?[^#]*)?(#.*)?/i;\n\ntype Url = {\n  scheme: string;\n  user: string;\n  host: string;\n  port: string;\n  path: string;\n  query: string;\n  hash: string;\n  type: UrlType;\n};\n\nconst enum UrlType {\n  Empty = 1,\n  Hash = 2,\n  Query = 3,\n  RelativePath = 4,\n  AbsolutePath = 5,\n  SchemeRelative = 6,\n  Absolute = 7,\n}\n\nfunction isAbsoluteUrl(input: string): boolean {\n  return schemeRegex.test(input);\n}\n\nfunction isSchemeRelativeUrl(input: string): boolean {\n  return input.startsWith('//');\n}\n\nfunction isAbsolutePath(input: string): boolean {\n  return input.startsWith('/');\n}\n\nfunction isFileUrl(input: string): boolean {\n  return input.startsWith('file:');\n}\n\nfunction isRelative(input: string): boolean {\n  return /^[.?#]/.test(input);\n}\n\nfunction parseAbsoluteUrl(input: string): Url {\n  const match = urlRegex.exec(input)!;\n  return makeUrl(\n    match[1],\n    match[2] || '',\n    match[3],\n    match[4] || '',\n    match[5] || '/',\n    match[6] || '',\n    match[7] || '',\n  );\n}\n\nfunction parseFileUrl(input: string): Url {\n  const match = fileRegex.exec(input)!;\n  const path = match[2];\n  return makeUrl(\n    'file:',\n    '',\n    match[1] || '',\n    '',\n    isAbsolutePath(path) ? path : '/' + path,\n    match[3] || '',\n    match[4] || '',\n  );\n}\n\nfunction makeUrl(\n  scheme: string,\n  user: string,\n  host: string,\n  port: string,\n  path: string,\n  query: string,\n  hash: string,\n): Url {\n  return {\n    scheme,\n    user,\n    host,\n    port,\n    path,\n    query,\n    hash,\n    type: UrlType.Absolute,\n  };\n}\n\nfunction parseUrl(input: string): Url {\n  if (isSchemeRelativeUrl(input)) {\n    const url = parseAbsoluteUrl('http:' + input);\n    url.scheme = '';\n    url.type = UrlType.SchemeRelative;\n    return url;\n  }\n\n  if (isAbsolutePath(input)) {\n    const url = parseAbsoluteUrl('http://foo.com' + input);\n    url.scheme = '';\n    url.host = '';\n    url.type = UrlType.AbsolutePath;\n    return url;\n  }\n\n  if (isFileUrl(input)) return parseFileUrl(input);\n\n  if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);\n\n  const url = parseAbsoluteUrl('http://foo.com/' + input);\n  url.scheme = '';\n  url.host = '';\n  url.type = input\n    ? input.startsWith('?')\n      ? UrlType.Query\n      : input.startsWith('#')\n      ? UrlType.Hash\n      : UrlType.RelativePath\n    : UrlType.Empty;\n  return url;\n}\n\nfunction stripPathFilename(path: string): string {\n  // If a path ends with a parent directory \"..\", then it's a relative path with excess parent\n  // paths. It's not a file, so we can't strip it.\n  if (path.endsWith('/..')) return path;\n  const index = path.lastIndexOf('/');\n  return path.slice(0, index + 1);\n}\n\nfunction mergePaths(url: Url, base: Url) {\n  normalizePath(base, base.type);\n\n  // If the path is just a \"/\", then it was an empty path to begin with (remember, we're a relative\n  // path).\n  if (url.path === '/') {\n    url.path = base.path;\n  } else {\n    // Resolution happens relative to the base path's directory, not the file.\n    url.path = stripPathFilename(base.path) + url.path;\n  }\n}\n\n/**\n * The path can have empty directories \"//\", unneeded parents \"foo/..\", or current directory\n * \"foo/.\". We need to normalize to a standard representation.\n */\nfunction normalizePath(url: Url, type: UrlType) {\n  const rel = type <= UrlType.RelativePath;\n  const pieces = url.path.split('/');\n\n  // We need to preserve the first piece always, so that we output a leading slash. The item at\n  // pieces[0] is an empty string.\n  let pointer = 1;\n\n  // Positive is the number of real directories we've output, used for popping a parent directory.\n  // Eg, \"foo/bar/..\" will have a positive 2, and we can decrement to be left with just \"foo\".\n  let positive = 0;\n\n  // We need to keep a trailing slash if we encounter an empty directory (eg, splitting \"foo/\" will\n  // generate `[\"foo\", \"\"]` pieces). And, if we pop a parent directory. But once we encounter a\n  // real directory, we won't need to append, unless the other conditions happen again.\n  let addTrailingSlash = false;\n\n  for (let i = 1; i < pieces.length; i++) {\n    const piece = pieces[i];\n\n    // An empty directory, could be a trailing slash, or just a double \"//\" in the path.\n    if (!piece) {\n      addTrailingSlash = true;\n      continue;\n    }\n\n    // If we encounter a real directory, then we don't need to append anymore.\n    addTrailingSlash = false;\n\n    // A current directory, which we can always drop.\n    if (piece === '.') continue;\n\n    // A parent directory, we need to see if there are any real directories we can pop. Else, we\n    // have an excess of parents, and we'll need to keep the \"..\".\n    if (piece === '..') {\n      if (positive) {\n        addTrailingSlash = true;\n        positive--;\n        pointer--;\n      } else if (rel) {\n        // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute\n        // URL, protocol relative URL, or an absolute path, we don't need to keep excess.\n        pieces[pointer++] = piece;\n      }\n      continue;\n    }\n\n    // We've encountered a real directory. Move it to the next insertion pointer, which accounts for\n    // any popped or dropped directories.\n    pieces[pointer++] = piece;\n    positive++;\n  }\n\n  let path = '';\n  for (let i = 1; i < pointer; i++) {\n    path += '/' + pieces[i];\n  }\n  if (!path || (addTrailingSlash && !path.endsWith('/..'))) {\n    path += '/';\n  }\n  url.path = path;\n}\n\n/**\n * Attempts to resolve `input` URL/path relative to `base`.\n */\nexport default function resolve(input: string, base: string | undefined): string {\n  if (!input && !base) return '';\n\n  const url = parseUrl(input);\n  let inputType = url.type;\n\n  if (base && inputType !== UrlType.Absolute) {\n    const baseUrl = parseUrl(base);\n    const baseType = baseUrl.type;\n\n    switch (inputType) {\n      case UrlType.Empty:\n        url.hash = baseUrl.hash;\n      // fall through\n\n      case UrlType.Hash:\n        url.query = baseUrl.query;\n      // fall through\n\n      case UrlType.Query:\n      case UrlType.RelativePath:\n        mergePaths(url, baseUrl);\n      // fall through\n\n      case UrlType.AbsolutePath:\n        // The host, user, and port are joined, you can't copy one without the others.\n        url.user = baseUrl.user;\n        url.host = baseUrl.host;\n        url.port = baseUrl.port;\n      // fall through\n\n      case UrlType.SchemeRelative:\n        // The input doesn't have a schema at least, so we need to copy at least that over.\n        url.scheme = baseUrl.scheme;\n    }\n    if (baseType > inputType) inputType = baseType;\n  }\n\n  normalizePath(url, inputType);\n\n  const queryHash = url.query + url.hash;\n  switch (inputType) {\n    // This is impossible, because of the empty checks at the start of the function.\n    // case UrlType.Empty:\n\n    case UrlType.Hash:\n    case UrlType.Query:\n      return queryHash;\n\n    case UrlType.RelativePath: {\n      // The first char is always a \"/\", and we need it to be relative.\n      const path = url.path.slice(1);\n\n      if (!path) return queryHash || '.';\n\n      if (isRelative(base || input) && !isRelative(path)) {\n        // If base started with a leading \".\", or there is no base and input started with a \".\",\n        // then we need to ensure that the relative path starts with a \".\". We don't know if\n        // relative starts with a \"..\", though, so check before prepending.\n        return './' + path + queryHash;\n      }\n\n      return path + queryHash;\n    }\n\n    case UrlType.AbsolutePath:\n      return url.path + queryHash;\n\n    default:\n      return url.scheme + '//' + url.user + url.host + url.port + url.path + queryHash;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}