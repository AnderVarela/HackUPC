{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildDynamicImport = buildDynamicImport;\nvar _core = require(\"@babel/core\");\n{\n  exports.getDynamicImportSource = function getDynamicImportSource(node) {\n    const [source] = node.arguments;\n    return _core.types.isStringLiteral(source) || _core.types.isTemplateLiteral(source) ? source : _core.template.expression.ast`\\`\\${${source}}\\``;\n  };\n}\nfunction buildDynamicImport(node, deferToThen, wrapWithPromise, builder) {\n  const specifier = _core.types.isCallExpression(node) ? node.arguments[0] : node.source;\n  if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && specifier.quasis.length === 0) {\n    if (deferToThen) {\n      return _core.template.expression.ast`\n        Promise.resolve().then(() => ${builder(specifier)})\n      `;\n    } else return builder(specifier);\n  }\n  const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier(\"specifier\") : _core.types.templateLiteral([_core.types.templateElement({\n    raw: \"\"\n  }), _core.types.templateElement({\n    raw: \"\"\n  })], [_core.types.identifier(\"specifier\")]);\n  if (deferToThen) {\n    return _core.template.expression.ast`\n      (specifier =>\n        new Promise(r => r(${specifierToString}))\n          .then(s => ${builder(_core.types.identifier(\"s\"))})\n      )(${specifier})\n    `;\n  } else if (wrapWithPromise) {\n    return _core.template.expression.ast`\n      (specifier =>\n        new Promise(r => r(${builder(specifierToString)}))\n      )(${specifier})\n    `;\n  } else {\n    return _core.template.expression.ast`\n      (specifier => ${builder(specifierToString)})(${specifier})\n    `;\n  }\n}","map":{"version":3,"names":["_core","require","exports","getDynamicImportSource","node","source","arguments","types","isStringLiteral","isTemplateLiteral","template","expression","ast","buildDynamicImport","deferToThen","wrapWithPromise","builder","specifier","isCallExpression","quasis","length","specifierToString","identifier","templateLiteral","templateElement","raw"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\helper-module-transforms\\src\\dynamic-import.ts"],"sourcesContent":["// Heavily inspired by\n// https://github.com/airbnb/babel-plugin-dynamic-import-node/blob/master/src/utils.js\n\nimport { types as t, template } from \"@babel/core\";\n\nif (!process.env.BABEL_8_BREAKING && !USE_ESM && !IS_STANDALONE) {\n  // eslint-disable-next-line no-restricted-globals\n  exports.getDynamicImportSource = function getDynamicImportSource(\n    node: t.CallExpression,\n  ): t.StringLiteral | t.TemplateLiteral {\n    const [source] = node.arguments;\n\n    return t.isStringLiteral(source) || t.isTemplateLiteral(source)\n      ? source\n      : (template.expression.ast`\\`\\${${source}}\\`` as t.TemplateLiteral);\n  };\n}\n\nexport function buildDynamicImport(\n  node: t.CallExpression | t.ImportExpression,\n  deferToThen: boolean,\n  wrapWithPromise: boolean,\n  builder: (specifier: t.Expression) => t.Expression,\n): t.Expression {\n  const specifier = t.isCallExpression(node) ? node.arguments[0] : node.source;\n\n  if (\n    t.isStringLiteral(specifier) ||\n    (t.isTemplateLiteral(specifier) && specifier.quasis.length === 0)\n  ) {\n    if (deferToThen) {\n      return template.expression.ast`\n        Promise.resolve().then(() => ${builder(specifier)})\n      `;\n    } else return builder(specifier);\n  }\n\n  const specifierToString = t.isTemplateLiteral(specifier)\n    ? t.identifier(\"specifier\")\n    : t.templateLiteral(\n        [t.templateElement({ raw: \"\" }), t.templateElement({ raw: \"\" })],\n        [t.identifier(\"specifier\")],\n      );\n\n  if (deferToThen) {\n    return template.expression.ast`\n      (specifier =>\n        new Promise(r => r(${specifierToString}))\n          .then(s => ${builder(t.identifier(\"s\"))})\n      )(${specifier})\n    `;\n  } else if (wrapWithPromise) {\n    return template.expression.ast`\n      (specifier =>\n        new Promise(r => r(${builder(specifierToString)}))\n      )(${specifier})\n    `;\n  } else {\n    return template.expression.ast`\n      (specifier => ${builder(specifierToString)})(${specifier})\n    `;\n  }\n}\n"],"mappings":";;;;;;AAGA,IAAAA,KAAA,GAAAC,OAAA;AAEiE;EAE/DC,OAAO,CAACC,sBAAsB,GAAG,SAASA,sBAAsBA,CAC9DC,IAAsB,EACe;IACrC,MAAM,CAACC,MAAM,CAAC,GAAGD,IAAI,CAACE,SAAS;IAE/B,OAAON,KAAA,CAAAO,KAAC,CAACC,eAAe,CAACH,MAAM,CAAC,IAAIL,KAAA,CAAAO,KAAC,CAACE,iBAAiB,CAACJ,MAAM,CAAC,GAC3DA,MAAM,GACLL,KAAA,CAAAU,QAAQ,CAACC,UAAU,CAACC,GAAI,QAAOP,MAAO,KAA0B;EACvE,CAAC;AACH;AAEO,SAASQ,kBAAkBA,CAChCT,IAA2C,EAC3CU,WAAoB,EACpBC,eAAwB,EACxBC,OAAkD,EACpC;EACd,MAAMC,SAAS,GAAGjB,KAAA,CAAAO,KAAC,CAACW,gBAAgB,CAACd,IAAI,CAAC,GAAGA,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC,GAAGF,IAAI,CAACC,MAAM;EAE5E,IACEL,KAAA,CAAAO,KAAC,CAACC,eAAe,CAACS,SAAS,CAAC,IAC3BjB,KAAA,CAAAO,KAAC,CAACE,iBAAiB,CAACQ,SAAS,CAAC,IAAIA,SAAS,CAACE,MAAM,CAACC,MAAM,KAAK,CAAE,EACjE;IACA,IAAIN,WAAW,EAAE;MACf,OAAOd,KAAA,CAAAU,QAAQ,CAACC,UAAU,CAACC,GAAI;AACrC,uCAAuCI,OAAO,CAACC,SAAS,CAAE;AAC1D,OAAO;IACH,CAAC,MAAM,OAAOD,OAAO,CAACC,SAAS,CAAC;EAClC;EAEA,MAAMI,iBAAiB,GAAGrB,KAAA,CAAAO,KAAC,CAACE,iBAAiB,CAACQ,SAAS,CAAC,GACpDjB,KAAA,CAAAO,KAAC,CAACe,UAAU,CAAC,WAAW,CAAC,GACzBtB,KAAA,CAAAO,KAAC,CAACgB,eAAe,CACf,CAACvB,KAAA,CAAAO,KAAC,CAACiB,eAAe,CAAC;IAAEC,GAAG,EAAE;EAAG,CAAC,CAAC,EAAEzB,KAAA,CAAAO,KAAC,CAACiB,eAAe,CAAC;IAAEC,GAAG,EAAE;EAAG,CAAC,CAAC,CAAC,EAChE,CAACzB,KAAA,CAAAO,KAAC,CAACe,UAAU,CAAC,WAAW,CAAC,CAC5B,CAAC;EAEL,IAAIR,WAAW,EAAE;IACf,OAAOd,KAAA,CAAAU,QAAQ,CAACC,UAAU,CAACC,GAAI;AACnC;AACA,6BAA6BS,iBAAkB;AAC/C,uBAAuBL,OAAO,CAAChB,KAAA,CAAAO,KAAC,CAACe,UAAU,CAAC,GAAG,CAAC,CAAE;AAClD,UAAUL,SAAU;AACpB,KAAK;EACH,CAAC,MAAM,IAAIF,eAAe,EAAE;IAC1B,OAAOf,KAAA,CAAAU,QAAQ,CAACC,UAAU,CAACC,GAAI;AACnC;AACA,6BAA6BI,OAAO,CAACK,iBAAiB,CAAE;AACxD,UAAUJ,SAAU;AACpB,KAAK;EACH,CAAC,MAAM;IACL,OAAOjB,KAAA,CAAAU,QAAQ,CAACC,UAAU,CAACC,GAAI;AACnC,sBAAsBI,OAAO,CAACK,iBAAiB,CAAE,KAAIJ,SAAU;AAC/D,KAAK;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}