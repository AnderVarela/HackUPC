{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst tsutils = __importStar(require(\"tsutils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'restrict-plus-operands',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Require both operands of addition to be the same type and be `bigint`, `number`, or `string`',\n      recommended: 'error',\n      requiresTypeChecking: true\n    },\n    messages: {\n      bigintAndNumber: \"Numeric '+' operations must either be both bigints or both numbers. Got `{{left}}` + `{{right}}`.\",\n      invalid: \"Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got `{{type}}`.\",\n      mismatched: \"Operands of '+' operations must be a number or {{stringLike}}. Got `{{left}}` + `{{right}}`.\"\n    },\n    schema: [{\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        allowAny: {\n          description: 'Whether to allow `any` typed values.',\n          type: 'boolean'\n        },\n        allowBoolean: {\n          description: 'Whether to allow `boolean` typed values.',\n          type: 'boolean'\n        },\n        allowNullish: {\n          description: 'Whether to allow potentially `null` or `undefined` typed values.',\n          type: 'boolean'\n        },\n        allowNumberAndString: {\n          description: 'Whether to allow `bigint`/`number` typed values and `string` typed values to be added together.',\n          type: 'boolean'\n        },\n        allowRegExp: {\n          description: 'Whether to allow `regexp` typed values.',\n          type: 'boolean'\n        },\n        checkCompoundAssignments: {\n          description: 'Whether to check compound assignments such as `+=`.',\n          type: 'boolean'\n        }\n      }\n    }]\n  },\n  defaultOptions: [{\n    checkCompoundAssignments: false\n  }],\n  create(context, [{\n    checkCompoundAssignments,\n    allowAny,\n    allowBoolean,\n    allowNullish,\n    allowNumberAndString,\n    allowRegExp\n  }]) {\n    const service = util.getParserServices(context);\n    const typeChecker = service.program.getTypeChecker();\n    const stringLikes = [allowAny && '`any`', allowBoolean && '`boolean`', allowNullish && '`null`', allowRegExp && '`RegExp`', allowNullish && '`undefined`'].filter(value => typeof value === 'string');\n    const stringLike = stringLikes.length ? stringLikes.length === 1 ? `string, allowing a string + ${stringLikes[0]}` : `string, allowing a string + any of: ${stringLikes.join(', ')}` : 'string';\n    function getTypeConstrained(node) {\n      return typeChecker.getBaseTypeOfLiteralType(util.getConstrainedTypeAtLocation(typeChecker, service.esTreeNodeToTSNodeMap.get(node)));\n    }\n    function checkPlusOperands(node) {\n      const leftType = getTypeConstrained(node.left);\n      const rightType = getTypeConstrained(node.right);\n      if (leftType === rightType && tsutils.isTypeFlagSet(leftType, ts.TypeFlags.BigIntLike | ts.TypeFlags.NumberLike | ts.TypeFlags.StringLike)) {\n        return;\n      }\n      let hadIndividualComplaint = false;\n      for (const [baseNode, baseType, otherType] of [[node.left, leftType, rightType], [node.right, rightType, leftType]]) {\n        if (isTypeFlagSetInUnion(baseType, ts.TypeFlags.ESSymbolLike | ts.TypeFlags.Never | ts.TypeFlags.Unknown) || !allowAny && isTypeFlagSetInUnion(baseType, ts.TypeFlags.Any) || !allowBoolean && isTypeFlagSetInUnion(baseType, ts.TypeFlags.BooleanLike) || !allowNullish && util.isTypeFlagSet(baseType, ts.TypeFlags.Null | ts.TypeFlags.Undefined)) {\n          context.report({\n            data: {\n              stringLike,\n              type: typeChecker.typeToString(baseType)\n            },\n            messageId: 'invalid',\n            node: baseNode\n          });\n          hadIndividualComplaint = true;\n          continue;\n        }\n        // RegExps also contain ts.TypeFlags.Any & ts.TypeFlags.Object\n        for (const subBaseType of tsutils.unionTypeParts(baseType)) {\n          const typeName = util.getTypeName(typeChecker, subBaseType);\n          if (typeName === 'RegExp' ? !allowRegExp || tsutils.isTypeFlagSet(otherType, ts.TypeFlags.NumberLike) : !allowAny && util.isTypeAnyType(subBaseType) || isDeeplyObjectType(subBaseType)) {\n            context.report({\n              data: {\n                stringLike,\n                type: typeChecker.typeToString(subBaseType)\n              },\n              messageId: 'invalid',\n              node: baseNode\n            });\n            hadIndividualComplaint = true;\n            continue;\n          }\n        }\n      }\n      if (hadIndividualComplaint) {\n        return;\n      }\n      for (const [baseType, otherType] of [[leftType, rightType], [rightType, leftType]]) {\n        if (!allowNumberAndString && isTypeFlagSetInUnion(baseType, ts.TypeFlags.StringLike) && isTypeFlagSetInUnion(otherType, ts.TypeFlags.NumberLike)) {\n          return context.report({\n            data: {\n              stringLike,\n              left: typeChecker.typeToString(leftType),\n              right: typeChecker.typeToString(rightType)\n            },\n            messageId: 'mismatched',\n            node\n          });\n        }\n        if (isTypeFlagSetInUnion(baseType, ts.TypeFlags.NumberLike) && isTypeFlagSetInUnion(otherType, ts.TypeFlags.BigIntLike)) {\n          return context.report({\n            data: {\n              left: typeChecker.typeToString(leftType),\n              right: typeChecker.typeToString(rightType)\n            },\n            messageId: 'bigintAndNumber',\n            node\n          });\n        }\n      }\n    }\n    return Object.assign({\n      \"BinaryExpression[operator='+']\": checkPlusOperands\n    }, checkCompoundAssignments && {\n      \"AssignmentExpression[operator='+=']\"(node) {\n        checkPlusOperands(node);\n      }\n    });\n  }\n});\nfunction isDeeplyObjectType(type) {\n  return type.isIntersection() ? tsutils.intersectionTypeParts(type).every(tsutils.isObjectType) : tsutils.unionTypeParts(type).every(tsutils.isObjectType);\n}\nfunction isTypeFlagSetInUnion(type, flag) {\n  return tsutils.unionTypeParts(type).some(subType => tsutils.isTypeFlagSet(subType, flag));\n}","map":{"version":3,"names":["tsutils","__importStar","require","ts","util","exports","default","createRule","name","meta","type","docs","description","recommended","requiresTypeChecking","messages","bigintAndNumber","invalid","mismatched","schema","additionalProperties","properties","allowAny","allowBoolean","allowNullish","allowNumberAndString","allowRegExp","checkCompoundAssignments","defaultOptions","create","context","service","getParserServices","typeChecker","program","getTypeChecker","stringLikes","filter","value","stringLike","length","join","getTypeConstrained","node","getBaseTypeOfLiteralType","getConstrainedTypeAtLocation","esTreeNodeToTSNodeMap","get","checkPlusOperands","leftType","left","rightType","right","isTypeFlagSet","TypeFlags","BigIntLike","NumberLike","StringLike","hadIndividualComplaint","baseNode","baseType","otherType","isTypeFlagSetInUnion","ESSymbolLike","Never","Unknown","Any","BooleanLike","Null","Undefined","report","data","typeToString","messageId","subBaseType","unionTypeParts","typeName","getTypeName","isTypeAnyType","isDeeplyObjectType","Object","assign","AssignmentExpression[operator='+=']","isIntersection","intersectionTypeParts","every","isObjectType","flag","some","subType"],"sources":["../../src/rules/restrict-plus-operands.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}