{"ast":null,"code":"/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\nexport default replaceResultTransformer;","map":{"version":3,"names":["replaceResultTransformer","replaceWhat","replaceWith","onEndResult","endResult","Error","replace"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\common-tags\\src\\replaceResultTransformer\\replaceResultTransformer.js"],"sourcesContent":["/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nconst replaceResultTransformer = (replaceWhat, replaceWith) => ({\n  onEndResult(endResult) {\n    if (replaceWhat == null || replaceWith == null) {\n      throw new Error(\n        'replaceResultTransformer requires at least 2 arguments.',\n      );\n    }\n    return endResult.replace(replaceWhat, replaceWith);\n  },\n});\n\nexport default replaceResultTransformer;\n"],"mappings":"AAAA;;;;;;AAMA,IAAMA,wBAAA,GAA2B,SAA3BA,wBAA2BA,CAACC,WAAD,EAAcC,WAAd;EAAA,OAA+B;IAC9DC,WAD8D,WAAAA,YAClDC,SADkD,EACvC;MACrB,IAAIH,WAAA,IAAe,IAAf,IAAuBC,WAAA,IAAe,IAA1C,EAAgD;QAC9C,MAAM,IAAIG,KAAJ,CACJ,yDADI,CAAN;MAGD;MACD,OAAOD,SAAA,CAAUE,OAAV,CAAkBL,WAAlB,EAA+BC,WAA/B,CAAP;IACD;EAR6D,CAA/B;AAAA,CAAjC;AAWA,eAAeF,wBAAf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}