{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('quotes');\nexports.default = util.createRule({\n  name: 'quotes',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce the consistent use of either backticks, double, or single quotes',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'code',\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    // TODO: this rule has only had messages since v7.0 - remove this when we remove support for v6\n    messages: (_a = baseRule.meta.messages) !== null && _a !== void 0 ? _a : {\n      wrongQuotes: 'Strings must use {{description}}.'\n    },\n    schema: baseRule.meta.schema\n  },\n  defaultOptions: ['double', {\n    allowTemplateLiterals: false,\n    avoidEscape: false\n  }],\n  create(context, [option]) {\n    const rules = baseRule.create(context);\n    function isAllowedAsNonBacktick(node) {\n      const parent = node.parent;\n      switch (parent === null || parent === void 0 ? void 0 : parent.type) {\n        case utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition:\n        case utils_1.AST_NODE_TYPES.TSMethodSignature:\n        case utils_1.AST_NODE_TYPES.TSPropertySignature:\n        case utils_1.AST_NODE_TYPES.TSModuleDeclaration:\n        case utils_1.AST_NODE_TYPES.TSLiteralType:\n        case utils_1.AST_NODE_TYPES.TSExternalModuleReference:\n          return true;\n        case utils_1.AST_NODE_TYPES.TSEnumMember:\n          return node === parent.id;\n        case utils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition:\n        case utils_1.AST_NODE_TYPES.PropertyDefinition:\n          return node === parent.key;\n        default:\n          return false;\n      }\n    }\n    return {\n      Literal(node) {\n        if (option === 'backtick' && isAllowedAsNonBacktick(node)) {\n          return;\n        }\n        rules.Literal(node);\n      },\n      TemplateLiteral(node) {\n        rules.TemplateLiteral(node);\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","getESLintCoreRule_1","baseRule","getESLintCoreRule","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","hasSuggestions","messages","_a","wrongQuotes","schema","defaultOptions","allowTemplateLiterals","avoidEscape","create","context","option","rules","isAllowedAsNonBacktick","node","parent","AST_NODE_TYPES","TSAbstractMethodDefinition","TSMethodSignature","TSPropertySignature","TSModuleDeclaration","TSLiteralType","TSExternalModuleReference","TSEnumMember","id","TSAbstractPropertyDefinition","PropertyDefinition","key","Literal","TemplateLiteral"],"sources":["../../src/rules/quotes.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AACA,MAAAG,mBAAA,GAAAH,OAAA;AAEA,MAAMI,QAAQ,GAAG,IAAAD,mBAAA,CAAAE,iBAAiB,EAAC,QAAQ,CAAC;AAK5CC,OAAA,CAAAC,OAAA,GAAeN,IAAI,CAACO,UAAU,CAAsB;EAClDC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE;IACJC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;MACJC,WAAW,EACT,0EAA0E;MAC5EC,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE;KAClB;IACDC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAEb,QAAQ,CAACM,IAAI,CAACO,cAAc;IAC5C;IACAC,QAAQ,EAAE,CAAAC,EAAA,GAAAf,QAAQ,CAACM,IAAI,CAACQ,QAAQ,cAAAC,EAAA,cAAAA,EAAA,GAAI;MAClCC,WAAW,EAAE;KACd;IACDC,MAAM,EAAEjB,QAAQ,CAACM,IAAI,CAACW;GACvB;EACDC,cAAc,EAAE,CACd,QAAQ,EACR;IACEC,qBAAqB,EAAE,KAAK;IAC5BC,WAAW,EAAE;GACd,CACF;EACDC,MAAMA,CAACC,OAAO,EAAE,CAACC,MAAM,CAAC;IACtB,MAAMC,KAAK,GAAGxB,QAAQ,CAACqB,MAAM,CAACC,OAAO,CAAC;IAEtC,SAASG,sBAAsBA,CAACC,IAAsB;MACpD,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;MAE1B,QAAQA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEpB,IAAI;QAClB,KAAKZ,OAAA,CAAAiC,cAAc,CAACC,0BAA0B;QAC9C,KAAKlC,OAAA,CAAAiC,cAAc,CAACE,iBAAiB;QACrC,KAAKnC,OAAA,CAAAiC,cAAc,CAACG,mBAAmB;QACvC,KAAKpC,OAAA,CAAAiC,cAAc,CAACI,mBAAmB;QACvC,KAAKrC,OAAA,CAAAiC,cAAc,CAACK,aAAa;QACjC,KAAKtC,OAAA,CAAAiC,cAAc,CAACM,yBAAyB;UAC3C,OAAO,IAAI;QAEb,KAAKvC,OAAA,CAAAiC,cAAc,CAACO,YAAY;UAC9B,OAAOT,IAAI,KAAKC,MAAM,CAACS,EAAE;QAE3B,KAAKzC,OAAA,CAAAiC,cAAc,CAACS,4BAA4B;QAChD,KAAK1C,OAAA,CAAAiC,cAAc,CAACU,kBAAkB;UACpC,OAAOZ,IAAI,KAAKC,MAAM,CAACY,GAAG;QAE5B;UACE,OAAO,KAAK;;IAElB;IAEA,OAAO;MACLC,OAAOA,CAACd,IAAI;QACV,IAAIH,MAAM,KAAK,UAAU,IAAIE,sBAAsB,CAACC,IAAI,CAAC,EAAE;UACzD;;QAGFF,KAAK,CAACgB,OAAO,CAACd,IAAI,CAAC;MACrB,CAAC;MAEDe,eAAeA,CAACf,IAAI;QAClBF,KAAK,CAACiB,eAAe,CAACf,IAAI,CAAC;MAC7B;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}