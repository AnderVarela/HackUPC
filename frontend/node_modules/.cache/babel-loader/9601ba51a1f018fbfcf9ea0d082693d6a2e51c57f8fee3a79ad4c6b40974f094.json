{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'adjacent-overload-signatures',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require that function overload signatures be consecutive',\n      recommended: 'error'\n    },\n    schema: [],\n    messages: {\n      adjacentSignature: 'All {{name}} signatures should be adjacent.'\n    }\n  },\n  defaultOptions: [],\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\n     * Gets the name and attribute of the member being processed.\n     * @param member the member being processed.\n     * @returns the name and attribute of the member or null if it's a member not relevant to the rule.\n     */\n    function getMemberMethod(member) {\n      var _a, _b;\n      if (!member) {\n        return null;\n      }\n      const isStatic = 'static' in member && !!member.static;\n      switch (member.type) {\n        case utils_1.AST_NODE_TYPES.ExportDefaultDeclaration:\n        case utils_1.AST_NODE_TYPES.ExportNamedDeclaration:\n          {\n            // export statements (e.g. export { a };)\n            // have no declarations, so ignore them\n            if (!member.declaration) {\n              return null;\n            }\n            return getMemberMethod(member.declaration);\n          }\n        case utils_1.AST_NODE_TYPES.TSDeclareFunction:\n        case utils_1.AST_NODE_TYPES.FunctionDeclaration:\n          {\n            const name = (_b = (_a = member.id) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : null;\n            if (name == null) {\n              return null;\n            }\n            return {\n              name,\n              static: isStatic,\n              callSignature: false,\n              type: util.MemberNameType.Normal\n            };\n          }\n        case utils_1.AST_NODE_TYPES.TSMethodSignature:\n          return Object.assign(Object.assign({}, util.getNameFromMember(member, sourceCode)), {\n            static: isStatic,\n            callSignature: false\n          });\n        case utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration:\n          return {\n            name: 'call',\n            static: isStatic,\n            callSignature: true,\n            type: util.MemberNameType.Normal\n          };\n        case utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration:\n          return {\n            name: 'new',\n            static: isStatic,\n            callSignature: false,\n            type: util.MemberNameType.Normal\n          };\n        case utils_1.AST_NODE_TYPES.MethodDefinition:\n          return Object.assign(Object.assign({}, util.getNameFromMember(member, sourceCode)), {\n            static: isStatic,\n            callSignature: false\n          });\n      }\n      return null;\n    }\n    function isSameMethod(method1, method2) {\n      return !!method2 && method1.name === method2.name && method1.static === method2.static && method1.callSignature === method2.callSignature && method1.type === method2.type;\n    }\n    function getMembers(node) {\n      switch (node.type) {\n        case utils_1.AST_NODE_TYPES.ClassBody:\n        case utils_1.AST_NODE_TYPES.Program:\n        case utils_1.AST_NODE_TYPES.TSModuleBlock:\n        case utils_1.AST_NODE_TYPES.TSInterfaceBody:\n        case utils_1.AST_NODE_TYPES.BlockStatement:\n          return node.body;\n        case utils_1.AST_NODE_TYPES.TSTypeLiteral:\n          return node.members;\n      }\n    }\n    /**\n     * Check the body for overload methods.\n     * @param {ASTNode} node the body to be inspected.\n     */\n    function checkBodyForOverloadMethods(node) {\n      const members = getMembers(node);\n      if (members) {\n        let lastMethod = null;\n        const seenMethods = [];\n        members.forEach(member => {\n          const method = getMemberMethod(member);\n          if (method == null) {\n            lastMethod = null;\n            return;\n          }\n          const index = seenMethods.findIndex(seenMethod => isSameMethod(method, seenMethod));\n          if (index > -1 && !isSameMethod(method, lastMethod)) {\n            context.report({\n              node: member,\n              messageId: 'adjacentSignature',\n              data: {\n                name: `${method.static ? 'static ' : ''}${method.name}`\n              }\n            });\n          } else if (index === -1) {\n            seenMethods.push(method);\n          }\n          lastMethod = method;\n        });\n      }\n    }\n    return {\n      ClassBody: checkBodyForOverloadMethods,\n      Program: checkBodyForOverloadMethods,\n      TSModuleBlock: checkBodyForOverloadMethods,\n      TSTypeLiteral: checkBodyForOverloadMethods,\n      TSInterfaceBody: checkBodyForOverloadMethods,\n      BlockStatement: checkBodyForOverloadMethods\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","exports","default","createRule","name","meta","type","docs","description","recommended","schema","messages","adjacentSignature","defaultOptions","create","context","sourceCode","getSourceCode","getMemberMethod","member","isStatic","static","AST_NODE_TYPES","ExportDefaultDeclaration","ExportNamedDeclaration","declaration","TSDeclareFunction","FunctionDeclaration","_b","_a","id","callSignature","MemberNameType","Normal","TSMethodSignature","Object","assign","getNameFromMember","TSCallSignatureDeclaration","TSConstructSignatureDeclaration","MethodDefinition","isSameMethod","method1","method2","getMembers","node","ClassBody","Program","TSModuleBlock","TSInterfaceBody","BlockStatement","body","TSTypeLiteral","members","checkBodyForOverloadMethods","lastMethod","seenMethods","forEach","method","index","findIndex","seenMethod","report","messageId","data","push"],"sources":["../../src/rules/adjacent-overload-signatures.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}