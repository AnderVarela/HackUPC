{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\nfunction _taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n    _classCallCheck(this, TemplateTag);\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      }\n\n      // else, return a transformed end result of processing the template with our tag\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    };\n\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n      return this.transformers.reduce(cb, str);\n    }\n\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n      return this.transformers.reduce(cb, substitution);\n    }\n\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n  return TemplateTag;\n}();\nexport default TemplateTag;","map":{"version":3,"names":["TemplateTag","_this","_len","arguments","length","transformers","Array","_key","_classCallCheck","tag","strings","_len2","expressions","_key2","interimTag","bind","transformEndResult","map","transformString","reduce","processSubstitutions","isArray","transformer","previousTag","template","_len3","substitutions","_key3","_templateObject","apply","undefined","concat","resultSoFar","remainingPart","substitution","transformSubstitution","shift","str","cb","res","transform","onString","onSubstitution","endResult","onEndResult"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\common-tags\\src\\TemplateTag\\TemplateTag.js"],"sourcesContent":["/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nexport default class TemplateTag {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  constructor(...transformers) {\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(transformer => {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n  tag = (strings, ...expressions) => {\n    if (typeof strings === 'function') {\n      // if the first argument passed is a function, assume it is a template tag and return\n      // an intermediary tag that processes the template using the aforementioned tag, passing the\n      // result to our tag\n      return this.interimTag.bind(this, strings);\n    }\n\n    if (typeof strings === 'string') {\n      // if the first argument passed is a string, just transform it\n      return this.transformEndResult(strings);\n    }\n\n    // else, return a transformed end result of processing the template with our tag\n    strings = strings.map(this.transformString.bind(this));\n    return this.transformEndResult(\n      strings.reduce(this.processSubstitutions.bind(this, expressions)),\n    );\n  };\n\n  /**\n   * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n   * template tag to our own template tag.\n   * @param  {Function}        nextTag          - the received template tag\n   * @param  {Array<String>}   template         - the template to process\n   * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n   * @return {*}                                - the final processed value\n   */\n  interimTag(previousTag, template, ...substitutions) {\n    return this.tag`${previousTag(template, ...substitutions)}`;\n  }\n\n  /**\n   * Performs bulk processing on the tagged template, transforming each substitution and then\n   * concatenating the resulting values into a string.\n   * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n   * @param  {String}   resultSoFar   - this iteration's result string so far\n   * @param  {String}   remainingPart - the template chunk after the current substitution\n   * @return {String}                 - the result of joining this iteration's processed substitution with the result\n   */\n  processSubstitutions(substitutions, resultSoFar, remainingPart) {\n    const substitution = this.transformSubstitution(\n      substitutions.shift(),\n      resultSoFar,\n    );\n    return ''.concat(resultSoFar, substitution, remainingPart);\n  }\n\n  /**\n   * Iterate through each transformer, applying the transformer's `onString` method to the template\n   * strings before all substitutions are processed.\n   * @param {String}  str - The input string\n   * @return {String}     - The final results of processing each transformer\n   */\n  transformString(str) {\n    const cb = (res, transform) =>\n      transform.onString ? transform.onString(res) : res;\n    return this.transformers.reduce(cb, str);\n  }\n\n  /**\n   * When a substitution is encountered, iterates through each transformer and applies the transformer's\n   * `onSubstitution` method to the substitution.\n   * @param  {*}      substitution - The current substitution\n   * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n   * @return {*}                   - The final result of applying all substitution transformations.\n   */\n  transformSubstitution(substitution, resultSoFar) {\n    const cb = (res, transform) =>\n      transform.onSubstitution\n        ? transform.onSubstitution(res, resultSoFar)\n        : res;\n    return this.transformers.reduce(cb, substitution);\n  }\n\n  /**\n   * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n   * template literal after all substitutions have finished processing.\n   * @param  {String} endResult - The processed template, just before it is returned from the tag\n   * @return {String}           - The final results of processing each transformer\n   */\n  transformEndResult(endResult) {\n    const cb = (res, transform) =>\n      transform.onEndResult ? transform.onEndResult(res) : res;\n    return this.transformers.reduce(cb, endResult);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}