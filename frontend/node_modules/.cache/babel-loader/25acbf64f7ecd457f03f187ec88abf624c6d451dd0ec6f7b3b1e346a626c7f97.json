{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function () {\n  var AssertionError = function () {\n    function AssertionError(a) {\n      this.constructor$(a);\n      this.message = a;\n      this.name = \"AssertionError\";\n    }\n    AssertionError.prototype = new Error();\n    AssertionError.prototype.constructor = AssertionError;\n    AssertionError.prototype.constructor$ = Error;\n    return AssertionError;\n  }();\n  function getParams(args) {\n    var params = [];\n    for (var i = 0; i < args.length; ++i) params.push(\"arg\" + i);\n    return params;\n  }\n  function nativeAssert(callName, args, expect) {\n    try {\n      var params = getParams(args);\n      var constructorArgs = params;\n      constructorArgs.push(\"return \" + callName + \"(\" + params.join(\",\") + \");\");\n      var fn = Function.apply(null, constructorArgs);\n      return fn.apply(null, args);\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) {\n        throw e;\n      } else {\n        return expect;\n      }\n    }\n  }\n  return function assert(boolExpr, message) {\n    if (boolExpr === true) return;\n    if (typeof boolExpr === \"string\" && boolExpr.charAt(0) === \"%\") {\n      var nativeCallName = boolExpr;\n      var $_len = arguments.length;\n      var args = new Array(Math.max($_len - 2, 0));\n      for (var $_i = 2; $_i < $_len; ++$_i) {\n        args[$_i - 2] = arguments[$_i];\n      }\n      ;\n      if (nativeAssert(nativeCallName, args, message) === message) return;\n      message = nativeCallName + \" !== \" + message;\n    }\n    var ret = new AssertionError(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(ret, assert);\n    }\n    throw ret;\n  };\n}();","map":{"version":3,"names":["module","exports","AssertionError","a","constructor$","message","name","prototype","Error","constructor","getParams","args","params","i","length","push","nativeAssert","callName","expect","constructorArgs","join","fn","Function","apply","e","SyntaxError","assert","boolExpr","charAt","nativeCallName","$_len","arguments","Array","Math","max","$_i","ret","captureStackTrace"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/bluebird/js/release/assert.js"],"sourcesContent":["\"use strict\";\nmodule.exports = (function(){\nvar AssertionError = (function() {\n    function AssertionError(a) {\n        this.constructor$(a);\n        this.message = a;\n        this.name = \"AssertionError\";\n    }\n    AssertionError.prototype = new Error();\n    AssertionError.prototype.constructor = AssertionError;\n    AssertionError.prototype.constructor$ = Error;\n    return AssertionError;\n})();\n\nfunction getParams(args) {\n    var params = [];\n    for (var i = 0; i < args.length; ++i) params.push(\"arg\" + i);\n    return params;\n}\n\nfunction nativeAssert(callName, args, expect) {\n    try {\n        var params = getParams(args);\n        var constructorArgs = params;\n        constructorArgs.push(\"return \" +\n                callName + \"(\"+ params.join(\",\") + \");\");\n        var fn = Function.apply(null, constructorArgs);\n        return fn.apply(null, args);\n    } catch (e) {\n        if (!(e instanceof SyntaxError)) {\n            throw e;\n        } else {\n            return expect;\n        }\n    }\n}\n\nreturn function assert(boolExpr, message) {\n    if (boolExpr === true) return;\n\n    if (typeof boolExpr === \"string\" &&\n        boolExpr.charAt(0) === \"%\") {\n        var nativeCallName = boolExpr;\n        var $_len = arguments.length;var args = new Array(Math.max($_len - 2, 0)); for(var $_i = 2; $_i < $_len; ++$_i) {args[$_i - 2] = arguments[$_i];};\n        if (nativeAssert(nativeCallName, args, message) === message) return;\n        message = (nativeCallName + \" !== \" + message);\n    }\n\n    var ret = new AssertionError(message);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(ret, assert);\n    }\n    throw ret;\n};\n})();\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAI,YAAU;EAC5B,IAAIC,cAAc,GAAI,YAAW;IAC7B,SAASA,cAAcA,CAACC,CAAC,EAAE;MACvB,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC;MACpB,IAAI,CAACE,OAAO,GAAGF,CAAC;MAChB,IAAI,CAACG,IAAI,GAAG,gBAAgB;IAChC;IACAJ,cAAc,CAACK,SAAS,GAAG,IAAIC,KAAK,CAAC,CAAC;IACtCN,cAAc,CAACK,SAAS,CAACE,WAAW,GAAGP,cAAc;IACrDA,cAAc,CAACK,SAAS,CAACH,YAAY,GAAGI,KAAK;IAC7C,OAAON,cAAc;EACzB,CAAC,CAAE,CAAC;EAEJ,SAASQ,SAASA,CAACC,IAAI,EAAE;IACrB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAAED,MAAM,CAACG,IAAI,CAAC,KAAK,GAAGF,CAAC,CAAC;IAC5D,OAAOD,MAAM;EACjB;EAEA,SAASI,YAAYA,CAACC,QAAQ,EAAEN,IAAI,EAAEO,MAAM,EAAE;IAC1C,IAAI;MACA,IAAIN,MAAM,GAAGF,SAAS,CAACC,IAAI,CAAC;MAC5B,IAAIQ,eAAe,GAAGP,MAAM;MAC5BO,eAAe,CAACJ,IAAI,CAAC,SAAS,GACtBE,QAAQ,GAAG,GAAG,GAAEL,MAAM,CAACQ,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;MAChD,IAAIC,EAAE,GAAGC,QAAQ,CAACC,KAAK,CAAC,IAAI,EAAEJ,eAAe,CAAC;MAC9C,OAAOE,EAAE,CAACE,KAAK,CAAC,IAAI,EAAEZ,IAAI,CAAC;IAC/B,CAAC,CAAC,OAAOa,CAAC,EAAE;MACR,IAAI,EAAEA,CAAC,YAAYC,WAAW,CAAC,EAAE;QAC7B,MAAMD,CAAC;MACX,CAAC,MAAM;QACH,OAAON,MAAM;MACjB;IACJ;EACJ;EAEA,OAAO,SAASQ,MAAMA,CAACC,QAAQ,EAAEtB,OAAO,EAAE;IACtC,IAAIsB,QAAQ,KAAK,IAAI,EAAE;IAEvB,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAC5BA,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC5B,IAAIC,cAAc,GAAGF,QAAQ;MAC7B,IAAIG,KAAK,GAAGC,SAAS,CAACjB,MAAM;MAAC,IAAIH,IAAI,GAAG,IAAIqB,KAAK,CAACC,IAAI,CAACC,GAAG,CAACJ,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;MAAE,KAAI,IAAIK,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,KAAK,EAAE,EAAEK,GAAG,EAAE;QAACxB,IAAI,CAACwB,GAAG,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,GAAG,CAAC;MAAC;MAAC;MACjJ,IAAInB,YAAY,CAACa,cAAc,EAAElB,IAAI,EAAEN,OAAO,CAAC,KAAKA,OAAO,EAAE;MAC7DA,OAAO,GAAIwB,cAAc,GAAG,OAAO,GAAGxB,OAAQ;IAClD;IAEA,IAAI+B,GAAG,GAAG,IAAIlC,cAAc,CAACG,OAAO,CAAC;IACrC,IAAIG,KAAK,CAAC6B,iBAAiB,EAAE;MACzB7B,KAAK,CAAC6B,iBAAiB,CAACD,GAAG,EAAEV,MAAM,CAAC;IACxC;IACA,MAAMU,GAAG;EACb,CAAC;AACD,CAAC,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}