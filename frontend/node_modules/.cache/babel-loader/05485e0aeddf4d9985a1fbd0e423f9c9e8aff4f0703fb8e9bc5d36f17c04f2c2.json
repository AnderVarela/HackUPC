{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { ErrorKind } from './error';\nimport { Parser } from './parser';\nimport { isDateElement, isDateTimeSkeleton, isNumberElement, isNumberSkeleton, isPluralElement, isSelectElement, isTagElement, isTimeElement } from './types';\nfunction pruneLocation(els) {\n  els.forEach(function (el) {\n    delete el.location;\n    if (isSelectElement(el) || isPluralElement(el)) {\n      for (var k in el.options) {\n        delete el.options[k].location;\n        pruneLocation(el.options[k].value);\n      }\n    } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {\n      delete el.style.location;\n    } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {\n      delete el.style.location;\n    } else if (isTagElement(el)) {\n      pruneLocation(el.children);\n    }\n  });\n}\nexport function parse(message, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  opts = __assign({\n    shouldParseSkeletons: true,\n    requiresOtherClause: true\n  }, opts);\n  var result = new Parser(message, opts).parse();\n  if (result.err) {\n    var error = SyntaxError(ErrorKind[result.err.kind]);\n    // @ts-expect-error Assign to error object\n    error.location = result.err.location;\n    // @ts-expect-error Assign to error object\n    error.originalMessage = result.err.message;\n    throw error;\n  }\n  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n    pruneLocation(result.val);\n  }\n  return result.val;\n}\nexport * from './types';\n// only for testing\nexport var _Parser = Parser;","map":{"version":3,"names":["__assign","ErrorKind","Parser","isDateElement","isDateTimeSkeleton","isNumberElement","isNumberSkeleton","isPluralElement","isSelectElement","isTagElement","isTimeElement","pruneLocation","els","forEach","el","location","k","options","value","style","children","parse","message","opts","shouldParseSkeletons","requiresOtherClause","result","err","error","SyntaxError","kind","originalMessage","captureLocation","val","_Parser"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/icu-messageformat-parser/lib/index.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { ErrorKind } from './error';\nimport { Parser } from './parser';\nimport { isDateElement, isDateTimeSkeleton, isNumberElement, isNumberSkeleton, isPluralElement, isSelectElement, isTagElement, isTimeElement, } from './types';\nfunction pruneLocation(els) {\n    els.forEach(function (el) {\n        delete el.location;\n        if (isSelectElement(el) || isPluralElement(el)) {\n            for (var k in el.options) {\n                delete el.options[k].location;\n                pruneLocation(el.options[k].value);\n            }\n        }\n        else if (isNumberElement(el) && isNumberSkeleton(el.style)) {\n            delete el.style.location;\n        }\n        else if ((isDateElement(el) || isTimeElement(el)) &&\n            isDateTimeSkeleton(el.style)) {\n            delete el.style.location;\n        }\n        else if (isTagElement(el)) {\n            pruneLocation(el.children);\n        }\n    });\n}\nexport function parse(message, opts) {\n    if (opts === void 0) { opts = {}; }\n    opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);\n    var result = new Parser(message, opts).parse();\n    if (result.err) {\n        var error = SyntaxError(ErrorKind[result.err.kind]);\n        // @ts-expect-error Assign to error object\n        error.location = result.err.location;\n        // @ts-expect-error Assign to error object\n        error.originalMessage = result.err.message;\n        throw error;\n    }\n    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {\n        pruneLocation(result.val);\n    }\n    return result.val;\n}\nexport * from './types';\n// only for testing\nexport var _Parser = Parser;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,QAAQ,SAAS;AACnC,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,aAAa,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,eAAe,EAAEC,YAAY,EAAEC,aAAa,QAAS,SAAS;AAC9J,SAASC,aAAaA,CAACC,GAAG,EAAE;EACxBA,GAAG,CAACC,OAAO,CAAC,UAAUC,EAAE,EAAE;IACtB,OAAOA,EAAE,CAACC,QAAQ;IAClB,IAAIP,eAAe,CAACM,EAAE,CAAC,IAAIP,eAAe,CAACO,EAAE,CAAC,EAAE;MAC5C,KAAK,IAAIE,CAAC,IAAIF,EAAE,CAACG,OAAO,EAAE;QACtB,OAAOH,EAAE,CAACG,OAAO,CAACD,CAAC,CAAC,CAACD,QAAQ;QAC7BJ,aAAa,CAACG,EAAE,CAACG,OAAO,CAACD,CAAC,CAAC,CAACE,KAAK,CAAC;MACtC;IACJ,CAAC,MACI,IAAIb,eAAe,CAACS,EAAE,CAAC,IAAIR,gBAAgB,CAACQ,EAAE,CAACK,KAAK,CAAC,EAAE;MACxD,OAAOL,EAAE,CAACK,KAAK,CAACJ,QAAQ;IAC5B,CAAC,MACI,IAAI,CAACZ,aAAa,CAACW,EAAE,CAAC,IAAIJ,aAAa,CAACI,EAAE,CAAC,KAC5CV,kBAAkB,CAACU,EAAE,CAACK,KAAK,CAAC,EAAE;MAC9B,OAAOL,EAAE,CAACK,KAAK,CAACJ,QAAQ;IAC5B,CAAC,MACI,IAAIN,YAAY,CAACK,EAAE,CAAC,EAAE;MACvBH,aAAa,CAACG,EAAE,CAACM,QAAQ,CAAC;IAC9B;EACJ,CAAC,CAAC;AACN;AACA,OAAO,SAASC,KAAKA,CAACC,OAAO,EAAEC,IAAI,EAAE;EACjC,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IAAEA,IAAI,GAAG,CAAC,CAAC;EAAE;EAClCA,IAAI,GAAGvB,QAAQ,CAAC;IAAEwB,oBAAoB,EAAE,IAAI;IAAEC,mBAAmB,EAAE;EAAK,CAAC,EAAEF,IAAI,CAAC;EAChF,IAAIG,MAAM,GAAG,IAAIxB,MAAM,CAACoB,OAAO,EAAEC,IAAI,CAAC,CAACF,KAAK,CAAC,CAAC;EAC9C,IAAIK,MAAM,CAACC,GAAG,EAAE;IACZ,IAAIC,KAAK,GAAGC,WAAW,CAAC5B,SAAS,CAACyB,MAAM,CAACC,GAAG,CAACG,IAAI,CAAC,CAAC;IACnD;IACAF,KAAK,CAACb,QAAQ,GAAGW,MAAM,CAACC,GAAG,CAACZ,QAAQ;IACpC;IACAa,KAAK,CAACG,eAAe,GAAGL,MAAM,CAACC,GAAG,CAACL,OAAO;IAC1C,MAAMM,KAAK;EACf;EACA,IAAI,EAAEL,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACS,eAAe,CAAC,EAAE;IACrErB,aAAa,CAACe,MAAM,CAACO,GAAG,CAAC;EAC7B;EACA,OAAOP,MAAM,CAACO,GAAG;AACrB;AACA,cAAc,SAAS;AACvB;AACA,OAAO,IAAIC,OAAO,GAAGhC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}