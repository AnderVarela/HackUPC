{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst elementToComponent = {\n  svg: 'Svg',\n  circle: 'Circle',\n  clipPath: 'ClipPath',\n  ellipse: 'Ellipse',\n  g: 'G',\n  linearGradient: 'LinearGradient',\n  radialGradient: 'RadialGradient',\n  line: 'Line',\n  path: 'Path',\n  pattern: 'Pattern',\n  polygon: 'Polygon',\n  polyline: 'Polyline',\n  rect: 'Rect',\n  symbol: 'Symbol',\n  text: 'Text',\n  textPath: 'TextPath',\n  tspan: 'TSpan',\n  use: 'Use',\n  defs: 'Defs',\n  stop: 'Stop',\n  mask: 'Mask',\n  image: 'Image',\n  foreignObject: 'ForeignObject'\n};\nconst expoPrefix = (component, expo) => {\n  // Prefix with 'Svg.' in the case we're transforming for Expo\n  if (!expo) {\n    return component;\n  }\n  return (component !== 'Svg' ? 'Svg.' : '') + component;\n};\nconst plugin = ({\n  types: t\n}, {\n  expo\n}) => {\n  function replaceElement(path, state) {\n    const {\n      name\n    } = path.node.openingElement.name; // Replace element by react-native-svg components\n\n    const component = elementToComponent[name];\n    if (component) {\n      const prefixedComponent = expoPrefix(component, expo);\n      const openingElementName = path.get('openingElement.name');\n      openingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n      if (path.has('closingElement')) {\n        const closingElementName = path.get('closingElement.name');\n        closingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n      }\n      state.replacedComponents.add(prefixedComponent);\n      return;\n    } // Remove element if not supported\n\n    state.unsupportedComponents.add(name);\n    path.remove();\n  }\n  const svgElementVisitor = {\n    JSXElement(path, state) {\n      if (!path.get('openingElement.name').isJSXIdentifier({\n        name: 'svg'\n      })) {\n        return;\n      }\n      replaceElement(path, state);\n      path.traverse(jsxElementVisitor, state);\n    }\n  };\n  const jsxElementVisitor = {\n    JSXElement(path, state) {\n      replaceElement(path, state);\n    }\n  };\n  const importDeclarationVisitor = {\n    ImportDeclaration(path, state) {\n      if (path.get('source').isStringLiteral({\n        value: 'react-native-svg'\n      })) {\n        state.replacedComponents.forEach(component => {\n          if (path.get('specifiers').some(specifier => specifier.get('local').isIdentifier({\n            name: component\n          }))) {\n            return;\n          }\n          path.pushContainer('specifiers', t.importSpecifier(t.identifier(component), t.identifier(component)));\n        });\n      } else if (path.get('source').isStringLiteral({\n        value: 'expo'\n      })) {\n        path.pushContainer('specifiers', t.importSpecifier(t.identifier('Svg'), t.identifier('Svg')));\n      } else {\n        return;\n      }\n      if (state.unsupportedComponents.size && !path.has('trailingComments')) {\n        const componentList = [...state.unsupportedComponents].join(', ');\n        path.addComment('trailing', ` SVGR has dropped some elements not supported by react-native-svg: ${componentList} `);\n      }\n    }\n  };\n  return {\n    visitor: {\n      Program(path, state) {\n        state.replacedComponents = new Set();\n        state.unsupportedComponents = new Set();\n        path.traverse(svgElementVisitor, state);\n        path.traverse(importDeclarationVisitor, state);\n      }\n    }\n  };\n};\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","elementToComponent","svg","circle","clipPath","ellipse","g","linearGradient","radialGradient","line","path","pattern","polygon","polyline","rect","symbol","text","textPath","tspan","use","defs","stop","mask","image","foreignObject","expoPrefix","component","expo","plugin","types","t","replaceElement","state","name","node","openingElement","prefixedComponent","openingElementName","get","replaceWith","jsxIdentifier","has","closingElementName","replacedComponents","add","unsupportedComponents","remove","svgElementVisitor","JSXElement","isJSXIdentifier","traverse","jsxElementVisitor","importDeclarationVisitor","ImportDeclaration","isStringLiteral","value","forEach","some","specifier","isIdentifier","pushContainer","importSpecifier","identifier","size","componentList","join","addComment","visitor","Program","Set","_default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@svgr/babel-plugin-transform-react-native-svg/lib/index.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst elementToComponent = {\n  svg: 'Svg',\n  circle: 'Circle',\n  clipPath: 'ClipPath',\n  ellipse: 'Ellipse',\n  g: 'G',\n  linearGradient: 'LinearGradient',\n  radialGradient: 'RadialGradient',\n  line: 'Line',\n  path: 'Path',\n  pattern: 'Pattern',\n  polygon: 'Polygon',\n  polyline: 'Polyline',\n  rect: 'Rect',\n  symbol: 'Symbol',\n  text: 'Text',\n  textPath: 'TextPath',\n  tspan: 'TSpan',\n  use: 'Use',\n  defs: 'Defs',\n  stop: 'Stop',\n  mask: 'Mask',\n  image: 'Image',\n  foreignObject: 'ForeignObject'\n};\n\nconst expoPrefix = (component, expo) => {\n  // Prefix with 'Svg.' in the case we're transforming for Expo\n  if (!expo) {\n    return component;\n  }\n\n  return (component !== 'Svg' ? 'Svg.' : '') + component;\n};\n\nconst plugin = ({\n  types: t\n}, {\n  expo\n}) => {\n  function replaceElement(path, state) {\n    const {\n      name\n    } = path.node.openingElement.name; // Replace element by react-native-svg components\n\n    const component = elementToComponent[name];\n\n    if (component) {\n      const prefixedComponent = expoPrefix(component, expo);\n      const openingElementName = path.get('openingElement.name');\n      openingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n\n      if (path.has('closingElement')) {\n        const closingElementName = path.get('closingElement.name');\n        closingElementName.replaceWith(t.jsxIdentifier(prefixedComponent));\n      }\n\n      state.replacedComponents.add(prefixedComponent);\n      return;\n    } // Remove element if not supported\n\n\n    state.unsupportedComponents.add(name);\n    path.remove();\n  }\n\n  const svgElementVisitor = {\n    JSXElement(path, state) {\n      if (!path.get('openingElement.name').isJSXIdentifier({\n        name: 'svg'\n      })) {\n        return;\n      }\n\n      replaceElement(path, state);\n      path.traverse(jsxElementVisitor, state);\n    }\n\n  };\n  const jsxElementVisitor = {\n    JSXElement(path, state) {\n      replaceElement(path, state);\n    }\n\n  };\n  const importDeclarationVisitor = {\n    ImportDeclaration(path, state) {\n      if (path.get('source').isStringLiteral({\n        value: 'react-native-svg'\n      })) {\n        state.replacedComponents.forEach(component => {\n          if (path.get('specifiers').some(specifier => specifier.get('local').isIdentifier({\n            name: component\n          }))) {\n            return;\n          }\n\n          path.pushContainer('specifiers', t.importSpecifier(t.identifier(component), t.identifier(component)));\n        });\n      } else if (path.get('source').isStringLiteral({\n        value: 'expo'\n      })) {\n        path.pushContainer('specifiers', t.importSpecifier(t.identifier('Svg'), t.identifier('Svg')));\n      } else {\n        return;\n      }\n\n      if (state.unsupportedComponents.size && !path.has('trailingComments')) {\n        const componentList = [...state.unsupportedComponents].join(', ');\n        path.addComment('trailing', ` SVGR has dropped some elements not supported by react-native-svg: ${componentList} `);\n      }\n    }\n\n  };\n  return {\n    visitor: {\n      Program(path, state) {\n        state.replacedComponents = new Set();\n        state.unsupportedComponents = new Set();\n        path.traverse(svgElementVisitor, state);\n        path.traverse(importDeclarationVisitor, state);\n      }\n\n    }\n  };\n};\n\nvar _default = plugin;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}