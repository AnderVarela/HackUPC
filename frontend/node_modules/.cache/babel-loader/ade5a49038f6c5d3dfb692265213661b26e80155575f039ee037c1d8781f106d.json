{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FormatNumericToString = void 0;\nvar _262_1 = require(\"../262\");\nvar ToRawPrecision_1 = require(\"./ToRawPrecision\");\nvar utils_1 = require(\"../utils\");\nvar ToRawFixed_1 = require(\"./ToRawFixed\");\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nfunction FormatNumericToString(intlObject, x) {\n  var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);\n  if (isNegative) {\n    x = -x;\n  }\n  var result;\n  var rourndingType = intlObject.roundingType;\n  switch (rourndingType) {\n    case 'significantDigits':\n      result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);\n      break;\n    case 'fractionDigits':\n      result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);\n      break;\n    default:\n      result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);\n      if (result.integerDigitsCount > 1) {\n        result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);\n      }\n      break;\n  }\n  x = result.roundedNumber;\n  var string = result.formattedString;\n  var int = result.integerDigitsCount;\n  var minInteger = intlObject.minimumIntegerDigits;\n  if (int < minInteger) {\n    var forwardZeros = (0, utils_1.repeat)('0', minInteger - int);\n    string = forwardZeros + string;\n  }\n  if (isNegative) {\n    x = -x;\n  }\n  return {\n    roundedNumber: x,\n    formattedString: string\n  };\n}\nexports.FormatNumericToString = FormatNumericToString;","map":{"version":3,"names":["Object","defineProperty","exports","value","FormatNumericToString","_262_1","require","ToRawPrecision_1","utils_1","ToRawFixed_1","intlObject","x","isNegative","SameValue","result","rourndingType","roundingType","ToRawPrecision","minimumSignificantDigits","maximumSignificantDigits","ToRawFixed","minimumFractionDigits","maximumFractionDigits","integerDigitsCount","roundedNumber","string","formattedString","int","minInteger","minimumIntegerDigits","forwardZeros","repeat"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/ecma402-abstract/NumberFormat/FormatNumericToString.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormatNumericToString = void 0;\nvar _262_1 = require(\"../262\");\nvar ToRawPrecision_1 = require(\"./ToRawPrecision\");\nvar utils_1 = require(\"../utils\");\nvar ToRawFixed_1 = require(\"./ToRawFixed\");\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nfunction FormatNumericToString(intlObject, x) {\n    var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);\n    if (isNegative) {\n        x = -x;\n    }\n    var result;\n    var rourndingType = intlObject.roundingType;\n    switch (rourndingType) {\n        case 'significantDigits':\n            result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);\n            break;\n        case 'fractionDigits':\n            result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);\n            break;\n        default:\n            result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);\n            if (result.integerDigitsCount > 1) {\n                result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);\n            }\n            break;\n    }\n    x = result.roundedNumber;\n    var string = result.formattedString;\n    var int = result.integerDigitsCount;\n    var minInteger = intlObject.minimumIntegerDigits;\n    if (int < minInteger) {\n        var forwardZeros = (0, utils_1.repeat)('0', minInteger - int);\n        string = forwardZeros + string;\n    }\n    if (isNegative) {\n        x = -x;\n    }\n    return { roundedNumber: x, formattedString: string };\n}\nexports.FormatNumericToString = FormatNumericToString;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,KAAK,CAAC;AACtC,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAClD,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAU,CAAC;AACjC,IAAIG,YAAY,GAAGH,OAAO,CAAC,cAAc,CAAC;AAC1C;AACA;AACA;AACA,SAASF,qBAAqBA,CAACM,UAAU,EAAEC,CAAC,EAAE;EAC1C,IAAIC,UAAU,GAAGD,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAEN,MAAM,CAACQ,SAAS,EAAEF,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,IAAIC,UAAU,EAAE;IACZD,CAAC,GAAG,CAACA,CAAC;EACV;EACA,IAAIG,MAAM;EACV,IAAIC,aAAa,GAAGL,UAAU,CAACM,YAAY;EAC3C,QAAQD,aAAa;IACjB,KAAK,mBAAmB;MACpBD,MAAM,GAAG,CAAC,CAAC,EAAEP,gBAAgB,CAACU,cAAc,EAAEN,CAAC,EAAED,UAAU,CAACQ,wBAAwB,EAAER,UAAU,CAACS,wBAAwB,CAAC;MAC1H;IACJ,KAAK,gBAAgB;MACjBL,MAAM,GAAG,CAAC,CAAC,EAAEL,YAAY,CAACW,UAAU,EAAET,CAAC,EAAED,UAAU,CAACW,qBAAqB,EAAEX,UAAU,CAACY,qBAAqB,CAAC;MAC5G;IACJ;MACIR,MAAM,GAAG,CAAC,CAAC,EAAEP,gBAAgB,CAACU,cAAc,EAAEN,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACtD,IAAIG,MAAM,CAACS,kBAAkB,GAAG,CAAC,EAAE;QAC/BT,MAAM,GAAG,CAAC,CAAC,EAAEL,YAAY,CAACW,UAAU,EAAET,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAClD;MACA;EACR;EACAA,CAAC,GAAGG,MAAM,CAACU,aAAa;EACxB,IAAIC,MAAM,GAAGX,MAAM,CAACY,eAAe;EACnC,IAAIC,GAAG,GAAGb,MAAM,CAACS,kBAAkB;EACnC,IAAIK,UAAU,GAAGlB,UAAU,CAACmB,oBAAoB;EAChD,IAAIF,GAAG,GAAGC,UAAU,EAAE;IAClB,IAAIE,YAAY,GAAG,CAAC,CAAC,EAAEtB,OAAO,CAACuB,MAAM,EAAE,GAAG,EAAEH,UAAU,GAAGD,GAAG,CAAC;IAC7DF,MAAM,GAAGK,YAAY,GAAGL,MAAM;EAClC;EACA,IAAIb,UAAU,EAAE;IACZD,CAAC,GAAG,CAACA,CAAC;EACV;EACA,OAAO;IAAEa,aAAa,EAAEb,CAAC;IAAEe,eAAe,EAAED;EAAO,CAAC;AACxD;AACAvB,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}