{"ast":null,"code":"'use strict';\n\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');\nvar toIndex = require('../internals/to-index');\nvar isDetached = require('../internals/array-buffer-is-detached');\nvar arrayBufferByteLength = require('../internals/array-buffer-byte-length');\nvar detachTransferable = require('../internals/detach-transferable');\nvar PROPER_STRUCTURED_CLONE_TRANSFER = require('../internals/structured-clone-proper-transfer');\nvar structuredClone = global.structuredClone;\nvar ArrayBuffer = global.ArrayBuffer;\nvar DataView = global.DataView;\nvar TypeError = global.TypeError;\nvar min = Math.min;\nvar ArrayBufferPrototype = ArrayBuffer.prototype;\nvar DataViewPrototype = DataView.prototype;\nvar slice = uncurryThis(ArrayBufferPrototype.slice);\nvar isResizable = uncurryThisAccessor(ArrayBufferPrototype, 'resizable', 'get');\nvar maxByteLength = uncurryThisAccessor(ArrayBufferPrototype, 'maxByteLength', 'get');\nvar getInt8 = uncurryThis(DataViewPrototype.getInt8);\nvar setInt8 = uncurryThis(DataViewPrototype.setInt8);\nmodule.exports = (PROPER_STRUCTURED_CLONE_TRANSFER || detachTransferable) && function (arrayBuffer, newLength, preserveResizability) {\n  var byteLength = arrayBufferByteLength(arrayBuffer);\n  var newByteLength = newLength === undefined ? byteLength : toIndex(newLength);\n  var fixedLength = !isResizable || !isResizable(arrayBuffer);\n  var newBuffer;\n  if (isDetached(arrayBuffer)) throw new TypeError('ArrayBuffer is detached');\n  if (PROPER_STRUCTURED_CLONE_TRANSFER) {\n    arrayBuffer = structuredClone(arrayBuffer, {\n      transfer: [arrayBuffer]\n    });\n    if (byteLength === newByteLength && (preserveResizability || fixedLength)) return arrayBuffer;\n  }\n  if (byteLength >= newByteLength && (!preserveResizability || fixedLength)) {\n    newBuffer = slice(arrayBuffer, 0, newByteLength);\n  } else {\n    var options = preserveResizability && !fixedLength && maxByteLength ? {\n      maxByteLength: maxByteLength(arrayBuffer)\n    } : undefined;\n    newBuffer = new ArrayBuffer(newByteLength, options);\n    var a = new DataView(arrayBuffer);\n    var b = new DataView(newBuffer);\n    var copyLength = min(newByteLength, byteLength);\n    for (var i = 0; i < copyLength; i++) setInt8(b, i, getInt8(a, i));\n  }\n  if (!PROPER_STRUCTURED_CLONE_TRANSFER) detachTransferable(arrayBuffer);\n  return newBuffer;\n};","map":{"version":3,"names":["global","require","uncurryThis","uncurryThisAccessor","toIndex","isDetached","arrayBufferByteLength","detachTransferable","PROPER_STRUCTURED_CLONE_TRANSFER","structuredClone","ArrayBuffer","DataView","TypeError","min","Math","ArrayBufferPrototype","prototype","DataViewPrototype","slice","isResizable","maxByteLength","getInt8","setInt8","module","exports","arrayBuffer","newLength","preserveResizability","byteLength","newByteLength","undefined","fixedLength","newBuffer","transfer","options","a","b","copyLength","i"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/core-js/internals/array-buffer-transfer.js"],"sourcesContent":["'use strict';\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');\nvar toIndex = require('../internals/to-index');\nvar isDetached = require('../internals/array-buffer-is-detached');\nvar arrayBufferByteLength = require('../internals/array-buffer-byte-length');\nvar detachTransferable = require('../internals/detach-transferable');\nvar PROPER_STRUCTURED_CLONE_TRANSFER = require('../internals/structured-clone-proper-transfer');\n\nvar structuredClone = global.structuredClone;\nvar ArrayBuffer = global.ArrayBuffer;\nvar DataView = global.DataView;\nvar TypeError = global.TypeError;\nvar min = Math.min;\nvar ArrayBufferPrototype = ArrayBuffer.prototype;\nvar DataViewPrototype = DataView.prototype;\nvar slice = uncurryThis(ArrayBufferPrototype.slice);\nvar isResizable = uncurryThisAccessor(ArrayBufferPrototype, 'resizable', 'get');\nvar maxByteLength = uncurryThisAccessor(ArrayBufferPrototype, 'maxByteLength', 'get');\nvar getInt8 = uncurryThis(DataViewPrototype.getInt8);\nvar setInt8 = uncurryThis(DataViewPrototype.setInt8);\n\nmodule.exports = (PROPER_STRUCTURED_CLONE_TRANSFER || detachTransferable) && function (arrayBuffer, newLength, preserveResizability) {\n  var byteLength = arrayBufferByteLength(arrayBuffer);\n  var newByteLength = newLength === undefined ? byteLength : toIndex(newLength);\n  var fixedLength = !isResizable || !isResizable(arrayBuffer);\n  var newBuffer;\n  if (isDetached(arrayBuffer)) throw new TypeError('ArrayBuffer is detached');\n  if (PROPER_STRUCTURED_CLONE_TRANSFER) {\n    arrayBuffer = structuredClone(arrayBuffer, { transfer: [arrayBuffer] });\n    if (byteLength === newByteLength && (preserveResizability || fixedLength)) return arrayBuffer;\n  }\n  if (byteLength >= newByteLength && (!preserveResizability || fixedLength)) {\n    newBuffer = slice(arrayBuffer, 0, newByteLength);\n  } else {\n    var options = preserveResizability && !fixedLength && maxByteLength ? { maxByteLength: maxByteLength(arrayBuffer) } : undefined;\n    newBuffer = new ArrayBuffer(newByteLength, options);\n    var a = new DataView(arrayBuffer);\n    var b = new DataView(newBuffer);\n    var copyLength = min(newByteLength, byteLength);\n    for (var i = 0; i < copyLength; i++) setInt8(b, i, getInt8(a, i));\n  }\n  if (!PROPER_STRUCTURED_CLONE_TRANSFER) detachTransferable(arrayBuffer);\n  return newBuffer;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}