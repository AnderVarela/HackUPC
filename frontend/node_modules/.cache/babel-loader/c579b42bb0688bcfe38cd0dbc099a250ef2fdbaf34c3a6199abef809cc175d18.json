{"ast":null,"code":"/**\n * Module dependencies.\n */\n\ntry {\n  var EventEmitter = require('events').EventEmitter;\n  if (!EventEmitter) throw new Error();\n} catch (err) {\n  var Emitter = require('emitter');\n}\n\n/**\n * Defer.\n */\n\nvar defer = typeof process !== 'undefined' && process && typeof process.nextTick === 'function' ? process.nextTick : function (fn) {\n  setTimeout(fn);\n};\n\n/**\n * Noop.\n */\n\nfunction noop() {}\n\n/**\n * Expose `Batch`.\n */\n\nmodule.exports = Batch;\n\n/**\n * Create a new Batch.\n */\n\nfunction Batch() {\n  if (!(this instanceof Batch)) return new Batch();\n  this.fns = [];\n  this.concurrency(Infinity);\n  this.throws(true);\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    this.push(arguments[i]);\n  }\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nif (EventEmitter) {\n  Batch.prototype.__proto__ = EventEmitter.prototype;\n} else {\n  Emitter(Batch.prototype);\n}\n\n/**\n * Set concurrency to `n`.\n *\n * @param {Number} n\n * @return {Batch}\n * @api public\n */\n\nBatch.prototype.concurrency = function (n) {\n  this.n = n;\n  return this;\n};\n\n/**\n * Queue a function.\n *\n * @param {Function} fn\n * @return {Batch}\n * @api public\n */\n\nBatch.prototype.push = function (fn) {\n  this.fns.push(fn);\n  return this;\n};\n\n/**\n * Set wether Batch will or will not throw up.\n *\n * @param  {Boolean} throws\n * @return {Batch}\n * @api public\n */\nBatch.prototype.throws = function (throws) {\n  this.e = !!throws;\n  return this;\n};\n\n/**\n * Execute all queued functions in parallel,\n * executing `cb(err, results)`.\n *\n * @param {Function} cb\n * @return {Batch}\n * @api public\n */\n\nBatch.prototype.end = function (cb) {\n  var self = this,\n    total = this.fns.length,\n    pending = total,\n    results = [],\n    errors = [],\n    cb = cb || noop,\n    fns = this.fns,\n    max = this.n,\n    throws = this.e,\n    index = 0,\n    done;\n\n  // empty\n  if (!fns.length) return defer(function () {\n    cb(null, results);\n  });\n\n  // process\n  function next() {\n    var i = index++;\n    var fn = fns[i];\n    if (!fn) return;\n    var start = new Date();\n    try {\n      fn(callback);\n    } catch (err) {\n      callback(err);\n    }\n    function callback(err, res) {\n      if (done) return;\n      if (err && throws) return done = true, defer(function () {\n        cb(err);\n      });\n      var complete = total - pending + 1;\n      var end = new Date();\n      results[i] = res;\n      errors[i] = err;\n      self.emit('progress', {\n        index: i,\n        value: res,\n        error: err,\n        pending: pending,\n        total: total,\n        complete: complete,\n        percent: complete / total * 100 | 0,\n        start: start,\n        end: end,\n        duration: end - start\n      });\n      if (--pending) next();else defer(function () {\n        if (!throws) cb(errors, results);else cb(null, results);\n      });\n    }\n  }\n\n  // concurrency\n  for (var i = 0; i < fns.length; i++) {\n    if (i == max) break;\n    next();\n  }\n  return this;\n};","map":{"version":3,"names":["EventEmitter","require","Error","err","Emitter","defer","process","nextTick","fn","setTimeout","noop","module","exports","Batch","fns","concurrency","Infinity","throws","i","len","arguments","length","push","prototype","__proto__","n","e","end","cb","self","total","pending","results","errors","max","index","done","next","start","Date","callback","res","complete","emit","value","error","percent","duration"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/batch/index.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\ntry {\n  var EventEmitter = require('events').EventEmitter;\n  if (!EventEmitter) throw new Error();\n} catch (err) {\n  var Emitter = require('emitter');\n}\n\n/**\n * Defer.\n */\n\nvar defer = typeof process !== 'undefined' && process && typeof process.nextTick === 'function'\n  ? process.nextTick\n  : function(fn){ setTimeout(fn); };\n\n/**\n * Noop.\n */\n\nfunction noop(){}\n\n/**\n * Expose `Batch`.\n */\n\nmodule.exports = Batch;\n\n/**\n * Create a new Batch.\n */\n\nfunction Batch() {\n  if (!(this instanceof Batch)) return new Batch;\n  this.fns = [];\n  this.concurrency(Infinity);\n  this.throws(true);\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    this.push(arguments[i]);\n  }\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nif (EventEmitter) {\n  Batch.prototype.__proto__ = EventEmitter.prototype;\n} else {\n  Emitter(Batch.prototype);\n}\n\n/**\n * Set concurrency to `n`.\n *\n * @param {Number} n\n * @return {Batch}\n * @api public\n */\n\nBatch.prototype.concurrency = function(n){\n  this.n = n;\n  return this;\n};\n\n/**\n * Queue a function.\n *\n * @param {Function} fn\n * @return {Batch}\n * @api public\n */\n\nBatch.prototype.push = function(fn){\n  this.fns.push(fn);\n  return this;\n};\n\n/**\n * Set wether Batch will or will not throw up.\n *\n * @param  {Boolean} throws\n * @return {Batch}\n * @api public\n */\nBatch.prototype.throws = function(throws) {\n  this.e = !!throws;\n  return this;\n};\n\n/**\n * Execute all queued functions in parallel,\n * executing `cb(err, results)`.\n *\n * @param {Function} cb\n * @return {Batch}\n * @api public\n */\n\nBatch.prototype.end = function(cb){\n  var self = this\n    , total = this.fns.length\n    , pending = total\n    , results = []\n    , errors = []\n    , cb = cb || noop\n    , fns = this.fns\n    , max = this.n\n    , throws = this.e\n    , index = 0\n    , done;\n\n  // empty\n  if (!fns.length) return defer(function(){\n    cb(null, results);\n  });\n\n  // process\n  function next() {\n    var i = index++;\n    var fn = fns[i];\n    if (!fn) return;\n    var start = new Date;\n\n    try {\n      fn(callback);\n    } catch (err) {\n      callback(err);\n    }\n\n    function callback(err, res){\n      if (done) return;\n      if (err && throws) return done = true, defer(function(){\n        cb(err);\n      });\n      var complete = total - pending + 1;\n      var end = new Date;\n\n      results[i] = res;\n      errors[i] = err;\n\n      self.emit('progress', {\n        index: i,\n        value: res,\n        error: err,\n        pending: pending,\n        total: total,\n        complete: complete,\n        percent: complete / total * 100 | 0,\n        start: start,\n        end: end,\n        duration: end - start\n      });\n\n      if (--pending) next();\n      else defer(function(){\n        if(!throws) cb(errors, results);\n        else cb(null, results);\n      });\n    }\n  }\n\n  // concurrency\n  for (var i = 0; i < fns.length; i++) {\n    if (i == max) break;\n    next();\n  }\n\n  return this;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}