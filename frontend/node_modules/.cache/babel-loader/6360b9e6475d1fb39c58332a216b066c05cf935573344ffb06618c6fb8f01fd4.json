{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'require-array-sort-compare',\n  defaultOptions: [{\n    ignoreStringArrays: false\n  }],\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Require `Array#sort` calls to always provide a `compareFunction`',\n      recommended: false,\n      requiresTypeChecking: true\n    },\n    messages: {\n      requireCompare: \"Require 'compare' argument.\"\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        ignoreStringArrays: {\n          description: 'Whether to ignore arrays in which all elements are strings.',\n          type: 'boolean'\n        }\n      }\n    }]\n  },\n  create(context, [options]) {\n    const service = util.getParserServices(context);\n    const checker = service.program.getTypeChecker();\n    /**\n     * Check if a given node is an array which all elements are string.\n     * @param node\n     */\n    function isStringArrayNode(node) {\n      const type = checker.getTypeAtLocation(service.esTreeNodeToTSNodeMap.get(node));\n      if (checker.isArrayType(type) || checker.isTupleType(type)) {\n        const typeArgs = util.getTypeArguments(type, checker);\n        return typeArgs.every(arg => util.getTypeName(checker, arg) === 'string');\n      }\n      return false;\n    }\n    return {\n      \"CallExpression[arguments.length=0] > MemberExpression[property.name='sort'][computed=false]\"(callee) {\n        const tsNode = service.esTreeNodeToTSNodeMap.get(callee.object);\n        const calleeObjType = util.getConstrainedTypeAtLocation(checker, tsNode);\n        if (options.ignoreStringArrays && isStringArrayNode(callee.object)) {\n          return;\n        }\n        if (util.isTypeArrayTypeOrUnionOfArrayTypes(calleeObjType, checker)) {\n          context.report({\n            node: callee.parent,\n            messageId: 'requireCompare'\n          });\n        }\n      }\n    };\n  }\n});","map":{"version":3,"names":["util","__importStar","require","exports","default","createRule","name","defaultOptions","ignoreStringArrays","meta","type","docs","description","recommended","requiresTypeChecking","messages","requireCompare","schema","properties","create","context","options","service","getParserServices","checker","program","getTypeChecker","isStringArrayNode","node","getTypeAtLocation","esTreeNodeToTSNodeMap","get","isArrayType","isTupleType","typeArgs","getTypeArguments","every","arg","getTypeName","CallExpression[arguments.length=0] > MemberExpression[property.name='sort'][computed=false]","callee","tsNode","object","calleeObjType","getConstrainedTypeAtLocation","isTypeArrayTypeOrUnionOfArrayTypes","report","parent","messageId"],"sources":["../../src/rules/require-array-sort-compare.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAAA,IAAA,GAAAC,YAAA,CAAAC,OAAA;AASAC,OAAA,CAAAC,OAAA,GAAeJ,IAAI,CAACK,UAAU,CAAsB;EAClDC,IAAI,EAAE,4BAA4B;EAClCC,cAAc,EAAE,CACd;IACEC,kBAAkB,EAAE;GACrB,CACF;EAEDC,IAAI,EAAE;IACJC,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE;MACJC,WAAW,EACT,kEAAkE;MACpEC,WAAW,EAAE,KAAK;MAClBC,oBAAoB,EAAE;KACvB;IACDC,QAAQ,EAAE;MACRC,cAAc,EAAE;KACjB;IACDC,MAAM,EAAE,CACN;MACEP,IAAI,EAAE,QAAQ;MACdQ,UAAU,EAAE;QACVV,kBAAkB,EAAE;UAClBI,WAAW,EACT,6DAA6D;UAC/DF,IAAI,EAAE;;;KAGX;GAEJ;EAEDS,MAAMA,CAACC,OAAO,EAAE,CAACC,OAAO,CAAC;IACvB,MAAMC,OAAO,GAAGtB,IAAI,CAACuB,iBAAiB,CAACH,OAAO,CAAC;IAC/C,MAAMI,OAAO,GAAGF,OAAO,CAACG,OAAO,CAACC,cAAc,EAAE;IAEhD;;;;IAIA,SAASC,iBAAiBA,CAACC,IAAyB;MAClD,MAAMlB,IAAI,GAAGc,OAAO,CAACK,iBAAiB,CACpCP,OAAO,CAACQ,qBAAqB,CAACC,GAAG,CAACH,IAAI,CAAC,CACxC;MACD,IAAIJ,OAAO,CAACQ,WAAW,CAACtB,IAAI,CAAC,IAAIc,OAAO,CAACS,WAAW,CAACvB,IAAI,CAAC,EAAE;QAC1D,MAAMwB,QAAQ,GAAGlC,IAAI,CAACmC,gBAAgB,CAACzB,IAAI,EAAEc,OAAO,CAAC;QACrD,OAAOU,QAAQ,CAACE,KAAK,CACnBC,GAAG,IAAIrC,IAAI,CAACsC,WAAW,CAACd,OAAO,EAAEa,GAAG,CAAC,KAAK,QAAQ,CACnD;;MAEH,OAAO,KAAK;IACd;IAEA,OAAO;MACL,6FAA6FE,CAC3FC,MAAiC;QAEjC,MAAMC,MAAM,GAAGnB,OAAO,CAACQ,qBAAqB,CAACC,GAAG,CAACS,MAAM,CAACE,MAAM,CAAC;QAC/D,MAAMC,aAAa,GAAG3C,IAAI,CAAC4C,4BAA4B,CACrDpB,OAAO,EACPiB,MAAM,CACP;QAED,IAAIpB,OAAO,CAACb,kBAAkB,IAAImB,iBAAiB,CAACa,MAAM,CAACE,MAAM,CAAC,EAAE;UAClE;;QAGF,IAAI1C,IAAI,CAAC6C,kCAAkC,CAACF,aAAa,EAAEnB,OAAO,CAAC,EAAE;UACnEJ,OAAO,CAAC0B,MAAM,CAAC;YAAElB,IAAI,EAAEY,MAAM,CAACO,MAAO;YAAEC,SAAS,EAAE;UAAgB,CAAE,CAAC;;MAEzE;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}