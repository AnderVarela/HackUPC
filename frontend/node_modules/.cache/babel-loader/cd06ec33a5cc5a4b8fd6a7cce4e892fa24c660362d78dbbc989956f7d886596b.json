{"ast":null,"code":"import stringWidth from 'string-width';\nimport stripAnsi from 'strip-ansi';\nimport ansiStyles from 'ansi-styles';\nconst ESCAPES = new Set(['\\u001B', '\\u009B']);\nconst END_CODE = 39;\nconst ANSI_ESCAPE_BELL = '\\u0007';\nconst ANSI_CSI = '[';\nconst ANSI_OSC = ']';\nconst ANSI_SGR_TERMINATOR = 'm';\nconst ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;\nconst wrapAnsiCode = code => `${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;\nconst wrapAnsiHyperlink = uri => `${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${uri}${ANSI_ESCAPE_BELL}`;\n\n// Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character));\n\n// Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\nconst wrapWord = (rows, word, columns) => {\n  const characters = [...word];\n  let isInsideEscape = false;\n  let isInsideLinkEscape = false;\n  let visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n  for (const [index, character] of characters.entries()) {\n    const characterLength = stringWidth(character);\n    if (visible + characterLength <= columns) {\n      rows[rows.length - 1] += character;\n    } else {\n      rows.push(character);\n      visible = 0;\n    }\n    if (ESCAPES.has(character)) {\n      isInsideEscape = true;\n      isInsideLinkEscape = characters.slice(index + 1).join('').startsWith(ANSI_ESCAPE_LINK);\n    }\n    if (isInsideEscape) {\n      if (isInsideLinkEscape) {\n        if (character === ANSI_ESCAPE_BELL) {\n          isInsideEscape = false;\n          isInsideLinkEscape = false;\n        }\n      } else if (character === ANSI_SGR_TERMINATOR) {\n        isInsideEscape = false;\n      }\n      continue;\n    }\n    visible += characterLength;\n    if (visible === columns && index < characters.length - 1) {\n      rows.push('');\n      visible = 0;\n    }\n  }\n\n  // It's possible that the last row we copy over is only\n  // ansi escape characters, handle this edge-case\n  if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n    rows[rows.length - 2] += rows.pop();\n  }\n};\n\n// Trims spaces from a string ignoring invisible sequences\nconst stringVisibleTrimSpacesRight = string => {\n  const words = string.split(' ');\n  let last = words.length;\n  while (last > 0) {\n    if (stringWidth(words[last - 1]) > 0) {\n      break;\n    }\n    last--;\n  }\n  if (last === words.length) {\n    return string;\n  }\n  return words.slice(0, last).join(' ') + words.slice(last).join('');\n};\n\n// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more than columns characters\n//\n// 'soft' allows long words to expand past the column length\nconst exec = (string, columns, options = {}) => {\n  if (options.trim !== false && string.trim() === '') {\n    return '';\n  }\n  let returnValue = '';\n  let escapeCode;\n  let escapeUrl;\n  const lengths = wordLengths(string);\n  let rows = [''];\n  for (const [index, word] of string.split(' ').entries()) {\n    if (options.trim !== false) {\n      rows[rows.length - 1] = rows[rows.length - 1].trimStart();\n    }\n    let rowLength = stringWidth(rows[rows.length - 1]);\n    if (index !== 0) {\n      if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n        // If we start with a new word but the current row length equals the length of the columns, add a new row\n        rows.push('');\n        rowLength = 0;\n      }\n      if (rowLength > 0 || options.trim === false) {\n        rows[rows.length - 1] += ' ';\n        rowLength++;\n      }\n    }\n\n    // In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'\n    if (options.hard && lengths[index] > columns) {\n      const remainingColumns = columns - rowLength;\n      const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n      const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n      if (breaksStartingNextLine < breaksStartingThisLine) {\n        rows.push('');\n      }\n      wrapWord(rows, word, columns);\n      continue;\n    }\n    if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n      if (options.wordWrap === false && rowLength < columns) {\n        wrapWord(rows, word, columns);\n        continue;\n      }\n      rows.push('');\n    }\n    if (rowLength + lengths[index] > columns && options.wordWrap === false) {\n      wrapWord(rows, word, columns);\n      continue;\n    }\n    rows[rows.length - 1] += word;\n  }\n  if (options.trim !== false) {\n    rows = rows.map(row => stringVisibleTrimSpacesRight(row));\n  }\n  const pre = [...rows.join('\\n')];\n  for (const [index, character] of pre.entries()) {\n    returnValue += character;\n    if (ESCAPES.has(character)) {\n      const {\n        groups\n      } = new RegExp(`(?:\\\\${ANSI_CSI}(?<code>\\\\d+)m|\\\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(pre.slice(index).join('')) || {\n        groups: {}\n      };\n      if (groups.code !== undefined) {\n        const code = Number.parseFloat(groups.code);\n        escapeCode = code === END_CODE ? undefined : code;\n      } else if (groups.uri !== undefined) {\n        escapeUrl = groups.uri.length === 0 ? undefined : groups.uri;\n      }\n    }\n    const code = ansiStyles.codes.get(Number(escapeCode));\n    if (pre[index + 1] === '\\n') {\n      if (escapeUrl) {\n        returnValue += wrapAnsiHyperlink('');\n      }\n      if (escapeCode && code) {\n        returnValue += wrapAnsiCode(code);\n      }\n    } else if (character === '\\n') {\n      if (escapeCode && code) {\n        returnValue += wrapAnsiCode(escapeCode);\n      }\n      if (escapeUrl) {\n        returnValue += wrapAnsiHyperlink(escapeUrl);\n      }\n    }\n  }\n  return returnValue;\n};\n\n// For each newline, invoke the method separately\nexport default function wrapAnsi(string, columns, options) {\n  return String(string).normalize().replace(/\\r\\n/g, '\\n').split('\\n').map(line => exec(line, columns, options)).join('\\n');\n}","map":{"version":3,"names":["stringWidth","stripAnsi","ansiStyles","ESCAPES","Set","END_CODE","ANSI_ESCAPE_BELL","ANSI_CSI","ANSI_OSC","ANSI_SGR_TERMINATOR","ANSI_ESCAPE_LINK","wrapAnsiCode","code","values","next","value","wrapAnsiHyperlink","uri","wordLengths","string","split","map","character","wrapWord","rows","word","columns","characters","isInsideEscape","isInsideLinkEscape","visible","length","index","entries","characterLength","push","has","slice","join","startsWith","pop","stringVisibleTrimSpacesRight","words","last","exec","options","trim","returnValue","escapeCode","escapeUrl","lengths","trimStart","rowLength","wordWrap","hard","remainingColumns","breaksStartingThisLine","Math","floor","breaksStartingNextLine","row","pre","groups","RegExp","undefined","Number","parseFloat","codes","get","wrapAnsi","String","normalize","replace","line"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@isaacs/cliui/node_modules/wrap-ansi/index.js"],"sourcesContent":["import stringWidth from 'string-width';\nimport stripAnsi from 'strip-ansi';\nimport ansiStyles from 'ansi-styles';\n\nconst ESCAPES = new Set([\n\t'\\u001B',\n\t'\\u009B',\n]);\n\nconst END_CODE = 39;\nconst ANSI_ESCAPE_BELL = '\\u0007';\nconst ANSI_CSI = '[';\nconst ANSI_OSC = ']';\nconst ANSI_SGR_TERMINATOR = 'm';\nconst ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;\n\nconst wrapAnsiCode = code => `${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;\nconst wrapAnsiHyperlink = uri => `${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${uri}${ANSI_ESCAPE_BELL}`;\n\n// Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character));\n\n// Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\nconst wrapWord = (rows, word, columns) => {\n\tconst characters = [...word];\n\n\tlet isInsideEscape = false;\n\tlet isInsideLinkEscape = false;\n\tlet visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n\n\tfor (const [index, character] of characters.entries()) {\n\t\tconst characterLength = stringWidth(character);\n\n\t\tif (visible + characterLength <= columns) {\n\t\t\trows[rows.length - 1] += character;\n\t\t} else {\n\t\t\trows.push(character);\n\t\t\tvisible = 0;\n\t\t}\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tisInsideEscape = true;\n\t\t\tisInsideLinkEscape = characters.slice(index + 1).join('').startsWith(ANSI_ESCAPE_LINK);\n\t\t}\n\n\t\tif (isInsideEscape) {\n\t\t\tif (isInsideLinkEscape) {\n\t\t\t\tif (character === ANSI_ESCAPE_BELL) {\n\t\t\t\t\tisInsideEscape = false;\n\t\t\t\t\tisInsideLinkEscape = false;\n\t\t\t\t}\n\t\t\t} else if (character === ANSI_SGR_TERMINATOR) {\n\t\t\t\tisInsideEscape = false;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tvisible += characterLength;\n\n\t\tif (visible === columns && index < characters.length - 1) {\n\t\t\trows.push('');\n\t\t\tvisible = 0;\n\t\t}\n\t}\n\n\t// It's possible that the last row we copy over is only\n\t// ansi escape characters, handle this edge-case\n\tif (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n\t\trows[rows.length - 2] += rows.pop();\n\t}\n};\n\n// Trims spaces from a string ignoring invisible sequences\nconst stringVisibleTrimSpacesRight = string => {\n\tconst words = string.split(' ');\n\tlet last = words.length;\n\n\twhile (last > 0) {\n\t\tif (stringWidth(words[last - 1]) > 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlast--;\n\t}\n\n\tif (last === words.length) {\n\t\treturn string;\n\t}\n\n\treturn words.slice(0, last).join(' ') + words.slice(last).join('');\n};\n\n// The wrap-ansi module can be invoked in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more than columns characters\n//\n// 'soft' allows long words to expand past the column length\nconst exec = (string, columns, options = {}) => {\n\tif (options.trim !== false && string.trim() === '') {\n\t\treturn '';\n\t}\n\n\tlet returnValue = '';\n\tlet escapeCode;\n\tlet escapeUrl;\n\n\tconst lengths = wordLengths(string);\n\tlet rows = [''];\n\n\tfor (const [index, word] of string.split(' ').entries()) {\n\t\tif (options.trim !== false) {\n\t\t\trows[rows.length - 1] = rows[rows.length - 1].trimStart();\n\t\t}\n\n\t\tlet rowLength = stringWidth(rows[rows.length - 1]);\n\n\t\tif (index !== 0) {\n\t\t\tif (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n\t\t\t\t// If we start with a new word but the current row length equals the length of the columns, add a new row\n\t\t\t\trows.push('');\n\t\t\t\trowLength = 0;\n\t\t\t}\n\n\t\t\tif (rowLength > 0 || options.trim === false) {\n\t\t\t\trows[rows.length - 1] += ' ';\n\t\t\t\trowLength++;\n\t\t\t}\n\t\t}\n\n\t\t// In 'hard' wrap mode, the length of a line is never allowed to extend past 'columns'\n\t\tif (options.hard && lengths[index] > columns) {\n\t\t\tconst remainingColumns = (columns - rowLength);\n\t\t\tconst breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n\t\t\tconst breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n\t\t\tif (breaksStartingNextLine < breaksStartingThisLine) {\n\t\t\t\trows.push('');\n\t\t\t}\n\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n\t\t\tif (options.wordWrap === false && rowLength < columns) {\n\t\t\t\twrapWord(rows, word, columns);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trows.push('');\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && options.wordWrap === false) {\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\trows[rows.length - 1] += word;\n\t}\n\n\tif (options.trim !== false) {\n\t\trows = rows.map(row => stringVisibleTrimSpacesRight(row));\n\t}\n\n\tconst pre = [...rows.join('\\n')];\n\n\tfor (const [index, character] of pre.entries()) {\n\t\treturnValue += character;\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tconst {groups} = new RegExp(`(?:\\\\${ANSI_CSI}(?<code>\\\\d+)m|\\\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(pre.slice(index).join('')) || {groups: {}};\n\t\t\tif (groups.code !== undefined) {\n\t\t\t\tconst code = Number.parseFloat(groups.code);\n\t\t\t\tescapeCode = code === END_CODE ? undefined : code;\n\t\t\t} else if (groups.uri !== undefined) {\n\t\t\t\tescapeUrl = groups.uri.length === 0 ? undefined : groups.uri;\n\t\t\t}\n\t\t}\n\n\t\tconst code = ansiStyles.codes.get(Number(escapeCode));\n\n\t\tif (pre[index + 1] === '\\n') {\n\t\t\tif (escapeUrl) {\n\t\t\t\treturnValue += wrapAnsiHyperlink('');\n\t\t\t}\n\n\t\t\tif (escapeCode && code) {\n\t\t\t\treturnValue += wrapAnsiCode(code);\n\t\t\t}\n\t\t} else if (character === '\\n') {\n\t\t\tif (escapeCode && code) {\n\t\t\t\treturnValue += wrapAnsiCode(escapeCode);\n\t\t\t}\n\n\t\t\tif (escapeUrl) {\n\t\t\t\treturnValue += wrapAnsiHyperlink(escapeUrl);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n\n// For each newline, invoke the method separately\nexport default function wrapAnsi(string, columns, options) {\n\treturn String(string)\n\t\t.normalize()\n\t\t.replace(/\\r\\n/g, '\\n')\n\t\t.split('\\n')\n\t\t.map(line => exec(line, columns, options))\n\t\t.join('\\n');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}