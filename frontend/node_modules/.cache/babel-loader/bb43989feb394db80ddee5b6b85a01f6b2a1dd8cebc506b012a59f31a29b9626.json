{"ast":null,"code":"import { shorthandData } from './shorthand-data.mjs';\nimport { bubbleSort } from './bubble-sort.mjs';\nconst builtInOrders = ['alphabetical', 'concentric-css', 'smacss'];\nexport const cssDeclarationSorter = ({\n  order = 'alphabetical',\n  keepOverrides = false\n} = {}) => ({\n  postcssPlugin: 'css-declaration-sorter',\n  OnceExit(css) {\n    let withKeepOverrides = comparator => comparator;\n    if (keepOverrides) {\n      withKeepOverrides = withOverridesComparator(shorthandData);\n    }\n    if (typeof order === 'function') {\n      return processCss({\n        css,\n        comparator: withKeepOverrides(order)\n      });\n    }\n    if (!builtInOrders.includes(order)) return Promise.reject(Error([`Invalid built-in order '${order}' provided.`, `Available built-in orders are: ${builtInOrders}`].join('\\n')));\n    return import(`../orders/${order}.mjs`).then(({\n      properties\n    }) => processCss({\n      css,\n      comparator: withKeepOverrides(orderComparator(properties))\n    }));\n  }\n});\ncssDeclarationSorter.postcss = true;\n\n// Kept for backward compatibility\nexport default cssDeclarationSorter;\nfunction processCss({\n  css,\n  comparator\n}) {\n  const comments = [];\n  const rulesCache = [];\n  css.walk(node => {\n    const nodes = node.nodes;\n    const type = node.type;\n    if (type === 'comment') {\n      // Don't do anything to root comments or the last newline comment\n      const isNewlineNode = node.raws.before && node.raws.before.includes('\\n');\n      const lastNewlineNode = isNewlineNode && !node.next();\n      const onlyNode = !node.prev() && !node.next() || !node.parent;\n      if (lastNewlineNode || onlyNode || node.parent.type === 'root') {\n        return;\n      }\n      if (isNewlineNode) {\n        const pairedNode = node.next() || node.prev();\n        if (pairedNode) {\n          comments.unshift({\n            'comment': node,\n            'pairedNode': pairedNode,\n            'insertPosition': node.next() ? 'Before' : 'After'\n          });\n          node.remove();\n        }\n      } else {\n        const pairedNode = node.prev() || node.next();\n        if (pairedNode) {\n          comments.push({\n            'comment': node,\n            'pairedNode': pairedNode,\n            'insertPosition': 'After'\n          });\n          node.remove();\n        }\n      }\n      return;\n    }\n\n    // Add rule-like nodes to a cache so that we can remove all\n    // comment nodes before we start sorting.\n    const isRule = type === 'rule' || type === 'atrule';\n    if (isRule && nodes && nodes.length > 1) {\n      rulesCache.push(nodes);\n    }\n  });\n\n  // Perform a sort once all comment nodes are removed\n  rulesCache.forEach(nodes => {\n    sortCssDeclarations({\n      nodes,\n      comparator\n    });\n  });\n\n  // Add comments back to the nodes they are paired with\n  comments.forEach(node => {\n    const pairedNode = node.pairedNode;\n    node.comment.remove();\n    pairedNode.parent && pairedNode.parent['insert' + node.insertPosition](pairedNode, node.comment);\n  });\n}\nfunction sortCssDeclarations({\n  nodes,\n  comparator\n}) {\n  bubbleSort(nodes, (a, b) => {\n    if (a.type === 'decl' && b.type === 'decl') {\n      return comparator(a.prop, b.prop);\n    } else {\n      return compareDifferentType(a, b);\n    }\n  });\n}\nfunction withOverridesComparator(shorthandData) {\n  return function (comparator) {\n    return function (a, b) {\n      a = removeVendorPrefix(a);\n      b = removeVendorPrefix(b);\n      if (shorthandData[a] && shorthandData[a].includes(b)) return 0;\n      if (shorthandData[b] && shorthandData[b].includes(a)) return 0;\n      return comparator(a, b);\n    };\n  };\n}\nfunction orderComparator(order) {\n  return function (a, b) {\n    return order.indexOf(a) - order.indexOf(b);\n  };\n}\nfunction compareDifferentType(a, b) {\n  if (b.type === 'atrule' || a.type === 'atrule') {\n    return 0;\n  }\n  return a.type === 'decl' ? -1 : b.type === 'decl' ? 1 : 0;\n}\nfunction removeVendorPrefix(property) {\n  return property.replace(/^-\\w+-/, '');\n}","map":{"version":3,"names":["shorthandData","bubbleSort","builtInOrders","cssDeclarationSorter","order","keepOverrides","postcssPlugin","OnceExit","css","withKeepOverrides","comparator","withOverridesComparator","processCss","includes","Promise","reject","Error","join","then","properties","orderComparator","postcss","comments","rulesCache","walk","node","nodes","type","isNewlineNode","raws","before","lastNewlineNode","next","onlyNode","prev","parent","pairedNode","unshift","remove","push","isRule","length","forEach","sortCssDeclarations","comment","insertPosition","a","b","prop","compareDifferentType","removeVendorPrefix","indexOf","property","replace"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/css-declaration-sorter/src/main.mjs"],"sourcesContent":["import { shorthandData } from './shorthand-data.mjs';\nimport { bubbleSort } from './bubble-sort.mjs';\n\nconst builtInOrders = [\n  'alphabetical',\n  'concentric-css',\n  'smacss',\n];\n\nexport const cssDeclarationSorter = ({ order = 'alphabetical', keepOverrides = false } = {}) => ({\n  postcssPlugin: 'css-declaration-sorter',\n  OnceExit (css) {\n    let withKeepOverrides = comparator => comparator;\n    if (keepOverrides) {\n      withKeepOverrides = withOverridesComparator(shorthandData);\n    }\n\n    if (typeof order === 'function') {\n      return processCss({ css, comparator: withKeepOverrides(order) });\n    }\n\n    if (!builtInOrders.includes(order))\n      return Promise.reject(\n        Error([\n          `Invalid built-in order '${order}' provided.`,\n          `Available built-in orders are: ${builtInOrders}`,\n        ].join('\\n'))\n      );\n\n    return import(`../orders/${order}.mjs`)\n      .then(({ properties }) => processCss({\n        css,\n        comparator: withKeepOverrides(orderComparator(properties)),\n      }));\n  },\n});\n\ncssDeclarationSorter.postcss = true;\n\n// Kept for backward compatibility\nexport default cssDeclarationSorter;\n\nfunction processCss ({ css, comparator }) {\n  const comments = [];\n  const rulesCache = [];\n\n  css.walk(node => {\n    const nodes = node.nodes;\n    const type = node.type;\n\n    if (type === 'comment') {\n      // Don't do anything to root comments or the last newline comment\n      const isNewlineNode = node.raws.before && node.raws.before.includes('\\n');\n      const lastNewlineNode = isNewlineNode && !node.next();\n      const onlyNode = !node.prev() && !node.next() || !node.parent;\n\n      if (lastNewlineNode || onlyNode || node.parent.type === 'root') {\n        return;\n      }\n\n      if (isNewlineNode) {\n        const pairedNode = node.next() || node.prev();\n        if (pairedNode) {\n          comments.unshift({\n            'comment': node,\n            'pairedNode': pairedNode,\n            'insertPosition': node.next() ? 'Before' : 'After',\n          });\n          node.remove();\n        }\n      } else {\n        const pairedNode = node.prev() || node.next();\n        if (pairedNode) {\n          comments.push({\n            'comment': node,\n            'pairedNode': pairedNode,\n            'insertPosition': 'After',\n          });\n          node.remove();\n        }\n      }\n      return;\n    }\n\n    // Add rule-like nodes to a cache so that we can remove all\n    // comment nodes before we start sorting.\n    const isRule = type === 'rule' || type === 'atrule';\n    if (isRule && nodes && nodes.length > 1) {\n      rulesCache.push(nodes);\n    }\n  });\n\n  // Perform a sort once all comment nodes are removed\n  rulesCache.forEach(nodes => {\n    sortCssDeclarations({ nodes, comparator });\n  });\n\n  // Add comments back to the nodes they are paired with\n  comments.forEach(node => {\n    const pairedNode = node.pairedNode;\n    node.comment.remove();\n    pairedNode.parent && pairedNode.parent['insert' + node.insertPosition](pairedNode, node.comment);\n  });\n}\n\nfunction sortCssDeclarations ({ nodes, comparator }) {\n  bubbleSort(nodes, (a, b) => {\n    if (a.type === 'decl' && b.type === 'decl') {\n      return comparator(a.prop, b.prop);\n    } else {\n      return compareDifferentType(a, b);\n    }\n  });\n}\n\nfunction withOverridesComparator (shorthandData) {\n  return function (comparator) {\n    return function (a, b) {\n      a = removeVendorPrefix(a);\n      b = removeVendorPrefix(b);\n\n      if (shorthandData[a] && shorthandData[a].includes(b)) return 0;\n      if (shorthandData[b] && shorthandData[b].includes(a)) return 0;\n\n      return comparator(a, b);\n    };\n  };\n}\n\nfunction orderComparator (order) {\n  return function (a, b) {\n    return order.indexOf(a) - order.indexOf(b);\n  };\n}\n\nfunction compareDifferentType (a, b) {\n  if (b.type === 'atrule' || a.type === 'atrule') {\n    return 0;\n  }\n\n  return a.type === 'decl' ? -1 : b.type === 'decl' ? 1 : 0;\n}\n\nfunction removeVendorPrefix (property) {\n  return property.replace(/^-\\w+-/, '');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}