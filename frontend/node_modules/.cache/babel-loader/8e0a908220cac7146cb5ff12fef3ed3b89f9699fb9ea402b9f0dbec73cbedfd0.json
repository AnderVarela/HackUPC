{"ast":null,"code":"import { FormatNumericToString } from './FormatNumericToString';\nimport { SameValue } from '../262';\nimport { ComputeExponent } from './ComputeExponent';\nimport formatToParts from './format_to_parts';\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nexport function PartitionNumberPattern(numberFormat, x, _a) {\n  var _b;\n  var getInternalSlots = _a.getInternalSlots;\n  var internalSlots = getInternalSlots(numberFormat);\n  var pl = internalSlots.pl,\n    dataLocaleData = internalSlots.dataLocaleData,\n    numberingSystem = internalSlots.numberingSystem;\n  var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n  var magnitude = 0;\n  var exponent = 0;\n  var n;\n  if (isNaN(x)) {\n    n = symbols.nan;\n  } else if (x == Number.POSITIVE_INFINITY || x == Number.NEGATIVE_INFINITY) {\n    n = symbols.infinity;\n  } else {\n    if (!SameValue(x, -0)) {\n      if (!isFinite(x)) {\n        throw new Error('Input must be a mathematical value');\n      }\n      if (internalSlots.style == 'percent') {\n        x *= 100;\n      }\n      ;\n      _b = ComputeExponent(numberFormat, x, {\n        getInternalSlots: getInternalSlots\n      }), exponent = _b[0], magnitude = _b[1];\n      // Preserve more precision by doing multiplication when exponent is negative.\n      x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n    }\n    var formatNumberResult = FormatNumericToString(internalSlots, x);\n    n = formatNumberResult.formattedString;\n    x = formatNumberResult.roundedNumber;\n  }\n  // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern\n  // We need to do this before `x` is rounded.\n  var sign;\n  var signDisplay = internalSlots.signDisplay;\n  switch (signDisplay) {\n    case 'never':\n      sign = 0;\n      break;\n    case 'auto':\n      if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n        sign = 0;\n      } else {\n        sign = -1;\n      }\n      break;\n    case 'always':\n      if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n      break;\n    default:\n      // x === 0 -> x is 0 or x is -0\n      if (x === 0 || isNaN(x)) {\n        sign = 0;\n      } else if (x > 0) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n  }\n  return formatToParts({\n    roundedNumber: x,\n    formattedString: n,\n    exponent: exponent,\n    magnitude: magnitude,\n    sign: sign\n  }, internalSlots.dataLocaleData, pl, internalSlots);\n}","map":{"version":3,"names":["FormatNumericToString","SameValue","ComputeExponent","formatToParts","PartitionNumberPattern","numberFormat","x","_a","_b","getInternalSlots","internalSlots","pl","dataLocaleData","numberingSystem","symbols","numbers","nu","magnitude","exponent","n","isNaN","nan","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","infinity","isFinite","Error","style","Math","pow","formatNumberResult","formattedString","roundedNumber","sign","signDisplay"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/PartitionNumberPattern.js"],"sourcesContent":["import { FormatNumericToString } from './FormatNumericToString';\nimport { SameValue } from '../262';\nimport { ComputeExponent } from './ComputeExponent';\nimport formatToParts from './format_to_parts';\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nexport function PartitionNumberPattern(numberFormat, x, _a) {\n    var _b;\n    var getInternalSlots = _a.getInternalSlots;\n    var internalSlots = getInternalSlots(numberFormat);\n    var pl = internalSlots.pl, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    var symbols = dataLocaleData.numbers.symbols[numberingSystem] ||\n        dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n    var magnitude = 0;\n    var exponent = 0;\n    var n;\n    if (isNaN(x)) {\n        n = symbols.nan;\n    }\n    else if (x == Number.POSITIVE_INFINITY || x == Number.NEGATIVE_INFINITY) {\n        n = symbols.infinity;\n    }\n    else {\n        if (!SameValue(x, -0)) {\n            if (!isFinite(x)) {\n                throw new Error('Input must be a mathematical value');\n            }\n            if (internalSlots.style == 'percent') {\n                x *= 100;\n            }\n            ;\n            _b = ComputeExponent(numberFormat, x, {\n                getInternalSlots: getInternalSlots,\n            }), exponent = _b[0], magnitude = _b[1];\n            // Preserve more precision by doing multiplication when exponent is negative.\n            x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n        }\n        var formatNumberResult = FormatNumericToString(internalSlots, x);\n        n = formatNumberResult.formattedString;\n        x = formatNumberResult.roundedNumber;\n    }\n    // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern\n    // We need to do this before `x` is rounded.\n    var sign;\n    var signDisplay = internalSlots.signDisplay;\n    switch (signDisplay) {\n        case 'never':\n            sign = 0;\n            break;\n        case 'auto':\n            if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n                sign = 0;\n            }\n            else {\n                sign = -1;\n            }\n            break;\n        case 'always':\n            if (SameValue(x, 0) || x > 0 || isNaN(x)) {\n                sign = 1;\n            }\n            else {\n                sign = -1;\n            }\n            break;\n        default:\n            // x === 0 -> x is 0 or x is -0\n            if (x === 0 || isNaN(x)) {\n                sign = 0;\n            }\n            else if (x > 0) {\n                sign = 1;\n            }\n            else {\n                sign = -1;\n            }\n    }\n    return formatToParts({ roundedNumber: x, formattedString: n, exponent: exponent, magnitude: magnitude, sign: sign }, internalSlots.dataLocaleData, pl, internalSlots);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}