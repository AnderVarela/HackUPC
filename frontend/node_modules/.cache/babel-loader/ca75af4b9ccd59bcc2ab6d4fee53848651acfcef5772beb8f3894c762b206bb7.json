{"ast":null,"code":"import { repeat } from '../utils';\n/**\n * TODO: dedup with intl-pluralrules and support BigInt\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction and integer between 0 and 20\n * @param maxFraction and integer between 0 and 20\n */\nexport function ToRawFixed(x, minFraction, maxFraction) {\n  var f = maxFraction;\n  var n = Math.round(x * Math.pow(10, f));\n  var xFinal = n / Math.pow(10, f);\n  // n is a positive integer, but it is possible to be greater than 1e21.\n  // In such case we will go the slow path.\n  // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n  var m;\n  if (n < 1e21) {\n    m = n.toString();\n  } else {\n    m = n.toString();\n    var _a = m.split('e'),\n      mantissa = _a[0],\n      exponent = _a[1];\n    m = mantissa.replace('.', '');\n    m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\n  }\n  var int;\n  if (f !== 0) {\n    var k = m.length;\n    if (k <= f) {\n      var z = repeat('0', f + 1 - k);\n      m = z + m;\n      k = f + 1;\n    }\n    var a = m.slice(0, k - f);\n    var b = m.slice(k - f);\n    m = \"\".concat(a, \".\").concat(b);\n    int = a.length;\n  } else {\n    int = m.length;\n  }\n  var cut = maxFraction - minFraction;\n  while (cut > 0 && m[m.length - 1] === '0') {\n    m = m.slice(0, -1);\n    cut--;\n  }\n  if (m[m.length - 1] === '.') {\n    m = m.slice(0, -1);\n  }\n  return {\n    formattedString: m,\n    roundedNumber: xFinal,\n    integerDigitsCount: int\n  };\n}","map":{"version":3,"names":["repeat","ToRawFixed","x","minFraction","maxFraction","f","n","Math","round","pow","xFinal","m","toString","_a","split","mantissa","exponent","replace","max","length","int","k","z","a","slice","b","concat","cut","formattedString","roundedNumber","integerDigitsCount"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ToRawFixed.js"],"sourcesContent":["import { repeat } from '../utils';\n/**\n * TODO: dedup with intl-pluralrules and support BigInt\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction and integer between 0 and 20\n * @param maxFraction and integer between 0 and 20\n */\nexport function ToRawFixed(x, minFraction, maxFraction) {\n    var f = maxFraction;\n    var n = Math.round(x * Math.pow(10, f));\n    var xFinal = n / Math.pow(10, f);\n    // n is a positive integer, but it is possible to be greater than 1e21.\n    // In such case we will go the slow path.\n    // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n    var m;\n    if (n < 1e21) {\n        m = n.toString();\n    }\n    else {\n        m = n.toString();\n        var _a = m.split('e'), mantissa = _a[0], exponent = _a[1];\n        m = mantissa.replace('.', '');\n        m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\n    }\n    var int;\n    if (f !== 0) {\n        var k = m.length;\n        if (k <= f) {\n            var z = repeat('0', f + 1 - k);\n            m = z + m;\n            k = f + 1;\n        }\n        var a = m.slice(0, k - f);\n        var b = m.slice(k - f);\n        m = \"\".concat(a, \".\").concat(b);\n        int = a.length;\n    }\n    else {\n        int = m.length;\n    }\n    var cut = maxFraction - minFraction;\n    while (cut > 0 && m[m.length - 1] === '0') {\n        m = m.slice(0, -1);\n        cut--;\n    }\n    if (m[m.length - 1] === '.') {\n        m = m.slice(0, -1);\n    }\n    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,CAAC,EAAEC,WAAW,EAAEC,WAAW,EAAE;EACpD,IAAIC,CAAC,GAAGD,WAAW;EACnB,IAAIE,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACN,CAAC,GAAGK,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEJ,CAAC,CAAC,CAAC;EACvC,IAAIK,MAAM,GAAGJ,CAAC,GAAGC,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEJ,CAAC,CAAC;EAChC;EACA;EACA;EACA,IAAIM,CAAC;EACL,IAAIL,CAAC,GAAG,IAAI,EAAE;IACVK,CAAC,GAAGL,CAAC,CAACM,QAAQ,CAAC,CAAC;EACpB,CAAC,MACI;IACDD,CAAC,GAAGL,CAAC,CAACM,QAAQ,CAAC,CAAC;IAChB,IAAIC,EAAE,GAAGF,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC;MAAEC,QAAQ,GAAGF,EAAE,CAAC,CAAC,CAAC;MAAEG,QAAQ,GAAGH,EAAE,CAAC,CAAC,CAAC;IACzDF,CAAC,GAAGI,QAAQ,CAACE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;IAC7BN,CAAC,GAAGA,CAAC,GAAGX,MAAM,CAAC,GAAG,EAAEO,IAAI,CAACW,GAAG,CAAC,CAACF,QAAQ,GAAGL,CAAC,CAACQ,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9D;EACA,IAAIC,GAAG;EACP,IAAIf,CAAC,KAAK,CAAC,EAAE;IACT,IAAIgB,CAAC,GAAGV,CAAC,CAACQ,MAAM;IAChB,IAAIE,CAAC,IAAIhB,CAAC,EAAE;MACR,IAAIiB,CAAC,GAAGtB,MAAM,CAAC,GAAG,EAAEK,CAAC,GAAG,CAAC,GAAGgB,CAAC,CAAC;MAC9BV,CAAC,GAAGW,CAAC,GAAGX,CAAC;MACTU,CAAC,GAAGhB,CAAC,GAAG,CAAC;IACb;IACA,IAAIkB,CAAC,GAAGZ,CAAC,CAACa,KAAK,CAAC,CAAC,EAAEH,CAAC,GAAGhB,CAAC,CAAC;IACzB,IAAIoB,CAAC,GAAGd,CAAC,CAACa,KAAK,CAACH,CAAC,GAAGhB,CAAC,CAAC;IACtBM,CAAC,GAAG,EAAE,CAACe,MAAM,CAACH,CAAC,EAAE,GAAG,CAAC,CAACG,MAAM,CAACD,CAAC,CAAC;IAC/BL,GAAG,GAAGG,CAAC,CAACJ,MAAM;EAClB,CAAC,MACI;IACDC,GAAG,GAAGT,CAAC,CAACQ,MAAM;EAClB;EACA,IAAIQ,GAAG,GAAGvB,WAAW,GAAGD,WAAW;EACnC,OAAOwB,GAAG,GAAG,CAAC,IAAIhB,CAAC,CAACA,CAAC,CAACQ,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IACvCR,CAAC,GAAGA,CAAC,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClBG,GAAG,EAAE;EACT;EACA,IAAIhB,CAAC,CAACA,CAAC,CAACQ,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IACzBR,CAAC,GAAGA,CAAC,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACtB;EACA,OAAO;IAAEI,eAAe,EAAEjB,CAAC;IAAEkB,aAAa,EAAEnB,MAAM;IAAEoB,kBAAkB,EAAEV;EAAI,CAAC;AACjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}