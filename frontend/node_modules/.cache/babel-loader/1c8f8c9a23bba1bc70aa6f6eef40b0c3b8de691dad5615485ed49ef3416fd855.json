{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resizeSectionByteSize = resizeSectionByteSize;\nexports.resizeSectionVecSize = resizeSectionVecSize;\nvar _wasmGen = require(\"@webassemblyjs/wasm-gen\");\nvar _ast = require(\"@webassemblyjs/ast\");\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\nfunction resizeSectionByteSize(ast, uint8Buffer, section, deltaBytes) {\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, section);\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n  if (typeof sectionMetadata.size.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // keep old node location to be overriden\n\n  var start = sectionMetadata.size.loc.start.column;\n  var end = sectionMetadata.size.loc.end.column;\n  var newSectionSize = sectionMetadata.size.value + deltaBytes;\n  var newBytes = (0, _wasmGen.encodeU32)(newSectionSize);\n  /**\n   * update AST\n   */\n\n  sectionMetadata.size.value = newSectionSize;\n  var oldu32EncodedLen = end - start;\n  var newu32EncodedLen = newBytes.length; // the new u32 has a different encoded length\n\n  if (newu32EncodedLen !== oldu32EncodedLen) {\n    var deltaInSizeEncoding = newu32EncodedLen - oldu32EncodedLen;\n    sectionMetadata.size.loc.end.column = start + newu32EncodedLen;\n    deltaBytes += deltaInSizeEncoding; // move the vec size pointer size the section size is now smaller\n\n    sectionMetadata.vectorOfSize.loc.start.column += deltaInSizeEncoding;\n    sectionMetadata.vectorOfSize.loc.end.column += deltaInSizeEncoding;\n  } // Once we hit our section every that is after needs to be shifted by the delta\n\n  var encounteredSection = false;\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n      if (encounteredSection === true) {\n        (0, _ast.shiftSection)(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newBytes);\n}\nfunction resizeSectionVecSize(ast, uint8Buffer, section, deltaElements) {\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, section);\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n  if (typeof sectionMetadata.vectorOfSize.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // Section has no vector\n\n  if (sectionMetadata.vectorOfSize.value === -1) {\n    return uint8Buffer;\n  } // keep old node location to be overriden\n\n  var start = sectionMetadata.vectorOfSize.loc.start.column;\n  var end = sectionMetadata.vectorOfSize.loc.end.column;\n  var newValue = sectionMetadata.vectorOfSize.value + deltaElements;\n  var newBytes = (0, _wasmGen.encodeU32)(newValue); // Update AST\n\n  sectionMetadata.vectorOfSize.value = newValue;\n  sectionMetadata.vectorOfSize.loc.end.column = start + newBytes.length;\n  return (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newBytes);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","resizeSectionByteSize","resizeSectionVecSize","_wasmGen","require","_ast","_helperBuffer","ast","uint8Buffer","section","deltaBytes","sectionMetadata","getSectionMetadata","Error","size","loc","start","column","end","newSectionSize","newBytes","encodeU32","oldu32EncodedLen","newu32EncodedLen","length","deltaInSizeEncoding","vectorOfSize","encounteredSection","traverse","SectionMetadata","path","node","shiftSection","overrideBytesInBuffer","deltaElements","newValue"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@webassemblyjs/helper-wasm-section/lib/resize.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resizeSectionByteSize = resizeSectionByteSize;\nexports.resizeSectionVecSize = resizeSectionVecSize;\n\nvar _wasmGen = require(\"@webassemblyjs/wasm-gen\");\n\nvar _ast = require(\"@webassemblyjs/ast\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nfunction resizeSectionByteSize(ast, uint8Buffer, section, deltaBytes) {\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.size.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.size.loc.start.column;\n  var end = sectionMetadata.size.loc.end.column;\n  var newSectionSize = sectionMetadata.size.value + deltaBytes;\n  var newBytes = (0, _wasmGen.encodeU32)(newSectionSize);\n  /**\n   * update AST\n   */\n\n  sectionMetadata.size.value = newSectionSize;\n  var oldu32EncodedLen = end - start;\n  var newu32EncodedLen = newBytes.length; // the new u32 has a different encoded length\n\n  if (newu32EncodedLen !== oldu32EncodedLen) {\n    var deltaInSizeEncoding = newu32EncodedLen - oldu32EncodedLen;\n    sectionMetadata.size.loc.end.column = start + newu32EncodedLen;\n    deltaBytes += deltaInSizeEncoding; // move the vec size pointer size the section size is now smaller\n\n    sectionMetadata.vectorOfSize.loc.start.column += deltaInSizeEncoding;\n    sectionMetadata.vectorOfSize.loc.end.column += deltaInSizeEncoding;\n  } // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var encounteredSection = false;\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        (0, _ast.shiftSection)(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newBytes);\n}\n\nfunction resizeSectionVecSize(ast, uint8Buffer, section, deltaElements) {\n  var sectionMetadata = (0, _ast.getSectionMetadata)(ast, section);\n\n  if (typeof sectionMetadata === \"undefined\") {\n    throw new Error(\"Section metadata not found\");\n  }\n\n  if (typeof sectionMetadata.vectorOfSize.loc === \"undefined\") {\n    throw new Error(\"SectionMetadata \" + section + \" has no loc\");\n  } // Section has no vector\n\n\n  if (sectionMetadata.vectorOfSize.value === -1) {\n    return uint8Buffer;\n  } // keep old node location to be overriden\n\n\n  var start = sectionMetadata.vectorOfSize.loc.start.column;\n  var end = sectionMetadata.vectorOfSize.loc.end.column;\n  var newValue = sectionMetadata.vectorOfSize.value + deltaElements;\n  var newBytes = (0, _wasmGen.encodeU32)(newValue); // Update AST\n\n  sectionMetadata.vectorOfSize.value = newValue;\n  sectionMetadata.vectorOfSize.loc.end.column = start + newBytes.length;\n  return (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newBytes);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB;AACrDF,OAAO,CAACG,oBAAoB,GAAGA,oBAAoB;AAEnD,IAAIC,QAAQ,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAEjD,IAAIC,IAAI,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAExC,IAAIE,aAAa,GAAGF,OAAO,CAAC,8BAA8B,CAAC;AAE3D,SAASH,qBAAqBA,CAACM,GAAG,EAAEC,WAAW,EAAEC,OAAO,EAAEC,UAAU,EAAE;EACpE,IAAIC,eAAe,GAAG,CAAC,CAAC,EAAEN,IAAI,CAACO,kBAAkB,EAAEL,GAAG,EAAEE,OAAO,CAAC;EAEhE,IAAI,OAAOE,eAAe,KAAK,WAAW,EAAE;IAC1C,MAAM,IAAIE,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EAEA,IAAI,OAAOF,eAAe,CAACG,IAAI,CAACC,GAAG,KAAK,WAAW,EAAE;IACnD,MAAM,IAAIF,KAAK,CAAC,kBAAkB,GAAGJ,OAAO,GAAG,aAAa,CAAC;EAC/D,CAAC,CAAC;;EAGF,IAAIO,KAAK,GAAGL,eAAe,CAACG,IAAI,CAACC,GAAG,CAACC,KAAK,CAACC,MAAM;EACjD,IAAIC,GAAG,GAAGP,eAAe,CAACG,IAAI,CAACC,GAAG,CAACG,GAAG,CAACD,MAAM;EAC7C,IAAIE,cAAc,GAAGR,eAAe,CAACG,IAAI,CAACd,KAAK,GAAGU,UAAU;EAC5D,IAAIU,QAAQ,GAAG,CAAC,CAAC,EAAEjB,QAAQ,CAACkB,SAAS,EAAEF,cAAc,CAAC;EACtD;AACF;AACA;;EAEER,eAAe,CAACG,IAAI,CAACd,KAAK,GAAGmB,cAAc;EAC3C,IAAIG,gBAAgB,GAAGJ,GAAG,GAAGF,KAAK;EAClC,IAAIO,gBAAgB,GAAGH,QAAQ,CAACI,MAAM,CAAC,CAAC;;EAExC,IAAID,gBAAgB,KAAKD,gBAAgB,EAAE;IACzC,IAAIG,mBAAmB,GAAGF,gBAAgB,GAAGD,gBAAgB;IAC7DX,eAAe,CAACG,IAAI,CAACC,GAAG,CAACG,GAAG,CAACD,MAAM,GAAGD,KAAK,GAAGO,gBAAgB;IAC9Db,UAAU,IAAIe,mBAAmB,CAAC,CAAC;;IAEnCd,eAAe,CAACe,YAAY,CAACX,GAAG,CAACC,KAAK,CAACC,MAAM,IAAIQ,mBAAmB;IACpEd,eAAe,CAACe,YAAY,CAACX,GAAG,CAACG,GAAG,CAACD,MAAM,IAAIQ,mBAAmB;EACpE,CAAC,CAAC;;EAGF,IAAIE,kBAAkB,GAAG,KAAK;EAC9B,CAAC,CAAC,EAAEtB,IAAI,CAACuB,QAAQ,EAAErB,GAAG,EAAE;IACtBsB,eAAe,EAAE,SAASA,eAAeA,CAACC,IAAI,EAAE;MAC9C,IAAIA,IAAI,CAACC,IAAI,CAACtB,OAAO,KAAKA,OAAO,EAAE;QACjCkB,kBAAkB,GAAG,IAAI;QACzB;MACF;MAEA,IAAIA,kBAAkB,KAAK,IAAI,EAAE;QAC/B,CAAC,CAAC,EAAEtB,IAAI,CAAC2B,YAAY,EAAEzB,GAAG,EAAEuB,IAAI,CAACC,IAAI,EAAErB,UAAU,CAAC;MACpD;IACF;EACF,CAAC,CAAC;EACF,OAAO,CAAC,CAAC,EAAEJ,aAAa,CAAC2B,qBAAqB,EAAEzB,WAAW,EAAEQ,KAAK,EAAEE,GAAG,EAAEE,QAAQ,CAAC;AACpF;AAEA,SAASlB,oBAAoBA,CAACK,GAAG,EAAEC,WAAW,EAAEC,OAAO,EAAEyB,aAAa,EAAE;EACtE,IAAIvB,eAAe,GAAG,CAAC,CAAC,EAAEN,IAAI,CAACO,kBAAkB,EAAEL,GAAG,EAAEE,OAAO,CAAC;EAEhE,IAAI,OAAOE,eAAe,KAAK,WAAW,EAAE;IAC1C,MAAM,IAAIE,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EAEA,IAAI,OAAOF,eAAe,CAACe,YAAY,CAACX,GAAG,KAAK,WAAW,EAAE;IAC3D,MAAM,IAAIF,KAAK,CAAC,kBAAkB,GAAGJ,OAAO,GAAG,aAAa,CAAC;EAC/D,CAAC,CAAC;;EAGF,IAAIE,eAAe,CAACe,YAAY,CAAC1B,KAAK,KAAK,CAAC,CAAC,EAAE;IAC7C,OAAOQ,WAAW;EACpB,CAAC,CAAC;;EAGF,IAAIQ,KAAK,GAAGL,eAAe,CAACe,YAAY,CAACX,GAAG,CAACC,KAAK,CAACC,MAAM;EACzD,IAAIC,GAAG,GAAGP,eAAe,CAACe,YAAY,CAACX,GAAG,CAACG,GAAG,CAACD,MAAM;EACrD,IAAIkB,QAAQ,GAAGxB,eAAe,CAACe,YAAY,CAAC1B,KAAK,GAAGkC,aAAa;EACjE,IAAId,QAAQ,GAAG,CAAC,CAAC,EAAEjB,QAAQ,CAACkB,SAAS,EAAEc,QAAQ,CAAC,CAAC,CAAC;;EAElDxB,eAAe,CAACe,YAAY,CAAC1B,KAAK,GAAGmC,QAAQ;EAC7CxB,eAAe,CAACe,YAAY,CAACX,GAAG,CAACG,GAAG,CAACD,MAAM,GAAGD,KAAK,GAAGI,QAAQ,CAACI,MAAM;EACrE,OAAO,CAAC,CAAC,EAAElB,aAAa,CAAC2B,qBAAqB,EAAEzB,WAAW,EAAEQ,KAAK,EAAEE,GAAG,EAAEE,QAAQ,CAAC;AACpF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}