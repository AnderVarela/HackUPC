{"ast":null,"code":"// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression and\n// Statement, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nfunction simple(node, visitors, baseVisitor, state, override) {\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n  (function c(node, st, override) {\n    var type = override || node.type,\n      found = visitors[type];\n    baseVisitor[type](node, st, c);\n    if (found) {\n      found(node, st);\n    }\n  })(node, state, override);\n}\n\n// An ancestor walk keeps an array of ancestor nodes (including the\n// current node) and passes them to the callback as third parameter\n// (and also as state parameter when no other state is present).\nfunction ancestor(node, visitors, baseVisitor, state, override) {\n  var ancestors = [];\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n  (function c(node, st, override) {\n    var type = override || node.type,\n      found = visitors[type];\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) {\n      ancestors.push(node);\n    }\n    baseVisitor[type](node, st, c);\n    if (found) {\n      found(node, st || ancestors, ancestors);\n    }\n    if (isNew) {\n      ancestors.pop();\n    }\n  })(node, state, override);\n}\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nfunction recursive(node, state, funcs, baseVisitor, override) {\n  var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor;\n  (function c(node, st, override) {\n    visitor[override || node.type](node, st, c);\n  })(node, state, override);\n}\nfunction makeTest(test) {\n  if (typeof test === \"string\") {\n    return function (type) {\n      return type === test;\n    };\n  } else if (!test) {\n    return function () {\n      return true;\n    };\n  } else {\n    return test;\n  }\n}\nvar Found = function Found(node, state) {\n  this.node = node;\n  this.state = state;\n};\n\n// A full walk triggers the callback on each node\nfunction full(node, callback, baseVisitor, state, override) {\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n  (function c(node, st, override) {\n    var type = override || node.type;\n    baseVisitor[type](node, st, c);\n    if (!override) {\n      callback(node, st, type);\n    }\n  })(node, state, override);\n}\n\n// An fullAncestor walk is like an ancestor walk, but triggers\n// the callback on each node\nfunction fullAncestor(node, callback, baseVisitor, state) {\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n  var ancestors = [];\n  (function c(node, st, override) {\n    var type = override || node.type;\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) {\n      ancestors.push(node);\n    }\n    baseVisitor[type](node, st, c);\n    if (!override) {\n      callback(node, st || ancestors, ancestors, type);\n    }\n    if (isNew) {\n      ancestors.pop();\n    }\n  })(node, state);\n}\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nfunction findNodeAt(node, start, end, test, baseVisitor, state) {\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n  test = makeTest(test);\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if ((start == null || node.start <= start) && (end == null || node.end >= end)) {\n        baseVisitor[type](node, st, c);\n      }\n      if ((start == null || node.start === start) && (end == null || node.end === end) && test(type, node)) {\n        throw new Found(node, st);\n      }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }\n    throw e;\n  }\n}\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nfunction findNodeAround(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if (node.start > pos || node.end < pos) {\n        return;\n      }\n      baseVisitor[type](node, st, c);\n      if (test(type, node)) {\n        throw new Found(node, st);\n      }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }\n    throw e;\n  }\n}\n\n// Find the outermost matching node after a given position.\nfunction findNodeAfter(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n  try {\n    (function c(node, st, override) {\n      if (node.end < pos) {\n        return;\n      }\n      var type = override || node.type;\n      if (node.start >= pos && test(type, node)) {\n        throw new Found(node, st);\n      }\n      baseVisitor[type](node, st, c);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }\n    throw e;\n  }\n}\n\n// Find the outermost matching node before a given position.\nfunction findNodeBefore(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n  var max;\n  (function c(node, st, override) {\n    if (node.start > pos) {\n      return;\n    }\n    var type = override || node.type;\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) {\n      max = new Found(node, st);\n    }\n    baseVisitor[type](node, st, c);\n  })(node, state);\n  return max;\n}\n\n// Fallback to an Object.create polyfill for older environments.\nvar create = Object.create || function (proto) {\n  function Ctor() {}\n  Ctor.prototype = proto;\n  return new Ctor();\n};\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nfunction make(funcs, baseVisitor) {\n  var visitor = create(baseVisitor || base);\n  for (var type in funcs) {\n    visitor[type] = funcs[type];\n  }\n  return visitor;\n}\nfunction skipThrough(node, st, c) {\n  c(node, st);\n}\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nvar base = {};\nbase.Program = base.BlockStatement = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1) {\n    var stmt = list[i];\n    c(stmt, st, \"Statement\");\n  }\n};\nbase.Statement = skipThrough;\nbase.EmptyStatement = ignore;\nbase.ExpressionStatement = base.ParenthesizedExpression = base.ChainExpression = function (node, st, c) {\n  return c(node.expression, st, \"Expression\");\n};\nbase.IfStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Statement\");\n  if (node.alternate) {\n    c(node.alternate, st, \"Statement\");\n  }\n};\nbase.LabeledStatement = function (node, st, c) {\n  return c(node.body, st, \"Statement\");\n};\nbase.BreakStatement = base.ContinueStatement = ignore;\nbase.WithStatement = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.SwitchStatement = function (node, st, c) {\n  c(node.discriminant, st, \"Expression\");\n  for (var i$1 = 0, list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {\n    var cs = list$1[i$1];\n    if (cs.test) {\n      c(cs.test, st, \"Expression\");\n    }\n    for (var i = 0, list = cs.consequent; i < list.length; i += 1) {\n      var cons = list[i];\n      c(cons, st, \"Statement\");\n    }\n  }\n};\nbase.SwitchCase = function (node, st, c) {\n  if (node.test) {\n    c(node.test, st, \"Expression\");\n  }\n  for (var i = 0, list = node.consequent; i < list.length; i += 1) {\n    var cons = list[i];\n    c(cons, st, \"Statement\");\n  }\n};\nbase.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {\n  if (node.argument) {\n    c(node.argument, st, \"Expression\");\n  }\n};\nbase.ThrowStatement = base.SpreadElement = function (node, st, c) {\n  return c(node.argument, st, \"Expression\");\n};\nbase.TryStatement = function (node, st, c) {\n  c(node.block, st, \"Statement\");\n  if (node.handler) {\n    c(node.handler, st);\n  }\n  if (node.finalizer) {\n    c(node.finalizer, st, \"Statement\");\n  }\n};\nbase.CatchClause = function (node, st, c) {\n  if (node.param) {\n    c(node.param, st, \"Pattern\");\n  }\n  c(node.body, st, \"Statement\");\n};\nbase.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForStatement = function (node, st, c) {\n  if (node.init) {\n    c(node.init, st, \"ForInit\");\n  }\n  if (node.test) {\n    c(node.test, st, \"Expression\");\n  }\n  if (node.update) {\n    c(node.update, st, \"Expression\");\n  }\n  c(node.body, st, \"Statement\");\n};\nbase.ForInStatement = base.ForOfStatement = function (node, st, c) {\n  c(node.left, st, \"ForInit\");\n  c(node.right, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForInit = function (node, st, c) {\n  if (node.type === \"VariableDeclaration\") {\n    c(node, st);\n  } else {\n    c(node, st, \"Expression\");\n  }\n};\nbase.DebuggerStatement = ignore;\nbase.FunctionDeclaration = function (node, st, c) {\n  return c(node, st, \"Function\");\n};\nbase.VariableDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.declarations; i < list.length; i += 1) {\n    var decl = list[i];\n    c(decl, st);\n  }\n};\nbase.VariableDeclarator = function (node, st, c) {\n  c(node.id, st, \"Pattern\");\n  if (node.init) {\n    c(node.init, st, \"Expression\");\n  }\n};\nbase.Function = function (node, st, c) {\n  if (node.id) {\n    c(node.id, st, \"Pattern\");\n  }\n  for (var i = 0, list = node.params; i < list.length; i += 1) {\n    var param = list[i];\n    c(param, st, \"Pattern\");\n  }\n  c(node.body, st, node.expression ? \"Expression\" : \"Statement\");\n};\nbase.Pattern = function (node, st, c) {\n  if (node.type === \"Identifier\") {\n    c(node, st, \"VariablePattern\");\n  } else if (node.type === \"MemberExpression\") {\n    c(node, st, \"MemberPattern\");\n  } else {\n    c(node, st);\n  }\n};\nbase.VariablePattern = ignore;\nbase.MemberPattern = skipThrough;\nbase.RestElement = function (node, st, c) {\n  return c(node.argument, st, \"Pattern\");\n};\nbase.ArrayPattern = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n    if (elt) {\n      c(elt, st, \"Pattern\");\n    }\n  }\n};\nbase.ObjectPattern = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1) {\n    var prop = list[i];\n    if (prop.type === \"Property\") {\n      if (prop.computed) {\n        c(prop.key, st, \"Expression\");\n      }\n      c(prop.value, st, \"Pattern\");\n    } else if (prop.type === \"RestElement\") {\n      c(prop.argument, st, \"Pattern\");\n    }\n  }\n};\nbase.Expression = skipThrough;\nbase.ThisExpression = base.Super = base.MetaProperty = ignore;\nbase.ArrayExpression = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n    if (elt) {\n      c(elt, st, \"Expression\");\n    }\n  }\n};\nbase.ObjectExpression = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1) {\n    var prop = list[i];\n    c(prop, st);\n  }\n};\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\nbase.SequenceExpression = function (node, st, c) {\n  for (var i = 0, list = node.expressions; i < list.length; i += 1) {\n    var expr = list[i];\n    c(expr, st, \"Expression\");\n  }\n};\nbase.TemplateLiteral = function (node, st, c) {\n  for (var i = 0, list = node.quasis; i < list.length; i += 1) {\n    var quasi = list[i];\n    c(quasi, st);\n  }\n  for (var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1) {\n    var expr = list$1[i$1];\n    c(expr, st, \"Expression\");\n  }\n};\nbase.TemplateElement = ignore;\nbase.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n  c(node.argument, st, \"Expression\");\n};\nbase.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n  c(node.left, st, \"Expression\");\n  c(node.right, st, \"Expression\");\n};\nbase.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n  c(node.left, st, \"Pattern\");\n  c(node.right, st, \"Expression\");\n};\nbase.ConditionalExpression = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Expression\");\n  c(node.alternate, st, \"Expression\");\n};\nbase.NewExpression = base.CallExpression = function (node, st, c) {\n  c(node.callee, st, \"Expression\");\n  if (node.arguments) {\n    for (var i = 0, list = node.arguments; i < list.length; i += 1) {\n      var arg = list[i];\n      c(arg, st, \"Expression\");\n    }\n  }\n};\nbase.MemberExpression = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  if (node.computed) {\n    c(node.property, st, \"Expression\");\n  }\n};\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n  if (node.declaration) {\n    c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\");\n  }\n  if (node.source) {\n    c(node.source, st, \"Expression\");\n  }\n};\nbase.ExportAllDeclaration = function (node, st, c) {\n  if (node.exported) {\n    c(node.exported, st);\n  }\n  c(node.source, st, \"Expression\");\n};\nbase.ImportDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n    var spec = list[i];\n    c(spec, st);\n  }\n  c(node.source, st, \"Expression\");\n};\nbase.ImportExpression = function (node, st, c) {\n  c(node.source, st, \"Expression\");\n};\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;\nbase.TaggedTemplateExpression = function (node, st, c) {\n  c(node.tag, st, \"Expression\");\n  c(node.quasi, st, \"Expression\");\n};\nbase.ClassDeclaration = base.ClassExpression = function (node, st, c) {\n  return c(node, st, \"Class\");\n};\nbase.Class = function (node, st, c) {\n  if (node.id) {\n    c(node.id, st, \"Pattern\");\n  }\n  if (node.superClass) {\n    c(node.superClass, st, \"Expression\");\n  }\n  c(node.body, st);\n};\nbase.ClassBody = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1) {\n    var elt = list[i];\n    c(elt, st);\n  }\n};\nbase.MethodDefinition = base.Property = function (node, st, c) {\n  if (node.computed) {\n    c(node.key, st, \"Expression\");\n  }\n  c(node.value, st, \"Expression\");\n};\nexport { ancestor, base, findNodeAfter, findNodeAround, findNodeAt, findNodeBefore, full, fullAncestor, make, recursive, simple };","map":{"version":3,"names":["simple","node","visitors","baseVisitor","state","override","base","c","st","type","found","ancestor","ancestors","isNew","length","push","pop","recursive","funcs","visitor","make","undefined","makeTest","test","Found","full","callback","fullAncestor","findNodeAt","start","end","e","findNodeAround","pos","findNodeAfter","findNodeBefore","max","create","Object","proto","Ctor","prototype","skipThrough","ignore","_node","_st","_c","Program","BlockStatement","i","list","body","stmt","Statement","EmptyStatement","ExpressionStatement","ParenthesizedExpression","ChainExpression","expression","IfStatement","consequent","alternate","LabeledStatement","BreakStatement","ContinueStatement","WithStatement","object","SwitchStatement","discriminant","i$1","list$1","cases","cs","cons","SwitchCase","ReturnStatement","YieldExpression","AwaitExpression","argument","ThrowStatement","SpreadElement","TryStatement","block","handler","finalizer","CatchClause","param","WhileStatement","DoWhileStatement","ForStatement","init","update","ForInStatement","ForOfStatement","left","right","ForInit","DebuggerStatement","FunctionDeclaration","VariableDeclaration","declarations","decl","VariableDeclarator","id","Function","params","Pattern","VariablePattern","MemberPattern","RestElement","ArrayPattern","elements","elt","ObjectPattern","properties","prop","computed","key","value","Expression","ThisExpression","Super","MetaProperty","ArrayExpression","ObjectExpression","FunctionExpression","ArrowFunctionExpression","SequenceExpression","expressions","expr","TemplateLiteral","quasis","quasi","TemplateElement","UnaryExpression","UpdateExpression","BinaryExpression","LogicalExpression","AssignmentExpression","AssignmentPattern","ConditionalExpression","NewExpression","CallExpression","callee","arguments","arg","MemberExpression","property","ExportNamedDeclaration","ExportDefaultDeclaration","declaration","source","ExportAllDeclaration","exported","ImportDeclaration","specifiers","spec","ImportExpression","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","Identifier","Literal","TaggedTemplateExpression","tag","ClassDeclaration","ClassExpression","Class","superClass","ClassBody","MethodDefinition","Property"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/acorn-walk/dist/walk.mjs"],"sourcesContent":["// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression and\n// Statement, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nfunction simple(node, visitors, baseVisitor, state, override) {\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type, found = visitors[type];\n    baseVisitor[type](node, st, c);\n    if (found) { found(node, st); }\n  })(node, state, override);\n}\n\n// An ancestor walk keeps an array of ancestor nodes (including the\n// current node) and passes them to the callback as third parameter\n// (and also as state parameter when no other state is present).\nfunction ancestor(node, visitors, baseVisitor, state, override) {\n  var ancestors = [];\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type, found = visitors[type];\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) { ancestors.push(node); }\n    baseVisitor[type](node, st, c);\n    if (found) { found(node, st || ancestors, ancestors); }\n    if (isNew) { ancestors.pop(); }\n  })(node, state, override);\n}\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nfunction recursive(node, state, funcs, baseVisitor, override) {\n  var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor\n  ;(function c(node, st, override) {\n    visitor[override || node.type](node, st, c);\n  })(node, state, override);\n}\n\nfunction makeTest(test) {\n  if (typeof test === \"string\")\n    { return function (type) { return type === test; } }\n  else if (!test)\n    { return function () { return true; } }\n  else\n    { return test }\n}\n\nvar Found = function Found(node, state) { this.node = node; this.state = state; };\n\n// A full walk triggers the callback on each node\nfunction full(node, callback, baseVisitor, state, override) {\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type;\n    baseVisitor[type](node, st, c);\n    if (!override) { callback(node, st, type); }\n  })(node, state, override);\n}\n\n// An fullAncestor walk is like an ancestor walk, but triggers\n// the callback on each node\nfunction fullAncestor(node, callback, baseVisitor, state) {\n  if (!baseVisitor) { baseVisitor = base; }\n  var ancestors = []\n  ;(function c(node, st, override) {\n    var type = override || node.type;\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) { ancestors.push(node); }\n    baseVisitor[type](node, st, c);\n    if (!override) { callback(node, st || ancestors, ancestors, type); }\n    if (isNew) { ancestors.pop(); }\n  })(node, state);\n}\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nfunction findNodeAt(node, start, end, test, baseVisitor, state) {\n  if (!baseVisitor) { baseVisitor = base; }\n  test = makeTest(test);\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if ((start == null || node.start <= start) &&\n          (end == null || node.end >= end))\n        { baseVisitor[type](node, st, c); }\n      if ((start == null || node.start === start) &&\n          (end == null || node.end === end) &&\n          test(type, node))\n        { throw new Found(node, st) }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nfunction findNodeAround(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if (node.start > pos || node.end < pos) { return }\n      baseVisitor[type](node, st, c);\n      if (test(type, node)) { throw new Found(node, st) }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the outermost matching node after a given position.\nfunction findNodeAfter(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  try {\n    (function c(node, st, override) {\n      if (node.end < pos) { return }\n      var type = override || node.type;\n      if (node.start >= pos && test(type, node)) { throw new Found(node, st) }\n      baseVisitor[type](node, st, c);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the outermost matching node before a given position.\nfunction findNodeBefore(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  var max\n  ;(function c(node, st, override) {\n    if (node.start > pos) { return }\n    var type = override || node.type;\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\n      { max = new Found(node, st); }\n    baseVisitor[type](node, st, c);\n  })(node, state);\n  return max\n}\n\n// Fallback to an Object.create polyfill for older environments.\nvar create = Object.create || function(proto) {\n  function Ctor() {}\n  Ctor.prototype = proto;\n  return new Ctor\n};\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nfunction make(funcs, baseVisitor) {\n  var visitor = create(baseVisitor || base);\n  for (var type in funcs) { visitor[type] = funcs[type]; }\n  return visitor\n}\n\nfunction skipThrough(node, st, c) { c(node, st); }\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nvar base = {};\n\nbase.Program = base.BlockStatement = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1)\n    {\n    var stmt = list[i];\n\n    c(stmt, st, \"Statement\");\n  }\n};\nbase.Statement = skipThrough;\nbase.EmptyStatement = ignore;\nbase.ExpressionStatement = base.ParenthesizedExpression = base.ChainExpression =\n  function (node, st, c) { return c(node.expression, st, \"Expression\"); };\nbase.IfStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Statement\");\n  if (node.alternate) { c(node.alternate, st, \"Statement\"); }\n};\nbase.LabeledStatement = function (node, st, c) { return c(node.body, st, \"Statement\"); };\nbase.BreakStatement = base.ContinueStatement = ignore;\nbase.WithStatement = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.SwitchStatement = function (node, st, c) {\n  c(node.discriminant, st, \"Expression\");\n  for (var i$1 = 0, list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {\n    var cs = list$1[i$1];\n\n    if (cs.test) { c(cs.test, st, \"Expression\"); }\n    for (var i = 0, list = cs.consequent; i < list.length; i += 1)\n      {\n      var cons = list[i];\n\n      c(cons, st, \"Statement\");\n    }\n  }\n};\nbase.SwitchCase = function (node, st, c) {\n  if (node.test) { c(node.test, st, \"Expression\"); }\n  for (var i = 0, list = node.consequent; i < list.length; i += 1)\n    {\n    var cons = list[i];\n\n    c(cons, st, \"Statement\");\n  }\n};\nbase.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {\n  if (node.argument) { c(node.argument, st, \"Expression\"); }\n};\nbase.ThrowStatement = base.SpreadElement =\n  function (node, st, c) { return c(node.argument, st, \"Expression\"); };\nbase.TryStatement = function (node, st, c) {\n  c(node.block, st, \"Statement\");\n  if (node.handler) { c(node.handler, st); }\n  if (node.finalizer) { c(node.finalizer, st, \"Statement\"); }\n};\nbase.CatchClause = function (node, st, c) {\n  if (node.param) { c(node.param, st, \"Pattern\"); }\n  c(node.body, st, \"Statement\");\n};\nbase.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForStatement = function (node, st, c) {\n  if (node.init) { c(node.init, st, \"ForInit\"); }\n  if (node.test) { c(node.test, st, \"Expression\"); }\n  if (node.update) { c(node.update, st, \"Expression\"); }\n  c(node.body, st, \"Statement\");\n};\nbase.ForInStatement = base.ForOfStatement = function (node, st, c) {\n  c(node.left, st, \"ForInit\");\n  c(node.right, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForInit = function (node, st, c) {\n  if (node.type === \"VariableDeclaration\") { c(node, st); }\n  else { c(node, st, \"Expression\"); }\n};\nbase.DebuggerStatement = ignore;\n\nbase.FunctionDeclaration = function (node, st, c) { return c(node, st, \"Function\"); };\nbase.VariableDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.declarations; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    c(decl, st);\n  }\n};\nbase.VariableDeclarator = function (node, st, c) {\n  c(node.id, st, \"Pattern\");\n  if (node.init) { c(node.init, st, \"Expression\"); }\n};\n\nbase.Function = function (node, st, c) {\n  if (node.id) { c(node.id, st, \"Pattern\"); }\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    c(param, st, \"Pattern\");\n  }\n  c(node.body, st, node.expression ? \"Expression\" : \"Statement\");\n};\n\nbase.Pattern = function (node, st, c) {\n  if (node.type === \"Identifier\")\n    { c(node, st, \"VariablePattern\"); }\n  else if (node.type === \"MemberExpression\")\n    { c(node, st, \"MemberPattern\"); }\n  else\n    { c(node, st); }\n};\nbase.VariablePattern = ignore;\nbase.MemberPattern = skipThrough;\nbase.RestElement = function (node, st, c) { return c(node.argument, st, \"Pattern\"); };\nbase.ArrayPattern = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt, st, \"Pattern\"); }\n  }\n};\nbase.ObjectPattern = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1) {\n    var prop = list[i];\n\n    if (prop.type === \"Property\") {\n      if (prop.computed) { c(prop.key, st, \"Expression\"); }\n      c(prop.value, st, \"Pattern\");\n    } else if (prop.type === \"RestElement\") {\n      c(prop.argument, st, \"Pattern\");\n    }\n  }\n};\n\nbase.Expression = skipThrough;\nbase.ThisExpression = base.Super = base.MetaProperty = ignore;\nbase.ArrayExpression = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt, st, \"Expression\"); }\n  }\n};\nbase.ObjectExpression = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1)\n    {\n    var prop = list[i];\n\n    c(prop, st);\n  }\n};\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\nbase.SequenceExpression = function (node, st, c) {\n  for (var i = 0, list = node.expressions; i < list.length; i += 1)\n    {\n    var expr = list[i];\n\n    c(expr, st, \"Expression\");\n  }\n};\nbase.TemplateLiteral = function (node, st, c) {\n  for (var i = 0, list = node.quasis; i < list.length; i += 1)\n    {\n    var quasi = list[i];\n\n    c(quasi, st);\n  }\n\n  for (var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1)\n    {\n    var expr = list$1[i$1];\n\n    c(expr, st, \"Expression\");\n  }\n};\nbase.TemplateElement = ignore;\nbase.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n  c(node.argument, st, \"Expression\");\n};\nbase.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n  c(node.left, st, \"Expression\");\n  c(node.right, st, \"Expression\");\n};\nbase.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n  c(node.left, st, \"Pattern\");\n  c(node.right, st, \"Expression\");\n};\nbase.ConditionalExpression = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Expression\");\n  c(node.alternate, st, \"Expression\");\n};\nbase.NewExpression = base.CallExpression = function (node, st, c) {\n  c(node.callee, st, \"Expression\");\n  if (node.arguments)\n    { for (var i = 0, list = node.arguments; i < list.length; i += 1)\n      {\n        var arg = list[i];\n\n        c(arg, st, \"Expression\");\n      } }\n};\nbase.MemberExpression = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  if (node.computed) { c(node.property, st, \"Expression\"); }\n};\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n  if (node.declaration)\n    { c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\"); }\n  if (node.source) { c(node.source, st, \"Expression\"); }\n};\nbase.ExportAllDeclaration = function (node, st, c) {\n  if (node.exported)\n    { c(node.exported, st); }\n  c(node.source, st, \"Expression\");\n};\nbase.ImportDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.specifiers; i < list.length; i += 1)\n    {\n    var spec = list[i];\n\n    c(spec, st);\n  }\n  c(node.source, st, \"Expression\");\n};\nbase.ImportExpression = function (node, st, c) {\n  c(node.source, st, \"Expression\");\n};\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;\n\nbase.TaggedTemplateExpression = function (node, st, c) {\n  c(node.tag, st, \"Expression\");\n  c(node.quasi, st, \"Expression\");\n};\nbase.ClassDeclaration = base.ClassExpression = function (node, st, c) { return c(node, st, \"Class\"); };\nbase.Class = function (node, st, c) {\n  if (node.id) { c(node.id, st, \"Pattern\"); }\n  if (node.superClass) { c(node.superClass, st, \"Expression\"); }\n  c(node.body, st);\n};\nbase.ClassBody = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1)\n    {\n    var elt = list[i];\n\n    c(elt, st);\n  }\n};\nbase.MethodDefinition = base.Property = function (node, st, c) {\n  if (node.computed) { c(node.key, st, \"Expression\"); }\n  c(node.value, st, \"Expression\");\n};\n\nexport { ancestor, base, findNodeAfter, findNodeAround, findNodeAt, findNodeBefore, full, fullAncestor, make, recursive, simple };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}