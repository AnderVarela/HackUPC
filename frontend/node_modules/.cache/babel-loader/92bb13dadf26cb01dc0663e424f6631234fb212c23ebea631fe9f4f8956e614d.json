{"ast":null,"code":"/**\n * @typedef {Object} WebpackErrorObj\n * @property {string} moduleIdentifier\n * @property {string} moduleName\n * @property {string} message\n */\n\nconst friendlySyntaxErrorLabel = 'Syntax error:';\n\n/**\n * Checks if the error message is for a syntax error.\n * @param {string} message The raw Webpack error message.\n * @returns {boolean} Whether the error message is for a syntax error.\n */\nfunction isLikelyASyntaxError(message) {\n  return message.indexOf(friendlySyntaxErrorLabel) !== -1;\n}\n\n/**\n * Cleans up Webpack error messages.\n *\n * This implementation is based on the one from [create-react-app](https://github.com/facebook/create-react-app/blob/edc671eeea6b7d26ac3f1eb2050e50f75cf9ad5d/packages/react-dev-utils/formatWebpackMessages.js).\n * @param {string} message The raw Webpack error message.\n * @returns {string} The formatted Webpack error message.\n */\nfunction formatMessage(message) {\n  let lines = message.split('\\n');\n\n  // Strip Webpack-added headers off errors/warnings\n  // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js\n  lines = lines.filter(function (line) {\n    return !/Module [A-z ]+\\(from/.test(line);\n  });\n\n  // Remove leading newline\n  if (lines.length > 2 && lines[1].trim() === '') {\n    lines.splice(1, 1);\n  }\n\n  // Remove duplicated newlines\n  lines = lines.filter(function (line, index, arr) {\n    return index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim();\n  });\n\n  // Clean up the file name\n  lines[0] = lines[0].replace(/^(.*) \\d+:\\d+-\\d+$/, '$1');\n\n  // Cleans up verbose \"module not found\" messages for files and packages.\n  if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {\n    lines = [lines[0], lines[1].replace('Error: ', '').replace('Module not found: Cannot find file:', 'Cannot find file:')];\n  }\n  message = lines.join('\\n');\n\n  // Clean up syntax errors\n  message = message.replace('SyntaxError:', friendlySyntaxErrorLabel);\n\n  // Internal stacks are generally useless, so we strip them -\n  // except the stacks containing `webpack:`,\n  // because they're normally from user code generated by webpack.\n  message = message.replace(/^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)/gm, ''); // at ... ...:x:y\n  message = message.replace(/^\\s*at\\s((?!webpack:).)*<anonymous>[\\s)]*(\\n|$)/gm, ''); // at ... <anonymous>\n  message = message.replace(/^\\s*at\\s<anonymous>(\\n|$)/gm, ''); // at <anonymous>\n\n  return message.trim();\n}\n\n/**\n * Formats Webpack error messages into a more readable format.\n * @param {Array<string | WebpackErrorObj>} errors An array of Webpack error messages.\n * @returns {string[]} The formatted Webpack error messages.\n */\nfunction formatWebpackErrors(errors) {\n  let formattedErrors = errors.map(function (errorObjOrMessage) {\n    // Webpack 5 compilation errors are in the form of descriptor objects,\n    // so we have to join pieces to get the format we want.\n    if (typeof errorObjOrMessage === 'object') {\n      return formatMessage([errorObjOrMessage.moduleName, errorObjOrMessage.message].join('\\n'));\n    }\n    // Webpack 4 compilation errors are strings\n    return formatMessage(errorObjOrMessage);\n  });\n  if (formattedErrors.some(isLikelyASyntaxError)) {\n    // If there are any syntax errors, show just them.\n    formattedErrors = formattedErrors.filter(isLikelyASyntaxError);\n  }\n  return formattedErrors;\n}\nmodule.exports = formatWebpackErrors;","map":{"version":3,"names":["friendlySyntaxErrorLabel","isLikelyASyntaxError","message","indexOf","formatMessage","lines","split","filter","line","test","length","trim","splice","index","arr","replace","join","formatWebpackErrors","errors","formattedErrors","map","errorObjOrMessage","moduleName","some","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/formatWebpackErrors.js"],"sourcesContent":["/**\n * @typedef {Object} WebpackErrorObj\n * @property {string} moduleIdentifier\n * @property {string} moduleName\n * @property {string} message\n */\n\nconst friendlySyntaxErrorLabel = 'Syntax error:';\n\n/**\n * Checks if the error message is for a syntax error.\n * @param {string} message The raw Webpack error message.\n * @returns {boolean} Whether the error message is for a syntax error.\n */\nfunction isLikelyASyntaxError(message) {\n  return message.indexOf(friendlySyntaxErrorLabel) !== -1;\n}\n\n/**\n * Cleans up Webpack error messages.\n *\n * This implementation is based on the one from [create-react-app](https://github.com/facebook/create-react-app/blob/edc671eeea6b7d26ac3f1eb2050e50f75cf9ad5d/packages/react-dev-utils/formatWebpackMessages.js).\n * @param {string} message The raw Webpack error message.\n * @returns {string} The formatted Webpack error message.\n */\nfunction formatMessage(message) {\n  let lines = message.split('\\n');\n\n  // Strip Webpack-added headers off errors/warnings\n  // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js\n  lines = lines.filter(function (line) {\n    return !/Module [A-z ]+\\(from/.test(line);\n  });\n\n  // Remove leading newline\n  if (lines.length > 2 && lines[1].trim() === '') {\n    lines.splice(1, 1);\n  }\n\n  // Remove duplicated newlines\n  lines = lines.filter(function (line, index, arr) {\n    return index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim();\n  });\n\n  // Clean up the file name\n  lines[0] = lines[0].replace(/^(.*) \\d+:\\d+-\\d+$/, '$1');\n\n  // Cleans up verbose \"module not found\" messages for files and packages.\n  if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {\n    lines = [\n      lines[0],\n      lines[1]\n        .replace('Error: ', '')\n        .replace('Module not found: Cannot find file:', 'Cannot find file:'),\n    ];\n  }\n\n  message = lines.join('\\n');\n\n  // Clean up syntax errors\n  message = message.replace('SyntaxError:', friendlySyntaxErrorLabel);\n\n  // Internal stacks are generally useless, so we strip them -\n  // except the stacks containing `webpack:`,\n  // because they're normally from user code generated by webpack.\n  message = message.replace(/^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)/gm, ''); // at ... ...:x:y\n  message = message.replace(/^\\s*at\\s((?!webpack:).)*<anonymous>[\\s)]*(\\n|$)/gm, ''); // at ... <anonymous>\n  message = message.replace(/^\\s*at\\s<anonymous>(\\n|$)/gm, ''); // at <anonymous>\n\n  return message.trim();\n}\n\n/**\n * Formats Webpack error messages into a more readable format.\n * @param {Array<string | WebpackErrorObj>} errors An array of Webpack error messages.\n * @returns {string[]} The formatted Webpack error messages.\n */\nfunction formatWebpackErrors(errors) {\n  let formattedErrors = errors.map(function (errorObjOrMessage) {\n    // Webpack 5 compilation errors are in the form of descriptor objects,\n    // so we have to join pieces to get the format we want.\n    if (typeof errorObjOrMessage === 'object') {\n      return formatMessage([errorObjOrMessage.moduleName, errorObjOrMessage.message].join('\\n'));\n    }\n    // Webpack 4 compilation errors are strings\n    return formatMessage(errorObjOrMessage);\n  });\n\n  if (formattedErrors.some(isLikelyASyntaxError)) {\n    // If there are any syntax errors, show just them.\n    formattedErrors = formattedErrors.filter(isLikelyASyntaxError);\n  }\n  return formattedErrors;\n}\n\nmodule.exports = formatWebpackErrors;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}