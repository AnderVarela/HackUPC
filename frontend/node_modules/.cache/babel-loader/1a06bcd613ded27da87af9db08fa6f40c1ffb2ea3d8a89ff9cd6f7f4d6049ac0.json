{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensurePathToGeneratedPatch = exports.getPathToLinterJS = exports.findAndConsoleLogPatchPathCli = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst os_1 = __importDefault(require(\"os\"));\nconst _patch_base_1 = require(\"../_patch-base\");\nconst constants_1 = require(\"./constants\");\nconst package_json_1 = __importDefault(require(\"../../package.json\"));\nconst CURRENT_PACKAGE_VERSION = package_json_1.default.version;\nfunction findAndConsoleLogPatchPathCli() {\n  const eslintBulkDetectEnvVarValue = process.env[constants_1.ESLINT_BULK_DETECT_ENV_VAR_NAME];\n  if (eslintBulkDetectEnvVarValue !== 'true' && eslintBulkDetectEnvVarValue !== '1') {\n    return;\n  }\n  const startDelimiter = 'RUSHSTACK_ESLINT_BULK_START';\n  const endDelimiter = 'RUSHSTACK_ESLINT_BULK_END';\n  const configuration = {\n    /**\n     * `@rushstack/eslint-bulk` should report an error if its package.json is older than this number\n     */\n    minCliVersion: '0.0.0',\n    /**\n     * `@rushstack/eslint-bulk` will invoke this entry point\n     */\n    cliEntryPoint: require.resolve('../exports/eslint-bulk')\n  };\n  console.log(startDelimiter + JSON.stringify(configuration) + endDelimiter);\n}\nexports.findAndConsoleLogPatchPathCli = findAndConsoleLogPatchPathCli;\nfunction getPathToLinterJS() {\n  if (!_patch_base_1.eslintFolder) {\n    throw new Error('Cannot find ESLint installation to patch.');\n  }\n  return `${_patch_base_1.eslintFolder}/lib/linter/linter.js`;\n}\nexports.getPathToLinterJS = getPathToLinterJS;\nfunction ensurePathToGeneratedPatch() {\n  const patchesFolderPath = `${os_1.default.tmpdir()}/rushstack-eslint-bulk-${CURRENT_PACKAGE_VERSION}/patches`;\n  fs_1.default.mkdirSync(patchesFolderPath, {\n    recursive: true\n  });\n  const pathToGeneratedPatch = `${patchesFolderPath}/linter-patch-v${_patch_base_1.eslintPackageVersion}.js`;\n  return pathToGeneratedPatch;\n}\nexports.ensurePathToGeneratedPatch = ensurePathToGeneratedPatch;","map":{"version":3,"names":["fs_1","__importDefault","require","os_1","_patch_base_1","constants_1","package_json_1","CURRENT_PACKAGE_VERSION","default","version","findAndConsoleLogPatchPathCli","eslintBulkDetectEnvVarValue","process","env","ESLINT_BULK_DETECT_ENV_VAR_NAME","startDelimiter","endDelimiter","configuration","minCliVersion","cliEntryPoint","resolve","console","log","JSON","stringify","exports","getPathToLinterJS","eslintFolder","Error","ensurePathToGeneratedPatch","patchesFolderPath","tmpdir","mkdirSync","recursive","pathToGeneratedPatch","eslintPackageVersion"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@rushstack\\eslint-patch\\src\\eslint-bulk-suppressions\\path-utils.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport fs from 'fs';\nimport os from 'os';\nimport { eslintFolder, eslintPackageVersion } from '../_patch-base';\nimport { ESLINT_BULK_DETECT_ENV_VAR_NAME } from './constants';\nimport currentPackageJson from '../../package.json';\n\ninterface IConfiguration {\n  minCliVersion: string;\n  cliEntryPoint: string;\n}\n\nconst CURRENT_PACKAGE_VERSION: string = currentPackageJson.version;\n\nexport function findAndConsoleLogPatchPathCli(): void {\n  const eslintBulkDetectEnvVarValue: string | undefined = process.env[ESLINT_BULK_DETECT_ENV_VAR_NAME];\n  if (eslintBulkDetectEnvVarValue !== 'true' && eslintBulkDetectEnvVarValue !== '1') {\n    return;\n  }\n\n  const startDelimiter: string = 'RUSHSTACK_ESLINT_BULK_START';\n  const endDelimiter: string = 'RUSHSTACK_ESLINT_BULK_END';\n\n  const configuration: IConfiguration = {\n    /**\n     * `@rushstack/eslint-bulk` should report an error if its package.json is older than this number\n     */\n    minCliVersion: '0.0.0',\n    /**\n     * `@rushstack/eslint-bulk` will invoke this entry point\n     */\n    cliEntryPoint: require.resolve('../exports/eslint-bulk')\n  };\n\n  console.log(startDelimiter + JSON.stringify(configuration) + endDelimiter);\n}\n\nexport function getPathToLinterJS(): string {\n  if (!eslintFolder) {\n    throw new Error('Cannot find ESLint installation to patch.');\n  }\n\n  return `${eslintFolder}/lib/linter/linter.js`;\n}\n\nexport function ensurePathToGeneratedPatch(): string {\n  const patchesFolderPath: string = `${os.tmpdir()}/rushstack-eslint-bulk-${CURRENT_PACKAGE_VERSION}/patches`;\n  fs.mkdirSync(patchesFolderPath, { recursive: true });\n  const pathToGeneratedPatch: string = `${patchesFolderPath}/linter-patch-v${eslintPackageVersion}.js`;\n  return pathToGeneratedPatch;\n}\n"],"mappings":";;AAAA;AACA;;;;;;;;;;AAEA,MAAAA,IAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,IAAA,GAAAF,eAAA,CAAAC,OAAA;AACA,MAAAE,aAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AACA,MAAAI,cAAA,GAAAL,eAAA,CAAAC,OAAA;AAOA,MAAMK,uBAAuB,GAAWD,cAAA,CAAAE,OAAkB,CAACC,OAAO;AAElE,SAAgBC,6BAA6BA,CAAA;EAC3C,MAAMC,2BAA2B,GAAuBC,OAAO,CAACC,GAAG,CAACR,WAAA,CAAAS,+BAA+B,CAAC;EACpG,IAAIH,2BAA2B,KAAK,MAAM,IAAIA,2BAA2B,KAAK,GAAG,EAAE;IACjF;EACF;EAEA,MAAMI,cAAc,GAAW,6BAA6B;EAC5D,MAAMC,YAAY,GAAW,2BAA2B;EAExD,MAAMC,aAAa,GAAmB;IACpC;;;IAGAC,aAAa,EAAE,OAAO;IACtB;;;IAGAC,aAAa,EAAEjB,OAAO,CAACkB,OAAO,CAAC,wBAAwB;GACxD;EAEDC,OAAO,CAACC,GAAG,CAACP,cAAc,GAAGQ,IAAI,CAACC,SAAS,CAACP,aAAa,CAAC,GAAGD,YAAY,CAAC;AAC5E;AArBAS,OAAA,CAAAf,6BAAA,GAAAA,6BAAA;AAuBA,SAAgBgB,iBAAiBA,CAAA;EAC/B,IAAI,CAACtB,aAAA,CAAAuB,YAAY,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EAEA,OAAO,GAAGxB,aAAA,CAAAuB,YAAY,uBAAuB;AAC/C;AANAF,OAAA,CAAAC,iBAAA,GAAAA,iBAAA;AAQA,SAAgBG,0BAA0BA,CAAA;EACxC,MAAMC,iBAAiB,GAAW,GAAG3B,IAAA,CAAAK,OAAE,CAACuB,MAAM,EAAE,0BAA0BxB,uBAAuB,UAAU;EAC3GP,IAAA,CAAAQ,OAAE,CAACwB,SAAS,CAACF,iBAAiB,EAAE;IAAEG,SAAS,EAAE;EAAI,CAAE,CAAC;EACpD,MAAMC,oBAAoB,GAAW,GAAGJ,iBAAiB,kBAAkB1B,aAAA,CAAA+B,oBAAoB,KAAK;EACpG,OAAOD,oBAAoB;AAC7B;AALAT,OAAA,CAAAI,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}