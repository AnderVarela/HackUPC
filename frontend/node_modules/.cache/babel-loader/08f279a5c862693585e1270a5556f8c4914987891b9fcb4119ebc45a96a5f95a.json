{"ast":null,"code":"'use strict';\n\nconst constants = require('constants');\nconst fs = require('fs');\nconst path = require('path');\nconst Q = require('q');\nconst shell = require('./shell');\nconst escape = shell.escape;\nconst unescape = shell.unescape;\n\n/**\n * Most of the code adopted from the npm package shell completion code.\n * See https://github.com/isaacs/npm/blob/master/lib/completion.js\n *\n * @returns {COA.CoaObject}\n */\nmodule.exports = function completion() {\n  return this.title('Shell completion').helpful().arg().name('raw').title('Completion words').arr().end().act((opts, args) => {\n    if (process.platform === 'win32') {\n      const e = new Error('shell completion not supported on windows');\n      e.code = 'ENOTSUP';\n      e.errno = constants.ENOTSUP;\n      return this.reject(e);\n    }\n\n    // if the COMP_* isn't in the env, then just dump the script\n    if (process.env.COMP_CWORD == null || process.env.COMP_LINE == null || process.env.COMP_POINT == null) {\n      return dumpScript(this._cmd._name);\n    }\n    console.error('COMP_LINE:  %s', process.env.COMP_LINE);\n    console.error('COMP_CWORD: %s', process.env.COMP_CWORD);\n    console.error('COMP_POINT: %s', process.env.COMP_POINT);\n    console.error('args: %j', args.raw);\n\n    // completion opts\n    opts = getOpts(args.raw);\n\n    // cmd\n    const parsed = this._cmd._parseCmd(opts.partialWords);\n    return Q.when(complete(parsed.cmd, parsed.opts), compls => {\n      console.error('filtered: %j', compls);\n      return console.log(compls.map(escape).join('\\n'));\n    });\n  });\n};\nfunction dumpScript(name) {\n  const defer = Q.defer();\n  fs.readFile(path.resolve(__dirname, 'completion.sh'), 'utf8', function (err, d) {\n    if (err) return defer.reject(err);\n    d = d.replace(/{{cmd}}/g, path.basename(name)).replace(/^#!.*?\\n/, '');\n    process.stdout.on('error', onError);\n    process.stdout.write(d, () => defer.resolve());\n  });\n  return defer.promise;\n  function onError(err) {\n    // Darwin is a real dick sometimes.\n    //\n    // This is necessary because the \"source\" or \".\" program in\n    // bash on OS X closes its file argument before reading\n    // from it, meaning that you get exactly 1 write, which will\n    // work most of the time, and will always raise an EPIPE.\n    //\n    // Really, one should not be tossing away EPIPE errors, or any\n    // errors, so casually. But, without this, `. <(cmd completion)`\n    // can never ever work on OS X.\n    if (err.errno !== constants.EPIPE) return defer.reject(err);\n    process.stdout.removeListener('error', onError);\n    return defer.resolve();\n  }\n}\nfunction getOpts(argv) {\n  // get the partial line and partial word, if the point isn't at the end\n  // ie, tabbing at: cmd foo b|ar\n  const line = process.env.COMP_LINE;\n  const w = +process.env.COMP_CWORD;\n  const point = +process.env.COMP_POINT;\n  const words = argv.map(unescape);\n  const word = words[w];\n  const partialLine = line.substr(0, point);\n  const partialWords = words.slice(0, w);\n\n  // figure out where in that last word the point is\n  let partialWord = argv[w] || '';\n  let i = partialWord.length;\n  while (partialWord.substr(0, i) !== partialLine.substr(-1 * i) && i > 0) i--;\n  partialWord = unescape(partialWord.substr(0, i));\n  partialWord && partialWords.push(partialWord);\n  return {\n    line,\n    w,\n    point,\n    words,\n    word,\n    partialLine,\n    partialWords,\n    partialWord\n  };\n}\nfunction complete(cmd, opts) {\n  let optWord,\n    optPrefix,\n    compls = [];\n\n  // Complete on cmds\n  if (opts.partialWord.indexOf('-')) compls = Object.keys(cmd._cmdsByName);\n  // Complete on required opts without '-' in last partial word\n  // (if required not already specified)\n  //\n  // Commented out because of uselessness:\n  // -b, --block suggest results in '-' on cmd line;\n  // next completion suggest all options, because of '-'\n  //.concat Object.keys(cmd._optsByKey).filter (v) -> cmd._optsByKey[v]._req\n  else {\n    // complete on opt values: --opt=| case\n    const m = opts.partialWord.match(/^(--\\w[\\w-_]*)=(.*)$/);\n    if (m) {\n      optWord = m[1];\n      optPrefix = optWord + '=';\n    } else\n      // complete on opts\n      // don't complete on opts in case of --opt=val completion\n      // TODO: don't complete on opts in case of unknown arg after commands\n      // TODO: complete only on opts with arr() or not already used\n      // TODO: complete only on full opts?\n      compls = Object.keys(cmd._optsByKey);\n  }\n\n  // complete on opt values: next arg case\n  opts.partialWords[opts.w - 1].indexOf('-') || (optWord = opts.partialWords[opts.w - 1]);\n\n  // complete on opt values: completion\n  let opt;\n  optWord && (opt = cmd._optsByKey[optWord]) && !opt._flag && opt._comp && (compls = Q.join(compls, Q.when(opt._comp(opts), (c, o) => c.concat(o.map(v => (optPrefix || '') + v)))));\n\n  // TODO: complete on args values (context aware, custom completion?)\n\n  // custom completion on cmds\n  cmd._comp && (compls = Q.join(compls, Q.when(cmd._comp(opts)), (c, o) => c.concat(o)));\n\n  // TODO: context aware custom completion on cmds, opts and args\n  // (can depend on already entered values, especially options)\n\n  return Q.when(compls, complitions => {\n    console.error('partialWord: %s', opts.partialWord);\n    console.error('compls: %j', complitions);\n    return compls.filter(c => c.indexOf(opts.partialWord) === 0);\n  });\n}","map":{"version":3,"names":["constants","require","fs","path","Q","shell","escape","unescape","module","exports","completion","title","helpful","arg","name","arr","end","act","opts","args","process","platform","e","Error","code","errno","ENOTSUP","reject","env","COMP_CWORD","COMP_LINE","COMP_POINT","dumpScript","_cmd","_name","console","error","raw","getOpts","parsed","_parseCmd","partialWords","when","complete","cmd","compls","log","map","join","defer","readFile","resolve","__dirname","err","d","replace","basename","stdout","on","onError","write","promise","EPIPE","removeListener","argv","line","w","point","words","word","partialLine","substr","slice","partialWord","i","length","push","optWord","optPrefix","indexOf","Object","keys","_cmdsByName","m","match","_optsByKey","opt","_flag","_comp","c","o","concat","v","complitions","filter"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/coa/lib/completion.js"],"sourcesContent":["'use strict';\n\nconst constants = require('constants');\nconst fs = require('fs');\nconst path = require('path');\n\nconst Q = require('q');\n\nconst shell = require('./shell');\nconst escape = shell.escape;\nconst unescape = shell.unescape;\n\n/**\n * Most of the code adopted from the npm package shell completion code.\n * See https://github.com/isaacs/npm/blob/master/lib/completion.js\n *\n * @returns {COA.CoaObject}\n */\nmodule.exports = function completion() {\n    return this\n        .title('Shell completion')\n        .helpful()\n        .arg()\n            .name('raw')\n            .title('Completion words')\n            .arr()\n            .end()\n        .act((opts, args) => {\n            if(process.platform === 'win32') {\n                const e = new Error('shell completion not supported on windows');\n                e.code = 'ENOTSUP';\n                e.errno = constants.ENOTSUP;\n                return this.reject(e);\n            }\n\n            // if the COMP_* isn't in the env, then just dump the script\n            if((process.env.COMP_CWORD == null)\n                || (process.env.COMP_LINE == null)\n                || (process.env.COMP_POINT == null)) {\n                return dumpScript(this._cmd._name);\n            }\n\n            console.error('COMP_LINE:  %s', process.env.COMP_LINE);\n            console.error('COMP_CWORD: %s', process.env.COMP_CWORD);\n            console.error('COMP_POINT: %s', process.env.COMP_POINT);\n            console.error('args: %j', args.raw);\n\n            // completion opts\n            opts = getOpts(args.raw);\n\n            // cmd\n            const parsed = this._cmd._parseCmd(opts.partialWords);\n            return Q.when(complete(parsed.cmd, parsed.opts), compls => {\n                console.error('filtered: %j', compls);\n                return console.log(compls.map(escape).join('\\n'));\n            });\n        });\n};\n\nfunction dumpScript(name) {\n    const defer = Q.defer();\n\n    fs.readFile(path.resolve(__dirname, 'completion.sh'), 'utf8', function(err, d) {\n        if(err) return defer.reject(err);\n        d = d.replace(/{{cmd}}/g, path.basename(name)).replace(/^#!.*?\\n/, '');\n\n        process.stdout.on('error', onError);\n        process.stdout.write(d, () => defer.resolve());\n    });\n\n    return defer.promise;\n\n    function onError(err) {\n        // Darwin is a real dick sometimes.\n        //\n        // This is necessary because the \"source\" or \".\" program in\n        // bash on OS X closes its file argument before reading\n        // from it, meaning that you get exactly 1 write, which will\n        // work most of the time, and will always raise an EPIPE.\n        //\n        // Really, one should not be tossing away EPIPE errors, or any\n        // errors, so casually. But, without this, `. <(cmd completion)`\n        // can never ever work on OS X.\n        if(err.errno !== constants.EPIPE) return defer.reject(err);\n        process.stdout.removeListener('error', onError);\n        return defer.resolve();\n    }\n}\n\nfunction getOpts(argv) {\n    // get the partial line and partial word, if the point isn't at the end\n    // ie, tabbing at: cmd foo b|ar\n    const line = process.env.COMP_LINE;\n    const w = +process.env.COMP_CWORD;\n    const point = +process.env.COMP_POINT;\n    const words = argv.map(unescape);\n    const word = words[w];\n    const partialLine = line.substr(0, point);\n    const partialWords = words.slice(0, w);\n\n    // figure out where in that last word the point is\n    let partialWord = argv[w] || '';\n    let i = partialWord.length;\n    while(partialWord.substr(0, i) !== partialLine.substr(-1 * i) && i > 0) i--;\n\n    partialWord = unescape(partialWord.substr(0, i));\n    partialWord && partialWords.push(partialWord);\n\n    return {\n        line,\n        w,\n        point,\n        words,\n        word,\n        partialLine,\n        partialWords,\n        partialWord\n    };\n}\n\nfunction complete(cmd, opts) {\n    let optWord, optPrefix,\n        compls = [];\n\n    // Complete on cmds\n    if(opts.partialWord.indexOf('-'))\n        compls = Object.keys(cmd._cmdsByName);\n        // Complete on required opts without '-' in last partial word\n        // (if required not already specified)\n        //\n        // Commented out because of uselessness:\n        // -b, --block suggest results in '-' on cmd line;\n        // next completion suggest all options, because of '-'\n        //.concat Object.keys(cmd._optsByKey).filter (v) -> cmd._optsByKey[v]._req\n    else {\n        // complete on opt values: --opt=| case\n        const m = opts.partialWord.match(/^(--\\w[\\w-_]*)=(.*)$/);\n        if(m) {\n            optWord = m[1];\n            optPrefix = optWord + '=';\n        } else\n            // complete on opts\n            // don't complete on opts in case of --opt=val completion\n            // TODO: don't complete on opts in case of unknown arg after commands\n            // TODO: complete only on opts with arr() or not already used\n            // TODO: complete only on full opts?\n            compls = Object.keys(cmd._optsByKey);\n    }\n\n    // complete on opt values: next arg case\n    opts.partialWords[opts.w - 1].indexOf('-') || (optWord = opts.partialWords[opts.w - 1]);\n\n    // complete on opt values: completion\n    let opt;\n    optWord\n        && (opt = cmd._optsByKey[optWord])\n        && !opt._flag\n        && opt._comp\n        && (compls = Q.join(compls,\n            Q.when(opt._comp(opts),\n                (c, o) => c.concat(o.map(v => (optPrefix || '') + v)))));\n\n    // TODO: complete on args values (context aware, custom completion?)\n\n    // custom completion on cmds\n    cmd._comp && (compls = Q.join(compls, Q.when(cmd._comp(opts)), (c, o) => c.concat(o)));\n\n    // TODO: context aware custom completion on cmds, opts and args\n    // (can depend on already entered values, especially options)\n\n    return Q.when(compls, complitions => {\n        console.error('partialWord: %s', opts.partialWord);\n        console.error('compls: %j', complitions);\n        return compls.filter(c => c.indexOf(opts.partialWord) === 0);\n    });\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,CAAC,GAAGH,OAAO,CAAC,GAAG,CAAC;AAEtB,MAAMI,KAAK,GAAGJ,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMK,MAAM,GAAGD,KAAK,CAACC,MAAM;AAC3B,MAAMC,QAAQ,GAAGF,KAAK,CAACE,QAAQ;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,UAAUA,CAAA,EAAG;EACnC,OAAO,IAAI,CACNC,KAAK,CAAC,kBAAkB,CAAC,CACzBC,OAAO,CAAC,CAAC,CACTC,GAAG,CAAC,CAAC,CACDC,IAAI,CAAC,KAAK,CAAC,CACXH,KAAK,CAAC,kBAAkB,CAAC,CACzBI,GAAG,CAAC,CAAC,CACLC,GAAG,CAAC,CAAC,CACTC,GAAG,CAAC,CAACC,IAAI,EAAEC,IAAI,KAAK;IACjB,IAAGC,OAAO,CAACC,QAAQ,KAAK,OAAO,EAAE;MAC7B,MAAMC,CAAC,GAAG,IAAIC,KAAK,CAAC,2CAA2C,CAAC;MAChED,CAAC,CAACE,IAAI,GAAG,SAAS;MAClBF,CAAC,CAACG,KAAK,GAAGzB,SAAS,CAAC0B,OAAO;MAC3B,OAAO,IAAI,CAACC,MAAM,CAACL,CAAC,CAAC;IACzB;;IAEA;IACA,IAAIF,OAAO,CAACQ,GAAG,CAACC,UAAU,IAAI,IAAI,IAC1BT,OAAO,CAACQ,GAAG,CAACE,SAAS,IAAI,IAAK,IAC9BV,OAAO,CAACQ,GAAG,CAACG,UAAU,IAAI,IAAK,EAAE;MACrC,OAAOC,UAAU,CAAC,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC;IACtC;IAEAC,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEhB,OAAO,CAACQ,GAAG,CAACE,SAAS,CAAC;IACtDK,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEhB,OAAO,CAACQ,GAAG,CAACC,UAAU,CAAC;IACvDM,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEhB,OAAO,CAACQ,GAAG,CAACG,UAAU,CAAC;IACvDI,OAAO,CAACC,KAAK,CAAC,UAAU,EAAEjB,IAAI,CAACkB,GAAG,CAAC;;IAEnC;IACAnB,IAAI,GAAGoB,OAAO,CAACnB,IAAI,CAACkB,GAAG,CAAC;;IAExB;IACA,MAAME,MAAM,GAAG,IAAI,CAACN,IAAI,CAACO,SAAS,CAACtB,IAAI,CAACuB,YAAY,CAAC;IACrD,OAAOrC,CAAC,CAACsC,IAAI,CAACC,QAAQ,CAACJ,MAAM,CAACK,GAAG,EAAEL,MAAM,CAACrB,IAAI,CAAC,EAAE2B,MAAM,IAAI;MACvDV,OAAO,CAACC,KAAK,CAAC,cAAc,EAAES,MAAM,CAAC;MACrC,OAAOV,OAAO,CAACW,GAAG,CAACD,MAAM,CAACE,GAAG,CAACzC,MAAM,CAAC,CAAC0C,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC;EACN,CAAC,CAAC;AACV,CAAC;AAED,SAAShB,UAAUA,CAAClB,IAAI,EAAE;EACtB,MAAMmC,KAAK,GAAG7C,CAAC,CAAC6C,KAAK,CAAC,CAAC;EAEvB/C,EAAE,CAACgD,QAAQ,CAAC/C,IAAI,CAACgD,OAAO,CAACC,SAAS,EAAE,eAAe,CAAC,EAAE,MAAM,EAAE,UAASC,GAAG,EAAEC,CAAC,EAAE;IAC3E,IAAGD,GAAG,EAAE,OAAOJ,KAAK,CAACtB,MAAM,CAAC0B,GAAG,CAAC;IAChCC,CAAC,GAAGA,CAAC,CAACC,OAAO,CAAC,UAAU,EAAEpD,IAAI,CAACqD,QAAQ,CAAC1C,IAAI,CAAC,CAAC,CAACyC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;IAEtEnC,OAAO,CAACqC,MAAM,CAACC,EAAE,CAAC,OAAO,EAAEC,OAAO,CAAC;IACnCvC,OAAO,CAACqC,MAAM,CAACG,KAAK,CAACN,CAAC,EAAE,MAAML,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC;EAClD,CAAC,CAAC;EAEF,OAAOF,KAAK,CAACY,OAAO;EAEpB,SAASF,OAAOA,CAACN,GAAG,EAAE;IAClB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAGA,GAAG,CAAC5B,KAAK,KAAKzB,SAAS,CAAC8D,KAAK,EAAE,OAAOb,KAAK,CAACtB,MAAM,CAAC0B,GAAG,CAAC;IAC1DjC,OAAO,CAACqC,MAAM,CAACM,cAAc,CAAC,OAAO,EAAEJ,OAAO,CAAC;IAC/C,OAAOV,KAAK,CAACE,OAAO,CAAC,CAAC;EAC1B;AACJ;AAEA,SAASb,OAAOA,CAAC0B,IAAI,EAAE;EACnB;EACA;EACA,MAAMC,IAAI,GAAG7C,OAAO,CAACQ,GAAG,CAACE,SAAS;EAClC,MAAMoC,CAAC,GAAG,CAAC9C,OAAO,CAACQ,GAAG,CAACC,UAAU;EACjC,MAAMsC,KAAK,GAAG,CAAC/C,OAAO,CAACQ,GAAG,CAACG,UAAU;EACrC,MAAMqC,KAAK,GAAGJ,IAAI,CAACjB,GAAG,CAACxC,QAAQ,CAAC;EAChC,MAAM8D,IAAI,GAAGD,KAAK,CAACF,CAAC,CAAC;EACrB,MAAMI,WAAW,GAAGL,IAAI,CAACM,MAAM,CAAC,CAAC,EAAEJ,KAAK,CAAC;EACzC,MAAM1B,YAAY,GAAG2B,KAAK,CAACI,KAAK,CAAC,CAAC,EAAEN,CAAC,CAAC;;EAEtC;EACA,IAAIO,WAAW,GAAGT,IAAI,CAACE,CAAC,CAAC,IAAI,EAAE;EAC/B,IAAIQ,CAAC,GAAGD,WAAW,CAACE,MAAM;EAC1B,OAAMF,WAAW,CAACF,MAAM,CAAC,CAAC,EAAEG,CAAC,CAAC,KAAKJ,WAAW,CAACC,MAAM,CAAC,CAAC,CAAC,GAAGG,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE;EAE3ED,WAAW,GAAGlE,QAAQ,CAACkE,WAAW,CAACF,MAAM,CAAC,CAAC,EAAEG,CAAC,CAAC,CAAC;EAChDD,WAAW,IAAIhC,YAAY,CAACmC,IAAI,CAACH,WAAW,CAAC;EAE7C,OAAO;IACHR,IAAI;IACJC,CAAC;IACDC,KAAK;IACLC,KAAK;IACLC,IAAI;IACJC,WAAW;IACX7B,YAAY;IACZgC;EACJ,CAAC;AACL;AAEA,SAAS9B,QAAQA,CAACC,GAAG,EAAE1B,IAAI,EAAE;EACzB,IAAI2D,OAAO;IAAEC,SAAS;IAClBjC,MAAM,GAAG,EAAE;;EAEf;EACA,IAAG3B,IAAI,CAACuD,WAAW,CAACM,OAAO,CAAC,GAAG,CAAC,EAC5BlC,MAAM,GAAGmC,MAAM,CAACC,IAAI,CAACrC,GAAG,CAACsC,WAAW,CAAC;EACrC;EACA;EACA;EACA;EACA;EACA;EACA;EAAA,KACC;IACD;IACA,MAAMC,CAAC,GAAGjE,IAAI,CAACuD,WAAW,CAACW,KAAK,CAAC,sBAAsB,CAAC;IACxD,IAAGD,CAAC,EAAE;MACFN,OAAO,GAAGM,CAAC,CAAC,CAAC,CAAC;MACdL,SAAS,GAAGD,OAAO,GAAG,GAAG;IAC7B,CAAC;MACG;MACA;MACA;MACA;MACA;MACAhC,MAAM,GAAGmC,MAAM,CAACC,IAAI,CAACrC,GAAG,CAACyC,UAAU,CAAC;EAC5C;;EAEA;EACAnE,IAAI,CAACuB,YAAY,CAACvB,IAAI,CAACgD,CAAC,GAAG,CAAC,CAAC,CAACa,OAAO,CAAC,GAAG,CAAC,KAAKF,OAAO,GAAG3D,IAAI,CAACuB,YAAY,CAACvB,IAAI,CAACgD,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEvF;EACA,IAAIoB,GAAG;EACPT,OAAO,KACCS,GAAG,GAAG1C,GAAG,CAACyC,UAAU,CAACR,OAAO,CAAC,CAAC,IAC/B,CAACS,GAAG,CAACC,KAAK,IACVD,GAAG,CAACE,KAAK,KACR3C,MAAM,GAAGzC,CAAC,CAAC4C,IAAI,CAACH,MAAM,EACtBzC,CAAC,CAACsC,IAAI,CAAC4C,GAAG,CAACE,KAAK,CAACtE,IAAI,CAAC,EAClB,CAACuE,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC3C,GAAG,CAAC6C,CAAC,IAAI,CAACd,SAAS,IAAI,EAAE,IAAIc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEpE;;EAEA;EACAhD,GAAG,CAAC4C,KAAK,KAAK3C,MAAM,GAAGzC,CAAC,CAAC4C,IAAI,CAACH,MAAM,EAAEzC,CAAC,CAACsC,IAAI,CAACE,GAAG,CAAC4C,KAAK,CAACtE,IAAI,CAAC,CAAC,EAAE,CAACuE,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAAC,CAAC;;EAEtF;EACA;;EAEA,OAAOtF,CAAC,CAACsC,IAAI,CAACG,MAAM,EAAEgD,WAAW,IAAI;IACjC1D,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAElB,IAAI,CAACuD,WAAW,CAAC;IAClDtC,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEyD,WAAW,CAAC;IACxC,OAAOhD,MAAM,CAACiD,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACV,OAAO,CAAC7D,IAAI,CAACuD,WAAW,CAAC,KAAK,CAAC,CAAC;EAChE,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}