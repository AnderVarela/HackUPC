{"ast":null,"code":"\"use strict\";\n\n/**\n * btoa() as defined by the HTML and Infra specs, which mostly just references\n * RFC 4648.\n */\nfunction btoa(s) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n  let i;\n  // String conversion as required by Web IDL.\n  s = `${s}`;\n  // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n  // data contains any character whose code point is greater than U+00FF.\"\n  for (i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 255) {\n      return null;\n    }\n  }\n  let out = \"\";\n  for (i = 0; i < s.length; i += 3) {\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = s.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n    if (s.length > i + 1) {\n      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (s.length > i + 2) {\n      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += btoaLookup(groupsOfSix[j]);\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Lookup table for btoa(), which converts a six-bit number into the\n * corresponding ASCII character.\n */\nconst keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction btoaLookup(index) {\n  if (index >= 0 && index < 64) {\n    return keystr[index];\n  }\n\n  // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n  return undefined;\n}\nmodule.exports = btoa;","map":{"version":3,"names":["btoa","s","arguments","length","TypeError","i","charCodeAt","out","groupsOfSix","undefined","j","btoaLookup","keystr","index","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/abab/lib/btoa.js"],"sourcesContent":["\"use strict\";\n\n/**\n * btoa() as defined by the HTML and Infra specs, which mostly just references\n * RFC 4648.\n */\nfunction btoa(s) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n\n  let i;\n  // String conversion as required by Web IDL.\n  s = `${s}`;\n  // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n  // data contains any character whose code point is greater than U+00FF.\"\n  for (i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 255) {\n      return null;\n    }\n  }\n  let out = \"\";\n  for (i = 0; i < s.length; i += 3) {\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = s.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n    if (s.length > i + 1) {\n      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (s.length > i + 2) {\n      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += btoaLookup(groupsOfSix[j]);\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Lookup table for btoa(), which converts a six-bit number into the\n * corresponding ASCII character.\n */\nconst keystr =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction btoaLookup(index) {\n  if (index >= 0 && index < 64) {\n    return keystr[index];\n  }\n\n  // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n  return undefined;\n}\n\nmodule.exports = btoa;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA,SAASA,IAAIA,CAACC,CAAC,EAAE;EACf,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIC,SAAS,CAAC,0CAA0C,CAAC;EACjE;EAEA,IAAIC,CAAC;EACL;EACAJ,CAAC,GAAI,GAAEA,CAAE,EAAC;EACV;EACA;EACA,KAAKI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,CAACE,MAAM,EAAEE,CAAC,EAAE,EAAE;IAC7B,IAAIJ,CAAC,CAACK,UAAU,CAACD,CAAC,CAAC,GAAG,GAAG,EAAE;MACzB,OAAO,IAAI;IACb;EACF;EACA,IAAIE,GAAG,GAAG,EAAE;EACZ,KAAKF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,CAACE,MAAM,EAAEE,CAAC,IAAI,CAAC,EAAE;IAChC,MAAMG,WAAW,GAAG,CAACC,SAAS,EAAEA,SAAS,EAAEA,SAAS,EAAEA,SAAS,CAAC;IAChED,WAAW,CAAC,CAAC,CAAC,GAAGP,CAAC,CAACK,UAAU,CAACD,CAAC,CAAC,IAAI,CAAC;IACrCG,WAAW,CAAC,CAAC,CAAC,GAAG,CAACP,CAAC,CAACK,UAAU,CAACD,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;IAC9C,IAAIJ,CAAC,CAACE,MAAM,GAAGE,CAAC,GAAG,CAAC,EAAE;MACpBG,WAAW,CAAC,CAAC,CAAC,IAAIP,CAAC,CAACK,UAAU,CAACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;MAC1CG,WAAW,CAAC,CAAC,CAAC,GAAG,CAACP,CAAC,CAACK,UAAU,CAACD,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;IACpD;IACA,IAAIJ,CAAC,CAACE,MAAM,GAAGE,CAAC,GAAG,CAAC,EAAE;MACpBG,WAAW,CAAC,CAAC,CAAC,IAAIP,CAAC,CAACK,UAAU,CAACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;MAC1CG,WAAW,CAAC,CAAC,CAAC,GAAGP,CAAC,CAACK,UAAU,CAACD,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI;IAC7C;IACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAACL,MAAM,EAAEO,CAAC,EAAE,EAAE;MAC3C,IAAI,OAAOF,WAAW,CAACE,CAAC,CAAC,KAAK,WAAW,EAAE;QACzCH,GAAG,IAAI,GAAG;MACZ,CAAC,MAAM;QACLA,GAAG,IAAII,UAAU,CAACH,WAAW,CAACE,CAAC,CAAC,CAAC;MACnC;IACF;EACF;EACA,OAAOH,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA,MAAMK,MAAM,GACV,kEAAkE;AAEpE,SAASD,UAAUA,CAACE,KAAK,EAAE;EACzB,IAAIA,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,EAAE,EAAE;IAC5B,OAAOD,MAAM,CAACC,KAAK,CAAC;EACtB;;EAEA;EACA,OAAOJ,SAAS;AAClB;AAEAK,MAAM,CAACC,OAAO,GAAGf,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}