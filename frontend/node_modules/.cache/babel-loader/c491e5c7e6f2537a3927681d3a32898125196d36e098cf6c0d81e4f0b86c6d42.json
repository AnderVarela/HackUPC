{"ast":null,"code":"import { traverse, shiftSection } from \"@webassemblyjs/ast\";\nimport { encodeU32 } from \"@webassemblyjs/wasm-gen/lib/encoder\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section;\n  // Once we hit our section every that is after needs to be shifted by the delta\n  var encounteredSection = false;\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n      if (encounteredSection === true) {\n        shiftSection(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\nexport function shrinkPaddedLEB128(ast, uint8Buffer) {\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n\n      /**\n       * Section size\n       */\n      {\n        var newu32Encoded = encodeU32(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}","map":{"version":3,"names":["traverse","shiftSection","encodeU32","overrideBytesInBuffer","shiftFollowingSections","ast","_ref","deltaInSizeEncoding","section","encounteredSection","SectionMetadata","path","node","shrinkPaddedLEB128","uint8Buffer","_ref2","newu32Encoded","size","value","newu32EncodedLen","length","start","loc","column","end","oldu32EncodedLen"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@webassemblyjs/wasm-opt/esm/leb128.js"],"sourcesContent":["import { traverse, shiftSection } from \"@webassemblyjs/ast\";\nimport { encodeU32 } from \"@webassemblyjs/wasm-gen/lib/encoder\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\n\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section;\n  // Once we hit our section every that is after needs to be shifted by the delta\n  var encounteredSection = false;\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        shiftSection(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\n\nexport function shrinkPaddedLEB128(ast, uint8Buffer) {\n  traverse(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n\n      /**\n       * Section size\n       */\n      {\n        var newu32Encoded = encodeU32(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,YAAY,QAAQ,oBAAoB;AAC3D,SAASC,SAAS,QAAQ,qCAAqC;AAC/D,SAASC,qBAAqB,QAAQ,8BAA8B;AAEpE,SAASC,sBAAsBA,CAACC,GAAG,EAAEC,IAAI,EAAEC,mBAAmB,EAAE;EAC9D,IAAIC,OAAO,GAAGF,IAAI,CAACE,OAAO;EAC1B;EACA,IAAIC,kBAAkB,GAAG,KAAK;EAC9BT,QAAQ,CAACK,GAAG,EAAE;IACZK,eAAe,EAAE,SAASA,eAAeA,CAACC,IAAI,EAAE;MAC9C,IAAIA,IAAI,CAACC,IAAI,CAACJ,OAAO,KAAKA,OAAO,EAAE;QACjCC,kBAAkB,GAAG,IAAI;QACzB;MACF;MAEA,IAAIA,kBAAkB,KAAK,IAAI,EAAE;QAC/BR,YAAY,CAACI,GAAG,EAAEM,IAAI,CAACC,IAAI,EAAEL,mBAAmB,CAAC;MACnD;IACF;EACF,CAAC,CAAC;AACJ;AAEA,OAAO,SAASM,kBAAkBA,CAACR,GAAG,EAAES,WAAW,EAAE;EACnDd,QAAQ,CAACK,GAAG,EAAE;IACZK,eAAe,EAAE,SAASA,eAAeA,CAACK,KAAK,EAAE;MAC/C,IAAIH,IAAI,GAAGG,KAAK,CAACH,IAAI;;MAErB;AACN;AACA;MACM;QACE,IAAII,aAAa,GAAGd,SAAS,CAACU,IAAI,CAACK,IAAI,CAACC,KAAK,CAAC;QAC9C,IAAIC,gBAAgB,GAAGH,aAAa,CAACI,MAAM;QAC3C,IAAIC,KAAK,GAAGT,IAAI,CAACK,IAAI,CAACK,GAAG,CAACD,KAAK,CAACE,MAAM;QACtC,IAAIC,GAAG,GAAGZ,IAAI,CAACK,IAAI,CAACK,GAAG,CAACE,GAAG,CAACD,MAAM;QAClC,IAAIE,gBAAgB,GAAGD,GAAG,GAAGH,KAAK;QAElC,IAAIF,gBAAgB,KAAKM,gBAAgB,EAAE;UACzC,IAAIlB,mBAAmB,GAAGkB,gBAAgB,GAAGN,gBAAgB;UAC7DL,WAAW,GAAGX,qBAAqB,CAACW,WAAW,EAAEO,KAAK,EAAEG,GAAG,EAAER,aAAa,CAAC;UAC3EZ,sBAAsB,CAACC,GAAG,EAAEO,IAAI,EAAE,CAACL,mBAAmB,CAAC;QACzD;MACF;IACF;EACF,CAAC,CAAC;EACF,OAAOO,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}