{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\nconst rules_1 = require(\"../rules\");\nconst applicability_1 = require(\"./applicability\");\nconst errors_1 = require(\"../errors\");\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nvar DataType;\n(function (DataType) {\n  DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n  DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType || (exports.DataType = DataType = {}));\nfunction getSchemaTypes(schema) {\n  const types = getJSONTypes(schema.type);\n  const hasNull = types.includes(\"null\");\n  if (hasNull) {\n    if (schema.nullable === false) throw new Error(\"type: null contradicts nullable: false\");\n  } else {\n    if (!types.length && schema.nullable !== undefined) {\n      throw new Error('\"nullable\" cannot be used without \"type\"');\n    }\n    if (schema.nullable === true) types.push(\"null\");\n  }\n  return types;\n}\nexports.getSchemaTypes = getSchemaTypes;\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nfunction getJSONTypes(ts) {\n  const types = Array.isArray(ts) ? ts : ts ? [ts] : [];\n  if (types.every(rules_1.isJSONType)) return types;\n  throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\nexports.getJSONTypes = getJSONTypes;\nfunction coerceAndCheckDataType(it, types) {\n  const {\n    gen,\n    data,\n    opts\n  } = it;\n  const coerceTo = coerceToTypes(types, opts.coerceTypes);\n  const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));\n  if (checkTypes) {\n    const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n    gen.if(wrongType, () => {\n      if (coerceTo.length) coerceData(it, types, coerceTo);else reportTypeError(it);\n    });\n  }\n  return checkTypes;\n}\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nconst COERCIBLE = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\nfunction coerceToTypes(types, coerceTypes) {\n  return coerceTypes ? types.filter(t => COERCIBLE.has(t) || coerceTypes === \"array\" && t === \"array\") : [];\n}\nfunction coerceData(it, types, coerceTo) {\n  const {\n    gen,\n    data,\n    opts\n  } = it;\n  const dataType = gen.let(\"dataType\", (0, codegen_1._)`typeof ${data}`);\n  const coerced = gen.let(\"coerced\", (0, codegen_1._)`undefined`);\n  if (opts.coerceTypes === \"array\") {\n    gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));\n  }\n  gen.if((0, codegen_1._)`${coerced} !== undefined`);\n  for (const t of coerceTo) {\n    if (COERCIBLE.has(t) || t === \"array\" && opts.coerceTypes === \"array\") {\n      coerceSpecificType(t);\n    }\n  }\n  gen.else();\n  reportTypeError(it);\n  gen.endIf();\n  gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {\n    gen.assign(data, coerced);\n    assignParentData(it, coerced);\n  });\n  function coerceSpecificType(t) {\n    switch (t) {\n      case \"string\":\n        gen.elseIf((0, codegen_1._)`${dataType} == \"number\" || ${dataType} == \"boolean\"`).assign(coerced, (0, codegen_1._)`\"\" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`\"\"`);\n        return;\n      case \"number\":\n        gen.elseIf((0, codegen_1._)`${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);\n        return;\n      case \"integer\":\n        gen.elseIf((0, codegen_1._)`${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);\n        return;\n      case \"boolean\":\n        gen.elseIf((0, codegen_1._)`${data} === \"false\" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === \"true\" || ${data} === 1`).assign(coerced, true);\n        return;\n      case \"null\":\n        gen.elseIf((0, codegen_1._)`${data} === \"\" || ${data} === 0 || ${data} === false`);\n        gen.assign(coerced, null);\n        return;\n      case \"array\":\n        gen.elseIf((0, codegen_1._)`${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);\n    }\n  }\n}\nfunction assignParentData({\n  gen,\n  parentData,\n  parentDataProperty\n}, expr) {\n  // TODO use gen.property\n  gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));\n}\nfunction checkDataType(dataType, data, strictNums, correct = DataType.Correct) {\n  const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n  let cond;\n  switch (dataType) {\n    case \"null\":\n      return (0, codegen_1._)`${data} ${EQ} null`;\n    case \"array\":\n      cond = (0, codegen_1._)`Array.isArray(${data})`;\n      break;\n    case \"object\":\n      cond = (0, codegen_1._)`${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`;\n      break;\n    case \"integer\":\n      cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);\n      break;\n    case \"number\":\n      cond = numCond();\n      break;\n    default:\n      return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;\n  }\n  return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);\n  function numCond(_cond = codegen_1.nil) {\n    return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == \"number\"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);\n  }\n}\nexports.checkDataType = checkDataType;\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n  if (dataTypes.length === 1) {\n    return checkDataType(dataTypes[0], data, strictNums, correct);\n  }\n  let cond;\n  const types = (0, util_1.toHash)(dataTypes);\n  if (types.array && types.object) {\n    const notObj = (0, codegen_1._)`typeof ${data} != \"object\"`;\n    cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;\n    delete types.null;\n    delete types.array;\n    delete types.object;\n  } else {\n    cond = codegen_1.nil;\n  }\n  if (types.number) delete types.integer;\n  for (const t in types) cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));\n  return cond;\n}\nexports.checkDataTypes = checkDataTypes;\nconst typeError = {\n  message: ({\n    schema\n  }) => `must be ${schema}`,\n  params: ({\n    schema,\n    schemaValue\n  }) => typeof schema == \"string\" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`\n};\nfunction reportTypeError(it) {\n  const cxt = getTypeErrorContext(it);\n  (0, errors_1.reportError)(cxt, typeError);\n}\nexports.reportTypeError = reportTypeError;\nfunction getTypeErrorContext(it) {\n  const {\n    gen,\n    data,\n    schema\n  } = it;\n  const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, \"type\");\n  return {\n    gen,\n    keyword: \"type\",\n    data,\n    schema: schema.type,\n    schemaCode,\n    schemaValue: schemaCode,\n    parentSchema: schema,\n    params: {},\n    it\n  };\n}","map":{"version":3,"names":["rules_1","require","applicability_1","errors_1","codegen_1","util_1","DataType","exports","getSchemaTypes","schema","types","getJSONTypes","type","hasNull","includes","nullable","Error","length","undefined","push","ts","Array","isArray","every","isJSONType","join","coerceAndCheckDataType","it","gen","data","opts","coerceTo","coerceToTypes","coerceTypes","checkTypes","schemaHasRulesForType","wrongType","checkDataTypes","strictNumbers","Wrong","if","coerceData","reportTypeError","COERCIBLE","Set","filter","t","has","dataType","let","_","coerced","assign","coerceSpecificType","else","endIf","assignParentData","elseIf","parentData","parentDataProperty","expr","checkDataType","strictNums","correct","Correct","EQ","operators","NEQ","cond","numCond","not","_cond","nil","and","dataTypes","toHash","array","object","notObj","null","number","integer","typeError","message","params","schemaValue","cxt","getTypeErrorContext","reportError","schemaCode","schemaRefOrVal","keyword","parentSchema"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\compile\\validate\\dataType.ts"],"sourcesContent":["import type {\n  KeywordErrorDefinition,\n  KeywordErrorCxt,\n  ErrorObject,\n  AnySchemaObject,\n} from \"../../types\"\nimport type {SchemaObjCxt} from \"..\"\nimport {isJSONType, JSONType} from \"../rules\"\nimport {schemaHasRulesForType} from \"./applicability\"\nimport {reportError} from \"../errors\"\nimport {_, nil, and, not, operators, Code, Name} from \"../codegen\"\nimport {toHash, schemaRefOrVal} from \"../util\"\n\nexport enum DataType {\n  Correct,\n  Wrong,\n}\n\nexport function getSchemaTypes(schema: AnySchemaObject): JSONType[] {\n  const types = getJSONTypes(schema.type)\n  const hasNull = types.includes(\"null\")\n  if (hasNull) {\n    if (schema.nullable === false) throw new Error(\"type: null contradicts nullable: false\")\n  } else {\n    if (!types.length && schema.nullable !== undefined) {\n      throw new Error('\"nullable\" cannot be used without \"type\"')\n    }\n    if (schema.nullable === true) types.push(\"null\")\n  }\n  return types\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport function getJSONTypes(ts: unknown | unknown[]): JSONType[] {\n  const types: unknown[] = Array.isArray(ts) ? ts : ts ? [ts] : []\n  if (types.every(isJSONType)) return types\n  throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"))\n}\n\nexport function coerceAndCheckDataType(it: SchemaObjCxt, types: JSONType[]): boolean {\n  const {gen, data, opts} = it\n  const coerceTo = coerceToTypes(types, opts.coerceTypes)\n  const checkTypes =\n    types.length > 0 &&\n    !(coerceTo.length === 0 && types.length === 1 && schemaHasRulesForType(it, types[0]))\n  if (checkTypes) {\n    const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong)\n    gen.if(wrongType, () => {\n      if (coerceTo.length) coerceData(it, types, coerceTo)\n      else reportTypeError(it)\n    })\n  }\n  return checkTypes\n}\n\nconst COERCIBLE: Set<JSONType> = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"])\nfunction coerceToTypes(types: JSONType[], coerceTypes?: boolean | \"array\"): JSONType[] {\n  return coerceTypes\n    ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === \"array\" && t === \"array\"))\n    : []\n}\n\nfunction coerceData(it: SchemaObjCxt, types: JSONType[], coerceTo: JSONType[]): void {\n  const {gen, data, opts} = it\n  const dataType = gen.let(\"dataType\", _`typeof ${data}`)\n  const coerced = gen.let(\"coerced\", _`undefined`)\n  if (opts.coerceTypes === \"array\") {\n    gen.if(_`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () =>\n      gen\n        .assign(data, _`${data}[0]`)\n        .assign(dataType, _`typeof ${data}`)\n        .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data))\n    )\n  }\n  gen.if(_`${coerced} !== undefined`)\n  for (const t of coerceTo) {\n    if (COERCIBLE.has(t) || (t === \"array\" && opts.coerceTypes === \"array\")) {\n      coerceSpecificType(t)\n    }\n  }\n  gen.else()\n  reportTypeError(it)\n  gen.endIf()\n\n  gen.if(_`${coerced} !== undefined`, () => {\n    gen.assign(data, coerced)\n    assignParentData(it, coerced)\n  })\n\n  function coerceSpecificType(t: string): void {\n    switch (t) {\n      case \"string\":\n        gen\n          .elseIf(_`${dataType} == \"number\" || ${dataType} == \"boolean\"`)\n          .assign(coerced, _`\"\" + ${data}`)\n          .elseIf(_`${data} === null`)\n          .assign(coerced, _`\"\"`)\n        return\n      case \"number\":\n        gen\n          .elseIf(\n            _`${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`\n          )\n          .assign(coerced, _`+${data}`)\n        return\n      case \"integer\":\n        gen\n          .elseIf(\n            _`${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`\n          )\n          .assign(coerced, _`+${data}`)\n        return\n      case \"boolean\":\n        gen\n          .elseIf(_`${data} === \"false\" || ${data} === 0 || ${data} === null`)\n          .assign(coerced, false)\n          .elseIf(_`${data} === \"true\" || ${data} === 1`)\n          .assign(coerced, true)\n        return\n      case \"null\":\n        gen.elseIf(_`${data} === \"\" || ${data} === 0 || ${data} === false`)\n        gen.assign(coerced, null)\n        return\n\n      case \"array\":\n        gen\n          .elseIf(\n            _`${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`\n          )\n          .assign(coerced, _`[${data}]`)\n    }\n  }\n}\n\nfunction assignParentData({gen, parentData, parentDataProperty}: SchemaObjCxt, expr: Name): void {\n  // TODO use gen.property\n  gen.if(_`${parentData} !== undefined`, () =>\n    gen.assign(_`${parentData}[${parentDataProperty}]`, expr)\n  )\n}\n\nexport function checkDataType(\n  dataType: JSONType,\n  data: Name,\n  strictNums?: boolean | \"log\",\n  correct = DataType.Correct\n): Code {\n  const EQ = correct === DataType.Correct ? operators.EQ : operators.NEQ\n  let cond: Code\n  switch (dataType) {\n    case \"null\":\n      return _`${data} ${EQ} null`\n    case \"array\":\n      cond = _`Array.isArray(${data})`\n      break\n    case \"object\":\n      cond = _`${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`\n      break\n    case \"integer\":\n      cond = numCond(_`!(${data} % 1) && !isNaN(${data})`)\n      break\n    case \"number\":\n      cond = numCond()\n      break\n    default:\n      return _`typeof ${data} ${EQ} ${dataType}`\n  }\n  return correct === DataType.Correct ? cond : not(cond)\n\n  function numCond(_cond: Code = nil): Code {\n    return and(_`typeof ${data} == \"number\"`, _cond, strictNums ? _`isFinite(${data})` : nil)\n  }\n}\n\nexport function checkDataTypes(\n  dataTypes: JSONType[],\n  data: Name,\n  strictNums?: boolean | \"log\",\n  correct?: DataType\n): Code {\n  if (dataTypes.length === 1) {\n    return checkDataType(dataTypes[0], data, strictNums, correct)\n  }\n  let cond: Code\n  const types = toHash(dataTypes)\n  if (types.array && types.object) {\n    const notObj = _`typeof ${data} != \"object\"`\n    cond = types.null ? notObj : _`!${data} || ${notObj}`\n    delete types.null\n    delete types.array\n    delete types.object\n  } else {\n    cond = nil\n  }\n  if (types.number) delete types.integer\n  for (const t in types) cond = and(cond, checkDataType(t as JSONType, data, strictNums, correct))\n  return cond\n}\n\nexport type TypeError = ErrorObject<\"type\", {type: string}>\n\nconst typeError: KeywordErrorDefinition = {\n  message: ({schema}) => `must be ${schema}`,\n  params: ({schema, schemaValue}) =>\n    typeof schema == \"string\" ? _`{type: ${schema}}` : _`{type: ${schemaValue}}`,\n}\n\nexport function reportTypeError(it: SchemaObjCxt): void {\n  const cxt = getTypeErrorContext(it)\n  reportError(cxt, typeError)\n}\n\nfunction getTypeErrorContext(it: SchemaObjCxt): KeywordErrorCxt {\n  const {gen, data, schema} = it\n  const schemaCode = schemaRefOrVal(it, schema, \"type\")\n  return {\n    gen,\n    keyword: \"type\",\n    data,\n    schema: schema.type,\n    schemaCode,\n    schemaValue: schemaCode,\n    parentSchema: schema,\n    params: {},\n    it,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}