{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnumTypes = void 0;\nconst tsutils = __importStar(require(\"tsutils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util = __importStar(require(\"../../util\"));\n/*\n * If passed an enum member, returns the type of the parent. Otherwise,\n * returns itself.\n *\n * For example:\n * - `Fruit` --> `Fruit`\n * - `Fruit.Apple` --> `Fruit`\n */\nfunction getBaseEnumType(typeChecker, type) {\n  const symbol = type.getSymbol();\n  if (!tsutils.isSymbolFlagSet(symbol, ts.SymbolFlags.EnumMember)) {\n    return type;\n  }\n  return typeChecker.getTypeAtLocation(symbol.valueDeclaration.parent);\n}\n/**\n * A type can have 0 or more enum types. For example:\n * - 123 --> []\n * - {} --> []\n * - Fruit.Apple --> [Fruit]\n * - Fruit.Apple | Vegetable.Lettuce --> [Fruit, Vegetable]\n * - Fruit.Apple | Vegetable.Lettuce | 123 --> [Fruit, Vegetable]\n * - T extends Fruit --> [Fruit]\n */\nfunction getEnumTypes(typeChecker, type) {\n  return tsutils.unionTypeParts(type).filter(subType => util.isTypeFlagSet(subType, ts.TypeFlags.EnumLiteral)).map(type => getBaseEnumType(typeChecker, type));\n}\nexports.getEnumTypes = getEnumTypes;","map":{"version":3,"names":["tsutils","__importStar","require","ts","util","getBaseEnumType","typeChecker","type","symbol","getSymbol","isSymbolFlagSet","SymbolFlags","EnumMember","getTypeAtLocation","valueDeclaration","parent","getEnumTypes","unionTypeParts","filter","subType","isTypeFlagSet","TypeFlags","EnumLiteral","map","exports"],"sources":["../../../src/rules/enum-utils/shared.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,YAAA,CAAAC,OAAA;AACA,MAAAC,EAAA,GAAAF,YAAA,CAAAC,OAAA;AAEA,MAAAE,IAAA,GAAAH,YAAA,CAAAC,OAAA;AAEA;;;;;;;;AAQA,SAASG,eAAeA,CAACC,WAA2B,EAAEC,IAAa;EACjE,MAAMC,MAAM,GAAGD,IAAI,CAACE,SAAS,EAAG;EAChC,IAAI,CAACT,OAAO,CAACU,eAAe,CAACF,MAAM,EAAEL,EAAE,CAACQ,WAAW,CAACC,UAAU,CAAC,EAAE;IAC/D,OAAOL,IAAI;;EAGb,OAAOD,WAAW,CAACO,iBAAiB,CAACL,MAAM,CAACM,gBAAiB,CAACC,MAAM,CAAC;AACvE;AAEA;;;;;;;;;AASA,SAAgBC,YAAYA,CAC1BV,WAA2B,EAC3BC,IAAa;EAEb,OAAOP,OAAO,CACXiB,cAAc,CAACV,IAAI,CAAC,CACpBW,MAAM,CAACC,OAAO,IAAIf,IAAI,CAACgB,aAAa,CAACD,OAAO,EAAEhB,EAAE,CAACkB,SAAS,CAACC,WAAW,CAAC,CAAC,CACxEC,GAAG,CAAChB,IAAI,IAAIF,eAAe,CAACC,WAAW,EAAEC,IAAI,CAAC,CAAC;AACpD;AARAiB,OAAA,CAAAR,YAAA,GAAAA,YAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}