{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatListToParts = exports.formatList = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"./utils\");\nvar intl_messageformat_1 = require(\"intl-messageformat\");\nvar error_1 = require(\"./error\");\nvar LIST_FORMAT_OPTIONS = ['type', 'style'];\nvar now = Date.now();\nfunction generateToken(i) {\n  return \"\".concat(now, \"_\").concat(i, \"_\").concat(now);\n}\nfunction formatList(opts, getListFormat, values, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var results = formatListToParts(opts, getListFormat, values, options).reduce(function (all, el) {\n    var val = el.value;\n    if (typeof val !== 'string') {\n      all.push(val);\n    } else if (typeof all[all.length - 1] === 'string') {\n      all[all.length - 1] += val;\n    } else {\n      all.push(val);\n    }\n    return all;\n  }, []);\n  return results.length === 1 ? results[0] : results.length === 0 ? '' : results;\n}\nexports.formatList = formatList;\nfunction formatListToParts(_a, getListFormat, values, options) {\n  var locale = _a.locale,\n    onError = _a.onError;\n  if (options === void 0) {\n    options = {};\n  }\n  var ListFormat = Intl.ListFormat;\n  if (!ListFormat) {\n    onError(new intl_messageformat_1.FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", intl_messageformat_1.ErrorCode.MISSING_INTL_API));\n  }\n  var filteredOptions = (0, utils_1.filterProps)(options, LIST_FORMAT_OPTIONS);\n  try {\n    var richValues_1 = {};\n    var serializedValues = values.map(function (v, i) {\n      if (typeof v === 'object') {\n        var id = generateToken(i);\n        richValues_1[id] = v;\n        return id;\n      }\n      return String(v);\n    });\n    return getListFormat(locale, filteredOptions).formatToParts(serializedValues).map(function (part) {\n      return part.type === 'literal' ? part : tslib_1.__assign(tslib_1.__assign({}, part), {\n        value: richValues_1[part.value] || part.value\n      });\n    });\n  } catch (e) {\n    onError(new error_1.IntlFormatError('Error formatting list.', locale, e));\n  }\n  // @ts-ignore\n  return values;\n}\nexports.formatListToParts = formatListToParts;","map":{"version":3,"names":["Object","defineProperty","exports","value","formatListToParts","formatList","tslib_1","require","utils_1","intl_messageformat_1","error_1","LIST_FORMAT_OPTIONS","now","Date","generateToken","i","concat","opts","getListFormat","values","options","results","reduce","all","el","val","push","length","_a","locale","onError","ListFormat","Intl","FormatError","ErrorCode","MISSING_INTL_API","filteredOptions","filterProps","richValues_1","serializedValues","map","v","id","String","formatToParts","part","type","__assign","e","IntlFormatError"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/intl/src/list.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatListToParts = exports.formatList = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"./utils\");\nvar intl_messageformat_1 = require(\"intl-messageformat\");\nvar error_1 = require(\"./error\");\nvar LIST_FORMAT_OPTIONS = [\n    'type',\n    'style',\n];\nvar now = Date.now();\nfunction generateToken(i) {\n    return \"\".concat(now, \"_\").concat(i, \"_\").concat(now);\n}\nfunction formatList(opts, getListFormat, values, options) {\n    if (options === void 0) { options = {}; }\n    var results = formatListToParts(opts, getListFormat, values, options).reduce(function (all, el) {\n        var val = el.value;\n        if (typeof val !== 'string') {\n            all.push(val);\n        }\n        else if (typeof all[all.length - 1] === 'string') {\n            all[all.length - 1] += val;\n        }\n        else {\n            all.push(val);\n        }\n        return all;\n    }, []);\n    return results.length === 1 ? results[0] : results.length === 0 ? '' : results;\n}\nexports.formatList = formatList;\nfunction formatListToParts(_a, getListFormat, values, options) {\n    var locale = _a.locale, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    var ListFormat = Intl.ListFormat;\n    if (!ListFormat) {\n        onError(new intl_messageformat_1.FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", intl_messageformat_1.ErrorCode.MISSING_INTL_API));\n    }\n    var filteredOptions = (0, utils_1.filterProps)(options, LIST_FORMAT_OPTIONS);\n    try {\n        var richValues_1 = {};\n        var serializedValues = values.map(function (v, i) {\n            if (typeof v === 'object') {\n                var id = generateToken(i);\n                richValues_1[id] = v;\n                return id;\n            }\n            return String(v);\n        });\n        return getListFormat(locale, filteredOptions)\n            .formatToParts(serializedValues)\n            .map(function (part) {\n            return part.type === 'literal'\n                ? part\n                : tslib_1.__assign(tslib_1.__assign({}, part), { value: richValues_1[part.value] || part.value });\n        });\n    }\n    catch (e) {\n        onError(new error_1.IntlFormatError('Error formatting list.', locale, e));\n    }\n    // @ts-ignore\n    return values;\n}\nexports.formatListToParts = formatListToParts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}