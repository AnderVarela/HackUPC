{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst scope_manager_1 = require(\"@typescript-eslint/scope-manager\");\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nconst naming_convention_utils_1 = require(\"./naming-convention-utils\");\n// This essentially mirrors ESLint's `camelcase` rule\n// note that that rule ignores leading and trailing underscores and only checks those in the middle of a variable name\nconst defaultCamelCaseAllTheThingsConfig = [{\n  selector: 'default',\n  format: ['camelCase'],\n  leadingUnderscore: 'allow',\n  trailingUnderscore: 'allow'\n}, {\n  selector: 'variable',\n  format: ['camelCase', 'UPPER_CASE'],\n  leadingUnderscore: 'allow',\n  trailingUnderscore: 'allow'\n}, {\n  selector: 'typeLike',\n  format: ['PascalCase']\n}];\nexports.default = util.createRule({\n  name: 'naming-convention',\n  meta: {\n    docs: {\n      description: 'Enforce naming conventions for everything across a codebase',\n      recommended: false,\n      // technically only requires type checking if the user uses \"type\" modifiers\n      requiresTypeChecking: true\n    },\n    type: 'suggestion',\n    messages: {\n      unexpectedUnderscore: '{{type}} name `{{name}}` must not have a {{position}} underscore.',\n      missingUnderscore: '{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).',\n      missingAffix: '{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}',\n      satisfyCustom: '{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}',\n      doesNotMatchFormat: '{{type}} name `{{name}}` must match one of the following formats: {{formats}}',\n      doesNotMatchFormatTrimmed: '{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}'\n    },\n    schema: naming_convention_utils_1.SCHEMA\n  },\n  defaultOptions: defaultCamelCaseAllTheThingsConfig,\n  create(contextWithoutDefaults) {\n    const context = contextWithoutDefaults.options && contextWithoutDefaults.options.length > 0 ? contextWithoutDefaults :\n    // only apply the defaults when the user provides no config\n    Object.setPrototypeOf({\n      options: defaultCamelCaseAllTheThingsConfig\n    }, contextWithoutDefaults);\n    const validators = (0, naming_convention_utils_1.parseOptions)(context);\n    // getParserServices(context, false) -- dirty hack to work around the docs checker test...\n    const compilerOptions = util.getParserServices(context, true).program.getCompilerOptions();\n    function handleMember(validator, node, modifiers) {\n      if (!validator) {\n        return;\n      }\n      const key = node.key;\n      if (requiresQuoting(key, compilerOptions.target)) {\n        modifiers.add(naming_convention_utils_1.Modifiers.requiresQuotes);\n      }\n      validator(key, modifiers);\n    }\n    function getMemberModifiers(node) {\n      const modifiers = new Set();\n      if ('key' in node && node.key.type === utils_1.AST_NODE_TYPES.PrivateIdentifier) {\n        modifiers.add(naming_convention_utils_1.Modifiers['#private']);\n      } else if (node.accessibility) {\n        modifiers.add(naming_convention_utils_1.Modifiers[node.accessibility]);\n      } else {\n        modifiers.add(naming_convention_utils_1.Modifiers.public);\n      }\n      if (node.static) {\n        modifiers.add(naming_convention_utils_1.Modifiers.static);\n      }\n      if ('readonly' in node && node.readonly) {\n        modifiers.add(naming_convention_utils_1.Modifiers.readonly);\n      }\n      if ('override' in node && node.override) {\n        modifiers.add(naming_convention_utils_1.Modifiers.override);\n      }\n      if (node.type === utils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition || node.type === utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition) {\n        modifiers.add(naming_convention_utils_1.Modifiers.abstract);\n      }\n      return modifiers;\n    }\n    const unusedVariables = util.collectUnusedVariables(context);\n    function isUnused(name, initialScope = context.getScope()) {\n      var _a;\n      let variable = null;\n      let scope = initialScope;\n      while (scope) {\n        variable = (_a = scope.set.get(name)) !== null && _a !== void 0 ? _a : null;\n        if (variable) {\n          break;\n        }\n        scope = scope.upper;\n      }\n      if (!variable) {\n        return false;\n      }\n      return unusedVariables.has(variable);\n    }\n    function isDestructured(id) {\n      var _a, _b, _c;\n      return (\n        // `const { x }`\n        // does not match `const { x: y }`\n        ((_a = id.parent) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.Property && id.parent.shorthand ||\n        // `const { x = 2 }`\n        // does not match const `{ x: y = 2 }`\n        ((_b = id.parent) === null || _b === void 0 ? void 0 : _b.type) === utils_1.AST_NODE_TYPES.AssignmentPattern && ((_c = id.parent.parent) === null || _c === void 0 ? void 0 : _c.type) === utils_1.AST_NODE_TYPES.Property && id.parent.parent.shorthand\n      );\n    }\n    function isAsyncMemberOrProperty(propertyOrMemberNode) {\n      return Boolean('value' in propertyOrMemberNode && propertyOrMemberNode.value && 'async' in propertyOrMemberNode.value && propertyOrMemberNode.value.async);\n    }\n    function isAsyncVariableIdentifier(id) {\n      return Boolean(id.parent && ('async' in id.parent && id.parent.async || 'init' in id.parent && id.parent.init && 'async' in id.parent.init && id.parent.init.async));\n    }\n    const selectors = {\n      // #region variable\n      VariableDeclarator: {\n        validator: validators.variable,\n        handler: (node, validator) => {\n          const identifiers = getIdentifiersFromPattern(node.id);\n          const baseModifiers = new Set();\n          const parent = node.parent;\n          if ((parent === null || parent === void 0 ? void 0 : parent.type) === utils_1.AST_NODE_TYPES.VariableDeclaration) {\n            if (parent.kind === 'const') {\n              baseModifiers.add(naming_convention_utils_1.Modifiers.const);\n            }\n            if (isGlobal(context.getScope())) {\n              baseModifiers.add(naming_convention_utils_1.Modifiers.global);\n            }\n          }\n          identifiers.forEach(id => {\n            const modifiers = new Set(baseModifiers);\n            if (isDestructured(id)) {\n              modifiers.add(naming_convention_utils_1.Modifiers.destructured);\n            }\n            if (isExported(parent, id.name, context.getScope())) {\n              modifiers.add(naming_convention_utils_1.Modifiers.exported);\n            }\n            if (isUnused(id.name)) {\n              modifiers.add(naming_convention_utils_1.Modifiers.unused);\n            }\n            if (isAsyncVariableIdentifier(id)) {\n              modifiers.add(naming_convention_utils_1.Modifiers.async);\n            }\n            validator(id, modifiers);\n          });\n        }\n      },\n      // #endregion\n      // #region function\n      'FunctionDeclaration, TSDeclareFunction, FunctionExpression': {\n        validator: validators.function,\n        handler: (node, validator) => {\n          if (node.id == null) {\n            return;\n          }\n          const modifiers = new Set();\n          // functions create their own nested scope\n          const scope = context.getScope().upper;\n          if (isGlobal(scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.global);\n          }\n          if (isExported(node, node.id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.exported);\n          }\n          if (isUnused(node.id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.unused);\n          }\n          if (node.async) {\n            modifiers.add(naming_convention_utils_1.Modifiers.async);\n          }\n          validator(node.id, modifiers);\n        }\n      },\n      // #endregion function\n      // #region parameter\n      'FunctionDeclaration, TSDeclareFunction, TSEmptyBodyFunctionExpression, FunctionExpression, ArrowFunctionExpression': {\n        validator: validators.parameter,\n        handler: (node, validator) => {\n          node.params.forEach(param => {\n            if (param.type === utils_1.AST_NODE_TYPES.TSParameterProperty) {\n              return;\n            }\n            const identifiers = getIdentifiersFromPattern(param);\n            identifiers.forEach(i => {\n              const modifiers = new Set();\n              if (isDestructured(i)) {\n                modifiers.add(naming_convention_utils_1.Modifiers.destructured);\n              }\n              if (isUnused(i.name)) {\n                modifiers.add(naming_convention_utils_1.Modifiers.unused);\n              }\n              validator(i, modifiers);\n            });\n          });\n        }\n      },\n      // #endregion parameter\n      // #region parameterProperty\n      TSParameterProperty: {\n        validator: validators.parameterProperty,\n        handler: (node, validator) => {\n          const modifiers = getMemberModifiers(node);\n          const identifiers = getIdentifiersFromPattern(node.parameter);\n          identifiers.forEach(i => {\n            validator(i, modifiers);\n          });\n        }\n      },\n      // #endregion parameterProperty\n      // #region property\n      ':not(ObjectPattern) > Property[computed = false][kind = \"init\"][value.type != \"ArrowFunctionExpression\"][value.type != \"FunctionExpression\"][value.type != \"TSEmptyBodyFunctionExpression\"]': {\n        validator: validators.objectLiteralProperty,\n        handler: (node, validator) => {\n          const modifiers = new Set([naming_convention_utils_1.Modifiers.public]);\n          handleMember(validator, node, modifiers);\n        }\n      },\n      ':matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type != \"ArrowFunctionExpression\"][value.type != \"FunctionExpression\"][value.type != \"TSEmptyBodyFunctionExpression\"]': {\n        validator: validators.classProperty,\n        handler: (node, validator) => {\n          const modifiers = getMemberModifiers(node);\n          handleMember(validator, node, modifiers);\n        }\n      },\n      'TSPropertySignature[computed = false][typeAnnotation.typeAnnotation.type != \"TSFunctionType\"]': {\n        validator: validators.typeProperty,\n        handler: (node, validator) => {\n          const modifiers = new Set([naming_convention_utils_1.Modifiers.public]);\n          if (node.readonly) {\n            modifiers.add(naming_convention_utils_1.Modifiers.readonly);\n          }\n          handleMember(validator, node, modifiers);\n        }\n      },\n      // #endregion property\n      // #region method\n      [['Property[computed = false][kind = \"init\"][value.type = \"ArrowFunctionExpression\"]', 'Property[computed = false][kind = \"init\"][value.type = \"FunctionExpression\"]', 'Property[computed = false][kind = \"init\"][value.type = \"TSEmptyBodyFunctionExpression\"]'].join(', ')]: {\n        validator: validators.objectLiteralMethod,\n        handler: (node, validator) => {\n          const modifiers = new Set([naming_convention_utils_1.Modifiers.public]);\n          if (isAsyncMemberOrProperty(node)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.async);\n          }\n          handleMember(validator, node, modifiers);\n        }\n      },\n      [[':matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type = \"ArrowFunctionExpression\"]', ':matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type = \"FunctionExpression\"]', ':matches(PropertyDefinition, TSAbstractPropertyDefinition)[computed = false][value.type = \"TSEmptyBodyFunctionExpression\"]', ':matches(MethodDefinition, TSAbstractMethodDefinition)[computed = false][kind = \"method\"]'].join(', ')]: {\n        validator: validators.classMethod,\n        handler: (node, validator) => {\n          const modifiers = getMemberModifiers(node);\n          if (isAsyncMemberOrProperty(node)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.async);\n          }\n          handleMember(validator, node, modifiers);\n        }\n      },\n      [['TSMethodSignature[computed = false]', 'TSPropertySignature[computed = false][typeAnnotation.typeAnnotation.type = \"TSFunctionType\"]'].join(', ')]: {\n        validator: validators.typeMethod,\n        handler: (node, validator) => {\n          const modifiers = new Set([naming_convention_utils_1.Modifiers.public]);\n          handleMember(validator, node, modifiers);\n        }\n      },\n      // #endregion method\n      // #region accessor\n      'Property[computed = false]:matches([kind = \"get\"], [kind = \"set\"])': {\n        validator: validators.accessor,\n        handler: (node, validator) => {\n          const modifiers = new Set([naming_convention_utils_1.Modifiers.public]);\n          handleMember(validator, node, modifiers);\n        }\n      },\n      'MethodDefinition[computed = false]:matches([kind = \"get\"], [kind = \"set\"])': {\n        validator: validators.accessor,\n        handler: (node, validator) => {\n          const modifiers = getMemberModifiers(node);\n          handleMember(validator, node, modifiers);\n        }\n      },\n      // #endregion accessor\n      // #region enumMember\n      // computed is optional, so can't do [computed = false]\n      'TSEnumMember[computed != true]': {\n        validator: validators.enumMember,\n        handler: (node, validator) => {\n          const id = node.id;\n          const modifiers = new Set();\n          if (requiresQuoting(id, compilerOptions.target)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.requiresQuotes);\n          }\n          validator(id, modifiers);\n        }\n      },\n      // #endregion enumMember\n      // #region class\n      'ClassDeclaration, ClassExpression': {\n        validator: validators.class,\n        handler: (node, validator) => {\n          const id = node.id;\n          if (id == null) {\n            return;\n          }\n          const modifiers = new Set();\n          // classes create their own nested scope\n          const scope = context.getScope().upper;\n          if (node.abstract) {\n            modifiers.add(naming_convention_utils_1.Modifiers.abstract);\n          }\n          if (isExported(node, id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.exported);\n          }\n          if (isUnused(id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.unused);\n          }\n          validator(id, modifiers);\n        }\n      },\n      // #endregion class\n      // #region interface\n      TSInterfaceDeclaration: {\n        validator: validators.interface,\n        handler: (node, validator) => {\n          const modifiers = new Set();\n          const scope = context.getScope();\n          if (isExported(node, node.id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.exported);\n          }\n          if (isUnused(node.id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.unused);\n          }\n          validator(node.id, modifiers);\n        }\n      },\n      // #endregion interface\n      // #region typeAlias\n      TSTypeAliasDeclaration: {\n        validator: validators.typeAlias,\n        handler: (node, validator) => {\n          const modifiers = new Set();\n          const scope = context.getScope();\n          if (isExported(node, node.id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.exported);\n          }\n          if (isUnused(node.id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.unused);\n          }\n          validator(node.id, modifiers);\n        }\n      },\n      // #endregion typeAlias\n      // #region enum\n      TSEnumDeclaration: {\n        validator: validators.enum,\n        handler: (node, validator) => {\n          const modifiers = new Set();\n          // enums create their own nested scope\n          const scope = context.getScope().upper;\n          if (isExported(node, node.id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.exported);\n          }\n          if (isUnused(node.id.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.unused);\n          }\n          validator(node.id, modifiers);\n        }\n      },\n      // #endregion enum\n      // #region typeParameter\n      'TSTypeParameterDeclaration > TSTypeParameter': {\n        validator: validators.typeParameter,\n        handler: (node, validator) => {\n          const modifiers = new Set();\n          const scope = context.getScope();\n          if (isUnused(node.name.name, scope)) {\n            modifiers.add(naming_convention_utils_1.Modifiers.unused);\n          }\n          validator(node.name, modifiers);\n        }\n      }\n      // #endregion typeParameter\n    };\n    return Object.fromEntries(Object.entries(selectors).map(([selector, {\n      validator,\n      handler\n    }]) => {\n      return [selector, node => {\n        handler(node, validator);\n      }];\n    }).filter(s => s != null));\n  }\n});\nfunction getIdentifiersFromPattern(pattern) {\n  const identifiers = [];\n  const visitor = new scope_manager_1.PatternVisitor({}, pattern, id => identifiers.push(id));\n  visitor.visit(pattern);\n  return identifiers;\n}\nfunction isExported(node, name, scope) {\n  var _a, _b;\n  if (((_a = node === null || node === void 0 ? void 0 : node.parent) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.ExportDefaultDeclaration || ((_b = node === null || node === void 0 ? void 0 : node.parent) === null || _b === void 0 ? void 0 : _b.type) === utils_1.AST_NODE_TYPES.ExportNamedDeclaration) {\n    return true;\n  }\n  if (scope == null) {\n    return false;\n  }\n  const variable = scope.set.get(name);\n  if (variable) {\n    for (const ref of variable.references) {\n      const refParent = ref.identifier.parent;\n      if ((refParent === null || refParent === void 0 ? void 0 : refParent.type) === utils_1.AST_NODE_TYPES.ExportDefaultDeclaration || (refParent === null || refParent === void 0 ? void 0 : refParent.type) === utils_1.AST_NODE_TYPES.ExportSpecifier) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isGlobal(scope) {\n  if (scope == null) {\n    return false;\n  }\n  return scope.type === utils_1.TSESLint.Scope.ScopeType.global || scope.type === utils_1.TSESLint.Scope.ScopeType.module;\n}\nfunction requiresQuoting(node, target) {\n  const name = node.type === utils_1.AST_NODE_TYPES.Identifier || node.type === utils_1.AST_NODE_TYPES.PrivateIdentifier ? node.name : `${node.value}`;\n  return util.requiresQuoting(name, target);\n}","map":{"version":3,"names":["scope_manager_1","require","utils_1","util","__importStar","naming_convention_utils_1","defaultCamelCaseAllTheThingsConfig","selector","format","leadingUnderscore","trailingUnderscore","exports","default","createRule","name","meta","docs","description","recommended","requiresTypeChecking","type","messages","unexpectedUnderscore","missingUnderscore","missingAffix","satisfyCustom","doesNotMatchFormat","doesNotMatchFormatTrimmed","schema","SCHEMA","defaultOptions","create","contextWithoutDefaults","context","options","length","Object","setPrototypeOf","validators","parseOptions","compilerOptions","getParserServices","program","getCompilerOptions","handleMember","validator","node","modifiers","key","requiresQuoting","target","add","Modifiers","requiresQuotes","getMemberModifiers","Set","AST_NODE_TYPES","PrivateIdentifier","accessibility","public","static","readonly","override","TSAbstractPropertyDefinition","TSAbstractMethodDefinition","abstract","unusedVariables","collectUnusedVariables","isUnused","initialScope","getScope","variable","scope","_a","set","get","upper","has","isDestructured","id","parent","Property","shorthand","_b","AssignmentPattern","_c","isAsyncMemberOrProperty","propertyOrMemberNode","Boolean","value","async","isAsyncVariableIdentifier","init","selectors","VariableDeclarator","handler","identifiers","getIdentifiersFromPattern","baseModifiers","VariableDeclaration","kind","const","isGlobal","global","forEach","destructured","isExported","exported","unused","function","parameter","params","param","TSParameterProperty","i","parameterProperty","objectLiteralProperty","classProperty","typeProperty","join","objectLiteralMethod","classMethod","typeMethod","accessor","enumMember","class","TSInterfaceDeclaration","interface","TSTypeAliasDeclaration","typeAlias","TSEnumDeclaration","enum","typeParameter","fromEntries","entries","map","filter","s","pattern","visitor","PatternVisitor","push","visit","ExportDefaultDeclaration","ExportNamedDeclaration","ref","references","refParent","identifier","ExportSpecifier","TSESLint","Scope","ScopeType","module","Identifier"],"sources":["../../src/rules/naming-convention.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}