{"ast":null,"code":"/**\n * @fileoverview Validates configs.\n * @author Brandon Mills\n */\n\n/* eslint class-methods-use-this: \"off\" */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nimport util from \"util\";\nimport * as ConfigOps from \"./config-ops.js\";\nimport { emitDeprecationWarning } from \"./deprecation-warnings.js\";\nimport ajvOrig from \"./ajv.js\";\nimport configSchema from \"../../conf/config-schema.js\";\nimport BuiltInEnvironments from \"../../conf/environments.js\";\nconst ajv = ajvOrig();\nconst ruleValidators = new WeakMap();\nconst noop = Function.prototype;\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\nlet validateSchema;\nconst severityMap = {\n  error: 2,\n  warn: 1,\n  off: 0\n};\nconst validated = new WeakSet();\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\nexport default class ConfigValidator {\n  constructor({\n    builtInRules = new Map()\n  } = {}) {\n    this.builtInRules = builtInRules;\n  }\n\n  /**\n   * Gets a complete options schema for a rule.\n   * @param {{create: Function, schema: (Array|null)}} rule A new-style rule object\n   * @returns {Object} JSON Schema for the rule's options.\n   */\n  getRuleOptionsSchema(rule) {\n    if (!rule) {\n      return null;\n    }\n    const schema = rule.schema || rule.meta && rule.meta.schema;\n\n    // Given a tuple of schemas, insert warning level at the beginning\n    if (Array.isArray(schema)) {\n      if (schema.length) {\n        return {\n          type: \"array\",\n          items: schema,\n          minItems: 0,\n          maxItems: schema.length\n        };\n      }\n      return {\n        type: \"array\",\n        minItems: 0,\n        maxItems: 0\n      };\n    }\n\n    // Given a full schema, leave it alone\n    return schema || null;\n  }\n\n  /**\n   * Validates a rule's severity and returns the severity value. Throws an error if the severity is invalid.\n   * @param {options} options The given options for the rule.\n   * @returns {number|string} The rule's severity value\n   */\n  validateRuleSeverity(options) {\n    const severity = Array.isArray(options) ? options[0] : options;\n    const normSeverity = typeof severity === \"string\" ? severityMap[severity.toLowerCase()] : severity;\n    if (normSeverity === 0 || normSeverity === 1 || normSeverity === 2) {\n      return normSeverity;\n    }\n    throw new Error(`\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '${util.inspect(severity).replace(/'/gu, \"\\\"\").replace(/\\n/gu, \"\")}').\\n`);\n  }\n\n  /**\n   * Validates the non-severity options passed to a rule, based on its schema.\n   * @param {{create: Function}} rule The rule to validate\n   * @param {Array} localOptions The options for the rule, excluding severity\n   * @returns {void}\n   */\n  validateRuleSchema(rule, localOptions) {\n    if (!ruleValidators.has(rule)) {\n      const schema = this.getRuleOptionsSchema(rule);\n      if (schema) {\n        ruleValidators.set(rule, ajv.compile(schema));\n      }\n    }\n    const validateRule = ruleValidators.get(rule);\n    if (validateRule) {\n      validateRule(localOptions);\n      if (validateRule.errors) {\n        throw new Error(validateRule.errors.map(error => `\\tValue ${JSON.stringify(error.data)} ${error.message}.\\n`).join(\"\"));\n      }\n    }\n  }\n\n  /**\n   * Validates a rule's options against its schema.\n   * @param {{create: Function}|null} rule The rule that the config is being validated for\n   * @param {string} ruleId The rule's unique name.\n   * @param {Array|number} options The given options for the rule.\n   * @param {string|null} source The name of the configuration source to report in any errors. If null or undefined,\n   * no source is prepended to the message.\n   * @returns {void}\n   */\n  validateRuleOptions(rule, ruleId, options, source = null) {\n    try {\n      const severity = this.validateRuleSeverity(options);\n      if (severity !== 0) {\n        this.validateRuleSchema(rule, Array.isArray(options) ? options.slice(1) : []);\n      }\n    } catch (err) {\n      const enhancedMessage = `Configuration for rule \"${ruleId}\" is invalid:\\n${err.message}`;\n      if (typeof source === \"string\") {\n        throw new Error(`${source}:\\n\\t${enhancedMessage}`);\n      } else {\n        throw new Error(enhancedMessage);\n      }\n    }\n  }\n\n  /**\n   * Validates an environment object\n   * @param {Object} environment The environment config object to validate.\n   * @param {string} source The name of the configuration source to report in any errors.\n   * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded environments.\n   * @returns {void}\n   */\n  validateEnvironment(environment, source, getAdditionalEnv = noop) {\n    // not having an environment is ok\n    if (!environment) {\n      return;\n    }\n    Object.keys(environment).forEach(id => {\n      const env = getAdditionalEnv(id) || BuiltInEnvironments.get(id) || null;\n      if (!env) {\n        const message = `${source}:\\n\\tEnvironment key \"${id}\" is unknown\\n`;\n        throw new Error(message);\n      }\n    });\n  }\n\n  /**\n   * Validates a rules config object\n   * @param {Object} rulesConfig The rules config object to validate.\n   * @param {string} source The name of the configuration source to report in any errors.\n   * @param {function(ruleId:string): Object} getAdditionalRule A map from strings to loaded rules\n   * @returns {void}\n   */\n  validateRules(rulesConfig, source, getAdditionalRule = noop) {\n    if (!rulesConfig) {\n      return;\n    }\n    Object.keys(rulesConfig).forEach(id => {\n      const rule = getAdditionalRule(id) || this.builtInRules.get(id) || null;\n      this.validateRuleOptions(rule, id, rulesConfig[id], source);\n    });\n  }\n\n  /**\n   * Validates a `globals` section of a config file\n   * @param {Object} globalsConfig The `globals` section\n   * @param {string|null} source The name of the configuration source to report in the event of an error.\n   * @returns {void}\n   */\n  validateGlobals(globalsConfig, source = null) {\n    if (!globalsConfig) {\n      return;\n    }\n    Object.entries(globalsConfig).forEach(([configuredGlobal, configuredValue]) => {\n      try {\n        ConfigOps.normalizeConfigGlobal(configuredValue);\n      } catch (err) {\n        throw new Error(`ESLint configuration of global '${configuredGlobal}' in ${source} is invalid:\\n${err.message}`);\n      }\n    });\n  }\n\n  /**\n   * Validate `processor` configuration.\n   * @param {string|undefined} processorName The processor name.\n   * @param {string} source The name of config file.\n   * @param {function(id:string): Processor} getProcessor The getter of defined processors.\n   * @returns {void}\n   */\n  validateProcessor(processorName, source, getProcessor) {\n    if (processorName && !getProcessor(processorName)) {\n      throw new Error(`ESLint configuration of processor in '${source}' is invalid: '${processorName}' was not found.`);\n    }\n  }\n\n  /**\n   * Formats an array of schema validation errors.\n   * @param {Array} errors An array of error messages to format.\n   * @returns {string} Formatted error message\n   */\n  formatErrors(errors) {\n    return errors.map(error => {\n      if (error.keyword === \"additionalProperties\") {\n        const formattedPropertyPath = error.dataPath.length ? `${error.dataPath.slice(1)}.${error.params.additionalProperty}` : error.params.additionalProperty;\n        return `Unexpected top-level property \"${formattedPropertyPath}\"`;\n      }\n      if (error.keyword === \"type\") {\n        const formattedField = error.dataPath.slice(1);\n        const formattedExpectedType = Array.isArray(error.schema) ? error.schema.join(\"/\") : error.schema;\n        const formattedValue = JSON.stringify(error.data);\n        return `Property \"${formattedField}\" is the wrong type (expected ${formattedExpectedType} but got \\`${formattedValue}\\`)`;\n      }\n      const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n      return `\"${field}\" ${error.message}. Value: ${JSON.stringify(error.data)}`;\n    }).map(message => `\\t- ${message}.\\n`).join(\"\");\n  }\n\n  /**\n   * Validates the top level properties of the config object.\n   * @param {Object} config The config object to validate.\n   * @param {string} source The name of the configuration source to report in any errors.\n   * @returns {void}\n   */\n  validateConfigSchema(config, source = null) {\n    validateSchema = validateSchema || ajv.compile(configSchema);\n    if (!validateSchema(config)) {\n      throw new Error(`ESLint configuration in ${source} is invalid:\\n${this.formatErrors(validateSchema.errors)}`);\n    }\n    if (Object.hasOwnProperty.call(config, \"ecmaFeatures\")) {\n      emitDeprecationWarning(source, \"ESLINT_LEGACY_ECMAFEATURES\");\n    }\n  }\n\n  /**\n   * Validates an entire config object.\n   * @param {Object} config The config object to validate.\n   * @param {string} source The name of the configuration source to report in any errors.\n   * @param {function(ruleId:string): Object} [getAdditionalRule] A map from strings to loaded rules.\n   * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded envs.\n   * @returns {void}\n   */\n  validate(config, source, getAdditionalRule, getAdditionalEnv) {\n    this.validateConfigSchema(config, source);\n    this.validateRules(config.rules, source, getAdditionalRule);\n    this.validateEnvironment(config.env, source, getAdditionalEnv);\n    this.validateGlobals(config.globals, source);\n    for (const override of config.overrides || []) {\n      this.validateRules(override.rules, source, getAdditionalRule);\n      this.validateEnvironment(override.env, source, getAdditionalEnv);\n      this.validateGlobals(config.globals, source);\n    }\n  }\n\n  /**\n   * Validate config array object.\n   * @param {ConfigArray} configArray The config array to validate.\n   * @returns {void}\n   */\n  validateConfigArray(configArray) {\n    const getPluginEnv = Map.prototype.get.bind(configArray.pluginEnvironments);\n    const getPluginProcessor = Map.prototype.get.bind(configArray.pluginProcessors);\n    const getPluginRule = Map.prototype.get.bind(configArray.pluginRules);\n\n    // Validate.\n    for (const element of configArray) {\n      if (validated.has(element)) {\n        continue;\n      }\n      validated.add(element);\n      this.validateEnvironment(element.env, element.name, getPluginEnv);\n      this.validateGlobals(element.globals, element.name);\n      this.validateProcessor(element.processor, element.name, getPluginProcessor);\n      this.validateRules(element.rules, element.name, getPluginRule);\n    }\n  }\n}","map":{"version":3,"names":["util","ConfigOps","emitDeprecationWarning","ajvOrig","configSchema","BuiltInEnvironments","ajv","ruleValidators","WeakMap","noop","Function","prototype","validateSchema","severityMap","error","warn","off","validated","WeakSet","ConfigValidator","constructor","builtInRules","Map","getRuleOptionsSchema","rule","schema","meta","Array","isArray","length","type","items","minItems","maxItems","validateRuleSeverity","options","severity","normSeverity","toLowerCase","Error","inspect","replace","validateRuleSchema","localOptions","has","set","compile","validateRule","get","errors","map","JSON","stringify","data","message","join","validateRuleOptions","ruleId","source","slice","err","enhancedMessage","validateEnvironment","environment","getAdditionalEnv","Object","keys","forEach","id","env","validateRules","rulesConfig","getAdditionalRule","validateGlobals","globalsConfig","entries","configuredGlobal","configuredValue","normalizeConfigGlobal","validateProcessor","processorName","getProcessor","formatErrors","keyword","formattedPropertyPath","dataPath","params","additionalProperty","formattedField","formattedExpectedType","formattedValue","field","validateConfigSchema","config","hasOwnProperty","call","validate","rules","globals","override","overrides","validateConfigArray","configArray","getPluginEnv","bind","pluginEnvironments","getPluginProcessor","pluginProcessors","getPluginRule","pluginRules","element","add","name","processor"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@eslint/eslintrc/lib/shared/config-validator.js"],"sourcesContent":["/**\n * @fileoverview Validates configs.\n * @author Brandon Mills\n */\n\n/* eslint class-methods-use-this: \"off\" */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nimport util from \"util\";\nimport * as ConfigOps from \"./config-ops.js\";\nimport { emitDeprecationWarning } from \"./deprecation-warnings.js\";\nimport ajvOrig from \"./ajv.js\";\nimport configSchema from \"../../conf/config-schema.js\";\nimport BuiltInEnvironments from \"../../conf/environments.js\";\n\nconst ajv = ajvOrig();\n\nconst ruleValidators = new WeakMap();\nconst noop = Function.prototype;\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\nlet validateSchema;\nconst severityMap = {\n    error: 2,\n    warn: 1,\n    off: 0\n};\n\nconst validated = new WeakSet();\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\nexport default class ConfigValidator {\n    constructor({ builtInRules = new Map() } = {}) {\n        this.builtInRules = builtInRules;\n    }\n\n    /**\n     * Gets a complete options schema for a rule.\n     * @param {{create: Function, schema: (Array|null)}} rule A new-style rule object\n     * @returns {Object} JSON Schema for the rule's options.\n     */\n    getRuleOptionsSchema(rule) {\n        if (!rule) {\n            return null;\n        }\n\n        const schema = rule.schema || rule.meta && rule.meta.schema;\n\n        // Given a tuple of schemas, insert warning level at the beginning\n        if (Array.isArray(schema)) {\n            if (schema.length) {\n                return {\n                    type: \"array\",\n                    items: schema,\n                    minItems: 0,\n                    maxItems: schema.length\n                };\n            }\n            return {\n                type: \"array\",\n                minItems: 0,\n                maxItems: 0\n            };\n\n        }\n\n        // Given a full schema, leave it alone\n        return schema || null;\n    }\n\n    /**\n     * Validates a rule's severity and returns the severity value. Throws an error if the severity is invalid.\n     * @param {options} options The given options for the rule.\n     * @returns {number|string} The rule's severity value\n     */\n    validateRuleSeverity(options) {\n        const severity = Array.isArray(options) ? options[0] : options;\n        const normSeverity = typeof severity === \"string\" ? severityMap[severity.toLowerCase()] : severity;\n\n        if (normSeverity === 0 || normSeverity === 1 || normSeverity === 2) {\n            return normSeverity;\n        }\n\n        throw new Error(`\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '${util.inspect(severity).replace(/'/gu, \"\\\"\").replace(/\\n/gu, \"\")}').\\n`);\n\n    }\n\n    /**\n     * Validates the non-severity options passed to a rule, based on its schema.\n     * @param {{create: Function}} rule The rule to validate\n     * @param {Array} localOptions The options for the rule, excluding severity\n     * @returns {void}\n     */\n    validateRuleSchema(rule, localOptions) {\n        if (!ruleValidators.has(rule)) {\n            const schema = this.getRuleOptionsSchema(rule);\n\n            if (schema) {\n                ruleValidators.set(rule, ajv.compile(schema));\n            }\n        }\n\n        const validateRule = ruleValidators.get(rule);\n\n        if (validateRule) {\n            validateRule(localOptions);\n            if (validateRule.errors) {\n                throw new Error(validateRule.errors.map(\n                    error => `\\tValue ${JSON.stringify(error.data)} ${error.message}.\\n`\n                ).join(\"\"));\n            }\n        }\n    }\n\n    /**\n     * Validates a rule's options against its schema.\n     * @param {{create: Function}|null} rule The rule that the config is being validated for\n     * @param {string} ruleId The rule's unique name.\n     * @param {Array|number} options The given options for the rule.\n     * @param {string|null} source The name of the configuration source to report in any errors. If null or undefined,\n     * no source is prepended to the message.\n     * @returns {void}\n     */\n    validateRuleOptions(rule, ruleId, options, source = null) {\n        try {\n            const severity = this.validateRuleSeverity(options);\n\n            if (severity !== 0) {\n                this.validateRuleSchema(rule, Array.isArray(options) ? options.slice(1) : []);\n            }\n        } catch (err) {\n            const enhancedMessage = `Configuration for rule \"${ruleId}\" is invalid:\\n${err.message}`;\n\n            if (typeof source === \"string\") {\n                throw new Error(`${source}:\\n\\t${enhancedMessage}`);\n            } else {\n                throw new Error(enhancedMessage);\n            }\n        }\n    }\n\n    /**\n     * Validates an environment object\n     * @param {Object} environment The environment config object to validate.\n     * @param {string} source The name of the configuration source to report in any errors.\n     * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded environments.\n     * @returns {void}\n     */\n    validateEnvironment(\n        environment,\n        source,\n        getAdditionalEnv = noop\n    ) {\n\n        // not having an environment is ok\n        if (!environment) {\n            return;\n        }\n\n        Object.keys(environment).forEach(id => {\n            const env = getAdditionalEnv(id) || BuiltInEnvironments.get(id) || null;\n\n            if (!env) {\n                const message = `${source}:\\n\\tEnvironment key \"${id}\" is unknown\\n`;\n\n                throw new Error(message);\n            }\n        });\n    }\n\n    /**\n     * Validates a rules config object\n     * @param {Object} rulesConfig The rules config object to validate.\n     * @param {string} source The name of the configuration source to report in any errors.\n     * @param {function(ruleId:string): Object} getAdditionalRule A map from strings to loaded rules\n     * @returns {void}\n     */\n    validateRules(\n        rulesConfig,\n        source,\n        getAdditionalRule = noop\n    ) {\n        if (!rulesConfig) {\n            return;\n        }\n\n        Object.keys(rulesConfig).forEach(id => {\n            const rule = getAdditionalRule(id) || this.builtInRules.get(id) || null;\n\n            this.validateRuleOptions(rule, id, rulesConfig[id], source);\n        });\n    }\n\n    /**\n     * Validates a `globals` section of a config file\n     * @param {Object} globalsConfig The `globals` section\n     * @param {string|null} source The name of the configuration source to report in the event of an error.\n     * @returns {void}\n     */\n    validateGlobals(globalsConfig, source = null) {\n        if (!globalsConfig) {\n            return;\n        }\n\n        Object.entries(globalsConfig)\n            .forEach(([configuredGlobal, configuredValue]) => {\n                try {\n                    ConfigOps.normalizeConfigGlobal(configuredValue);\n                } catch (err) {\n                    throw new Error(`ESLint configuration of global '${configuredGlobal}' in ${source} is invalid:\\n${err.message}`);\n                }\n            });\n    }\n\n    /**\n     * Validate `processor` configuration.\n     * @param {string|undefined} processorName The processor name.\n     * @param {string} source The name of config file.\n     * @param {function(id:string): Processor} getProcessor The getter of defined processors.\n     * @returns {void}\n     */\n    validateProcessor(processorName, source, getProcessor) {\n        if (processorName && !getProcessor(processorName)) {\n            throw new Error(`ESLint configuration of processor in '${source}' is invalid: '${processorName}' was not found.`);\n        }\n    }\n\n    /**\n     * Formats an array of schema validation errors.\n     * @param {Array} errors An array of error messages to format.\n     * @returns {string} Formatted error message\n     */\n    formatErrors(errors) {\n        return errors.map(error => {\n            if (error.keyword === \"additionalProperties\") {\n                const formattedPropertyPath = error.dataPath.length ? `${error.dataPath.slice(1)}.${error.params.additionalProperty}` : error.params.additionalProperty;\n\n                return `Unexpected top-level property \"${formattedPropertyPath}\"`;\n            }\n            if (error.keyword === \"type\") {\n                const formattedField = error.dataPath.slice(1);\n                const formattedExpectedType = Array.isArray(error.schema) ? error.schema.join(\"/\") : error.schema;\n                const formattedValue = JSON.stringify(error.data);\n\n                return `Property \"${formattedField}\" is the wrong type (expected ${formattedExpectedType} but got \\`${formattedValue}\\`)`;\n            }\n\n            const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n\n            return `\"${field}\" ${error.message}. Value: ${JSON.stringify(error.data)}`;\n        }).map(message => `\\t- ${message}.\\n`).join(\"\");\n    }\n\n    /**\n     * Validates the top level properties of the config object.\n     * @param {Object} config The config object to validate.\n     * @param {string} source The name of the configuration source to report in any errors.\n     * @returns {void}\n     */\n    validateConfigSchema(config, source = null) {\n        validateSchema = validateSchema || ajv.compile(configSchema);\n\n        if (!validateSchema(config)) {\n            throw new Error(`ESLint configuration in ${source} is invalid:\\n${this.formatErrors(validateSchema.errors)}`);\n        }\n\n        if (Object.hasOwnProperty.call(config, \"ecmaFeatures\")) {\n            emitDeprecationWarning(source, \"ESLINT_LEGACY_ECMAFEATURES\");\n        }\n    }\n\n    /**\n     * Validates an entire config object.\n     * @param {Object} config The config object to validate.\n     * @param {string} source The name of the configuration source to report in any errors.\n     * @param {function(ruleId:string): Object} [getAdditionalRule] A map from strings to loaded rules.\n     * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded envs.\n     * @returns {void}\n     */\n    validate(config, source, getAdditionalRule, getAdditionalEnv) {\n        this.validateConfigSchema(config, source);\n        this.validateRules(config.rules, source, getAdditionalRule);\n        this.validateEnvironment(config.env, source, getAdditionalEnv);\n        this.validateGlobals(config.globals, source);\n\n        for (const override of config.overrides || []) {\n            this.validateRules(override.rules, source, getAdditionalRule);\n            this.validateEnvironment(override.env, source, getAdditionalEnv);\n            this.validateGlobals(config.globals, source);\n        }\n    }\n\n    /**\n     * Validate config array object.\n     * @param {ConfigArray} configArray The config array to validate.\n     * @returns {void}\n     */\n    validateConfigArray(configArray) {\n        const getPluginEnv = Map.prototype.get.bind(configArray.pluginEnvironments);\n        const getPluginProcessor = Map.prototype.get.bind(configArray.pluginProcessors);\n        const getPluginRule = Map.prototype.get.bind(configArray.pluginRules);\n\n        // Validate.\n        for (const element of configArray) {\n            if (validated.has(element)) {\n                continue;\n            }\n            validated.add(element);\n\n            this.validateEnvironment(element.env, element.name, getPluginEnv);\n            this.validateGlobals(element.globals, element.name);\n            this.validateProcessor(element.processor, element.name, getPluginProcessor);\n            this.validateRules(element.rules, element.name, getPluginRule);\n        }\n    }\n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAO,KAAKC,SAAS,MAAM,iBAAiB;AAC5C,SAASC,sBAAsB,QAAQ,2BAA2B;AAClE,OAAOC,OAAO,MAAM,UAAU;AAC9B,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,mBAAmB,MAAM,4BAA4B;AAE5D,MAAMC,GAAG,GAAGH,OAAO,CAAC,CAAC;AAErB,MAAMI,cAAc,GAAG,IAAIC,OAAO,CAAC,CAAC;AACpC,MAAMC,IAAI,GAAGC,QAAQ,CAACC,SAAS;;AAE/B;AACA;AACA;AACA,IAAIC,cAAc;AAClB,MAAMC,WAAW,GAAG;EAChBC,KAAK,EAAE,CAAC;EACRC,IAAI,EAAE,CAAC;EACPC,GAAG,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAG,IAAIC,OAAO,CAAC,CAAC;;AAE/B;AACA;AACA;;AAEA,eAAe,MAAMC,eAAe,CAAC;EACjCC,WAAWA,CAAC;IAAEC,YAAY,GAAG,IAAIC,GAAG,CAAC;EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;IAC3C,IAAI,CAACD,YAAY,GAAGA,YAAY;EACpC;;EAEA;AACJ;AACA;AACA;AACA;EACIE,oBAAoBA,CAACC,IAAI,EAAE;IACvB,IAAI,CAACA,IAAI,EAAE;MACP,OAAO,IAAI;IACf;IAEA,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM,IAAID,IAAI,CAACE,IAAI,IAAIF,IAAI,CAACE,IAAI,CAACD,MAAM;;IAE3D;IACA,IAAIE,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;MACvB,IAAIA,MAAM,CAACI,MAAM,EAAE;QACf,OAAO;UACHC,IAAI,EAAE,OAAO;UACbC,KAAK,EAAEN,MAAM;UACbO,QAAQ,EAAE,CAAC;UACXC,QAAQ,EAAER,MAAM,CAACI;QACrB,CAAC;MACL;MACA,OAAO;QACHC,IAAI,EAAE,OAAO;QACbE,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE;MACd,CAAC;IAEL;;IAEA;IACA,OAAOR,MAAM,IAAI,IAAI;EACzB;;EAEA;AACJ;AACA;AACA;AACA;EACIS,oBAAoBA,CAACC,OAAO,EAAE;IAC1B,MAAMC,QAAQ,GAAGT,KAAK,CAACC,OAAO,CAACO,OAAO,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO;IAC9D,MAAME,YAAY,GAAG,OAAOD,QAAQ,KAAK,QAAQ,GAAGvB,WAAW,CAACuB,QAAQ,CAACE,WAAW,CAAC,CAAC,CAAC,GAAGF,QAAQ;IAElG,IAAIC,YAAY,KAAK,CAAC,IAAIA,YAAY,KAAK,CAAC,IAAIA,YAAY,KAAK,CAAC,EAAE;MAChE,OAAOA,YAAY;IACvB;IAEA,MAAM,IAAIE,KAAK,CAAE,wFAAuFvC,IAAI,CAACwC,OAAO,CAACJ,QAAQ,CAAC,CAACK,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAE,OAAM,CAAC;EAEnL;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,kBAAkBA,CAAClB,IAAI,EAAEmB,YAAY,EAAE;IACnC,IAAI,CAACpC,cAAc,CAACqC,GAAG,CAACpB,IAAI,CAAC,EAAE;MAC3B,MAAMC,MAAM,GAAG,IAAI,CAACF,oBAAoB,CAACC,IAAI,CAAC;MAE9C,IAAIC,MAAM,EAAE;QACRlB,cAAc,CAACsC,GAAG,CAACrB,IAAI,EAAElB,GAAG,CAACwC,OAAO,CAACrB,MAAM,CAAC,CAAC;MACjD;IACJ;IAEA,MAAMsB,YAAY,GAAGxC,cAAc,CAACyC,GAAG,CAACxB,IAAI,CAAC;IAE7C,IAAIuB,YAAY,EAAE;MACdA,YAAY,CAACJ,YAAY,CAAC;MAC1B,IAAII,YAAY,CAACE,MAAM,EAAE;QACrB,MAAM,IAAIV,KAAK,CAACQ,YAAY,CAACE,MAAM,CAACC,GAAG,CACnCpC,KAAK,IAAK,WAAUqC,IAAI,CAACC,SAAS,CAACtC,KAAK,CAACuC,IAAI,CAAE,IAAGvC,KAAK,CAACwC,OAAQ,KACpE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;MACf;IACJ;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,mBAAmBA,CAAChC,IAAI,EAAEiC,MAAM,EAAEtB,OAAO,EAAEuB,MAAM,GAAG,IAAI,EAAE;IACtD,IAAI;MACA,MAAMtB,QAAQ,GAAG,IAAI,CAACF,oBAAoB,CAACC,OAAO,CAAC;MAEnD,IAAIC,QAAQ,KAAK,CAAC,EAAE;QAChB,IAAI,CAACM,kBAAkB,CAAClB,IAAI,EAAEG,KAAK,CAACC,OAAO,CAACO,OAAO,CAAC,GAAGA,OAAO,CAACwB,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;MACjF;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACV,MAAMC,eAAe,GAAI,2BAA0BJ,MAAO,kBAAiBG,GAAG,CAACN,OAAQ,EAAC;MAExF,IAAI,OAAOI,MAAM,KAAK,QAAQ,EAAE;QAC5B,MAAM,IAAInB,KAAK,CAAE,GAAEmB,MAAO,QAAOG,eAAgB,EAAC,CAAC;MACvD,CAAC,MAAM;QACH,MAAM,IAAItB,KAAK,CAACsB,eAAe,CAAC;MACpC;IACJ;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,mBAAmBA,CACfC,WAAW,EACXL,MAAM,EACNM,gBAAgB,GAAGvD,IAAI,EACzB;IAEE;IACA,IAAI,CAACsD,WAAW,EAAE;MACd;IACJ;IAEAE,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACI,OAAO,CAACC,EAAE,IAAI;MACnC,MAAMC,GAAG,GAAGL,gBAAgB,CAACI,EAAE,CAAC,IAAI/D,mBAAmB,CAAC2C,GAAG,CAACoB,EAAE,CAAC,IAAI,IAAI;MAEvE,IAAI,CAACC,GAAG,EAAE;QACN,MAAMf,OAAO,GAAI,GAAEI,MAAO,yBAAwBU,EAAG,gBAAe;QAEpE,MAAM,IAAI7B,KAAK,CAACe,OAAO,CAAC;MAC5B;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIgB,aAAaA,CACTC,WAAW,EACXb,MAAM,EACNc,iBAAiB,GAAG/D,IAAI,EAC1B;IACE,IAAI,CAAC8D,WAAW,EAAE;MACd;IACJ;IAEAN,MAAM,CAACC,IAAI,CAACK,WAAW,CAAC,CAACJ,OAAO,CAACC,EAAE,IAAI;MACnC,MAAM5C,IAAI,GAAGgD,iBAAiB,CAACJ,EAAE,CAAC,IAAI,IAAI,CAAC/C,YAAY,CAAC2B,GAAG,CAACoB,EAAE,CAAC,IAAI,IAAI;MAEvE,IAAI,CAACZ,mBAAmB,CAAChC,IAAI,EAAE4C,EAAE,EAAEG,WAAW,CAACH,EAAE,CAAC,EAAEV,MAAM,CAAC;IAC/D,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIe,eAAeA,CAACC,aAAa,EAAEhB,MAAM,GAAG,IAAI,EAAE;IAC1C,IAAI,CAACgB,aAAa,EAAE;MAChB;IACJ;IAEAT,MAAM,CAACU,OAAO,CAACD,aAAa,CAAC,CACxBP,OAAO,CAAC,CAAC,CAACS,gBAAgB,EAAEC,eAAe,CAAC,KAAK;MAC9C,IAAI;QACA5E,SAAS,CAAC6E,qBAAqB,CAACD,eAAe,CAAC;MACpD,CAAC,CAAC,OAAOjB,GAAG,EAAE;QACV,MAAM,IAAIrB,KAAK,CAAE,mCAAkCqC,gBAAiB,QAAOlB,MAAO,iBAAgBE,GAAG,CAACN,OAAQ,EAAC,CAAC;MACpH;IACJ,CAAC,CAAC;EACV;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIyB,iBAAiBA,CAACC,aAAa,EAAEtB,MAAM,EAAEuB,YAAY,EAAE;IACnD,IAAID,aAAa,IAAI,CAACC,YAAY,CAACD,aAAa,CAAC,EAAE;MAC/C,MAAM,IAAIzC,KAAK,CAAE,yCAAwCmB,MAAO,kBAAiBsB,aAAc,kBAAiB,CAAC;IACrH;EACJ;;EAEA;AACJ;AACA;AACA;AACA;EACIE,YAAYA,CAACjC,MAAM,EAAE;IACjB,OAAOA,MAAM,CAACC,GAAG,CAACpC,KAAK,IAAI;MACvB,IAAIA,KAAK,CAACqE,OAAO,KAAK,sBAAsB,EAAE;QAC1C,MAAMC,qBAAqB,GAAGtE,KAAK,CAACuE,QAAQ,CAACxD,MAAM,GAAI,GAAEf,KAAK,CAACuE,QAAQ,CAAC1B,KAAK,CAAC,CAAC,CAAE,IAAG7C,KAAK,CAACwE,MAAM,CAACC,kBAAmB,EAAC,GAAGzE,KAAK,CAACwE,MAAM,CAACC,kBAAkB;QAEvJ,OAAQ,kCAAiCH,qBAAsB,GAAE;MACrE;MACA,IAAItE,KAAK,CAACqE,OAAO,KAAK,MAAM,EAAE;QAC1B,MAAMK,cAAc,GAAG1E,KAAK,CAACuE,QAAQ,CAAC1B,KAAK,CAAC,CAAC,CAAC;QAC9C,MAAM8B,qBAAqB,GAAG9D,KAAK,CAACC,OAAO,CAACd,KAAK,CAACW,MAAM,CAAC,GAAGX,KAAK,CAACW,MAAM,CAAC8B,IAAI,CAAC,GAAG,CAAC,GAAGzC,KAAK,CAACW,MAAM;QACjG,MAAMiE,cAAc,GAAGvC,IAAI,CAACC,SAAS,CAACtC,KAAK,CAACuC,IAAI,CAAC;QAEjD,OAAQ,aAAYmC,cAAe,iCAAgCC,qBAAsB,cAAaC,cAAe,KAAI;MAC7H;MAEA,MAAMC,KAAK,GAAG7E,KAAK,CAACuE,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGvE,KAAK,CAACuE,QAAQ,CAAC1B,KAAK,CAAC,CAAC,CAAC,GAAG7C,KAAK,CAACuE,QAAQ;MAElF,OAAQ,IAAGM,KAAM,KAAI7E,KAAK,CAACwC,OAAQ,YAAWH,IAAI,CAACC,SAAS,CAACtC,KAAK,CAACuC,IAAI,CAAE,EAAC;IAC9E,CAAC,CAAC,CAACH,GAAG,CAACI,OAAO,IAAK,OAAMA,OAAQ,KAAI,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIqC,oBAAoBA,CAACC,MAAM,EAAEnC,MAAM,GAAG,IAAI,EAAE;IACxC9C,cAAc,GAAGA,cAAc,IAAIN,GAAG,CAACwC,OAAO,CAAC1C,YAAY,CAAC;IAE5D,IAAI,CAACQ,cAAc,CAACiF,MAAM,CAAC,EAAE;MACzB,MAAM,IAAItD,KAAK,CAAE,2BAA0BmB,MAAO,iBAAgB,IAAI,CAACwB,YAAY,CAACtE,cAAc,CAACqC,MAAM,CAAE,EAAC,CAAC;IACjH;IAEA,IAAIgB,MAAM,CAAC6B,cAAc,CAACC,IAAI,CAACF,MAAM,EAAE,cAAc,CAAC,EAAE;MACpD3F,sBAAsB,CAACwD,MAAM,EAAE,4BAA4B,CAAC;IAChE;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIsC,QAAQA,CAACH,MAAM,EAAEnC,MAAM,EAAEc,iBAAiB,EAAER,gBAAgB,EAAE;IAC1D,IAAI,CAAC4B,oBAAoB,CAACC,MAAM,EAAEnC,MAAM,CAAC;IACzC,IAAI,CAACY,aAAa,CAACuB,MAAM,CAACI,KAAK,EAAEvC,MAAM,EAAEc,iBAAiB,CAAC;IAC3D,IAAI,CAACV,mBAAmB,CAAC+B,MAAM,CAACxB,GAAG,EAAEX,MAAM,EAAEM,gBAAgB,CAAC;IAC9D,IAAI,CAACS,eAAe,CAACoB,MAAM,CAACK,OAAO,EAAExC,MAAM,CAAC;IAE5C,KAAK,MAAMyC,QAAQ,IAAIN,MAAM,CAACO,SAAS,IAAI,EAAE,EAAE;MAC3C,IAAI,CAAC9B,aAAa,CAAC6B,QAAQ,CAACF,KAAK,EAAEvC,MAAM,EAAEc,iBAAiB,CAAC;MAC7D,IAAI,CAACV,mBAAmB,CAACqC,QAAQ,CAAC9B,GAAG,EAAEX,MAAM,EAAEM,gBAAgB,CAAC;MAChE,IAAI,CAACS,eAAe,CAACoB,MAAM,CAACK,OAAO,EAAExC,MAAM,CAAC;IAChD;EACJ;;EAEA;AACJ;AACA;AACA;AACA;EACI2C,mBAAmBA,CAACC,WAAW,EAAE;IAC7B,MAAMC,YAAY,GAAGjF,GAAG,CAACX,SAAS,CAACqC,GAAG,CAACwD,IAAI,CAACF,WAAW,CAACG,kBAAkB,CAAC;IAC3E,MAAMC,kBAAkB,GAAGpF,GAAG,CAACX,SAAS,CAACqC,GAAG,CAACwD,IAAI,CAACF,WAAW,CAACK,gBAAgB,CAAC;IAC/E,MAAMC,aAAa,GAAGtF,GAAG,CAACX,SAAS,CAACqC,GAAG,CAACwD,IAAI,CAACF,WAAW,CAACO,WAAW,CAAC;;IAErE;IACA,KAAK,MAAMC,OAAO,IAAIR,WAAW,EAAE;MAC/B,IAAIrF,SAAS,CAAC2B,GAAG,CAACkE,OAAO,CAAC,EAAE;QACxB;MACJ;MACA7F,SAAS,CAAC8F,GAAG,CAACD,OAAO,CAAC;MAEtB,IAAI,CAAChD,mBAAmB,CAACgD,OAAO,CAACzC,GAAG,EAAEyC,OAAO,CAACE,IAAI,EAAET,YAAY,CAAC;MACjE,IAAI,CAAC9B,eAAe,CAACqC,OAAO,CAACZ,OAAO,EAAEY,OAAO,CAACE,IAAI,CAAC;MACnD,IAAI,CAACjC,iBAAiB,CAAC+B,OAAO,CAACG,SAAS,EAAEH,OAAO,CAACE,IAAI,EAAEN,kBAAkB,CAAC;MAC3E,IAAI,CAACpC,aAAa,CAACwC,OAAO,CAACb,KAAK,EAAEa,OAAO,CAACE,IAAI,EAAEJ,aAAa,CAAC;IAClE;EACJ;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}