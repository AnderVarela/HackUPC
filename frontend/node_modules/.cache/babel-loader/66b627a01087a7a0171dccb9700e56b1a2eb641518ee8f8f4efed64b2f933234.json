{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildCheckInRHS = buildCheckInRHS;\nexports.buildFieldsInitNodes = buildFieldsInitNodes;\nexports.buildPrivateNamesMap = buildPrivateNamesMap;\nexports.buildPrivateNamesNodes = buildPrivateNamesNodes;\nexports.privateNameVisitorFactory = privateNameVisitorFactory;\nexports.transformPrivateNamesUsage = transformPrivateNamesUsage;\nvar _core = require(\"@babel/core\");\nvar _helperReplaceSupers = require(\"@babel/helper-replace-supers\");\nvar _helperEnvironmentVisitor = require(\"@babel/helper-environment-visitor\");\nvar _helperMemberExpressionToFunctions = require(\"@babel/helper-member-expression-to-functions\");\nvar _helperOptimiseCallExpression = require(\"@babel/helper-optimise-call-expression\");\nvar _helperAnnotateAsPure = require(\"@babel/helper-annotate-as-pure\");\nvar _helperSkipTransparentExpressionWrappers = require(\"@babel/helper-skip-transparent-expression-wrappers\");\nvar ts = require(\"./typescript.js\");\n{\n  var newHelpers = file => {\n    ;\n    return file.availableHelper(\"classPrivateFieldGet2\");\n  };\n}\nfunction buildPrivateNamesMap(className, privateFieldsAsSymbolsOrProperties, props, file) {\n  const privateNamesMap = new Map();\n  let classBrandId;\n  for (const prop of props) {\n    if (prop.isPrivate()) {\n      const {\n        name\n      } = prop.node.key.id;\n      let update = privateNamesMap.get(name);\n      if (!update) {\n        const isMethod = !prop.isProperty();\n        const isStatic = prop.node.static;\n        let initAdded = false;\n        let id;\n        if (!privateFieldsAsSymbolsOrProperties && newHelpers(file) && isMethod && !isStatic) {\n          var _classBrandId;\n          initAdded = !!classBrandId;\n          (_classBrandId = classBrandId) != null ? _classBrandId : classBrandId = prop.scope.generateUidIdentifier(`${className}_brand`);\n          id = classBrandId;\n        } else {\n          id = prop.scope.generateUidIdentifier(name);\n        }\n        update = {\n          id,\n          static: isStatic,\n          method: isMethod,\n          initAdded\n        };\n        privateNamesMap.set(name, update);\n      }\n      if (prop.isClassPrivateMethod()) {\n        if (prop.node.kind === \"get\") {\n          const {\n            body\n          } = prop.node.body;\n          let $;\n          if (body.length === 1 && _core.types.isReturnStatement($ = body[0]) && _core.types.isCallExpression($ = $.argument) && $.arguments.length === 1 && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($ = $.callee)) {\n            update.getId = _core.types.cloneNode($);\n            update.getterDeclared = true;\n          } else {\n            update.getId = prop.scope.generateUidIdentifier(`get_${name}`);\n          }\n        } else if (prop.node.kind === \"set\") {\n          const {\n            params\n          } = prop.node;\n          const {\n            body\n          } = prop.node.body;\n          let $;\n          if (body.length === 1 && _core.types.isExpressionStatement($ = body[0]) && _core.types.isCallExpression($ = $.expression) && $.arguments.length === 2 && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($.arguments[1], {\n            name: params[0].name\n          }) && _core.types.isIdentifier($ = $.callee)) {\n            update.setId = _core.types.cloneNode($);\n            update.setterDeclared = true;\n          } else {\n            update.setId = prop.scope.generateUidIdentifier(`set_${name}`);\n          }\n        } else if (prop.node.kind === \"method\") {\n          update.methodId = prop.scope.generateUidIdentifier(name);\n        }\n      }\n      privateNamesMap.set(name, update);\n    }\n  }\n  return privateNamesMap;\n}\nfunction buildPrivateNamesNodes(privateNamesMap, privateFieldsAsProperties, privateFieldsAsSymbols, state) {\n  const initNodes = [];\n  const injectedIds = new Set();\n  for (const [name, value] of privateNamesMap) {\n    const {\n      static: isStatic,\n      method: isMethod,\n      getId,\n      setId\n    } = value;\n    const isGetterOrSetter = getId || setId;\n    const id = _core.types.cloneNode(value.id);\n    let init;\n    if (privateFieldsAsProperties) {\n      init = _core.types.callExpression(state.addHelper(\"classPrivateFieldLooseKey\"), [_core.types.stringLiteral(name)]);\n    } else if (privateFieldsAsSymbols) {\n      init = _core.types.callExpression(_core.types.identifier(\"Symbol\"), [_core.types.stringLiteral(name)]);\n    } else if (!isStatic) {\n      if (injectedIds.has(id.name)) continue;\n      injectedIds.add(id.name);\n      init = _core.types.newExpression(_core.types.identifier(isMethod && (!isGetterOrSetter || newHelpers(state)) ? \"WeakSet\" : \"WeakMap\"), []);\n    }\n    if (init) {\n      if (!privateFieldsAsSymbols) {\n        (0, _helperAnnotateAsPure.default)(init);\n      }\n      initNodes.push(_core.template.statement.ast`var ${id} = ${init}`);\n    }\n  }\n  return initNodes;\n}\nfunction privateNameVisitorFactory(visitor) {\n  const nestedVisitor = _core.traverse.visitors.merge([Object.assign({}, visitor), _helperEnvironmentVisitor.default]);\n  const privateNameVisitor = Object.assign({}, visitor, {\n    Class(path) {\n      const {\n        privateNamesMap\n      } = this;\n      const body = path.get(\"body.body\");\n      const visiblePrivateNames = new Map(privateNamesMap);\n      const redeclared = [];\n      for (const prop of body) {\n        if (!prop.isPrivate()) continue;\n        const {\n          name\n        } = prop.node.key.id;\n        visiblePrivateNames.delete(name);\n        redeclared.push(name);\n      }\n      if (!redeclared.length) {\n        return;\n      }\n      path.get(\"body\").traverse(nestedVisitor, Object.assign({}, this, {\n        redeclared\n      }));\n      path.traverse(privateNameVisitor, Object.assign({}, this, {\n        privateNamesMap: visiblePrivateNames\n      }));\n      path.skipKey(\"body\");\n    }\n  });\n  return privateNameVisitor;\n}\nconst privateNameVisitor = privateNameVisitorFactory({\n  PrivateName(path, {\n    noDocumentAll\n  }) {\n    const {\n      privateNamesMap,\n      redeclared\n    } = this;\n    const {\n      node,\n      parentPath\n    } = path;\n    if (!parentPath.isMemberExpression({\n      property: node\n    }) && !parentPath.isOptionalMemberExpression({\n      property: node\n    })) {\n      return;\n    }\n    const {\n      name\n    } = node.id;\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n    this.handle(parentPath, noDocumentAll);\n  }\n});\nfunction unshadow(name, scope, innerBinding) {\n  while ((_scope = scope) != null && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding)) {\n    var _scope;\n    scope.rename(name);\n    scope = scope.parent;\n  }\n}\nfunction buildCheckInRHS(rhs, file, inRHSIsObject) {\n  if (inRHSIsObject || !(file.availableHelper != null && file.availableHelper(\"checkInRHS\"))) return rhs;\n  return _core.types.callExpression(file.addHelper(\"checkInRHS\"), [rhs]);\n}\nconst privateInVisitor = privateNameVisitorFactory({\n  BinaryExpression(path, {\n    file\n  }) {\n    const {\n      operator,\n      left,\n      right\n    } = path.node;\n    if (operator !== \"in\") return;\n    if (!_core.types.isPrivateName(left)) return;\n    const {\n      privateFieldsAsProperties,\n      privateNamesMap,\n      redeclared\n    } = this;\n    const {\n      name\n    } = left.id;\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n    unshadow(this.classRef.name, path.scope, this.innerBinding);\n    if (privateFieldsAsProperties) {\n      const {\n        id\n      } = privateNamesMap.get(name);\n      path.replaceWith(_core.template.expression.ast`\n        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right, file)}, ${_core.types.cloneNode(id)})\n      `);\n      return;\n    }\n    const {\n      id,\n      static: isStatic\n    } = privateNamesMap.get(name);\n    if (isStatic) {\n      path.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right, file)} === ${_core.types.cloneNode(this.classRef)}`);\n      return;\n    }\n    path.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right, file)})`);\n  }\n});\nfunction readOnlyError(file, name) {\n  return _core.types.callExpression(file.addHelper(\"readOnlyError\"), [_core.types.stringLiteral(`#${name}`)]);\n}\nfunction writeOnlyError(file, name) {\n  if (!file.availableHelper(\"writeOnlyError\")) {\n    console.warn(`@babel/helpers is outdated, update it to silence this warning.`);\n    return _core.types.buildUndefinedNode();\n  }\n  return _core.types.callExpression(file.addHelper(\"writeOnlyError\"), [_core.types.stringLiteral(`#${name}`)]);\n}\nfunction buildStaticPrivateFieldAccess(expr, noUninitializedPrivateFieldAccess) {\n  if (noUninitializedPrivateFieldAccess) return expr;\n  return _core.types.memberExpression(expr, _core.types.identifier(\"_\"));\n}\nconst privateNameHandlerSpec = {\n  memoise(member, count) {\n    const {\n      scope\n    } = member;\n    const {\n      object\n    } = member.node;\n    const memo = scope.maybeGenerateMemoised(object);\n    if (!memo) {\n      return;\n    }\n    this.memoiser.set(object, memo, count);\n  },\n  receiver(member) {\n    const {\n      object\n    } = member.node;\n    if (this.memoiser.has(object)) {\n      return _core.types.cloneNode(this.memoiser.get(object));\n    }\n    return _core.types.cloneNode(object);\n  },\n  get(member) {\n    const {\n      classRef,\n      privateNamesMap,\n      file,\n      innerBinding,\n      noUninitializedPrivateFieldAccess\n    } = this;\n    const {\n      name\n    } = member.node.property.id;\n    const {\n      id,\n      static: isStatic,\n      method: isMethod,\n      methodId,\n      getId,\n      setId\n    } = privateNamesMap.get(name);\n    const isGetterOrSetter = getId || setId;\n    if (isStatic) {\n      unshadow(classRef.name, member.scope, innerBinding);\n      if (!newHelpers(file)) {\n        const helperName = isMethod && !isGetterOrSetter ? \"classStaticPrivateMethodGet\" : \"classStaticPrivateFieldSpecGet\";\n        return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]);\n      }\n      const receiver = this.receiver(member);\n      const skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;\n      if (!isMethod) {\n        if (skipCheck) {\n          return buildStaticPrivateFieldAccess(_core.types.cloneNode(id), noUninitializedPrivateFieldAccess);\n        }\n        return buildStaticPrivateFieldAccess(_core.types.callExpression(file.addHelper(\"assertClassBrand\"), [_core.types.cloneNode(classRef), receiver, _core.types.cloneNode(id)]), noUninitializedPrivateFieldAccess);\n      }\n      if (getId) {\n        if (skipCheck) {\n          return _core.types.callExpression(_core.types.cloneNode(getId), [receiver]);\n        }\n        return _core.types.callExpression(file.addHelper(\"classPrivateGetter\"), [_core.types.cloneNode(classRef), receiver, _core.types.cloneNode(getId)]);\n      }\n      if (setId) {\n        const err = _core.types.buildUndefinedNode();\n        if (skipCheck) return err;\n        return _core.types.sequenceExpression([_core.types.callExpression(file.addHelper(\"assertClassBrand\"), [_core.types.cloneNode(classRef), receiver]), err]);\n      }\n      if (skipCheck) return _core.types.cloneNode(id);\n      return _core.types.callExpression(file.addHelper(\"assertClassBrand\"), [_core.types.cloneNode(classRef), receiver, _core.types.cloneNode(id)]);\n    }\n    if (isMethod) {\n      if (isGetterOrSetter) {\n        if (!getId) {\n          return _core.types.sequenceExpression([this.receiver(member), writeOnlyError(file, name)]);\n        }\n        if (!newHelpers(file)) {\n          return _core.types.callExpression(file.addHelper(\"classPrivateFieldGet\"), [this.receiver(member), _core.types.cloneNode(id)]);\n        }\n        return _core.types.callExpression(file.addHelper(\"classPrivateGetter\"), [_core.types.cloneNode(id), this.receiver(member), _core.types.cloneNode(getId)]);\n      }\n      if (!newHelpers(file)) {\n        return _core.types.callExpression(file.addHelper(\"classPrivateMethodGet\"), [this.receiver(member), _core.types.cloneNode(id), _core.types.cloneNode(methodId)]);\n      }\n      return _core.types.callExpression(file.addHelper(\"assertClassBrand\"), [_core.types.cloneNode(id), this.receiver(member), _core.types.cloneNode(methodId)]);\n    }\n    if (newHelpers(file)) {\n      return _core.types.callExpression(file.addHelper(\"classPrivateFieldGet2\"), [_core.types.cloneNode(id), this.receiver(member)]);\n    }\n    return _core.types.callExpression(file.addHelper(\"classPrivateFieldGet\"), [this.receiver(member), _core.types.cloneNode(id)]);\n  },\n  boundGet(member) {\n    this.memoise(member, 1);\n    return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier(\"bind\")), [this.receiver(member)]);\n  },\n  set(member, value) {\n    const {\n      classRef,\n      privateNamesMap,\n      file,\n      noUninitializedPrivateFieldAccess\n    } = this;\n    const {\n      name\n    } = member.node.property.id;\n    const {\n      id,\n      static: isStatic,\n      method: isMethod,\n      setId,\n      getId\n    } = privateNamesMap.get(name);\n    const isGetterOrSetter = getId || setId;\n    if (isStatic) {\n      if (!newHelpers(file)) {\n        const helperName = isMethod && !isGetterOrSetter ? \"classStaticPrivateMethodSet\" : \"classStaticPrivateFieldSpecSet\";\n        return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id), value]);\n      }\n      const receiver = this.receiver(member);\n      const skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;\n      if (isMethod && !setId) {\n        const err = readOnlyError(file, name);\n        if (skipCheck) return _core.types.sequenceExpression([value, err]);\n        return _core.types.sequenceExpression([value, _core.types.callExpression(file.addHelper(\"assertClassBrand\"), [_core.types.cloneNode(classRef), receiver]), readOnlyError(file, name)]);\n      }\n      if (setId) {\n        if (skipCheck) {\n          return _core.types.callExpression(_core.types.cloneNode(setId), [receiver, value]);\n        }\n        return _core.types.callExpression(file.addHelper(\"classPrivateSetter\"), [_core.types.cloneNode(classRef), _core.types.cloneNode(setId), receiver, value]);\n      }\n      return _core.types.assignmentExpression(\"=\", buildStaticPrivateFieldAccess(_core.types.cloneNode(id), noUninitializedPrivateFieldAccess), skipCheck ? value : _core.types.callExpression(file.addHelper(\"assertClassBrand\"), [_core.types.cloneNode(classRef), receiver, value]));\n    }\n    if (isMethod) {\n      if (setId) {\n        if (!newHelpers(file)) {\n          return _core.types.callExpression(file.addHelper(\"classPrivateFieldSet\"), [this.receiver(member), _core.types.cloneNode(id), value]);\n        }\n        return _core.types.callExpression(file.addHelper(\"classPrivateSetter\"), [_core.types.cloneNode(id), _core.types.cloneNode(setId), this.receiver(member), value]);\n      }\n      return _core.types.sequenceExpression([this.receiver(member), value, readOnlyError(file, name)]);\n    }\n    if (newHelpers(file)) {\n      return _core.types.callExpression(file.addHelper(\"classPrivateFieldSet2\"), [_core.types.cloneNode(id), this.receiver(member), value]);\n    }\n    return _core.types.callExpression(file.addHelper(\"classPrivateFieldSet\"), [this.receiver(member), _core.types.cloneNode(id), value]);\n  },\n  destructureSet(member) {\n    const {\n      classRef,\n      privateNamesMap,\n      file,\n      noUninitializedPrivateFieldAccess\n    } = this;\n    const {\n      name\n    } = member.node.property.id;\n    const {\n      id,\n      static: isStatic,\n      method: isMethod,\n      setId\n    } = privateNamesMap.get(name);\n    if (!newHelpers(file)) {\n      if (isStatic) {\n        try {\n          var helper = file.addHelper(\"classStaticPrivateFieldDestructureSet\");\n        } catch (_unused) {\n          throw new Error(\"Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \\n\" + \"please update @babel/helpers to the latest version.\");\n        }\n        return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]), _core.types.identifier(\"value\"));\n      }\n      return _core.types.memberExpression(_core.types.callExpression(file.addHelper(\"classPrivateFieldDestructureSet\"), [this.receiver(member), _core.types.cloneNode(id)]), _core.types.identifier(\"value\"));\n    }\n    if (isMethod && !setId) {\n      return _core.types.memberExpression(_core.types.sequenceExpression([member.node.object, readOnlyError(file, name)]), _core.types.identifier(\"_\"));\n    }\n    if (isStatic && !isMethod) {\n      const getCall = this.get(member);\n      if (!noUninitializedPrivateFieldAccess || !_core.types.isCallExpression(getCall)) {\n        return getCall;\n      }\n      const ref = getCall.arguments.pop();\n      getCall.arguments.push(_core.template.expression.ast`(_) => ${ref} = _`);\n      return _core.types.memberExpression(_core.types.callExpression(file.addHelper(\"toSetter\"), [getCall]), _core.types.identifier(\"_\"));\n    }\n    const setCall = this.set(member, _core.types.identifier(\"_\"));\n    if (!_core.types.isCallExpression(setCall) || !_core.types.isIdentifier(setCall.arguments[setCall.arguments.length - 1], {\n      name: \"_\"\n    })) {\n      throw member.buildCodeFrameError(\"Internal Babel error while compiling this code. This is a Babel bug. \" + \"Please report it at https://github.com/babel/babel/issues.\");\n    }\n    let args;\n    if (_core.types.isMemberExpression(setCall.callee, {\n      computed: false\n    }) && _core.types.isIdentifier(setCall.callee.property) && setCall.callee.property.name === \"call\") {\n      args = [setCall.callee.object, _core.types.arrayExpression(setCall.arguments.slice(1, -1)), setCall.arguments[0]];\n    } else {\n      args = [setCall.callee, _core.types.arrayExpression(setCall.arguments.slice(0, -1))];\n    }\n    return _core.types.memberExpression(_core.types.callExpression(file.addHelper(\"toSetter\"), args), _core.types.identifier(\"_\"));\n  },\n  call(member, args) {\n    this.memoise(member, 1);\n    return (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);\n  },\n  optionalCall(member, args) {\n    this.memoise(member, 1);\n    return (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);\n  },\n  delete() {\n    throw new Error(\"Internal Babel error: deleting private elements is a parsing error.\");\n  }\n};\nconst privateNameHandlerLoose = {\n  get(member) {\n    const {\n      privateNamesMap,\n      file\n    } = this;\n    const {\n      object\n    } = member.node;\n    const {\n      name\n    } = member.node.property.id;\n    return _core.template.expression`BASE(REF, PROP)[PROP]`({\n      BASE: file.addHelper(\"classPrivateFieldLooseBase\"),\n      REF: _core.types.cloneNode(object),\n      PROP: _core.types.cloneNode(privateNamesMap.get(name).id)\n    });\n  },\n  set() {\n    throw new Error(\"private name handler with loose = true don't need set()\");\n  },\n  boundGet(member) {\n    return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier(\"bind\")), [_core.types.cloneNode(member.node.object)]);\n  },\n  simpleSet(member) {\n    return this.get(member);\n  },\n  destructureSet(member) {\n    return this.get(member);\n  },\n  call(member, args) {\n    return _core.types.callExpression(this.get(member), args);\n  },\n  optionalCall(member, args) {\n    return _core.types.optionalCallExpression(this.get(member), args, true);\n  },\n  delete() {\n    throw new Error(\"Internal Babel error: deleting private elements is a parsing error.\");\n  }\n};\nfunction transformPrivateNamesUsage(ref, path, privateNamesMap, {\n  privateFieldsAsProperties,\n  noUninitializedPrivateFieldAccess,\n  noDocumentAll,\n  innerBinding\n}, state) {\n  if (!privateNamesMap.size) return;\n  const body = path.get(\"body\");\n  const handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;\n  (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({\n    privateNamesMap,\n    classRef: ref,\n    file: state\n  }, handler, {\n    noDocumentAll,\n    noUninitializedPrivateFieldAccess,\n    innerBinding\n  }));\n  body.traverse(privateInVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    privateFieldsAsProperties,\n    innerBinding\n  });\n}\nfunction buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {\n  const {\n    id\n  } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  return inheritPropComments(_core.template.statement.ast`\n      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {\n        // configurable is false by default\n        // enumerable is false by default\n        writable: true,\n        value: ${value}\n      });\n    `, prop);\n}\nfunction buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state) {\n  const {\n    id\n  } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {\n          // configurable is always false for private elements\n          // enumerable is always false for private elements\n          writable: true,\n          value: ${value},\n        })`, prop);\n    }\n  }\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(helper, [_core.types.thisExpression(), _core.types.cloneNode(id), newHelpers(state) ? value : _core.template.expression.ast`{ writable: true, value: ${value} }`])), prop);\n}\nfunction buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const value = noUninitializedPrivateFieldAccess ? prop.node.value : _core.template.expression.ast`{\n        _: ${prop.node.value || _core.types.buildUndefinedNode()}\n      }`;\n  return inheritPropComments(_core.types.variableDeclaration(\"var\", [_core.types.variableDeclarator(_core.types.cloneNode(privateName.id), value)]), prop);\n}\n{\n  var buildPrivateStaticFieldInitSpecOld = function (prop, privateNamesMap) {\n    const privateName = privateNamesMap.get(prop.node.key.id.name);\n    const {\n      id,\n      getId,\n      setId,\n      initAdded\n    } = privateName;\n    const isGetterOrSetter = getId || setId;\n    if (!prop.isProperty() && (initAdded || !isGetterOrSetter)) return;\n    if (isGetterOrSetter) {\n      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n        initAdded: true\n      }));\n      return inheritPropComments(_core.template.statement.ast`\n          var ${_core.types.cloneNode(id)} = {\n            // configurable is false by default\n            // enumerable is false by default\n            // writable is false by default\n            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n          }\n        `, prop);\n    }\n    const value = prop.node.value || prop.scope.buildUndefinedNode();\n    return inheritPropComments(_core.template.statement.ast`\n        var ${_core.types.cloneNode(id)} = {\n          // configurable is false by default\n          // enumerable is false by default\n          writable: true,\n          value: ${value}\n        };\n      `, prop);\n  };\n}\nfunction buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    methodId,\n    id,\n    getId,\n    setId,\n    initAdded\n  } = privateName;\n  if (initAdded) return;\n  if (methodId) {\n    return inheritPropComments(_core.template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          value: ${methodId.name}\n        });\n      `, prop);\n  }\n  const isGetterOrSetter = getId || setId;\n  if (isGetterOrSetter) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      initAdded: true\n    }));\n    return inheritPropComments(_core.template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n        });\n      `, prop);\n  }\n}\nfunction buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  if (privateName.initAdded) return;\n  if (!newHelpers(state)) {\n    const isGetterOrSetter = privateName.getId || privateName.setId;\n    if (isGetterOrSetter) {\n      return buildPrivateAccessorInitialization(ref, prop, privateNamesMap, state);\n    }\n  }\n  return buildPrivateInstanceMethodInitialization(ref, prop, privateNamesMap, state);\n}\nfunction buildPrivateAccessorInitialization(ref, prop, privateNamesMap, state) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    getId,\n    setId\n  } = privateName;\n  privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n    initAdded: true\n  }));\n  {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return inheritPropComments(_core.template.statement.ast`\n          ${id}.set(${ref}, {\n            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n          });\n        `, prop);\n    }\n  }\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return inheritPropComments(_core.template.statement.ast`${helper}(\n      ${_core.types.thisExpression()},\n      ${_core.types.cloneNode(id)},\n      {\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      },\n    )`, prop);\n}\nfunction buildPrivateInstanceMethodInitialization(ref, prop, privateNamesMap, state) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id\n  } = privateName;\n  {\n    if (!state.availableHelper(\"classPrivateMethodInitSpec\")) {\n      return inheritPropComments(_core.template.statement.ast`${id}.add(${ref})`, prop);\n    }\n  }\n  const helper = state.addHelper(\"classPrivateMethodInitSpec\");\n  return inheritPropComments(_core.template.statement.ast`${helper}(\n      ${_core.types.thisExpression()},\n      ${_core.types.cloneNode(id)}\n    )`, prop);\n}\nfunction buildPublicFieldInitLoose(ref, prop) {\n  const {\n    key,\n    computed\n  } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression(\"=\", _core.types.memberExpression(ref, key, computed || _core.types.isLiteral(key)), value)), prop);\n}\nfunction buildPublicFieldInitSpec(ref, prop, state) {\n  const {\n    key,\n    computed\n  } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state.addHelper(\"defineProperty\"), [ref, computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name), value])), prop);\n}\nfunction buildPrivateStaticMethodInitLoose(ref, prop, state, privateNamesMap) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    methodId,\n    getId,\n    setId,\n    initAdded\n  } = privateName;\n  if (initAdded) return;\n  const isGetterOrSetter = getId || setId;\n  if (isGetterOrSetter) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      initAdded: true\n    }));\n    return inheritPropComments(_core.template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n        })\n      `, prop);\n  }\n  return inheritPropComments(_core.template.statement.ast`\n      Object.defineProperty(${ref}, ${id}, {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        value: ${methodId.name}\n      });\n    `, prop);\n}\nfunction buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties = false) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    methodId,\n    getId,\n    setId,\n    getterDeclared,\n    setterDeclared,\n    static: isStatic\n  } = privateName;\n  const {\n    params,\n    body,\n    generator,\n    async\n  } = prop.node;\n  const isGetter = getId && params.length === 0;\n  const isSetter = setId && params.length > 0;\n  if (isGetter && getterDeclared || isSetter && setterDeclared) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      initAdded: true\n    }));\n    return null;\n  }\n  if (newHelpers(file) && (isGetter || isSetter) && !privateFieldsAsSymbolsOrProperties) {\n    const scope = prop.get(\"body\").scope;\n    const thisArg = scope.generateUidIdentifier(\"this\");\n    const state = {\n      thisRef: thisArg,\n      argumentsPath: []\n    };\n    prop.traverse(thisContextVisitor, state);\n    if (state.argumentsPath.length) {\n      const argumentsId = scope.generateUidIdentifier(\"arguments\");\n      scope.push({\n        id: argumentsId,\n        init: _core.template.expression.ast`[].slice.call(arguments, 1)`\n      });\n      for (const path of state.argumentsPath) {\n        path.replaceWith(_core.types.cloneNode(argumentsId));\n      }\n    }\n    params.unshift(_core.types.cloneNode(thisArg));\n  }\n  let declId = methodId;\n  if (isGetter) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      getterDeclared: true,\n      initAdded: true\n    }));\n    declId = getId;\n  } else if (isSetter) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      setterDeclared: true,\n      initAdded: true\n    }));\n    declId = setId;\n  } else if (isStatic && !privateFieldsAsSymbolsOrProperties) {\n    declId = id;\n  }\n  return inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async), prop);\n}\nconst thisContextVisitor = _core.traverse.visitors.merge([{\n  Identifier(path, state) {\n    if (state.argumentsPath && path.node.name === \"arguments\") {\n      state.argumentsPath.push(path);\n    }\n  },\n  UnaryExpression(path) {\n    const {\n      node\n    } = path;\n    if (node.operator === \"delete\") {\n      const argument = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(node.argument);\n      if (_core.types.isThisExpression(argument)) {\n        path.replaceWith(_core.types.booleanLiteral(true));\n      }\n    }\n  },\n  ThisExpression(path, state) {\n    state.needsClassRef = true;\n    path.replaceWith(_core.types.cloneNode(state.thisRef));\n  },\n  MetaProperty(path) {\n    const {\n      node,\n      scope\n    } = path;\n    if (node.meta.name === \"new\" && node.property.name === \"target\") {\n      path.replaceWith(scope.buildUndefinedNode());\n    }\n  }\n}, _helperEnvironmentVisitor.default]);\nconst innerReferencesVisitor = {\n  ReferencedIdentifier(path, state) {\n    if (path.scope.bindingIdentifierEquals(path.node.name, state.innerBinding)) {\n      state.needsClassRef = true;\n      path.node.name = state.thisRef.name;\n    }\n  }\n};\nfunction replaceThisContext(path, ref, innerBindingRef) {\n  var _state$thisRef;\n  const state = {\n    thisRef: ref,\n    needsClassRef: false,\n    innerBinding: innerBindingRef\n  };\n  if (!path.isMethod()) {\n    path.traverse(thisContextVisitor, state);\n  }\n  if (innerBindingRef != null && (_state$thisRef = state.thisRef) != null && _state$thisRef.name && state.thisRef.name !== innerBindingRef.name) {\n    path.traverse(innerReferencesVisitor, state);\n  }\n  return state.needsClassRef;\n}\nfunction isNameOrLength({\n  key,\n  computed\n}) {\n  if (key.type === \"Identifier\") {\n    return !computed && (key.name === \"name\" || key.name === \"length\");\n  }\n  if (key.type === \"StringLiteral\") {\n    return key.value === \"name\" || key.value === \"length\";\n  }\n  return false;\n}\nfunction inheritPropComments(node, prop) {\n  _core.types.inheritLeadingComments(node, prop.node);\n  _core.types.inheritInnerComments(node, prop.node);\n  return node;\n}\nfunction buildFieldsInitNodes(ref, superRef, props, privateNamesMap, file, setPublicClassFields, privateFieldsAsSymbolsOrProperties, noUninitializedPrivateFieldAccess, constantSuper, innerBindingRef) {\n  var _ref, _ref2;\n  let classRefFlags = 0;\n  let injectSuperRef;\n  const staticNodes = [];\n  const instanceNodes = [];\n  let lastInstanceNodeReturnsThis = false;\n  const pureStaticNodes = [];\n  let classBindingNode = null;\n  const getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => {\n    var _injectSuperRef;\n    (_injectSuperRef = injectSuperRef) != null ? _injectSuperRef : injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef);\n    return injectSuperRef;\n  };\n  const classRefForInnerBinding = (_ref = ref) != null ? _ref : props[0].scope.generateUidIdentifier((innerBindingRef == null ? void 0 : innerBindingRef.name) || \"Class\");\n  (_ref2 = ref) != null ? _ref2 : ref = _core.types.cloneNode(innerBindingRef);\n  for (const prop of props) {\n    prop.isClassProperty() && ts.assertFieldTransformed(prop);\n    const isStatic = !(_core.types.isStaticBlock != null && _core.types.isStaticBlock(prop.node)) && prop.node.static;\n    const isInstance = !isStatic;\n    const isPrivate = prop.isPrivate();\n    const isPublic = !isPrivate;\n    const isField = prop.isProperty();\n    const isMethod = !isField;\n    const isStaticBlock = prop.isStaticBlock == null ? void 0 : prop.isStaticBlock();\n    if (isStatic) classRefFlags |= 1;\n    if (isStatic || isMethod && isPrivate || isStaticBlock) {\n      new _helperReplaceSupers.default({\n        methodPath: prop,\n        constantSuper,\n        file: file,\n        refToPreserve: innerBindingRef,\n        getSuperRef,\n        getObjectRef() {\n          classRefFlags |= 2;\n          if (isStatic || isStaticBlock) {\n            return classRefForInnerBinding;\n          } else {\n            return _core.types.memberExpression(classRefForInnerBinding, _core.types.identifier(\"prototype\"));\n          }\n        }\n      }).replace();\n      const replaced = replaceThisContext(prop, classRefForInnerBinding, innerBindingRef);\n      if (replaced) {\n        classRefFlags |= 2;\n      }\n    }\n    lastInstanceNodeReturnsThis = false;\n    switch (true) {\n      case isStaticBlock:\n        {\n          const blockBody = prop.node.body;\n          if (blockBody.length === 1 && _core.types.isExpressionStatement(blockBody[0])) {\n            staticNodes.push(inheritPropComments(blockBody[0], prop));\n          } else {\n            staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`, prop.node));\n          }\n          break;\n        }\n      case isStatic && isPrivate && isField && privateFieldsAsSymbolsOrProperties:\n        staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));\n        break;\n      case isStatic && isPrivate && isField && !privateFieldsAsSymbolsOrProperties:\n        if (!newHelpers(file)) {\n          staticNodes.push(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));\n        } else {\n          staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess));\n        }\n        break;\n      case isStatic && isPublic && isField && setPublicClassFields:\n        if (!isNameOrLength(prop.node)) {\n          staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));\n          break;\n        }\n      case isStatic && isPublic && isField && !setPublicClassFields:\n        staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, file));\n        break;\n      case isInstance && isPrivate && isField && privateFieldsAsSymbolsOrProperties:\n        instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));\n        break;\n      case isInstance && isPrivate && isField && !privateFieldsAsSymbolsOrProperties:\n        instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file));\n        break;\n      case isInstance && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties:\n        instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap));\n        pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));\n        break;\n      case isInstance && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties:\n        instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file));\n        pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));\n        break;\n      case isStatic && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties:\n        if (!newHelpers(file)) {\n          staticNodes.unshift(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));\n        }\n        pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));\n        break;\n      case isStatic && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties:\n        staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, file, privateNamesMap));\n        pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));\n        break;\n      case isInstance && isPublic && isField && setPublicClassFields:\n        instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));\n        break;\n      case isInstance && isPublic && isField && !setPublicClassFields:\n        lastInstanceNodeReturnsThis = true;\n        instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, file));\n        break;\n      default:\n        throw new Error(\"Unreachable.\");\n    }\n  }\n  if (classRefFlags & 2 && innerBindingRef != null) {\n    classBindingNode = _core.types.expressionStatement(_core.types.assignmentExpression(\"=\", _core.types.cloneNode(classRefForInnerBinding), _core.types.cloneNode(innerBindingRef)));\n  }\n  return {\n    staticNodes: staticNodes.filter(Boolean),\n    instanceNodes: instanceNodes.filter(Boolean),\n    lastInstanceNodeReturnsThis,\n    pureStaticNodes: pureStaticNodes.filter(Boolean),\n    classBindingNode,\n    wrapClass(path) {\n      for (const prop of props) {\n        prop.node.leadingComments = null;\n        prop.remove();\n      }\n      if (injectSuperRef) {\n        path.scope.push({\n          id: _core.types.cloneNode(injectSuperRef)\n        });\n        path.set(\"superClass\", _core.types.assignmentExpression(\"=\", injectSuperRef, path.node.superClass));\n      }\n      if (classRefFlags !== 0) {\n        if (path.isClassExpression()) {\n          path.scope.push({\n            id: ref\n          });\n          path.replaceWith(_core.types.assignmentExpression(\"=\", _core.types.cloneNode(ref), path.node));\n        } else {\n          if (innerBindingRef == null) {\n            path.node.id = ref;\n          }\n          if (classBindingNode != null) {\n            path.scope.push({\n              id: classRefForInnerBinding\n            });\n          }\n        }\n      }\n      return path;\n    }\n  };\n}","map":{"version":3,"names":["_core","require","_helperReplaceSupers","_helperEnvironmentVisitor","_helperMemberExpressionToFunctions","_helperOptimiseCallExpression","_helperAnnotateAsPure","_helperSkipTransparentExpressionWrappers","ts","newHelpers","file","availableHelper","buildPrivateNamesMap","className","privateFieldsAsSymbolsOrProperties","props","privateNamesMap","Map","classBrandId","prop","isPrivate","name","node","key","id","update","get","isMethod","isProperty","isStatic","static","initAdded","_classBrandId","scope","generateUidIdentifier","method","set","isClassPrivateMethod","kind","body","$","length","types","isReturnStatement","isCallExpression","argument","arguments","isThisExpression","isIdentifier","callee","getId","cloneNode","getterDeclared","params","isExpressionStatement","expression","setId","setterDeclared","methodId","buildPrivateNamesNodes","privateFieldsAsProperties","privateFieldsAsSymbols","state","initNodes","injectedIds","Set","value","isGetterOrSetter","init","callExpression","addHelper","stringLiteral","identifier","has","add","newExpression","default","push","template","statement","ast","privateNameVisitorFactory","visitor","nestedVisitor","traverse","visitors","merge","Object","assign","privateNameVisitor","Class","path","visiblePrivateNames","redeclared","delete","skipKey","PrivateName","noDocumentAll","parentPath","isMemberExpression","property","isOptionalMemberExpression","includes","handle","unshadow","innerBinding","_scope","hasBinding","bindingIdentifierEquals","rename","parent","buildCheckInRHS","rhs","inRHSIsObject","privateInVisitor","BinaryExpression","operator","left","right","isPrivateName","classRef","replaceWith","readOnlyError","writeOnlyError","console","warn","buildUndefinedNode","buildStaticPrivateFieldAccess","expr","noUninitializedPrivateFieldAccess","memberExpression","privateNameHandlerSpec","memoise","member","count","object","memo","maybeGenerateMemoised","memoiser","receiver","helperName","skipCheck","err","sequenceExpression","boundGet","assignmentExpression","destructureSet","helper","_unused","Error","getCall","ref","pop","setCall","buildCodeFrameError","args","computed","arrayExpression","slice","call","optionalCall","privateNameHandlerLoose","BASE","REF","PROP","simpleSet","optionalCallExpression","transformPrivateNamesUsage","size","handler","buildPrivateFieldInitLoose","inheritPropComments","buildPrivateInstanceFieldInitSpec","expressionStatement","thisExpression","buildPrivateStaticFieldInitSpec","privateName","variableDeclaration","variableDeclarator","buildPrivateStaticFieldInitSpecOld","buildPrivateMethodInitLoose","buildPrivateInstanceMethodInitSpec","buildPrivateAccessorInitialization","buildPrivateInstanceMethodInitialization","buildPublicFieldInitLoose","isLiteral","buildPublicFieldInitSpec","buildPrivateStaticMethodInitLoose","buildPrivateMethodDeclaration","generator","async","isGetter","isSetter","thisArg","thisRef","argumentsPath","thisContextVisitor","argumentsId","unshift","declId","functionDeclaration","Identifier","UnaryExpression","skipTransparentExprWrapperNodes","booleanLiteral","ThisExpression","needsClassRef","MetaProperty","meta","innerReferencesVisitor","ReferencedIdentifier","replaceThisContext","innerBindingRef","_state$thisRef","isNameOrLength","type","inheritLeadingComments","inheritInnerComments","buildFieldsInitNodes","superRef","setPublicClassFields","constantSuper","_ref","_ref2","classRefFlags","injectSuperRef","staticNodes","instanceNodes","lastInstanceNodeReturnsThis","pureStaticNodes","classBindingNode","getSuperRef","_injectSuperRef","generateUidIdentifierBasedOnNode","classRefForInnerBinding","isClassProperty","assertFieldTransformed","isStaticBlock","isInstance","isPublic","isField","methodPath","refToPreserve","getObjectRef","replace","replaced","blockBody","inheritsComments","filter","Boolean","wrapClass","leadingComments","remove","superClass","isClassExpression"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\helper-create-class-features-plugin\\src\\fields.ts"],"sourcesContent":["import { template, traverse, types as t } from \"@babel/core\";\nimport type { File } from \"@babel/core\";\nimport type { NodePath, Visitor, Scope } from \"@babel/traverse\";\nimport ReplaceSupers from \"@babel/helper-replace-supers\";\nimport environmentVisitor from \"@babel/helper-environment-visitor\";\nimport memberExpressionToFunctions from \"@babel/helper-member-expression-to-functions\";\nimport type {\n  Handler,\n  HandlerState,\n} from \"@babel/helper-member-expression-to-functions\";\nimport optimiseCall from \"@babel/helper-optimise-call-expression\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport { skipTransparentExprWrapperNodes } from \"@babel/helper-skip-transparent-expression-wrappers\";\n\nimport * as ts from \"./typescript.ts\";\n\ninterface PrivateNameMetadata {\n  id: t.Identifier;\n  static: boolean;\n  method: boolean;\n  getId?: t.Identifier;\n  setId?: t.Identifier;\n  methodId?: t.Identifier;\n  initAdded?: boolean;\n  getterDeclared?: boolean;\n  setterDeclared?: boolean;\n}\n\ntype PrivateNamesMapGeneric<V> = Map<string, V>;\n\ntype PrivateNamesMap = PrivateNamesMapGeneric<PrivateNameMetadata>;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // eslint-disable-next-line no-var\n  var newHelpers = (file: File) => {\n    if (!process.env.IS_PUBLISH) {\n      const { comments } = file.ast;\n      // This is needed for the test in\n      // babel-plugin-transform-class-properties/test/fixtures/regression/old-helpers\n      if (comments?.some(c => c.value.includes(\"@force-old-private-helpers\"))) {\n        return false;\n      }\n    }\n    return file.availableHelper(\"classPrivateFieldGet2\");\n  };\n}\n\nexport function buildPrivateNamesMap(\n  className: string,\n  privateFieldsAsSymbolsOrProperties: boolean,\n  props: PropPath[],\n  file: File,\n) {\n  const privateNamesMap: PrivateNamesMap = new Map();\n  let classBrandId: t.Identifier;\n  for (const prop of props) {\n    if (prop.isPrivate()) {\n      const { name } = prop.node.key.id;\n      let update: PrivateNameMetadata = privateNamesMap.get(name);\n      if (!update) {\n        const isMethod = !prop.isProperty();\n        const isStatic = prop.node.static;\n        let initAdded = false;\n        let id: t.Identifier;\n        if (\n          !privateFieldsAsSymbolsOrProperties &&\n          (process.env.BABEL_8_BREAKING || newHelpers(file)) &&\n          isMethod &&\n          !isStatic\n        ) {\n          initAdded = !!classBrandId;\n          classBrandId ??= prop.scope.generateUidIdentifier(\n            `${className}_brand`,\n          );\n          id = classBrandId;\n        } else {\n          id = prop.scope.generateUidIdentifier(name);\n        }\n        update = { id, static: isStatic, method: isMethod, initAdded };\n        privateNamesMap.set(name, update);\n      }\n      if (prop.isClassPrivateMethod()) {\n        if (prop.node.kind === \"get\") {\n          const { body } = prop.node.body;\n          let $: t.Node;\n          if (\n            // If we have\n            //   get #foo() { return _some_fn(this); }\n            // we can use _some_fn directly.\n            body.length === 1 &&\n            t.isReturnStatement(($ = body[0])) &&\n            t.isCallExpression(($ = $.argument)) &&\n            $.arguments.length === 1 &&\n            t.isThisExpression($.arguments[0]) &&\n            t.isIdentifier(($ = $.callee))\n          ) {\n            update.getId = t.cloneNode($);\n            update.getterDeclared = true;\n          } else {\n            update.getId = prop.scope.generateUidIdentifier(`get_${name}`);\n          }\n        } else if (prop.node.kind === \"set\") {\n          const { params } = prop.node;\n          const { body } = prop.node.body;\n          let $: t.Node;\n          if (\n            // If we have\n            //   set #foo(val) { _some_fn(this, val); }\n            // we can use _some_fn directly.\n            body.length === 1 &&\n            t.isExpressionStatement(($ = body[0])) &&\n            t.isCallExpression(($ = $.expression)) &&\n            $.arguments.length === 2 &&\n            t.isThisExpression($.arguments[0]) &&\n            t.isIdentifier($.arguments[1], {\n              name: (params[0] as t.Identifier).name,\n            }) &&\n            t.isIdentifier(($ = $.callee))\n          ) {\n            update.setId = t.cloneNode($);\n            update.setterDeclared = true;\n          } else {\n            update.setId = prop.scope.generateUidIdentifier(`set_${name}`);\n          }\n        } else if (prop.node.kind === \"method\") {\n          update.methodId = prop.scope.generateUidIdentifier(name);\n        }\n      }\n      privateNamesMap.set(name, update);\n    }\n  }\n  return privateNamesMap;\n}\n\nexport function buildPrivateNamesNodes(\n  privateNamesMap: PrivateNamesMap,\n  privateFieldsAsProperties: boolean,\n  privateFieldsAsSymbols: boolean,\n  state: File,\n) {\n  const initNodes: t.Statement[] = [];\n\n  const injectedIds = new Set<string>();\n\n  for (const [name, value] of privateNamesMap) {\n    // - When the privateFieldsAsProperties assumption is enabled,\n    //   both static and instance fields are transpiled using a\n    //   secret non-enumerable property. Hence, we also need to generate that\n    //   key (using the classPrivateFieldLooseKey helper).\n    // - When the privateFieldsAsSymbols assumption is enabled,\n    //   both static and instance fields are transpiled using a\n    //   unique Symbol to define a non-enumerable property.\n    // - In spec mode, only instance fields need a \"private name\" initializer\n    //   because static fields are directly assigned to a variable in the\n    //   buildPrivateStaticFieldInitSpec function.\n    const { static: isStatic, method: isMethod, getId, setId } = value;\n    const isGetterOrSetter = getId || setId;\n    const id = t.cloneNode(value.id);\n\n    let init: t.Expression;\n\n    if (privateFieldsAsProperties) {\n      init = t.callExpression(state.addHelper(\"classPrivateFieldLooseKey\"), [\n        t.stringLiteral(name),\n      ]);\n    } else if (privateFieldsAsSymbols) {\n      init = t.callExpression(t.identifier(\"Symbol\"), [t.stringLiteral(name)]);\n    } else if (!isStatic) {\n      if (injectedIds.has(id.name)) continue;\n      injectedIds.add(id.name);\n\n      init = t.newExpression(\n        t.identifier(\n          isMethod &&\n            (process.env.BABEL_8_BREAKING ||\n              !isGetterOrSetter ||\n              newHelpers(state))\n            ? \"WeakSet\"\n            : \"WeakMap\",\n        ),\n        [],\n      );\n    }\n\n    if (init) {\n      if (!privateFieldsAsSymbols) {\n        annotateAsPure(init);\n      }\n      initNodes.push(template.statement.ast`var ${id} = ${init}`);\n    }\n  }\n\n  return initNodes;\n}\n\nexport interface PrivateNameVisitorState<V> {\n  privateNamesMap: PrivateNamesMapGeneric<V>;\n  redeclared?: string[];\n}\n\n// Traverses the class scope, handling private name references. If an inner\n// class redeclares the same private name, it will hand off traversal to the\n// restricted visitor (which doesn't traverse the inner class's inner scope).\nexport function privateNameVisitorFactory<S, V>(\n  visitor: Visitor<PrivateNameVisitorState<V & PrivateNameMetadata> & S>,\n) {\n  // Traverses the outer portion of a class, without touching the class's inner\n  // scope, for private names.\n  const nestedVisitor = traverse.visitors.merge([\n    { ...visitor },\n    environmentVisitor,\n  ]);\n\n  const privateNameVisitor: Visitor<\n    PrivateNameVisitorState<V & PrivateNameMetadata> & S\n  > = {\n    ...visitor,\n\n    Class(path) {\n      const { privateNamesMap } = this;\n      const body = path.get(\"body.body\");\n\n      const visiblePrivateNames = new Map(privateNamesMap);\n      const redeclared = [];\n      for (const prop of body) {\n        if (!prop.isPrivate()) continue;\n        const { name } = prop.node.key.id;\n        visiblePrivateNames.delete(name);\n        redeclared.push(name);\n      }\n\n      // If the class doesn't redeclare any private fields, we can continue with\n      // our overall traversal.\n      if (!redeclared.length) {\n        return;\n      }\n\n      // This class redeclares some private field. We need to process the outer\n      // environment with access to all the outer privates, then we can process\n      // the inner environment with only the still-visible outer privates.\n      path.get(\"body\").traverse(nestedVisitor, {\n        ...this,\n        redeclared,\n      });\n      path.traverse(privateNameVisitor, {\n        ...this,\n        privateNamesMap: visiblePrivateNames,\n      });\n\n      // We'll eventually hit this class node again with the overall Class\n      // Features visitor, which'll process the redeclared privates.\n      path.skipKey(\"body\");\n    },\n  };\n\n  return privateNameVisitor;\n}\n\ninterface PrivateNameState {\n  privateNamesMap: PrivateNamesMap;\n  classRef: t.Identifier;\n  file: File;\n  noDocumentAll: boolean;\n  noUninitializedPrivateFieldAccess: boolean;\n  innerBinding?: t.Identifier;\n}\n\nconst privateNameVisitor = privateNameVisitorFactory<\n  HandlerState<PrivateNameState> & PrivateNameState,\n  PrivateNameMetadata\n>({\n  PrivateName(path, { noDocumentAll }) {\n    const { privateNamesMap, redeclared } = this;\n    const { node, parentPath } = path;\n\n    if (\n      !parentPath.isMemberExpression({ property: node }) &&\n      !parentPath.isOptionalMemberExpression({ property: node })\n    ) {\n      return;\n    }\n    const { name } = node.id;\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n\n    this.handle(parentPath, noDocumentAll);\n  },\n});\n\n// rename all bindings that shadows innerBinding\nfunction unshadow(\n  name: string,\n  scope: Scope,\n  innerBinding: t.Identifier | undefined,\n) {\n  // in some cases, scope.getBinding(name) === undefined\n  // so we check hasBinding to avoid keeping looping\n  // see: https://github.com/babel/babel/pull/13656#discussion_r686030715\n  while (\n    scope?.hasBinding(name) &&\n    !scope.bindingIdentifierEquals(name, innerBinding)\n  ) {\n    scope.rename(name);\n    scope = scope.parent;\n  }\n}\n\nexport function buildCheckInRHS(\n  rhs: t.Expression,\n  file: File,\n  inRHSIsObject?: boolean,\n) {\n  if (inRHSIsObject || !file.availableHelper?.(\"checkInRHS\")) return rhs;\n  return t.callExpression(file.addHelper(\"checkInRHS\"), [rhs]);\n}\n\nconst privateInVisitor = privateNameVisitorFactory<\n  {\n    classRef: t.Identifier;\n    file: File;\n    innerBinding?: t.Identifier;\n    privateFieldsAsProperties: boolean;\n  },\n  PrivateNameMetadata\n>({\n  BinaryExpression(path, { file }) {\n    const { operator, left, right } = path.node;\n    if (operator !== \"in\") return;\n    if (!t.isPrivateName(left)) return;\n\n    const { privateFieldsAsProperties, privateNamesMap, redeclared } = this;\n\n    const { name } = left.id;\n\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n\n    // if there are any local variable shadowing classRef, unshadow it\n    // see #12960\n    unshadow(this.classRef.name, path.scope, this.innerBinding);\n\n    if (privateFieldsAsProperties) {\n      const { id } = privateNamesMap.get(name);\n      path.replaceWith(template.expression.ast`\n        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(\n          right,\n          file,\n        )}, ${t.cloneNode(id)})\n      `);\n      return;\n    }\n\n    const { id, static: isStatic } = privateNamesMap.get(name);\n\n    if (isStatic) {\n      path.replaceWith(\n        template.expression.ast`${buildCheckInRHS(\n          right,\n          file,\n        )} === ${t.cloneNode(this.classRef)}`,\n      );\n      return;\n    }\n\n    path.replaceWith(\n      template.expression.ast`${t.cloneNode(id)}.has(${buildCheckInRHS(\n        right,\n        file,\n      )})`,\n    );\n  },\n});\n\ninterface Receiver {\n  receiver(\n    this: HandlerState<PrivateNameState> & PrivateNameState,\n    member: NodePath<t.MemberExpression | t.OptionalMemberExpression>,\n  ): t.Expression;\n}\n\nfunction readOnlyError(file: File, name: string) {\n  return t.callExpression(file.addHelper(\"readOnlyError\"), [\n    t.stringLiteral(`#${name}`),\n  ]);\n}\n\nfunction writeOnlyError(file: File, name: string) {\n  if (\n    !process.env.BABEL_8_BREAKING &&\n    !file.availableHelper(\"writeOnlyError\")\n  ) {\n    console.warn(\n      `@babel/helpers is outdated, update it to silence this warning.`,\n    );\n    return t.buildUndefinedNode();\n  }\n  return t.callExpression(file.addHelper(\"writeOnlyError\"), [\n    t.stringLiteral(`#${name}`),\n  ]);\n}\n\nfunction buildStaticPrivateFieldAccess<N extends t.Expression>(\n  expr: N,\n  noUninitializedPrivateFieldAccess: boolean,\n) {\n  if (noUninitializedPrivateFieldAccess) return expr;\n  return t.memberExpression(expr, t.identifier(\"_\"));\n}\n\nconst privateNameHandlerSpec: Handler<PrivateNameState & Receiver> & Receiver =\n  {\n    memoise(member, count) {\n      const { scope } = member;\n      const { object } = member.node as { object: t.Expression };\n\n      const memo = scope.maybeGenerateMemoised(object);\n      if (!memo) {\n        return;\n      }\n\n      this.memoiser.set(object, memo, count);\n    },\n\n    receiver(member) {\n      const { object } = member.node as { object: t.Expression };\n\n      if (this.memoiser.has(object)) {\n        return t.cloneNode(this.memoiser.get(object));\n      }\n\n      return t.cloneNode(object);\n    },\n\n    get(member) {\n      const {\n        classRef,\n        privateNamesMap,\n        file,\n        innerBinding,\n        noUninitializedPrivateFieldAccess,\n      } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        methodId,\n        getId,\n        setId,\n      } = privateNamesMap.get(name);\n      const isGetterOrSetter = getId || setId;\n\n      if (isStatic) {\n        // if there are any local variable shadowing classRef, unshadow it\n        // see #12960\n        unshadow(classRef.name, member.scope, innerBinding);\n\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          // NOTE: This package has a peerDependency on @babel/core@^7.0.0, but these\n          // helpers have been introduced in @babel/helpers@7.1.0.\n          const helperName =\n            isMethod && !isGetterOrSetter\n              ? \"classStaticPrivateMethodGet\"\n              : \"classStaticPrivateFieldSpecGet\";\n\n          return t.callExpression(file.addHelper(helperName), [\n            this.receiver(member),\n            t.cloneNode(classRef),\n            t.cloneNode(id),\n          ]);\n        }\n\n        const receiver = this.receiver(member);\n        const skipCheck =\n          t.isIdentifier(receiver) && receiver.name === classRef.name;\n\n        if (!isMethod) {\n          if (skipCheck) {\n            return buildStaticPrivateFieldAccess(\n              t.cloneNode(id),\n              noUninitializedPrivateFieldAccess,\n            );\n          }\n\n          return buildStaticPrivateFieldAccess(\n            t.callExpression(file.addHelper(\"assertClassBrand\"), [\n              t.cloneNode(classRef),\n              receiver,\n              t.cloneNode(id),\n            ]),\n            noUninitializedPrivateFieldAccess,\n          );\n        }\n\n        if (getId) {\n          if (skipCheck) {\n            return t.callExpression(t.cloneNode(getId), [receiver]);\n          }\n          return t.callExpression(file.addHelper(\"classPrivateGetter\"), [\n            t.cloneNode(classRef),\n            receiver,\n            t.cloneNode(getId),\n          ]);\n        }\n\n        if (setId) {\n          const err = t.buildUndefinedNode(); // TODO: writeOnlyError(file, name)\n          if (skipCheck) return err;\n          return t.sequenceExpression([\n            t.callExpression(file.addHelper(\"assertClassBrand\"), [\n              t.cloneNode(classRef),\n              receiver,\n            ]),\n            err,\n          ]);\n        }\n\n        if (skipCheck) return t.cloneNode(id);\n        return t.callExpression(file.addHelper(\"assertClassBrand\"), [\n          t.cloneNode(classRef),\n          receiver,\n          t.cloneNode(id),\n        ]);\n      }\n\n      if (isMethod) {\n        if (isGetterOrSetter) {\n          if (!getId) {\n            return t.sequenceExpression([\n              this.receiver(member),\n              writeOnlyError(file, name),\n            ]);\n          }\n          if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n            return t.callExpression(file.addHelper(\"classPrivateFieldGet\"), [\n              this.receiver(member),\n              t.cloneNode(id),\n            ]);\n          }\n          return t.callExpression(file.addHelper(\"classPrivateGetter\"), [\n            t.cloneNode(id),\n            this.receiver(member),\n            t.cloneNode(getId),\n          ]);\n        }\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          return t.callExpression(file.addHelper(\"classPrivateMethodGet\"), [\n            this.receiver(member),\n            t.cloneNode(id),\n            t.cloneNode(methodId),\n          ]);\n        }\n        return t.callExpression(file.addHelper(\"assertClassBrand\"), [\n          t.cloneNode(id),\n          this.receiver(member),\n          t.cloneNode(methodId),\n        ]);\n      }\n      if (process.env.BABEL_8_BREAKING || newHelpers(file)) {\n        return t.callExpression(file.addHelper(\"classPrivateFieldGet2\"), [\n          t.cloneNode(id),\n          this.receiver(member),\n        ]);\n      }\n\n      return t.callExpression(file.addHelper(\"classPrivateFieldGet\"), [\n        this.receiver(member),\n        t.cloneNode(id),\n      ]);\n    },\n\n    boundGet(member) {\n      this.memoise(member, 1);\n\n      return t.callExpression(\n        t.memberExpression(this.get(member), t.identifier(\"bind\")),\n        [this.receiver(member)],\n      );\n    },\n\n    set(member, value) {\n      const {\n        classRef,\n        privateNamesMap,\n        file,\n        noUninitializedPrivateFieldAccess,\n      } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        setId,\n        getId,\n      } = privateNamesMap.get(name);\n      const isGetterOrSetter = getId || setId;\n\n      if (isStatic) {\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          const helperName =\n            isMethod && !isGetterOrSetter\n              ? \"classStaticPrivateMethodSet\"\n              : \"classStaticPrivateFieldSpecSet\";\n\n          return t.callExpression(file.addHelper(helperName), [\n            this.receiver(member),\n            t.cloneNode(classRef),\n            t.cloneNode(id),\n            value,\n          ]);\n        }\n\n        const receiver = this.receiver(member);\n        const skipCheck =\n          t.isIdentifier(receiver) && receiver.name === classRef.name;\n\n        if (isMethod && !setId) {\n          const err = readOnlyError(file, name);\n          if (skipCheck) return t.sequenceExpression([value, err]);\n          return t.sequenceExpression([\n            value,\n            t.callExpression(file.addHelper(\"assertClassBrand\"), [\n              t.cloneNode(classRef),\n              receiver,\n            ]),\n            readOnlyError(file, name),\n          ]);\n        }\n\n        if (setId) {\n          if (skipCheck) {\n            return t.callExpression(t.cloneNode(setId), [receiver, value]);\n          }\n          return t.callExpression(file.addHelper(\"classPrivateSetter\"), [\n            t.cloneNode(classRef),\n            t.cloneNode(setId),\n            receiver,\n            value,\n          ]);\n        }\n        return t.assignmentExpression(\n          \"=\",\n          buildStaticPrivateFieldAccess(\n            t.cloneNode(id),\n            noUninitializedPrivateFieldAccess,\n          ),\n          skipCheck\n            ? value\n            : t.callExpression(file.addHelper(\"assertClassBrand\"), [\n                t.cloneNode(classRef),\n                receiver,\n                value,\n              ]),\n        );\n      }\n      if (isMethod) {\n        if (setId) {\n          if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n            return t.callExpression(file.addHelper(\"classPrivateFieldSet\"), [\n              this.receiver(member),\n              t.cloneNode(id),\n              value,\n            ]);\n          }\n          return t.callExpression(file.addHelper(\"classPrivateSetter\"), [\n            t.cloneNode(id),\n            t.cloneNode(setId),\n            this.receiver(member),\n            value,\n          ]);\n        }\n        return t.sequenceExpression([\n          this.receiver(member),\n          value,\n          readOnlyError(file, name),\n        ]);\n      }\n\n      if (process.env.BABEL_8_BREAKING || newHelpers(file)) {\n        return t.callExpression(file.addHelper(\"classPrivateFieldSet2\"), [\n          t.cloneNode(id),\n          this.receiver(member),\n          value,\n        ]);\n      }\n\n      return t.callExpression(file.addHelper(\"classPrivateFieldSet\"), [\n        this.receiver(member),\n        t.cloneNode(id),\n        value,\n      ]);\n    },\n\n    destructureSet(member) {\n      const {\n        classRef,\n        privateNamesMap,\n        file,\n        noUninitializedPrivateFieldAccess,\n      } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        setId,\n      } = privateNamesMap.get(name);\n\n      if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n        if (isStatic) {\n          try {\n            // classStaticPrivateFieldDestructureSet was introduced in 7.13.10\n            // eslint-disable-next-line no-var\n            var helper = file.addHelper(\n              \"classStaticPrivateFieldDestructureSet\",\n            );\n          } catch {\n            throw new Error(\n              \"Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \\n\" +\n                \"please update @babel/helpers to the latest version.\",\n            );\n          }\n          return t.memberExpression(\n            t.callExpression(helper, [\n              this.receiver(member),\n              t.cloneNode(classRef),\n              t.cloneNode(id),\n            ]),\n            t.identifier(\"value\"),\n          );\n        }\n\n        return t.memberExpression(\n          t.callExpression(file.addHelper(\"classPrivateFieldDestructureSet\"), [\n            this.receiver(member),\n            t.cloneNode(id),\n          ]),\n          t.identifier(\"value\"),\n        );\n      }\n\n      if (isMethod && !setId) {\n        return t.memberExpression(\n          t.sequenceExpression([\n            // @ts-ignore(Babel 7 vs Babel 8) member.node.object is not t.Super\n            member.node.object,\n            readOnlyError(file, name),\n          ]),\n          t.identifier(\"_\"),\n        );\n      }\n\n      if (isStatic && !isMethod) {\n        const getCall = this.get(member);\n        if (\n          !noUninitializedPrivateFieldAccess ||\n          !t.isCallExpression(getCall)\n        ) {\n          return getCall;\n        }\n        const ref = getCall.arguments.pop();\n        getCall.arguments.push(template.expression.ast`(_) => ${ref} = _`);\n        return t.memberExpression(\n          t.callExpression(file.addHelper(\"toSetter\"), [getCall]),\n          t.identifier(\"_\"),\n        );\n      }\n\n      const setCall = this.set(member, t.identifier(\"_\"));\n      if (\n        !t.isCallExpression(setCall) ||\n        !t.isIdentifier(setCall.arguments[setCall.arguments.length - 1], {\n          name: \"_\",\n        })\n      ) {\n        throw member.buildCodeFrameError(\n          \"Internal Babel error while compiling this code. This is a Babel bug. \" +\n            \"Please report it at https://github.com/babel/babel/issues.\",\n        );\n      }\n\n      // someHelper(foo, bar, _) -> someHelper, [foo, bar]\n      // aFn.call(foo, bar, _) -> aFn, [bar], foo\n      let args: t.Expression[];\n      if (\n        t.isMemberExpression(setCall.callee, { computed: false }) &&\n        t.isIdentifier(setCall.callee.property) &&\n        setCall.callee.property.name === \"call\"\n      ) {\n        args = [\n          // @ts-ignore(Babel 7 vs Babel 8) member.node.object is not t.Super\n          setCall.callee.object,\n          t.arrayExpression(\n            // Remove '_'\n            (setCall.arguments as t.Expression[]).slice(1, -1),\n          ),\n          setCall.arguments[0] as t.Expression,\n        ];\n      } else {\n        args = [\n          setCall.callee as t.Expression,\n          t.arrayExpression(\n            // Remove '_'\n            (setCall.arguments as t.Expression[]).slice(0, -1),\n          ),\n        ];\n      }\n\n      return t.memberExpression(\n        t.callExpression(file.addHelper(\"toSetter\"), args),\n        t.identifier(\"_\"),\n      );\n    },\n\n    call(member, args: (t.Expression | t.SpreadElement)[]) {\n      // The first access (the get) should do the memo assignment.\n      this.memoise(member, 1);\n\n      return optimiseCall(this.get(member), this.receiver(member), args, false);\n    },\n\n    optionalCall(member, args: (t.Expression | t.SpreadElement)[]) {\n      this.memoise(member, 1);\n\n      return optimiseCall(this.get(member), this.receiver(member), args, true);\n    },\n\n    delete() {\n      throw new Error(\n        \"Internal Babel error: deleting private elements is a parsing error.\",\n      );\n    },\n  };\n\nconst privateNameHandlerLoose: Handler<PrivateNameState> = {\n  get(member) {\n    const { privateNamesMap, file } = this;\n    const { object } = member.node;\n    const { name } = (member.node.property as t.PrivateName).id;\n\n    return template.expression`BASE(REF, PROP)[PROP]`({\n      BASE: file.addHelper(\"classPrivateFieldLooseBase\"),\n      REF: t.cloneNode(object),\n      PROP: t.cloneNode(privateNamesMap.get(name).id),\n    });\n  },\n\n  set() {\n    // noop\n    throw new Error(\"private name handler with loose = true don't need set()\");\n  },\n\n  boundGet(member) {\n    return t.callExpression(\n      t.memberExpression(this.get(member), t.identifier(\"bind\")),\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      [t.cloneNode(member.node.object as t.Expression)],\n    );\n  },\n\n  simpleSet(member) {\n    return this.get(member);\n  },\n\n  destructureSet(member) {\n    return this.get(member);\n  },\n\n  call(member, args) {\n    return t.callExpression(this.get(member), args);\n  },\n\n  optionalCall(member, args) {\n    return t.optionalCallExpression(this.get(member), args, true);\n  },\n\n  delete() {\n    throw new Error(\n      \"Internal Babel error: deleting private elements is a parsing error.\",\n    );\n  },\n};\n\nexport function transformPrivateNamesUsage(\n  ref: t.Identifier,\n  path: NodePath<t.Class>,\n  privateNamesMap: PrivateNamesMap,\n  {\n    privateFieldsAsProperties,\n    noUninitializedPrivateFieldAccess,\n    noDocumentAll,\n    innerBinding,\n  }: {\n    privateFieldsAsProperties: boolean;\n    noUninitializedPrivateFieldAccess: boolean;\n    noDocumentAll: boolean;\n    innerBinding: t.Identifier;\n  },\n  state: File,\n) {\n  if (!privateNamesMap.size) return;\n\n  const body = path.get(\"body\");\n  const handler = privateFieldsAsProperties\n    ? privateNameHandlerLoose\n    : privateNameHandlerSpec;\n\n  memberExpressionToFunctions<PrivateNameState>(body, privateNameVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    ...handler,\n    noDocumentAll,\n    noUninitializedPrivateFieldAccess,\n    innerBinding,\n  });\n  body.traverse(privateInVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    privateFieldsAsProperties,\n    innerBinding,\n  });\n}\n\nfunction buildPrivateFieldInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const { id } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return inheritPropComments(\n    template.statement.ast`\n      Object.defineProperty(${ref}, ${t.cloneNode(id)}, {\n        // configurable is false by default\n        // enumerable is false by default\n        writable: true,\n        value: ${value}\n      });\n    ` as t.ExpressionStatement,\n    prop,\n  );\n}\n\nfunction buildPrivateInstanceFieldInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const { id } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return inheritPropComments(\n        template.statement.ast`${t.cloneNode(id)}.set(${ref}, {\n          // configurable is always false for private elements\n          // enumerable is always false for private elements\n          writable: true,\n          value: ${value},\n        })` as t.ExpressionStatement,\n        prop,\n      );\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return inheritPropComments(\n    t.expressionStatement(\n      t.callExpression(helper, [\n        t.thisExpression(),\n        t.cloneNode(id),\n        process.env.BABEL_8_BREAKING || newHelpers(state)\n          ? value\n          : template.expression.ast`{ writable: true, value: ${value} }`,\n      ]),\n    ),\n    prop,\n  );\n}\n\nfunction buildPrivateStaticFieldInitSpec(\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n  noUninitializedPrivateFieldAccess: boolean,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n\n  const value = noUninitializedPrivateFieldAccess\n    ? prop.node.value\n    : template.expression.ast`{\n        _: ${prop.node.value || t.buildUndefinedNode()}\n      }`;\n\n  return inheritPropComments(\n    t.variableDeclaration(\"var\", [\n      t.variableDeclarator(t.cloneNode(privateName.id), value),\n    ]),\n    prop,\n  );\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  // eslint-disable-next-line no-var\n  var buildPrivateStaticFieldInitSpecOld = function (\n    prop: NodePath<t.ClassPrivateProperty>,\n    privateNamesMap: PrivateNamesMap,\n  ) {\n    const privateName = privateNamesMap.get(prop.node.key.id.name);\n    const { id, getId, setId, initAdded } = privateName;\n    const isGetterOrSetter = getId || setId;\n\n    if (!prop.isProperty() && (initAdded || !isGetterOrSetter)) return;\n\n    if (isGetterOrSetter) {\n      privateNamesMap.set(prop.node.key.id.name, {\n        ...privateName,\n        initAdded: true,\n      });\n\n      return inheritPropComments(\n        template.statement.ast`\n          var ${t.cloneNode(id)} = {\n            // configurable is false by default\n            // enumerable is false by default\n            // writable is false by default\n            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n          }\n        `,\n        prop,\n      );\n    }\n\n    const value = prop.node.value || prop.scope.buildUndefinedNode();\n    return inheritPropComments(\n      template.statement.ast`\n        var ${t.cloneNode(id)} = {\n          // configurable is false by default\n          // enumerable is false by default\n          writable: true,\n          value: ${value}\n        };\n      `,\n      prop,\n    );\n  };\n}\n\nfunction buildPrivateMethodInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { methodId, id, getId, setId, initAdded } = privateName;\n  if (initAdded) return;\n\n  if (methodId) {\n    return inheritPropComments(\n      template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          value: ${methodId.name}\n        });\n      ` as t.ExpressionStatement,\n      prop,\n    );\n  }\n  const isGetterOrSetter = getId || setId;\n  if (isGetterOrSetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return inheritPropComments(\n      template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n        });\n      ` as t.ExpressionStatement,\n      prop,\n    );\n  }\n}\n\nfunction buildPrivateInstanceMethodInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n\n  if (privateName.initAdded) return;\n\n  if (!process.env.BABEL_8_BREAKING && !newHelpers(state)) {\n    const isGetterOrSetter = privateName.getId || privateName.setId;\n    if (isGetterOrSetter) {\n      return buildPrivateAccessorInitialization(\n        ref,\n        prop,\n        privateNamesMap,\n        state,\n      );\n    }\n  }\n\n  return buildPrivateInstanceMethodInitialization(\n    ref,\n    prop,\n    privateNamesMap,\n    state,\n  );\n}\n\nfunction buildPrivateAccessorInitialization(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, getId, setId } = privateName;\n\n  privateNamesMap.set(prop.node.key.id.name, {\n    ...privateName,\n    initAdded: true,\n  });\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return inheritPropComments(\n        template.statement.ast`\n          ${id}.set(${ref}, {\n            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n          });\n        ` as t.ExpressionStatement,\n        prop,\n      );\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return inheritPropComments(\n    template.statement.ast`${helper}(\n      ${t.thisExpression()},\n      ${t.cloneNode(id)},\n      {\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      },\n    )` as t.ExpressionStatement,\n    prop,\n  );\n}\n\nfunction buildPrivateInstanceMethodInitialization(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id } = privateName;\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateMethodInitSpec\")) {\n      return inheritPropComments(\n        template.statement.ast`${id}.add(${ref})` as t.ExpressionStatement,\n        prop,\n      );\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateMethodInitSpec\");\n  return inheritPropComments(\n    template.statement.ast`${helper}(\n      ${t.thisExpression()},\n      ${t.cloneNode(id)}\n    )` as t.ExpressionStatement,\n    prop,\n  );\n}\n\nfunction buildPublicFieldInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassProperty>,\n) {\n  const { key, computed } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return inheritPropComments(\n    t.expressionStatement(\n      t.assignmentExpression(\n        \"=\",\n        t.memberExpression(ref, key, computed || t.isLiteral(key)),\n        value,\n      ),\n    ),\n    prop,\n  );\n}\n\nfunction buildPublicFieldInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassProperty>,\n  state: File,\n) {\n  const { key, computed } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return inheritPropComments(\n    t.expressionStatement(\n      t.callExpression(state.addHelper(\"defineProperty\"), [\n        ref,\n        computed || t.isLiteral(key)\n          ? key\n          : t.stringLiteral((key as t.Identifier).name),\n        value,\n      ]),\n    ),\n    prop,\n  );\n}\n\nfunction buildPrivateStaticMethodInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  state: File,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, methodId, getId, setId, initAdded } = privateName;\n\n  if (initAdded) return;\n\n  const isGetterOrSetter = getId || setId;\n  if (isGetterOrSetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return inheritPropComments(\n      template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n        })\n      `,\n      prop,\n    );\n  }\n\n  return inheritPropComments(\n    template.statement.ast`\n      Object.defineProperty(${ref}, ${id}, {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        value: ${methodId.name}\n      });\n    `,\n    prop,\n  );\n}\n\nfunction buildPrivateMethodDeclaration(\n  file: File,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  privateFieldsAsSymbolsOrProperties = false,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    methodId,\n    getId,\n    setId,\n    getterDeclared,\n    setterDeclared,\n    static: isStatic,\n  } = privateName;\n  const { params, body, generator, async } = prop.node;\n  const isGetter = getId && params.length === 0;\n  const isSetter = setId && params.length > 0;\n\n  if ((isGetter && getterDeclared) || (isSetter && setterDeclared)) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n    return null;\n  }\n\n  if (\n    (process.env.BABEL_8_BREAKING || newHelpers(file)) &&\n    (isGetter || isSetter) &&\n    !privateFieldsAsSymbolsOrProperties\n  ) {\n    const scope = prop.get(\"body\").scope;\n    const thisArg = scope.generateUidIdentifier(\"this\");\n    const state: ReplaceThisState = {\n      thisRef: thisArg,\n      argumentsPath: [],\n    };\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    prop.traverse(thisContextVisitor, state);\n    if (state.argumentsPath.length) {\n      const argumentsId = scope.generateUidIdentifier(\"arguments\");\n      scope.push({\n        id: argumentsId,\n        init: template.expression.ast`[].slice.call(arguments, 1)`,\n      });\n      for (const path of state.argumentsPath) {\n        path.replaceWith(t.cloneNode(argumentsId));\n      }\n    }\n\n    params.unshift(t.cloneNode(thisArg));\n  }\n\n  let declId = methodId;\n\n  if (isGetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      getterDeclared: true,\n      initAdded: true,\n    });\n    declId = getId;\n  } else if (isSetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      setterDeclared: true,\n      initAdded: true,\n    });\n    declId = setId;\n  } else if (isStatic && !privateFieldsAsSymbolsOrProperties) {\n    declId = id;\n  }\n\n  return inheritPropComments(\n    t.functionDeclaration(\n      t.cloneNode(declId),\n      // @ts-expect-error params for ClassMethod has TSParameterProperty\n      params,\n      body,\n      generator,\n      async,\n    ),\n    prop,\n  );\n}\n\ntype ReplaceThisState = {\n  thisRef: t.Identifier;\n  needsClassRef?: boolean;\n  innerBinding?: t.Identifier | null;\n  argumentsPath?: NodePath<t.Identifier>[];\n};\n\ntype ReplaceInnerBindingReferenceState = ReplaceThisState;\n\nconst thisContextVisitor = traverse.visitors.merge<ReplaceThisState>([\n  {\n    Identifier(path, state) {\n      if (state.argumentsPath && path.node.name === \"arguments\") {\n        state.argumentsPath.push(path);\n      }\n    },\n    UnaryExpression(path) {\n      // Replace `delete this` with `true`\n      const { node } = path;\n      if (node.operator === \"delete\") {\n        const argument = skipTransparentExprWrapperNodes(node.argument);\n        if (t.isThisExpression(argument)) {\n          path.replaceWith(t.booleanLiteral(true));\n        }\n      }\n    },\n    ThisExpression(path, state) {\n      state.needsClassRef = true;\n      path.replaceWith(t.cloneNode(state.thisRef));\n    },\n    MetaProperty(path) {\n      const { node, scope } = path;\n      // if there are `new.target` in static field\n      // we should replace it with `undefined`\n      if (node.meta.name === \"new\" && node.property.name === \"target\") {\n        path.replaceWith(scope.buildUndefinedNode());\n      }\n    },\n  },\n  environmentVisitor,\n]);\n\nconst innerReferencesVisitor: Visitor<ReplaceInnerBindingReferenceState> = {\n  ReferencedIdentifier(path, state) {\n    if (\n      path.scope.bindingIdentifierEquals(path.node.name, state.innerBinding)\n    ) {\n      state.needsClassRef = true;\n      path.node.name = state.thisRef.name;\n    }\n  },\n};\n\nfunction replaceThisContext(\n  path: PropPath,\n  ref: t.Identifier,\n  innerBindingRef: t.Identifier | null,\n) {\n  const state: ReplaceThisState = {\n    thisRef: ref,\n    needsClassRef: false,\n    innerBinding: innerBindingRef,\n  };\n  if (!path.isMethod()) {\n    // replace `this` in property initializers and static blocks\n    path.traverse(thisContextVisitor, state);\n  }\n\n  // todo: use innerBinding.referencePaths to avoid full traversal\n  if (\n    innerBindingRef != null &&\n    state.thisRef?.name &&\n    state.thisRef.name !== innerBindingRef.name\n  ) {\n    path.traverse(innerReferencesVisitor, state);\n  }\n\n  return state.needsClassRef;\n}\n\nexport type PropNode =\n  | t.ClassProperty\n  | t.ClassPrivateMethod\n  | t.ClassPrivateProperty\n  | t.StaticBlock;\nexport type PropPath = NodePath<PropNode>;\n\nfunction isNameOrLength({ key, computed }: t.ClassProperty) {\n  if (key.type === \"Identifier\") {\n    return !computed && (key.name === \"name\" || key.name === \"length\");\n  }\n  if (key.type === \"StringLiteral\") {\n    return key.value === \"name\" || key.value === \"length\";\n  }\n  return false;\n}\n\n/**\n * Inherit comments from class members. This is a reduced version of\n * t.inheritsComments: the trailing comments are not inherited because\n * for most class members except the last one, their trailing comments are\n * the next sibling's leading comments.\n *\n * @template T transformed class member type\n * @param {T} node transformed class member\n * @param {PropPath} prop class member\n * @returns transformed class member type with comments inherited\n */\nfunction inheritPropComments<T extends t.Node>(node: T, prop: PropPath) {\n  t.inheritLeadingComments(node, prop.node);\n  t.inheritInnerComments(node, prop.node);\n  return node;\n}\n\n/**\n * ClassRefFlag records the requirement of the class binding reference.\n *\n * @enum {number}\n */\nconst enum ClassRefFlag {\n  None,\n  /**\n   * When this flag is enabled, the binding reference can be the class id,\n   * if exists, or the uid identifier generated for class expression. The\n   * reference is safe to be consumed by [[Define]].\n   */\n  ForDefine = 1 << 0,\n  /**\n   * When this flag is enabled, the reference must be a uid, because the outer\n   * class binding can be mutated by user codes.\n   * E.g.\n   * class C { static p = C }; const oldC = C; C = null; oldC.p;\n   * we must memoize class `C` before defining the property `p`.\n   */\n  ForInnerBinding = 1 << 1,\n}\n\nexport function buildFieldsInitNodes(\n  ref: t.Identifier | null,\n  superRef: t.Expression | undefined,\n  props: PropPath[],\n  privateNamesMap: PrivateNamesMap,\n  file: File,\n  setPublicClassFields: boolean,\n  privateFieldsAsSymbolsOrProperties: boolean,\n  noUninitializedPrivateFieldAccess: boolean,\n  constantSuper: boolean,\n  innerBindingRef: t.Identifier | null,\n) {\n  let classRefFlags = ClassRefFlag.None;\n  let injectSuperRef: t.Identifier;\n  const staticNodes: t.Statement[] = [];\n  const instanceNodes: t.ExpressionStatement[] = [];\n  let lastInstanceNodeReturnsThis = false;\n  // These nodes are pure and can be moved to the closest statement position\n  const pureStaticNodes: t.FunctionDeclaration[] = [];\n  let classBindingNode: t.ExpressionStatement | null = null;\n\n  const getSuperRef = t.isIdentifier(superRef)\n    ? () => superRef\n    : () => {\n        injectSuperRef ??=\n          props[0].scope.generateUidIdentifierBasedOnNode(superRef);\n        return injectSuperRef;\n      };\n\n  const classRefForInnerBinding =\n    ref ??\n    props[0].scope.generateUidIdentifier(innerBindingRef?.name || \"Class\");\n  ref ??= t.cloneNode(innerBindingRef);\n\n  for (const prop of props) {\n    prop.isClassProperty() && ts.assertFieldTransformed(prop);\n\n    // @ts-expect-error: TS doesn't infer that prop.node is not a StaticBlock\n    const isStatic = !t.isStaticBlock?.(prop.node) && prop.node.static;\n    const isInstance = !isStatic;\n    const isPrivate = prop.isPrivate();\n    const isPublic = !isPrivate;\n    const isField = prop.isProperty();\n    const isMethod = !isField;\n    const isStaticBlock = prop.isStaticBlock?.();\n\n    if (isStatic) classRefFlags |= ClassRefFlag.ForDefine;\n\n    if (isStatic || (isMethod && isPrivate) || isStaticBlock) {\n      new ReplaceSupers({\n        methodPath: prop,\n        constantSuper,\n        file: file,\n        refToPreserve: innerBindingRef,\n        getSuperRef,\n        getObjectRef() {\n          classRefFlags |= ClassRefFlag.ForInnerBinding;\n          if (isStatic || isStaticBlock) {\n            return classRefForInnerBinding;\n          } else {\n            return t.memberExpression(\n              classRefForInnerBinding,\n              t.identifier(\"prototype\"),\n            );\n          }\n        },\n      }).replace();\n\n      const replaced = replaceThisContext(\n        prop,\n        classRefForInnerBinding,\n        innerBindingRef,\n      );\n      if (replaced) {\n        classRefFlags |= ClassRefFlag.ForInnerBinding;\n      }\n    }\n\n    lastInstanceNodeReturnsThis = false;\n\n    // TODO(ts): there are so many `ts-expect-error` inside cases since\n    // ts can not infer type from pre-computed values (or a case test)\n    // even change `isStaticBlock` to `t.isStaticBlock(prop)` will not make prop\n    // a `NodePath<t.StaticBlock>`\n    // this maybe a bug for ts\n    switch (true) {\n      case isStaticBlock: {\n        const blockBody = prop.node.body;\n        // We special-case the single expression case to avoid the iife, since\n        // it's common.\n        if (blockBody.length === 1 && t.isExpressionStatement(blockBody[0])) {\n          staticNodes.push(inheritPropComments(blockBody[0], prop));\n        } else {\n          staticNodes.push(\n            t.inheritsComments(\n              template.statement.ast`(() => { ${blockBody} })()`,\n              prop.node,\n            ),\n          );\n        }\n        break;\n      }\n      case isStatic &&\n        isPrivate &&\n        isField &&\n        privateFieldsAsSymbolsOrProperties:\n        staticNodes.push(\n          buildPrivateFieldInitLoose(t.cloneNode(ref), prop, privateNamesMap),\n        );\n        break;\n      case isStatic &&\n        isPrivate &&\n        isField &&\n        !privateFieldsAsSymbolsOrProperties:\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          staticNodes.push(\n            buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap),\n          );\n        } else {\n          staticNodes.push(\n            buildPrivateStaticFieldInitSpec(\n              prop,\n              privateNamesMap,\n              noUninitializedPrivateFieldAccess,\n            ),\n          );\n        }\n        break;\n      case isStatic && isPublic && isField && setPublicClassFields:\n        // Functions always have non-writable .name and .length properties,\n        // so we must always use [[Define]] for them.\n        // It might still be possible to a computed static fields whose resulting\n        // key is \"name\" or \"length\", but the assumption is telling us that it's\n        // not going to happen.\n        if (!isNameOrLength(prop.node)) {\n          staticNodes.push(buildPublicFieldInitLoose(t.cloneNode(ref), prop));\n          break;\n        }\n      // falls through\n      case isStatic && isPublic && isField && !setPublicClassFields:\n        staticNodes.push(\n          buildPublicFieldInitSpec(t.cloneNode(ref), prop, file),\n        );\n        break;\n      case isInstance &&\n        isPrivate &&\n        isField &&\n        privateFieldsAsSymbolsOrProperties:\n        instanceNodes.push(\n          buildPrivateFieldInitLoose(t.thisExpression(), prop, privateNamesMap),\n        );\n        break;\n      case isInstance &&\n        isPrivate &&\n        isField &&\n        !privateFieldsAsSymbolsOrProperties:\n        instanceNodes.push(\n          buildPrivateInstanceFieldInitSpec(\n            t.thisExpression(),\n            prop,\n            privateNamesMap,\n            file,\n          ),\n        );\n        break;\n      case isInstance &&\n        isPrivate &&\n        isMethod &&\n        privateFieldsAsSymbolsOrProperties:\n        instanceNodes.unshift(\n          buildPrivateMethodInitLoose(\n            t.thisExpression(),\n            prop,\n            privateNamesMap,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            file,\n            prop,\n            privateNamesMap,\n            privateFieldsAsSymbolsOrProperties,\n          ),\n        );\n        break;\n      case isInstance &&\n        isPrivate &&\n        isMethod &&\n        !privateFieldsAsSymbolsOrProperties:\n        instanceNodes.unshift(\n          buildPrivateInstanceMethodInitSpec(\n            t.thisExpression(),\n            prop,\n            privateNamesMap,\n            file,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            file,\n            prop,\n            privateNamesMap,\n            privateFieldsAsSymbolsOrProperties,\n          ),\n        );\n        break;\n      case isStatic &&\n        isPrivate &&\n        isMethod &&\n        !privateFieldsAsSymbolsOrProperties:\n        if (!process.env.BABEL_8_BREAKING && !newHelpers(file)) {\n          staticNodes.unshift(\n            // @ts-expect-error checked in switch\n            buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap),\n          );\n        }\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            file,\n            prop,\n            privateNamesMap,\n            privateFieldsAsSymbolsOrProperties,\n          ),\n        );\n        break;\n      case isStatic &&\n        isPrivate &&\n        isMethod &&\n        privateFieldsAsSymbolsOrProperties:\n        staticNodes.unshift(\n          buildPrivateStaticMethodInitLoose(\n            t.cloneNode(ref),\n            prop,\n            file,\n            privateNamesMap,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            file,\n            prop,\n            privateNamesMap,\n            privateFieldsAsSymbolsOrProperties,\n          ),\n        );\n        break;\n      case isInstance && isPublic && isField && setPublicClassFields:\n        instanceNodes.push(buildPublicFieldInitLoose(t.thisExpression(), prop));\n        break;\n      case isInstance && isPublic && isField && !setPublicClassFields:\n        lastInstanceNodeReturnsThis = true;\n        instanceNodes.push(\n          buildPublicFieldInitSpec(t.thisExpression(), prop, file),\n        );\n        break;\n      default:\n        throw new Error(\"Unreachable.\");\n    }\n  }\n\n  if (classRefFlags & ClassRefFlag.ForInnerBinding && innerBindingRef != null) {\n    classBindingNode = t.expressionStatement(\n      t.assignmentExpression(\n        \"=\",\n        t.cloneNode(classRefForInnerBinding),\n        t.cloneNode(innerBindingRef),\n      ),\n    );\n  }\n\n  return {\n    staticNodes: staticNodes.filter(Boolean),\n    instanceNodes: instanceNodes.filter(Boolean),\n    lastInstanceNodeReturnsThis,\n    pureStaticNodes: pureStaticNodes.filter(Boolean),\n    classBindingNode,\n    wrapClass(path: NodePath<t.Class>) {\n      for (const prop of props) {\n        // Delete leading comments so that they don't get attached as\n        // trailing comments of the previous sibling.\n        // When transforming props, we explicitly attach their leading\n        // comments to the transformed node with `inheritPropComments`\n        // above.\n        prop.node.leadingComments = null;\n        prop.remove();\n      }\n\n      if (injectSuperRef) {\n        path.scope.push({ id: t.cloneNode(injectSuperRef) });\n        path.set(\n          \"superClass\",\n          t.assignmentExpression(\"=\", injectSuperRef, path.node.superClass),\n        );\n      }\n\n      if (classRefFlags !== ClassRefFlag.None) {\n        if (path.isClassExpression()) {\n          path.scope.push({ id: ref });\n          path.replaceWith(\n            t.assignmentExpression(\"=\", t.cloneNode(ref), path.node),\n          );\n        } else {\n          if (innerBindingRef == null) {\n            // export anonymous class declaration\n            path.node.id = ref;\n          }\n          if (classBindingNode != null) {\n            path.scope.push({ id: classRefForInnerBinding });\n          }\n        }\n      }\n\n      return path;\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}