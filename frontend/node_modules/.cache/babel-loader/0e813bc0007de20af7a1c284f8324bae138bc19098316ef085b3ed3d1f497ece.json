{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Compares two script coverages.\n *\n * The result corresponds to the comparison of their `url` value (alphabetical sort).\n */\nfunction compareScriptCovs(a, b) {\n  if (a.url === b.url) {\n    return 0;\n  } else if (a.url < b.url) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\nexports.compareScriptCovs = compareScriptCovs;\n/**\n * Compares two function coverages.\n *\n * The result corresponds to the comparison of the root ranges.\n */\nfunction compareFunctionCovs(a, b) {\n  return compareRangeCovs(a.ranges[0], b.ranges[0]);\n}\nexports.compareFunctionCovs = compareFunctionCovs;\n/**\n * Compares two range coverages.\n *\n * The ranges are first ordered by ascending `startOffset` and then by\n * descending `endOffset`.\n * This corresponds to a pre-order tree traversal.\n */\nfunction compareRangeCovs(a, b) {\n  if (a.startOffset !== b.startOffset) {\n    return a.startOffset - b.startOffset;\n  } else {\n    return b.endOffset - a.endOffset;\n  }\n}\nexports.compareRangeCovs = compareRangeCovs;","map":{"version":3,"names":["compareScriptCovs","a","b","url","exports","compareFunctionCovs","compareRangeCovs","ranges","startOffset","endOffset"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\compare.ts"],"sourcesContent":["import { FunctionCov, RangeCov, ScriptCov } from \"./types\";\n\n/**\n * Compares two script coverages.\n *\n * The result corresponds to the comparison of their `url` value (alphabetical sort).\n */\nexport function compareScriptCovs(a: Readonly<ScriptCov>, b: Readonly<ScriptCov>): number {\n  if (a.url === b.url) {\n    return 0;\n  } else if (a.url < b.url) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n\n/**\n * Compares two function coverages.\n *\n * The result corresponds to the comparison of the root ranges.\n */\nexport function compareFunctionCovs(a: Readonly<FunctionCov>, b: Readonly<FunctionCov>): number {\n  return compareRangeCovs(a.ranges[0], b.ranges[0]);\n}\n\n/**\n * Compares two range coverages.\n *\n * The ranges are first ordered by ascending `startOffset` and then by\n * descending `endOffset`.\n * This corresponds to a pre-order tree traversal.\n */\nexport function compareRangeCovs(a: Readonly<RangeCov>, b: Readonly<RangeCov>): number {\n  if (a.startOffset !== b.startOffset) {\n    return a.startOffset - b.startOffset;\n  } else {\n    return b.endOffset - a.endOffset;\n  }\n}\n"],"mappings":";;;;;AAEA;;;;;AAKA,SAAgBA,iBAAiBA,CAACC,CAAsB,EAAEC,CAAsB;EAC9E,IAAID,CAAC,CAACE,GAAG,KAAKD,CAAC,CAACC,GAAG,EAAE;IACnB,OAAO,CAAC;GACT,MAAM,IAAIF,CAAC,CAACE,GAAG,GAAGD,CAAC,CAACC,GAAG,EAAE;IACxB,OAAO,CAAC,CAAC;GACV,MAAM;IACL,OAAO,CAAC;;AAEZ;AARAC,OAAA,CAAAJ,iBAAA,GAAAA,iBAAA;AAUA;;;;;AAKA,SAAgBK,mBAAmBA,CAACJ,CAAwB,EAAEC,CAAwB;EACpF,OAAOI,gBAAgB,CAACL,CAAC,CAACM,MAAM,CAAC,CAAC,CAAC,EAAEL,CAAC,CAACK,MAAM,CAAC,CAAC,CAAC,CAAC;AACnD;AAFAH,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AAIA;;;;;;;AAOA,SAAgBC,gBAAgBA,CAACL,CAAqB,EAAEC,CAAqB;EAC3E,IAAID,CAAC,CAACO,WAAW,KAAKN,CAAC,CAACM,WAAW,EAAE;IACnC,OAAOP,CAAC,CAACO,WAAW,GAAGN,CAAC,CAACM,WAAW;GACrC,MAAM;IACL,OAAON,CAAC,CAACO,SAAS,GAAGR,CAAC,CAACQ,SAAS;;AAEpC;AANAL,OAAA,CAAAE,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}