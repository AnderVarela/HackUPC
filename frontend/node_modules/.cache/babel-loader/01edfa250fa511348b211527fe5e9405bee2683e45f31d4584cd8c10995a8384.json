{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'no-extra-non-null-assertion',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow extra non-null assertions',\n      recommended: 'error'\n    },\n    fixable: 'code',\n    schema: [],\n    messages: {\n      noExtraNonNullAssertion: 'Forbidden extra non-null assertion.'\n    }\n  },\n  defaultOptions: [],\n  create(context) {\n    function checkExtraNonNullAssertion(node) {\n      context.report({\n        node,\n        messageId: 'noExtraNonNullAssertion',\n        fix(fixer) {\n          return fixer.removeRange([node.range[1] - 1, node.range[1]]);\n        }\n      });\n    }\n    return {\n      'TSNonNullExpression > TSNonNullExpression': checkExtraNonNullAssertion,\n      'MemberExpression[optional = true] > TSNonNullExpression.object': checkExtraNonNullAssertion,\n      'CallExpression[optional = true] > TSNonNullExpression.callee': checkExtraNonNullAssertion\n    };\n  }\n});","map":{"version":3,"names":["util","__importStar","require","exports","default","createRule","name","meta","type","docs","description","recommended","fixable","schema","messages","noExtraNonNullAssertion","defaultOptions","create","context","checkExtraNonNullAssertion","node","report","messageId","fix","fixer","removeRange","range"],"sources":["../../src/rules/no-extra-non-null-assertion.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAAA,IAAA,GAAAC,YAAA,CAAAC,OAAA;AAEAC,OAAA,CAAAC,OAAA,GAAeJ,IAAI,CAACK,UAAU,CAAC;EAC7BC,IAAI,EAAE,6BAA6B;EACnCC,IAAI,EAAE;IACJC,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE;MACJC,WAAW,EAAE,oCAAoC;MACjDC,WAAW,EAAE;KACd;IACDC,OAAO,EAAE,MAAM;IACfC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE;MACRC,uBAAuB,EAAE;;GAE5B;EACDC,cAAc,EAAE,EAAE;EAClBC,MAAMA,CAACC,OAAO;IACZ,SAASC,0BAA0BA,CACjCC,IAAkC;MAElCF,OAAO,CAACG,MAAM,CAAC;QACbD,IAAI;QACJE,SAAS,EAAE,yBAAyB;QACpCC,GAAGA,CAACC,KAAK;UACP,OAAOA,KAAK,CAACC,WAAW,CAAC,CAACL,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEN,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D;OACD,CAAC;IACJ;IAEA,OAAO;MACL,2CAA2C,EAAEP,0BAA0B;MACvE,gEAAgE,EAC9DA,0BAA0B;MAC5B,8DAA8D,EAC5DA;KACH;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}