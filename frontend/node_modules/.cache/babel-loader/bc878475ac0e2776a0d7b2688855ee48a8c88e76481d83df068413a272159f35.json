{"ast":null,"code":"/* eslint-disable no-console */\n\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\nvar deprecated = require(\"./deprecated\");\nvar msg = \"test\";\ndescribe(\"deprecated\", function () {\n  describe(\"defaultMsg\", function () {\n    it(\"should return a string\", function () {\n      assert.equals(deprecated.defaultMsg(\"sinon\", \"someFunc\"), \"sinon.someFunc is deprecated and will be removed from the public API in a future version of sinon.\");\n    });\n  });\n  describe(\"printWarning\", function () {\n    beforeEach(function () {\n      sinon.replace(process, \"emitWarning\", sinon.fake());\n    });\n    afterEach(sinon.restore);\n    describe(\"when `process.emitWarning` is defined\", function () {\n      it(\"should call process.emitWarning with a msg\", function () {\n        deprecated.printWarning(msg);\n        assert.calledOnceWith(process.emitWarning, msg);\n      });\n    });\n    describe(\"when `process.emitWarning` is undefined\", function () {\n      beforeEach(function () {\n        sinon.replace(console, \"info\", sinon.fake());\n        sinon.replace(console, \"log\", sinon.fake());\n        process.emitWarning = undefined;\n      });\n      afterEach(sinon.restore);\n      describe(\"when `console.info` is defined\", function () {\n        it(\"should call `console.info` with a message\", function () {\n          deprecated.printWarning(msg);\n          assert.calledOnceWith(console.info, msg);\n        });\n      });\n      describe(\"when `console.info` is undefined\", function () {\n        it(\"should call `console.log` with a message\", function () {\n          console.info = undefined;\n          deprecated.printWarning(msg);\n          assert.calledOnceWith(console.log, msg);\n        });\n      });\n    });\n  });\n  describe(\"wrap\", function () {\n    // eslint-disable-next-line mocha/no-setup-in-describe\n    var method = sinon.fake();\n    var wrapped;\n    beforeEach(function () {\n      wrapped = deprecated.wrap(method, msg);\n    });\n    it(\"should return a wrapper function\", function () {\n      assert.match(wrapped, sinon.match.func);\n    });\n    it(\"should assign the prototype of the passed method\", function () {\n      assert.equals(method.prototype, wrapped.prototype);\n    });\n    context(\"when the passed method has falsy prototype\", function () {\n      it(\"should not be assigned to the wrapped method\", function () {\n        method.prototype = null;\n        wrapped = deprecated.wrap(method, msg);\n        assert.match(wrapped.prototype, sinon.match.object);\n      });\n    });\n    context(\"when invoking the wrapped function\", function () {\n      before(function () {\n        sinon.replace(deprecated, \"printWarning\", sinon.fake());\n        wrapped({});\n      });\n      it(\"should call `printWarning` before invoking\", function () {\n        assert.calledOnceWith(deprecated.printWarning, msg);\n      });\n      it(\"should invoke the passed method with the given arguments\", function () {\n        assert.calledOnceWith(method, {});\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","sinon","deprecated","msg","describe","it","equals","defaultMsg","beforeEach","replace","process","fake","afterEach","restore","printWarning","calledOnceWith","emitWarning","console","undefined","info","log","method","wrapped","wrap","match","func","prototype","context","object","before"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@sinonjs/commons/lib/deprecated.test.js"],"sourcesContent":["/* eslint-disable no-console */\n\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\n\nvar deprecated = require(\"./deprecated\");\n\nvar msg = \"test\";\n\ndescribe(\"deprecated\", function () {\n    describe(\"defaultMsg\", function () {\n        it(\"should return a string\", function () {\n            assert.equals(\n                deprecated.defaultMsg(\"sinon\", \"someFunc\"),\n                \"sinon.someFunc is deprecated and will be removed from the public API in a future version of sinon.\"\n            );\n        });\n    });\n\n    describe(\"printWarning\", function () {\n        beforeEach(function () {\n            sinon.replace(process, \"emitWarning\", sinon.fake());\n        });\n\n        afterEach(sinon.restore);\n\n        describe(\"when `process.emitWarning` is defined\", function () {\n            it(\"should call process.emitWarning with a msg\", function () {\n                deprecated.printWarning(msg);\n                assert.calledOnceWith(process.emitWarning, msg);\n            });\n        });\n\n        describe(\"when `process.emitWarning` is undefined\", function () {\n            beforeEach(function () {\n                sinon.replace(console, \"info\", sinon.fake());\n                sinon.replace(console, \"log\", sinon.fake());\n                process.emitWarning = undefined;\n            });\n\n            afterEach(sinon.restore);\n\n            describe(\"when `console.info` is defined\", function () {\n                it(\"should call `console.info` with a message\", function () {\n                    deprecated.printWarning(msg);\n                    assert.calledOnceWith(console.info, msg);\n                });\n            });\n\n            describe(\"when `console.info` is undefined\", function () {\n                it(\"should call `console.log` with a message\", function () {\n                    console.info = undefined;\n                    deprecated.printWarning(msg);\n                    assert.calledOnceWith(console.log, msg);\n                });\n            });\n        });\n    });\n\n    describe(\"wrap\", function () {\n        // eslint-disable-next-line mocha/no-setup-in-describe\n        var method = sinon.fake();\n        var wrapped;\n\n        beforeEach(function () {\n            wrapped = deprecated.wrap(method, msg);\n        });\n\n        it(\"should return a wrapper function\", function () {\n            assert.match(wrapped, sinon.match.func);\n        });\n\n        it(\"should assign the prototype of the passed method\", function () {\n            assert.equals(method.prototype, wrapped.prototype);\n        });\n\n        context(\"when the passed method has falsy prototype\", function () {\n            it(\"should not be assigned to the wrapped method\", function () {\n                method.prototype = null;\n                wrapped = deprecated.wrap(method, msg);\n                assert.match(wrapped.prototype, sinon.match.object);\n            });\n        });\n\n        context(\"when invoking the wrapped function\", function () {\n            before(function () {\n                sinon.replace(deprecated, \"printWarning\", sinon.fake());\n                wrapped({});\n            });\n\n            it(\"should call `printWarning` before invoking\", function () {\n                assert.calledOnceWith(deprecated.printWarning, msg);\n            });\n\n            it(\"should invoke the passed method with the given arguments\", function () {\n                assert.calledOnceWith(method, {});\n            });\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}