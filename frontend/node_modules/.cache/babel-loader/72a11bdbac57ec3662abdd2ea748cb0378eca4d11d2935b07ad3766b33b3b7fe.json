{"ast":null,"code":"const {\n  InvalidArgumentError\n} = require('./error.js');\n\n// @ts-check\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n  /**\n   * Set environment variable to check for option value.\n   * Priority order of option values is default < env < cli\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return {\n    shortFlag,\n    longFlag\n  };\n}\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;","map":{"version":3,"names":["InvalidArgumentError","require","Option","constructor","flags","description","required","includes","optional","variadic","test","mandatory","optionFlags","splitOptionFlags","short","shortFlag","long","longFlag","negate","startsWith","defaultValue","undefined","defaultValueDescription","envVar","parseArg","hidden","argChoices","default","value","env","name","argParser","fn","makeOptionMandatory","hideHelp","hide","_concatValue","previous","Array","isArray","concat","choices","values","arg","join","replace","attributeName","camelcase","is","str","split","reduce","word","toUpperCase","slice","flagParts","length","shift","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/commander/lib/option.js"],"sourcesContent":["const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  };\n\n  /**\n   * Set environment variable to check for option value.\n   * Priority order of option values is default < env < cli\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  };\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  };\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  };\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  };\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  };\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  };\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  };\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  };\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}