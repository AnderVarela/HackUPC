{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\nconst sysPath = require('path');\nconst {\n  promisify\n} = require('util');\nlet fsevents;\ntry {\n  fsevents = require('fsevents');\n} catch (error) {\n  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);\n}\nif (fsevents) {\n  // TODO: real check\n  const mtch = process.version.match(/v(\\d+)\\.(\\d+)/);\n  if (mtch && mtch[1] && mtch[2]) {\n    const maj = Number.parseInt(mtch[1], 10);\n    const min = Number.parseInt(mtch[2], 10);\n    if (maj === 8 && min < 16) {\n      fsevents = undefined;\n    }\n  }\n}\nconst {\n  EV_ADD,\n  EV_CHANGE,\n  EV_ADD_DIR,\n  EV_UNLINK,\n  EV_ERROR,\n  STR_DATA,\n  STR_END,\n  FSEVENT_CREATED,\n  FSEVENT_MODIFIED,\n  FSEVENT_DELETED,\n  FSEVENT_MOVED,\n  // FSEVENT_CLONED,\n  FSEVENT_UNKNOWN,\n  FSEVENT_FLAG_MUST_SCAN_SUBDIRS,\n  FSEVENT_TYPE_FILE,\n  FSEVENT_TYPE_DIRECTORY,\n  FSEVENT_TYPE_SYMLINK,\n  ROOT_GLOBSTAR,\n  DIR_SUFFIX,\n  DOT_SLASH,\n  FUNCTION_TYPE,\n  EMPTY_FN,\n  IDENTITY_FN\n} = require('./constants');\nconst Depth = value => isNaN(value) ? {} : {\n  depth: value\n};\nconst stat = promisify(fs.stat);\nconst lstat = promisify(fs.lstat);\nconst realpath = promisify(fs.realpath);\nconst statMethods = {\n  stat,\n  lstat\n};\n\n/**\n * @typedef {String} Path\n */\n\n/**\n * @typedef {Object} FsEventsWatchContainer\n * @property {Set<Function>} listeners\n * @property {Function} rawEmitter\n * @property {{stop: Function}} watcher\n */\n\n// fsevents instance helper functions\n/**\n * Object to hold per-process fsevents instances (may be shared across chokidar FSWatcher instances)\n * @type {Map<Path,FsEventsWatchContainer>}\n */\nconst FSEventsWatchers = new Map();\n\n// Threshold of duplicate path prefixes at which to start\n// consolidating going forward\nconst consolidateThreshhold = 10;\nconst wrongEventFlags = new Set([69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912]);\n\n/**\n * Instantiates the fsevents interface\n * @param {Path} path path to be watched\n * @param {Function} callback called when fsevents is bound and ready\n * @returns {{stop: Function}} new fsevents instance\n */\nconst createFSEventsInstance = (path, callback) => {\n  const stop = fsevents.watch(path, callback);\n  return {\n    stop\n  };\n};\n\n/**\n * Instantiates the fsevents interface or binds listeners to an existing one covering\n * the same file tree.\n * @param {Path} path           - to be watched\n * @param {Path} realPath       - real path for symlinks\n * @param {Function} listener   - called when fsevents emits events\n * @param {Function} rawEmitter - passes data to listeners of the 'raw' event\n * @returns {Function} closer\n */\nfunction setFSEventsListener(path, realPath, listener, rawEmitter) {\n  let watchPath = sysPath.extname(realPath) ? sysPath.dirname(realPath) : realPath;\n  const parentPath = sysPath.dirname(watchPath);\n  let cont = FSEventsWatchers.get(watchPath);\n\n  // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n  // above the current one, create a watcher on the parent\n  // path instead, so that we do consolidate going forward.\n  if (couldConsolidate(parentPath)) {\n    watchPath = parentPath;\n  }\n  const resolvedPath = sysPath.resolve(path);\n  const hasSymlink = resolvedPath !== realPath;\n  const filteredListener = (fullPath, flags, info) => {\n    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);\n    if (fullPath === resolvedPath || !fullPath.indexOf(resolvedPath + sysPath.sep)) listener(fullPath, flags, info);\n  };\n\n  // check if there is already a watcher on a parent path\n  // modifies `watchPath` to the parent path when it finds a match\n  let watchedParent = false;\n  for (const watchedPath of FSEventsWatchers.keys()) {\n    if (realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep) === 0) {\n      watchPath = watchedPath;\n      cont = FSEventsWatchers.get(watchPath);\n      watchedParent = true;\n      break;\n    }\n  }\n  if (cont || watchedParent) {\n    cont.listeners.add(filteredListener);\n  } else {\n    cont = {\n      listeners: new Set([filteredListener]),\n      rawEmitter,\n      watcher: createFSEventsInstance(watchPath, (fullPath, flags) => {\n        if (!cont.listeners.size) return;\n        if (flags & FSEVENT_FLAG_MUST_SCAN_SUBDIRS) return;\n        const info = fsevents.getInfo(fullPath, flags);\n        cont.listeners.forEach(list => {\n          list(fullPath, flags, info);\n        });\n        cont.rawEmitter(info.event, fullPath, info);\n      })\n    };\n    FSEventsWatchers.set(watchPath, cont);\n  }\n\n  // removes this instance's listeners and closes the underlying fsevents\n  // instance if there are no more listeners left\n  return () => {\n    const lst = cont.listeners;\n    lst.delete(filteredListener);\n    if (!lst.size) {\n      FSEventsWatchers.delete(watchPath);\n      if (cont.watcher) return cont.watcher.stop().then(() => {\n        cont.rawEmitter = cont.watcher = undefined;\n        Object.freeze(cont);\n      });\n    }\n  };\n}\n\n// Decide whether or not we should start a new higher-level\n// parent watcher\nconst couldConsolidate = path => {\n  let count = 0;\n  for (const watchPath of FSEventsWatchers.keys()) {\n    if (watchPath.indexOf(path) === 0) {\n      count++;\n      if (count >= consolidateThreshhold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// returns boolean indicating whether fsevents can be used\nconst canUse = () => fsevents && FSEventsWatchers.size < 128;\n\n// determines subdirectory traversal levels from root to path\nconst calcDepth = (path, root) => {\n  let i = 0;\n  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;\n  return i;\n};\n\n// returns boolean indicating whether the fsevents' event info has the same type\n// as the one returned by fs.stat\nconst sameTypes = (info, stats) => info.type === FSEVENT_TYPE_DIRECTORY && stats.isDirectory() || info.type === FSEVENT_TYPE_SYMLINK && stats.isSymbolicLink() || info.type === FSEVENT_TYPE_FILE && stats.isFile();\n\n/**\n * @mixin\n */\nclass FsEventsHandler {\n  /**\n   * @param {import('../index').FSWatcher} fsw\n   */\n  constructor(fsw) {\n    this.fsw = fsw;\n  }\n  checkIgnored(path, stats) {\n    const ipaths = this.fsw._ignoredPaths;\n    if (this.fsw._isIgnored(path, stats)) {\n      ipaths.add(path);\n      if (stats && stats.isDirectory()) {\n        ipaths.add(path + ROOT_GLOBSTAR);\n      }\n      return true;\n    }\n    ipaths.delete(path);\n    ipaths.delete(path + ROOT_GLOBSTAR);\n  }\n  addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n    const event = watchedDir.has(item) ? EV_CHANGE : EV_ADD;\n    this.handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n  }\n  async checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n    try {\n      const stats = await stat(path);\n      if (this.fsw.closed) return;\n      if (sameTypes(info, stats)) {\n        this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      } else {\n        this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      }\n    } catch (error) {\n      if (error.code === 'EACCES') {\n        this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      } else {\n        this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      }\n    }\n  }\n  handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n    if (this.fsw.closed || this.checkIgnored(path)) return;\n    if (event === EV_UNLINK) {\n      const isDirectory = info.type === FSEVENT_TYPE_DIRECTORY;\n      // suppress unlink events on never before seen files\n      if (isDirectory || watchedDir.has(item)) {\n        this.fsw._remove(parent, item, isDirectory);\n      }\n    } else {\n      if (event === EV_ADD) {\n        // track new directories\n        if (info.type === FSEVENT_TYPE_DIRECTORY) this.fsw._getWatchedDir(path);\n        if (info.type === FSEVENT_TYPE_SYMLINK && opts.followSymlinks) {\n          // push symlinks back to the top of the stack to get handled\n          const curDepth = opts.depth === undefined ? undefined : calcDepth(fullPath, realPath) + 1;\n          return this._addToFsEvents(path, false, true, curDepth);\n        }\n\n        // track new paths\n        // (other than symlinks being followed, which will be tracked soon)\n        this.fsw._getWatchedDir(parent).add(item);\n      }\n      /**\n       * @type {'add'|'addDir'|'unlink'|'unlinkDir'}\n       */\n      const eventName = info.type === FSEVENT_TYPE_DIRECTORY ? event + DIR_SUFFIX : event;\n      this.fsw._emit(eventName, path);\n      if (eventName === EV_ADD_DIR) this._addToFsEvents(path, false, true);\n    }\n  }\n\n  /**\n   * Handle symlinks encountered during directory scan\n   * @param {String} watchPath  - file/dir path to be watched with fsevents\n   * @param {String} realPath   - real path (in case of symlinks)\n   * @param {Function} transform  - path transformer\n   * @param {Function} globFilter - path filter in case a glob pattern was provided\n   * @returns {Function} closer for the watcher instance\n  */\n  _watchWithFsEvents(watchPath, realPath, transform, globFilter) {\n    if (this.fsw.closed || this.fsw._isIgnored(watchPath)) return;\n    const opts = this.fsw.options;\n    const watchCallback = async (fullPath, flags, info) => {\n      if (this.fsw.closed) return;\n      if (opts.depth !== undefined && calcDepth(fullPath, realPath) > opts.depth) return;\n      const path = transform(sysPath.join(watchPath, sysPath.relative(watchPath, fullPath)));\n      if (globFilter && !globFilter(path)) return;\n      // ensure directories are tracked\n      const parent = sysPath.dirname(path);\n      const item = sysPath.basename(path);\n      const watchedDir = this.fsw._getWatchedDir(info.type === FSEVENT_TYPE_DIRECTORY ? path : parent);\n\n      // correct for wrong events emitted\n      if (wrongEventFlags.has(flags) || info.event === FSEVENT_UNKNOWN) {\n        if (typeof opts.ignored === FUNCTION_TYPE) {\n          let stats;\n          try {\n            stats = await stat(path);\n          } catch (error) {}\n          if (this.fsw.closed) return;\n          if (this.checkIgnored(path, stats)) return;\n          if (sameTypes(info, stats)) {\n            this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n          } else {\n            this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n          }\n        } else {\n          this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n        }\n      } else {\n        switch (info.event) {\n          case FSEVENT_CREATED:\n          case FSEVENT_MODIFIED:\n            return this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n          case FSEVENT_DELETED:\n          case FSEVENT_MOVED:\n            return this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n        }\n      }\n    };\n    const closer = setFSEventsListener(watchPath, realPath, watchCallback, this.fsw._emitRaw);\n    this.fsw._emitReady();\n    return closer;\n  }\n\n  /**\n   * Handle symlinks encountered during directory scan\n   * @param {String} linkPath path to symlink\n   * @param {String} fullPath absolute path to the symlink\n   * @param {Function} transform pre-existing path transformer\n   * @param {Number} curDepth level of subdirectories traversed to where symlink is\n   * @returns {Promise<void>}\n   */\n  async _handleFsEventsSymlink(linkPath, fullPath, transform, curDepth) {\n    // don't follow the same symlink more than once\n    if (this.fsw.closed || this.fsw._symlinkPaths.has(fullPath)) return;\n    this.fsw._symlinkPaths.set(fullPath, true);\n    this.fsw._incrReadyCount();\n    try {\n      const linkTarget = await realpath(linkPath);\n      if (this.fsw.closed) return;\n      if (this.fsw._isIgnored(linkTarget)) {\n        return this.fsw._emitReady();\n      }\n      this.fsw._incrReadyCount();\n\n      // add the linkTarget for watching with a wrapper for transform\n      // that causes emitted paths to incorporate the link's path\n      this._addToFsEvents(linkTarget || linkPath, path => {\n        let aliasedPath = linkPath;\n        if (linkTarget && linkTarget !== DOT_SLASH) {\n          aliasedPath = path.replace(linkTarget, linkPath);\n        } else if (path !== DOT_SLASH) {\n          aliasedPath = sysPath.join(linkPath, path);\n        }\n        return transform(aliasedPath);\n      }, false, curDepth);\n    } catch (error) {\n      if (this.fsw._handleError(error)) {\n        return this.fsw._emitReady();\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Path} newPath\n   * @param {fs.Stats} stats\n   */\n  emitAdd(newPath, stats, processPath, opts, forceAdd) {\n    const pp = processPath(newPath);\n    const isDir = stats.isDirectory();\n    const dirObj = this.fsw._getWatchedDir(sysPath.dirname(pp));\n    const base = sysPath.basename(pp);\n\n    // ensure empty dirs get tracked\n    if (isDir) this.fsw._getWatchedDir(pp);\n    if (dirObj.has(base)) return;\n    dirObj.add(base);\n    if (!opts.ignoreInitial || forceAdd === true) {\n      this.fsw._emit(isDir ? EV_ADD_DIR : EV_ADD, pp, stats);\n    }\n  }\n  initWatch(realPath, path, wh, processPath) {\n    if (this.fsw.closed) return;\n    const closer = this._watchWithFsEvents(wh.watchPath, sysPath.resolve(realPath || wh.watchPath), processPath, wh.globFilter);\n    this.fsw._addPathCloser(path, closer);\n  }\n\n  /**\n   * Handle added path with fsevents\n   * @param {String} path file/dir path or glob pattern\n   * @param {Function|Boolean=} transform converts working path to what the user expects\n   * @param {Boolean=} forceAdd ensure add is emitted\n   * @param {Number=} priorDepth Level of subdirectories already traversed.\n   * @returns {Promise<void>}\n   */\n  async _addToFsEvents(path, transform, forceAdd, priorDepth) {\n    if (this.fsw.closed) {\n      return;\n    }\n    const opts = this.fsw.options;\n    const processPath = typeof transform === FUNCTION_TYPE ? transform : IDENTITY_FN;\n    const wh = this.fsw._getWatchHelpers(path);\n\n    // evaluate what is at the path we're being asked to watch\n    try {\n      const stats = await statMethods[wh.statMethod](wh.watchPath);\n      if (this.fsw.closed) return;\n      if (this.fsw._isIgnored(wh.watchPath, stats)) {\n        throw null;\n      }\n      if (stats.isDirectory()) {\n        // emit addDir unless this is a glob parent\n        if (!wh.globFilter) this.emitAdd(processPath(path), stats, processPath, opts, forceAdd);\n\n        // don't recurse further if it would exceed depth setting\n        if (priorDepth && priorDepth > opts.depth) return;\n\n        // scan the contents of the dir\n        this.fsw._readdirp(wh.watchPath, {\n          fileFilter: entry => wh.filterPath(entry),\n          directoryFilter: entry => wh.filterDir(entry),\n          ...Depth(opts.depth - (priorDepth || 0))\n        }).on(STR_DATA, entry => {\n          // need to check filterPath on dirs b/c filterDir is less restrictive\n          if (this.fsw.closed) {\n            return;\n          }\n          if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;\n          const joinedPath = sysPath.join(wh.watchPath, entry.path);\n          const {\n            fullPath\n          } = entry;\n          if (wh.followSymlinks && entry.stats.isSymbolicLink()) {\n            // preserve the current depth here since it can't be derived from\n            // real paths past the symlink\n            const curDepth = opts.depth === undefined ? undefined : calcDepth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;\n            this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);\n          } else {\n            this.emitAdd(joinedPath, entry.stats, processPath, opts, forceAdd);\n          }\n        }).on(EV_ERROR, EMPTY_FN).on(STR_END, () => {\n          this.fsw._emitReady();\n        });\n      } else {\n        this.emitAdd(wh.watchPath, stats, processPath, opts, forceAdd);\n        this.fsw._emitReady();\n      }\n    } catch (error) {\n      if (!error || this.fsw._handleError(error)) {\n        // TODO: Strange thing: \"should not choke on an ignored watch path\" will be failed without 2 ready calls -__-\n        this.fsw._emitReady();\n        this.fsw._emitReady();\n      }\n    }\n    if (opts.persistent && forceAdd !== true) {\n      if (typeof transform === FUNCTION_TYPE) {\n        // realpath has already been resolved\n        this.initWatch(undefined, path, wh, processPath);\n      } else {\n        let realPath;\n        try {\n          realPath = await realpath(wh.watchPath);\n        } catch (e) {}\n        this.initWatch(realPath, path, wh, processPath);\n      }\n    }\n  }\n}\nmodule.exports = FsEventsHandler;\nmodule.exports.canUse = canUse;","map":{"version":3,"names":["fs","require","sysPath","promisify","fsevents","error","process","env","CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR","console","mtch","version","match","maj","Number","parseInt","min","undefined","EV_ADD","EV_CHANGE","EV_ADD_DIR","EV_UNLINK","EV_ERROR","STR_DATA","STR_END","FSEVENT_CREATED","FSEVENT_MODIFIED","FSEVENT_DELETED","FSEVENT_MOVED","FSEVENT_UNKNOWN","FSEVENT_FLAG_MUST_SCAN_SUBDIRS","FSEVENT_TYPE_FILE","FSEVENT_TYPE_DIRECTORY","FSEVENT_TYPE_SYMLINK","ROOT_GLOBSTAR","DIR_SUFFIX","DOT_SLASH","FUNCTION_TYPE","EMPTY_FN","IDENTITY_FN","Depth","value","isNaN","depth","stat","lstat","realpath","statMethods","FSEventsWatchers","Map","consolidateThreshhold","wrongEventFlags","Set","createFSEventsInstance","path","callback","stop","watch","setFSEventsListener","realPath","listener","rawEmitter","watchPath","extname","dirname","parentPath","cont","get","couldConsolidate","resolvedPath","resolve","hasSymlink","filteredListener","fullPath","flags","info","replace","indexOf","sep","watchedParent","watchedPath","keys","listeners","add","watcher","size","getInfo","forEach","list","event","set","lst","delete","then","Object","freeze","count","canUse","calcDepth","root","i","sameTypes","stats","type","isDirectory","isSymbolicLink","isFile","FsEventsHandler","constructor","fsw","checkIgnored","ipaths","_ignoredPaths","_isIgnored","addOrChange","parent","watchedDir","item","opts","has","handleEvent","checkExists","closed","code","_remove","_getWatchedDir","followSymlinks","curDepth","_addToFsEvents","eventName","_emit","_watchWithFsEvents","transform","globFilter","options","watchCallback","join","relative","basename","ignored","closer","_emitRaw","_emitReady","_handleFsEventsSymlink","linkPath","_symlinkPaths","_incrReadyCount","linkTarget","aliasedPath","_handleError","emitAdd","newPath","processPath","forceAdd","pp","isDir","dirObj","base","ignoreInitial","initWatch","wh","_addPathCloser","priorDepth","_getWatchHelpers","statMethod","_readdirp","fileFilter","entry","filterPath","directoryFilter","filterDir","on","joinedPath","persistent","e","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/chokidar/lib/fsevents-handler.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst sysPath = require('path');\nconst { promisify } = require('util');\n\nlet fsevents;\ntry {\n  fsevents = require('fsevents');\n} catch (error) {\n  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);\n}\n\nif (fsevents) {\n  // TODO: real check\n  const mtch = process.version.match(/v(\\d+)\\.(\\d+)/);\n  if (mtch && mtch[1] && mtch[2]) {\n    const maj = Number.parseInt(mtch[1], 10);\n    const min = Number.parseInt(mtch[2], 10);\n    if (maj === 8 && min < 16) {\n      fsevents = undefined;\n    }\n  }\n}\n\nconst {\n  EV_ADD,\n  EV_CHANGE,\n  EV_ADD_DIR,\n  EV_UNLINK,\n  EV_ERROR,\n  STR_DATA,\n  STR_END,\n  FSEVENT_CREATED,\n  FSEVENT_MODIFIED,\n  FSEVENT_DELETED,\n  FSEVENT_MOVED,\n  // FSEVENT_CLONED,\n  FSEVENT_UNKNOWN,\n  FSEVENT_FLAG_MUST_SCAN_SUBDIRS,\n  FSEVENT_TYPE_FILE,\n  FSEVENT_TYPE_DIRECTORY,\n  FSEVENT_TYPE_SYMLINK,\n\n  ROOT_GLOBSTAR,\n  DIR_SUFFIX,\n  DOT_SLASH,\n  FUNCTION_TYPE,\n  EMPTY_FN,\n  IDENTITY_FN\n} = require('./constants');\n\nconst Depth = (value) => isNaN(value) ? {} : {depth: value};\n\nconst stat = promisify(fs.stat);\nconst lstat = promisify(fs.lstat);\nconst realpath = promisify(fs.realpath);\n\nconst statMethods = { stat, lstat };\n\n/**\n * @typedef {String} Path\n */\n\n/**\n * @typedef {Object} FsEventsWatchContainer\n * @property {Set<Function>} listeners\n * @property {Function} rawEmitter\n * @property {{stop: Function}} watcher\n */\n\n// fsevents instance helper functions\n/**\n * Object to hold per-process fsevents instances (may be shared across chokidar FSWatcher instances)\n * @type {Map<Path,FsEventsWatchContainer>}\n */\nconst FSEventsWatchers = new Map();\n\n// Threshold of duplicate path prefixes at which to start\n// consolidating going forward\nconst consolidateThreshhold = 10;\n\nconst wrongEventFlags = new Set([\n  69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912\n]);\n\n/**\n * Instantiates the fsevents interface\n * @param {Path} path path to be watched\n * @param {Function} callback called when fsevents is bound and ready\n * @returns {{stop: Function}} new fsevents instance\n */\nconst createFSEventsInstance = (path, callback) => {\n  const stop = fsevents.watch(path, callback);\n  return {stop};\n};\n\n/**\n * Instantiates the fsevents interface or binds listeners to an existing one covering\n * the same file tree.\n * @param {Path} path           - to be watched\n * @param {Path} realPath       - real path for symlinks\n * @param {Function} listener   - called when fsevents emits events\n * @param {Function} rawEmitter - passes data to listeners of the 'raw' event\n * @returns {Function} closer\n */\nfunction setFSEventsListener(path, realPath, listener, rawEmitter) {\n  let watchPath = sysPath.extname(realPath) ? sysPath.dirname(realPath) : realPath;\n\n  const parentPath = sysPath.dirname(watchPath);\n  let cont = FSEventsWatchers.get(watchPath);\n\n  // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n  // above the current one, create a watcher on the parent\n  // path instead, so that we do consolidate going forward.\n  if (couldConsolidate(parentPath)) {\n    watchPath = parentPath;\n  }\n\n  const resolvedPath = sysPath.resolve(path);\n  const hasSymlink = resolvedPath !== realPath;\n\n  const filteredListener = (fullPath, flags, info) => {\n    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);\n    if (\n      fullPath === resolvedPath ||\n      !fullPath.indexOf(resolvedPath + sysPath.sep)\n    ) listener(fullPath, flags, info);\n  };\n\n  // check if there is already a watcher on a parent path\n  // modifies `watchPath` to the parent path when it finds a match\n  let watchedParent = false;\n  for (const watchedPath of FSEventsWatchers.keys()) {\n    if (realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep) === 0) {\n      watchPath = watchedPath;\n      cont = FSEventsWatchers.get(watchPath);\n      watchedParent = true;\n      break;\n    }\n  }\n\n  if (cont || watchedParent) {\n    cont.listeners.add(filteredListener);\n  } else {\n    cont = {\n      listeners: new Set([filteredListener]),\n      rawEmitter,\n      watcher: createFSEventsInstance(watchPath, (fullPath, flags) => {\n        if (!cont.listeners.size) return;\n        if (flags & FSEVENT_FLAG_MUST_SCAN_SUBDIRS) return;\n        const info = fsevents.getInfo(fullPath, flags);\n        cont.listeners.forEach(list => {\n          list(fullPath, flags, info);\n        });\n\n        cont.rawEmitter(info.event, fullPath, info);\n      })\n    };\n    FSEventsWatchers.set(watchPath, cont);\n  }\n\n  // removes this instance's listeners and closes the underlying fsevents\n  // instance if there are no more listeners left\n  return () => {\n    const lst = cont.listeners;\n\n    lst.delete(filteredListener);\n    if (!lst.size) {\n      FSEventsWatchers.delete(watchPath);\n      if (cont.watcher) return cont.watcher.stop().then(() => {\n        cont.rawEmitter = cont.watcher = undefined;\n        Object.freeze(cont);\n      });\n    }\n  };\n}\n\n// Decide whether or not we should start a new higher-level\n// parent watcher\nconst couldConsolidate = (path) => {\n  let count = 0;\n  for (const watchPath of FSEventsWatchers.keys()) {\n    if (watchPath.indexOf(path) === 0) {\n      count++;\n      if (count >= consolidateThreshhold) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n// returns boolean indicating whether fsevents can be used\nconst canUse = () => fsevents && FSEventsWatchers.size < 128;\n\n// determines subdirectory traversal levels from root to path\nconst calcDepth = (path, root) => {\n  let i = 0;\n  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;\n  return i;\n};\n\n// returns boolean indicating whether the fsevents' event info has the same type\n// as the one returned by fs.stat\nconst sameTypes = (info, stats) => (\n  info.type === FSEVENT_TYPE_DIRECTORY && stats.isDirectory() ||\n  info.type === FSEVENT_TYPE_SYMLINK && stats.isSymbolicLink() ||\n  info.type === FSEVENT_TYPE_FILE && stats.isFile()\n)\n\n/**\n * @mixin\n */\nclass FsEventsHandler {\n\n/**\n * @param {import('../index').FSWatcher} fsw\n */\nconstructor(fsw) {\n  this.fsw = fsw;\n}\ncheckIgnored(path, stats) {\n  const ipaths = this.fsw._ignoredPaths;\n  if (this.fsw._isIgnored(path, stats)) {\n    ipaths.add(path);\n    if (stats && stats.isDirectory()) {\n      ipaths.add(path + ROOT_GLOBSTAR);\n    }\n    return true;\n  }\n\n  ipaths.delete(path);\n  ipaths.delete(path + ROOT_GLOBSTAR);\n}\n\naddOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n  const event = watchedDir.has(item) ? EV_CHANGE : EV_ADD;\n  this.handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n}\n\nasync checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n  try {\n    const stats = await stat(path)\n    if (this.fsw.closed) return;\n    if (sameTypes(info, stats)) {\n      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n    } else {\n      this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n    }\n  } catch (error) {\n    if (error.code === 'EACCES') {\n      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n    } else {\n      this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n    }\n  }\n}\n\nhandleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n  if (this.fsw.closed || this.checkIgnored(path)) return;\n\n  if (event === EV_UNLINK) {\n    const isDirectory = info.type === FSEVENT_TYPE_DIRECTORY\n    // suppress unlink events on never before seen files\n    if (isDirectory || watchedDir.has(item)) {\n      this.fsw._remove(parent, item, isDirectory);\n    }\n  } else {\n    if (event === EV_ADD) {\n      // track new directories\n      if (info.type === FSEVENT_TYPE_DIRECTORY) this.fsw._getWatchedDir(path);\n\n      if (info.type === FSEVENT_TYPE_SYMLINK && opts.followSymlinks) {\n        // push symlinks back to the top of the stack to get handled\n        const curDepth = opts.depth === undefined ?\n          undefined : calcDepth(fullPath, realPath) + 1;\n        return this._addToFsEvents(path, false, true, curDepth);\n      }\n\n      // track new paths\n      // (other than symlinks being followed, which will be tracked soon)\n      this.fsw._getWatchedDir(parent).add(item);\n    }\n    /**\n     * @type {'add'|'addDir'|'unlink'|'unlinkDir'}\n     */\n    const eventName = info.type === FSEVENT_TYPE_DIRECTORY ? event + DIR_SUFFIX : event;\n    this.fsw._emit(eventName, path);\n    if (eventName === EV_ADD_DIR) this._addToFsEvents(path, false, true);\n  }\n}\n\n/**\n * Handle symlinks encountered during directory scan\n * @param {String} watchPath  - file/dir path to be watched with fsevents\n * @param {String} realPath   - real path (in case of symlinks)\n * @param {Function} transform  - path transformer\n * @param {Function} globFilter - path filter in case a glob pattern was provided\n * @returns {Function} closer for the watcher instance\n*/\n_watchWithFsEvents(watchPath, realPath, transform, globFilter) {\n  if (this.fsw.closed || this.fsw._isIgnored(watchPath)) return;\n  const opts = this.fsw.options;\n  const watchCallback = async (fullPath, flags, info) => {\n    if (this.fsw.closed) return;\n    if (\n      opts.depth !== undefined &&\n      calcDepth(fullPath, realPath) > opts.depth\n    ) return;\n    const path = transform(sysPath.join(\n      watchPath, sysPath.relative(watchPath, fullPath)\n    ));\n    if (globFilter && !globFilter(path)) return;\n    // ensure directories are tracked\n    const parent = sysPath.dirname(path);\n    const item = sysPath.basename(path);\n    const watchedDir = this.fsw._getWatchedDir(\n      info.type === FSEVENT_TYPE_DIRECTORY ? path : parent\n    );\n\n    // correct for wrong events emitted\n    if (wrongEventFlags.has(flags) || info.event === FSEVENT_UNKNOWN) {\n      if (typeof opts.ignored === FUNCTION_TYPE) {\n        let stats;\n        try {\n          stats = await stat(path);\n        } catch (error) {}\n        if (this.fsw.closed) return;\n        if (this.checkIgnored(path, stats)) return;\n        if (sameTypes(info, stats)) {\n          this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n        } else {\n          this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n        }\n      } else {\n        this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      }\n    } else {\n      switch (info.event) {\n      case FSEVENT_CREATED:\n      case FSEVENT_MODIFIED:\n        return this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      case FSEVENT_DELETED:\n      case FSEVENT_MOVED:\n        return this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      }\n    }\n  };\n\n  const closer = setFSEventsListener(\n    watchPath,\n    realPath,\n    watchCallback,\n    this.fsw._emitRaw\n  );\n\n  this.fsw._emitReady();\n  return closer;\n}\n\n/**\n * Handle symlinks encountered during directory scan\n * @param {String} linkPath path to symlink\n * @param {String} fullPath absolute path to the symlink\n * @param {Function} transform pre-existing path transformer\n * @param {Number} curDepth level of subdirectories traversed to where symlink is\n * @returns {Promise<void>}\n */\nasync _handleFsEventsSymlink(linkPath, fullPath, transform, curDepth) {\n  // don't follow the same symlink more than once\n  if (this.fsw.closed || this.fsw._symlinkPaths.has(fullPath)) return;\n\n  this.fsw._symlinkPaths.set(fullPath, true);\n  this.fsw._incrReadyCount();\n\n  try {\n    const linkTarget = await realpath(linkPath);\n    if (this.fsw.closed) return;\n    if (this.fsw._isIgnored(linkTarget)) {\n      return this.fsw._emitReady();\n    }\n\n    this.fsw._incrReadyCount();\n\n    // add the linkTarget for watching with a wrapper for transform\n    // that causes emitted paths to incorporate the link's path\n    this._addToFsEvents(linkTarget || linkPath, (path) => {\n      let aliasedPath = linkPath;\n      if (linkTarget && linkTarget !== DOT_SLASH) {\n        aliasedPath = path.replace(linkTarget, linkPath);\n      } else if (path !== DOT_SLASH) {\n        aliasedPath = sysPath.join(linkPath, path);\n      }\n      return transform(aliasedPath);\n    }, false, curDepth);\n  } catch(error) {\n    if (this.fsw._handleError(error)) {\n      return this.fsw._emitReady();\n    }\n  }\n}\n\n/**\n *\n * @param {Path} newPath\n * @param {fs.Stats} stats\n */\nemitAdd(newPath, stats, processPath, opts, forceAdd) {\n  const pp = processPath(newPath);\n  const isDir = stats.isDirectory();\n  const dirObj = this.fsw._getWatchedDir(sysPath.dirname(pp));\n  const base = sysPath.basename(pp);\n\n  // ensure empty dirs get tracked\n  if (isDir) this.fsw._getWatchedDir(pp);\n  if (dirObj.has(base)) return;\n  dirObj.add(base);\n\n  if (!opts.ignoreInitial || forceAdd === true) {\n    this.fsw._emit(isDir ? EV_ADD_DIR : EV_ADD, pp, stats);\n  }\n}\n\ninitWatch(realPath, path, wh, processPath) {\n  if (this.fsw.closed) return;\n  const closer = this._watchWithFsEvents(\n    wh.watchPath,\n    sysPath.resolve(realPath || wh.watchPath),\n    processPath,\n    wh.globFilter\n  );\n  this.fsw._addPathCloser(path, closer);\n}\n\n/**\n * Handle added path with fsevents\n * @param {String} path file/dir path or glob pattern\n * @param {Function|Boolean=} transform converts working path to what the user expects\n * @param {Boolean=} forceAdd ensure add is emitted\n * @param {Number=} priorDepth Level of subdirectories already traversed.\n * @returns {Promise<void>}\n */\nasync _addToFsEvents(path, transform, forceAdd, priorDepth) {\n  if (this.fsw.closed) {\n    return;\n  }\n  const opts = this.fsw.options;\n  const processPath = typeof transform === FUNCTION_TYPE ? transform : IDENTITY_FN;\n\n  const wh = this.fsw._getWatchHelpers(path);\n\n  // evaluate what is at the path we're being asked to watch\n  try {\n    const stats = await statMethods[wh.statMethod](wh.watchPath);\n    if (this.fsw.closed) return;\n    if (this.fsw._isIgnored(wh.watchPath, stats)) {\n      throw null;\n    }\n    if (stats.isDirectory()) {\n      // emit addDir unless this is a glob parent\n      if (!wh.globFilter) this.emitAdd(processPath(path), stats, processPath, opts, forceAdd);\n\n      // don't recurse further if it would exceed depth setting\n      if (priorDepth && priorDepth > opts.depth) return;\n\n      // scan the contents of the dir\n      this.fsw._readdirp(wh.watchPath, {\n        fileFilter: entry => wh.filterPath(entry),\n        directoryFilter: entry => wh.filterDir(entry),\n        ...Depth(opts.depth - (priorDepth || 0))\n      }).on(STR_DATA, (entry) => {\n        // need to check filterPath on dirs b/c filterDir is less restrictive\n        if (this.fsw.closed) {\n          return;\n        }\n        if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;\n\n        const joinedPath = sysPath.join(wh.watchPath, entry.path);\n        const {fullPath} = entry;\n\n        if (wh.followSymlinks && entry.stats.isSymbolicLink()) {\n          // preserve the current depth here since it can't be derived from\n          // real paths past the symlink\n          const curDepth = opts.depth === undefined ?\n            undefined : calcDepth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;\n\n          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);\n        } else {\n          this.emitAdd(joinedPath, entry.stats, processPath, opts, forceAdd);\n        }\n      }).on(EV_ERROR, EMPTY_FN).on(STR_END, () => {\n        this.fsw._emitReady();\n      });\n    } else {\n      this.emitAdd(wh.watchPath, stats, processPath, opts, forceAdd);\n      this.fsw._emitReady();\n    }\n  } catch (error) {\n    if (!error || this.fsw._handleError(error)) {\n      // TODO: Strange thing: \"should not choke on an ignored watch path\" will be failed without 2 ready calls -__-\n      this.fsw._emitReady();\n      this.fsw._emitReady();\n    }\n  }\n\n  if (opts.persistent && forceAdd !== true) {\n    if (typeof transform === FUNCTION_TYPE) {\n      // realpath has already been resolved\n      this.initWatch(undefined, path, wh, processPath);\n    } else {\n      let realPath;\n      try {\n        realPath = await realpath(wh.watchPath);\n      } catch (e) {}\n      this.initWatch(realPath, path, wh, processPath);\n    }\n  }\n}\n\n}\n\nmodule.exports = FsEventsHandler;\nmodule.exports.canUse = canUse;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}