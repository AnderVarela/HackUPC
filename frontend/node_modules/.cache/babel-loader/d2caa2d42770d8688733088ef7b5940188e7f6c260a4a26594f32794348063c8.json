{"ast":null,"code":"'use strict';\n\nvar format = require('util').format;\nvar ERR_CODE = 'ARGError';\n\n/*:nodoc:*\n * argumentError(argument, message) -> TypeError\n * - argument (Object): action with broken argument\n * - message (String): error message\n *\n * Error format helper. An error from creating or using an argument\n * (optional or positional). The string value of this exception\n * is the message, augmented with information\n * about the argument that caused it.\n *\n * #####Example\n *\n *      var argumentErrorHelper = require('./argument/error');\n *      if (conflictOptionals.length > 0) {\n *        throw argumentErrorHelper(\n *          action,\n *          format('Conflicting option string(s): %s', conflictOptionals.join(', '))\n *        );\n *      }\n *\n **/\nmodule.exports = function (argument, message) {\n  var argumentName = null;\n  var errMessage;\n  var err;\n  if (argument.getName) {\n    argumentName = argument.getName();\n  } else {\n    argumentName = '' + argument;\n  }\n  if (!argumentName) {\n    errMessage = message;\n  } else {\n    errMessage = format('argument \"%s\": %s', argumentName, message);\n  }\n  err = new TypeError(errMessage);\n  err.code = ERR_CODE;\n  return err;\n};","map":{"version":3,"names":["format","require","ERR_CODE","module","exports","argument","message","argumentName","errMessage","err","getName","TypeError","code"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/argparse/lib/argument/error.js"],"sourcesContent":["'use strict';\n\n\nvar format  = require('util').format;\n\n\nvar ERR_CODE = 'ARGError';\n\n/*:nodoc:*\n * argumentError(argument, message) -> TypeError\n * - argument (Object): action with broken argument\n * - message (String): error message\n *\n * Error format helper. An error from creating or using an argument\n * (optional or positional). The string value of this exception\n * is the message, augmented with information\n * about the argument that caused it.\n *\n * #####Example\n *\n *      var argumentErrorHelper = require('./argument/error');\n *      if (conflictOptionals.length > 0) {\n *        throw argumentErrorHelper(\n *          action,\n *          format('Conflicting option string(s): %s', conflictOptionals.join(', '))\n *        );\n *      }\n *\n **/\nmodule.exports = function (argument, message) {\n  var argumentName = null;\n  var errMessage;\n  var err;\n\n  if (argument.getName) {\n    argumentName = argument.getName();\n  } else {\n    argumentName = '' + argument;\n  }\n\n  if (!argumentName) {\n    errMessage = message;\n  } else {\n    errMessage = format('argument \"%s\": %s', argumentName, message);\n  }\n\n  err = new TypeError(errMessage);\n  err.code = ERR_CODE;\n  return err;\n};\n"],"mappings":"AAAA,YAAY;;AAGZ,IAAIA,MAAM,GAAIC,OAAO,CAAC,MAAM,CAAC,CAACD,MAAM;AAGpC,IAAIE,QAAQ,GAAG,UAAU;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,UAAUC,QAAQ,EAAEC,OAAO,EAAE;EAC5C,IAAIC,YAAY,GAAG,IAAI;EACvB,IAAIC,UAAU;EACd,IAAIC,GAAG;EAEP,IAAIJ,QAAQ,CAACK,OAAO,EAAE;IACpBH,YAAY,GAAGF,QAAQ,CAACK,OAAO,CAAC,CAAC;EACnC,CAAC,MAAM;IACLH,YAAY,GAAG,EAAE,GAAGF,QAAQ;EAC9B;EAEA,IAAI,CAACE,YAAY,EAAE;IACjBC,UAAU,GAAGF,OAAO;EACtB,CAAC,MAAM;IACLE,UAAU,GAAGR,MAAM,CAAC,mBAAmB,EAAEO,YAAY,EAAED,OAAO,CAAC;EACjE;EAEAG,GAAG,GAAG,IAAIE,SAAS,CAACH,UAAU,CAAC;EAC/BC,GAAG,CAACG,IAAI,GAAGV,QAAQ;EACnB,OAAOO,GAAG;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}