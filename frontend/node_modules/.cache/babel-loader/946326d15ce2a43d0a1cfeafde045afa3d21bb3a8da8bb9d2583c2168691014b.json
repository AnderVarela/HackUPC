{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\nvar _collections = require('../collections');\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// SENTINEL constants are from https://github.com/facebook/immutable-js\nconst IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nconst IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nconst IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nconst IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\nconst IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nconst IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4\nconst IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\nconst IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nconst IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\nconst getImmutableName = name => `Immutable.${name}`;\nconst printAsLeaf = name => `[${name}]`;\nconst SPACE = ' ';\nconst LAZY = '…'; // Seq is lazy if it calls a method like filter\n\nconst printImmutableEntries = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : `${getImmutableName(type) + SPACE}{${(0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer)}}`;\n\n// Record has an entries method because it is a collection in immutable v3.\n// Return an iterator for Immutable Record from version v3 or v4.\nfunction getRecordEntries(val) {\n  let i = 0;\n  return {\n    next() {\n      if (i < val._keys.length) {\n        const key = val._keys[i++];\n        return {\n          done: false,\n          value: [key, val.get(key)]\n        };\n      }\n      return {\n        done: true,\n        value: undefined\n      };\n    }\n  };\n}\nconst printImmutableRecord = (val, config, indentation, depth, refs, printer) => {\n  // _name property is defined only for an Immutable Record instance\n  // which was constructed with a second optional descriptive name arg\n  const name = getImmutableName(val._name || 'Record');\n  return ++depth > config.maxDepth ? printAsLeaf(name) : `${name + SPACE}{${(0, _collections.printIteratorEntries)(getRecordEntries(val), config, indentation, depth, refs, printer)}}`;\n};\nconst printImmutableSeq = (val, config, indentation, depth, refs, printer) => {\n  const name = getImmutableName('Seq');\n  if (++depth > config.maxDepth) {\n    return printAsLeaf(name);\n  }\n  if (val[IS_KEYED_SENTINEL]) {\n    return `${name + SPACE}{${\n    // from Immutable collection of entries or from ECMAScript object\n    val._iter || val._object ? (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) : LAZY}}`;\n  }\n  return `${name + SPACE}[${val._iter ||\n  // from Immutable collection of values\n  val._array ||\n  // from ECMAScript array\n  val._collection ||\n  // from ECMAScript collection in immutable v4\n  val._iterable // from ECMAScript collection in immutable v3\n  ? (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) : LAZY}]`;\n};\nconst printImmutableValues = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : `${getImmutableName(type) + SPACE}[${(0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer)}]`;\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  if (val[IS_MAP_SENTINEL]) {\n    return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');\n  }\n  if (val[IS_LIST_SENTINEL]) {\n    return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');\n  }\n  if (val[IS_SET_SENTINEL]) {\n    return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');\n  }\n  if (val[IS_STACK_SENTINEL]) {\n    return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');\n  }\n  if (val[IS_SEQ_SENTINEL]) {\n    return printImmutableSeq(val, config, indentation, depth, refs, printer);\n  }\n\n  // For compatibility with immutable v3 and v4, let record be the default.\n  return printImmutableRecord(val, config, indentation, depth, refs, printer);\n};\n\n// Explicitly comparing sentinel properties to true avoids false positive\n// when mock identity-obj-proxy returns the key as the value for any key.\nexports.serialize = serialize;\nconst test = val => val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","test","serialize","default","_collections","require","IS_ITERABLE_SENTINEL","IS_LIST_SENTINEL","IS_KEYED_SENTINEL","IS_MAP_SENTINEL","IS_ORDERED_SENTINEL","IS_RECORD_SENTINEL","IS_SEQ_SENTINEL","IS_SET_SENTINEL","IS_STACK_SENTINEL","getImmutableName","name","printAsLeaf","SPACE","LAZY","printImmutableEntries","val","config","indentation","depth","refs","printer","type","maxDepth","printIteratorEntries","entries","getRecordEntries","i","next","_keys","length","key","done","get","undefined","printImmutableRecord","_name","printImmutableSeq","_iter","_object","_array","_collection","_iterable","printIteratorValues","values","printImmutableValues","plugin","_default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@types/jest/node_modules/pretty-format/build/plugins/Immutable.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\nvar _collections = require('../collections');\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// SENTINEL constants are from https://github.com/facebook/immutable-js\nconst IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nconst IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nconst IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nconst IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\nconst IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nconst IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4\nconst IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\nconst IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nconst IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\nconst getImmutableName = name => `Immutable.${name}`;\nconst printAsLeaf = name => `[${name}]`;\nconst SPACE = ' ';\nconst LAZY = '…'; // Seq is lazy if it calls a method like filter\n\nconst printImmutableEntries = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : `${getImmutableName(type) + SPACE}{${(0,\n      _collections.printIteratorEntries)(\n        val.entries(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      )}}`;\n\n// Record has an entries method because it is a collection in immutable v3.\n// Return an iterator for Immutable Record from version v3 or v4.\nfunction getRecordEntries(val) {\n  let i = 0;\n  return {\n    next() {\n      if (i < val._keys.length) {\n        const key = val._keys[i++];\n        return {\n          done: false,\n          value: [key, val.get(key)]\n        };\n      }\n      return {\n        done: true,\n        value: undefined\n      };\n    }\n  };\n}\nconst printImmutableRecord = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer\n) => {\n  // _name property is defined only for an Immutable Record instance\n  // which was constructed with a second optional descriptive name arg\n  const name = getImmutableName(val._name || 'Record');\n  return ++depth > config.maxDepth\n    ? printAsLeaf(name)\n    : `${name + SPACE}{${(0, _collections.printIteratorEntries)(\n        getRecordEntries(val),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      )}}`;\n};\nconst printImmutableSeq = (val, config, indentation, depth, refs, printer) => {\n  const name = getImmutableName('Seq');\n  if (++depth > config.maxDepth) {\n    return printAsLeaf(name);\n  }\n  if (val[IS_KEYED_SENTINEL]) {\n    return `${name + SPACE}{${\n      // from Immutable collection of entries or from ECMAScript object\n      val._iter || val._object\n        ? (0, _collections.printIteratorEntries)(\n            val.entries(),\n            config,\n            indentation,\n            depth,\n            refs,\n            printer\n          )\n        : LAZY\n    }}`;\n  }\n  return `${name + SPACE}[${\n    val._iter ||\n    // from Immutable collection of values\n    val._array ||\n    // from ECMAScript array\n    val._collection ||\n    // from ECMAScript collection in immutable v4\n    val._iterable // from ECMAScript collection in immutable v3\n      ? (0, _collections.printIteratorValues)(\n          val.values(),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        )\n      : LAZY\n  }]`;\n};\nconst printImmutableValues = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : `${getImmutableName(type) + SPACE}[${(0,\n      _collections.printIteratorValues)(\n        val.values(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      )}]`;\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  if (val[IS_MAP_SENTINEL]) {\n    return printImmutableEntries(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map'\n    );\n  }\n  if (val[IS_LIST_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'List'\n    );\n  }\n  if (val[IS_SET_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set'\n    );\n  }\n  if (val[IS_STACK_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'Stack'\n    );\n  }\n  if (val[IS_SEQ_SENTINEL]) {\n    return printImmutableSeq(val, config, indentation, depth, refs, printer);\n  }\n\n  // For compatibility with immutable v3 and v4, let record be the default.\n  return printImmutableRecord(val, config, indentation, depth, refs, printer);\n};\n\n// Explicitly comparing sentinel properties to true avoids false positive\n// when mock identity-obj-proxy returns the key as the value for any key.\nexports.serialize = serialize;\nconst test = val =>\n  val &&\n  (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,IAAI,GAAGF,OAAO,CAACG,SAAS,GAAGH,OAAO,CAACI,OAAO,GAAG,KAAK,CAAC;AAC3D,IAAIC,YAAY,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,oBAAoB,GAAG,4BAA4B;AACzD,MAAMC,gBAAgB,GAAG,wBAAwB;AACjD,MAAMC,iBAAiB,GAAG,yBAAyB;AACnD,MAAMC,eAAe,GAAG,uBAAuB;AAC/C,MAAMC,mBAAmB,GAAG,2BAA2B;AACvD,MAAMC,kBAAkB,GAAG,0BAA0B,CAAC,CAAC;AACvD,MAAMC,eAAe,GAAG,uBAAuB;AAC/C,MAAMC,eAAe,GAAG,uBAAuB;AAC/C,MAAMC,iBAAiB,GAAG,yBAAyB;AACnD,MAAMC,gBAAgB,GAAGC,IAAI,IAAK,aAAYA,IAAK,EAAC;AACpD,MAAMC,WAAW,GAAGD,IAAI,IAAK,IAAGA,IAAK,GAAE;AACvC,MAAME,KAAK,GAAG,GAAG;AACjB,MAAMC,IAAI,GAAG,GAAG,CAAC,CAAC;;AAElB,MAAMC,qBAAqB,GAAGA,CAC5BC,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OAAO,EACPC,IAAI,KAEJ,EAAEH,KAAK,GAAGF,MAAM,CAACM,QAAQ,GACrBX,WAAW,CAACF,gBAAgB,CAACY,IAAI,CAAC,CAAC,GAClC,GAAEZ,gBAAgB,CAACY,IAAI,CAAC,GAAGT,KAAM,IAAG,CAAC,CAAC,EACvCd,YAAY,CAACyB,oBAAoB,EAC/BR,GAAG,CAACS,OAAO,CAAC,CAAC,EACbR,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OACF,CAAE,GAAE;;AAEV;AACA;AACA,SAASK,gBAAgBA,CAACV,GAAG,EAAE;EAC7B,IAAIW,CAAC,GAAG,CAAC;EACT,OAAO;IACLC,IAAIA,CAAA,EAAG;MACL,IAAID,CAAC,GAAGX,GAAG,CAACa,KAAK,CAACC,MAAM,EAAE;QACxB,MAAMC,GAAG,GAAGf,GAAG,CAACa,KAAK,CAACF,CAAC,EAAE,CAAC;QAC1B,OAAO;UACLK,IAAI,EAAE,KAAK;UACXrC,KAAK,EAAE,CAACoC,GAAG,EAAEf,GAAG,CAACiB,GAAG,CAACF,GAAG,CAAC;QAC3B,CAAC;MACH;MACA,OAAO;QACLC,IAAI,EAAE,IAAI;QACVrC,KAAK,EAAEuC;MACT,CAAC;IACH;EACF,CAAC;AACH;AACA,MAAMC,oBAAoB,GAAGA,CAC3BnB,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OAAO,KACJ;EACH;EACA;EACA,MAAMV,IAAI,GAAGD,gBAAgB,CAACM,GAAG,CAACoB,KAAK,IAAI,QAAQ,CAAC;EACpD,OAAO,EAAEjB,KAAK,GAAGF,MAAM,CAACM,QAAQ,GAC5BX,WAAW,CAACD,IAAI,CAAC,GAChB,GAAEA,IAAI,GAAGE,KAAM,IAAG,CAAC,CAAC,EAAEd,YAAY,CAACyB,oBAAoB,EACtDE,gBAAgB,CAACV,GAAG,CAAC,EACrBC,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OACF,CAAE,GAAE;AACV,CAAC;AACD,MAAMgB,iBAAiB,GAAGA,CAACrB,GAAG,EAAEC,MAAM,EAAEC,WAAW,EAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC5E,MAAMV,IAAI,GAAGD,gBAAgB,CAAC,KAAK,CAAC;EACpC,IAAI,EAAES,KAAK,GAAGF,MAAM,CAACM,QAAQ,EAAE;IAC7B,OAAOX,WAAW,CAACD,IAAI,CAAC;EAC1B;EACA,IAAIK,GAAG,CAACb,iBAAiB,CAAC,EAAE;IAC1B,OAAQ,GAAEQ,IAAI,GAAGE,KAAM;IACrB;IACAG,GAAG,CAACsB,KAAK,IAAItB,GAAG,CAACuB,OAAO,GACpB,CAAC,CAAC,EAAExC,YAAY,CAACyB,oBAAoB,EACnCR,GAAG,CAACS,OAAO,CAAC,CAAC,EACbR,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OACF,CAAC,GACDP,IACL,GAAE;EACL;EACA,OAAQ,GAAEH,IAAI,GAAGE,KAAM,IACrBG,GAAG,CAACsB,KAAK;EACT;EACAtB,GAAG,CAACwB,MAAM;EACV;EACAxB,GAAG,CAACyB,WAAW;EACf;EACAzB,GAAG,CAAC0B,SAAS,CAAC;EAAA,EACV,CAAC,CAAC,EAAE3C,YAAY,CAAC4C,mBAAmB,EAClC3B,GAAG,CAAC4B,MAAM,CAAC,CAAC,EACZ3B,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OACF,CAAC,GACDP,IACL,GAAE;AACL,CAAC;AACD,MAAM+B,oBAAoB,GAAGA,CAC3B7B,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OAAO,EACPC,IAAI,KAEJ,EAAEH,KAAK,GAAGF,MAAM,CAACM,QAAQ,GACrBX,WAAW,CAACF,gBAAgB,CAACY,IAAI,CAAC,CAAC,GAClC,GAAEZ,gBAAgB,CAACY,IAAI,CAAC,GAAGT,KAAM,IAAG,CAAC,CAAC,EACvCd,YAAY,CAAC4C,mBAAmB,EAC9B3B,GAAG,CAAC4B,MAAM,CAAC,CAAC,EACZ3B,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OACF,CAAE,GAAE;AACV,MAAMxB,SAAS,GAAGA,CAACmB,GAAG,EAAEC,MAAM,EAAEC,WAAW,EAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,KAAK;EACpE,IAAIL,GAAG,CAACZ,eAAe,CAAC,EAAE;IACxB,OAAOW,qBAAqB,CAC1BC,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OAAO,EACPL,GAAG,CAACX,mBAAmB,CAAC,GAAG,YAAY,GAAG,KAC5C,CAAC;EACH;EACA,IAAIW,GAAG,CAACd,gBAAgB,CAAC,EAAE;IACzB,OAAO2C,oBAAoB,CACzB7B,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OAAO,EACP,MACF,CAAC;EACH;EACA,IAAIL,GAAG,CAACR,eAAe,CAAC,EAAE;IACxB,OAAOqC,oBAAoB,CACzB7B,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OAAO,EACPL,GAAG,CAACX,mBAAmB,CAAC,GAAG,YAAY,GAAG,KAC5C,CAAC;EACH;EACA,IAAIW,GAAG,CAACP,iBAAiB,CAAC,EAAE;IAC1B,OAAOoC,oBAAoB,CACzB7B,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OAAO,EACP,OACF,CAAC;EACH;EACA,IAAIL,GAAG,CAACT,eAAe,CAAC,EAAE;IACxB,OAAO8B,iBAAiB,CAACrB,GAAG,EAAEC,MAAM,EAAEC,WAAW,EAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,CAAC;EAC1E;;EAEA;EACA,OAAOc,oBAAoB,CAACnB,GAAG,EAAEC,MAAM,EAAEC,WAAW,EAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,CAAC;AAC7E,CAAC;;AAED;AACA;AACA3B,OAAO,CAACG,SAAS,GAAGA,SAAS;AAC7B,MAAMD,IAAI,GAAGoB,GAAG,IACdA,GAAG,KACFA,GAAG,CAACf,oBAAoB,CAAC,KAAK,IAAI,IAAIe,GAAG,CAACV,kBAAkB,CAAC,KAAK,IAAI,CAAC;AAC1EZ,OAAO,CAACE,IAAI,GAAGA,IAAI;AACnB,MAAMkD,MAAM,GAAG;EACbjD,SAAS;EACTD;AACF,CAAC;AACD,IAAImD,QAAQ,GAAGD,MAAM;AACrBpD,OAAO,CAACI,OAAO,GAAGiD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}