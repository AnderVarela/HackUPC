{"ast":null,"code":"'use strict';\n\nconst vendors = require('./vendors.json');\nconst env = process.env;\n\n// Used for testing only\nObject.defineProperty(exports, '_vendors', {\n  value: vendors.map(function (v) {\n    return v.constant;\n  })\n});\nexports.name = null;\nexports.isPR = null;\nvendors.forEach(function (vendor) {\n  const envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];\n  const isCI = envs.every(function (obj) {\n    return checkEnv(obj);\n  });\n  exports[vendor.constant] = isCI;\n  if (!isCI) {\n    return;\n  }\n  exports.name = vendor.name;\n  switch (typeof vendor.pr) {\n    case 'string':\n      // \"pr\": \"CIRRUS_PR\"\n      exports.isPR = !!env[vendor.pr];\n      break;\n    case 'object':\n      if ('env' in vendor.pr) {\n        // \"pr\": { \"env\": \"BUILDKITE_PULL_REQUEST\", \"ne\": \"false\" }\n        exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;\n      } else if ('any' in vendor.pr) {\n        // \"pr\": { \"any\": [\"ghprbPullId\", \"CHANGE_ID\"] }\n        exports.isPR = vendor.pr.any.some(function (key) {\n          return !!env[key];\n        });\n      } else {\n        // \"pr\": { \"DRONE_BUILD_EVENT\": \"pull_request\" }\n        exports.isPR = checkEnv(vendor.pr);\n      }\n      break;\n    default:\n      // PR detection not supported for this vendor\n      exports.isPR = null;\n  }\n});\nexports.isCI = !!(env.CI !== 'false' && (\n// Bypass all checks if CI env is explicitly set to 'false'\nenv.BUILD_ID ||\n// Jenkins, Cloudbees\nenv.BUILD_NUMBER ||\n// Jenkins, TeamCity\nenv.CI ||\n// Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari\nenv.CI_APP_ID ||\n// Appflow\nenv.CI_BUILD_ID ||\n// Appflow\nenv.CI_BUILD_NUMBER ||\n// Appflow\nenv.CI_NAME ||\n// Codeship and others\nenv.CONTINUOUS_INTEGRATION ||\n// Travis CI, Cirrus CI\nenv.RUN_ID ||\n// TaskCluster, dsari\nexports.name || false));\nfunction checkEnv(obj) {\n  // \"env\": \"CIRRUS\"\n  if (typeof obj === 'string') return !!env[obj];\n\n  // \"env\": { \"env\": \"NODE\", \"includes\": \"/app/.heroku/node/bin/node\" }\n  if ('env' in obj) {\n    // Currently there are no other types, uncomment when there are\n    // if ('includes' in obj) {\n    return env[obj.env] && env[obj.env].includes(obj.includes);\n    // }\n  }\n  if ('any' in obj) {\n    return obj.any.some(function (k) {\n      return !!env[k];\n    });\n  }\n  return Object.keys(obj).every(function (k) {\n    return env[k] === obj[k];\n  });\n}","map":{"version":3,"names":["vendors","require","env","process","Object","defineProperty","exports","value","map","v","constant","name","isPR","forEach","vendor","envs","Array","isArray","isCI","every","obj","checkEnv","pr","ne","any","some","key","CI","BUILD_ID","BUILD_NUMBER","CI_APP_ID","CI_BUILD_ID","CI_BUILD_NUMBER","CI_NAME","CONTINUOUS_INTEGRATION","RUN_ID","includes","k","keys"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/ci-info/index.js"],"sourcesContent":["'use strict'\n\nconst vendors = require('./vendors.json')\n\nconst env = process.env\n\n// Used for testing only\nObject.defineProperty(exports, '_vendors', {\n  value: vendors.map(function (v) {\n    return v.constant\n  })\n})\n\nexports.name = null\nexports.isPR = null\n\nvendors.forEach(function (vendor) {\n  const envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env]\n  const isCI = envs.every(function (obj) {\n    return checkEnv(obj)\n  })\n\n  exports[vendor.constant] = isCI\n\n  if (!isCI) {\n    return\n  }\n\n  exports.name = vendor.name\n\n  switch (typeof vendor.pr) {\n    case 'string':\n      // \"pr\": \"CIRRUS_PR\"\n      exports.isPR = !!env[vendor.pr]\n      break\n    case 'object':\n      if ('env' in vendor.pr) {\n        // \"pr\": { \"env\": \"BUILDKITE_PULL_REQUEST\", \"ne\": \"false\" }\n        exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne\n      } else if ('any' in vendor.pr) {\n        // \"pr\": { \"any\": [\"ghprbPullId\", \"CHANGE_ID\"] }\n        exports.isPR = vendor.pr.any.some(function (key) {\n          return !!env[key]\n        })\n      } else {\n        // \"pr\": { \"DRONE_BUILD_EVENT\": \"pull_request\" }\n        exports.isPR = checkEnv(vendor.pr)\n      }\n      break\n    default:\n      // PR detection not supported for this vendor\n      exports.isPR = null\n  }\n})\n\nexports.isCI = !!(\n  env.CI !== 'false' && // Bypass all checks if CI env is explicitly set to 'false'\n  (env.BUILD_ID || // Jenkins, Cloudbees\n  env.BUILD_NUMBER || // Jenkins, TeamCity\n  env.CI || // Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari\n  env.CI_APP_ID || // Appflow\n  env.CI_BUILD_ID || // Appflow\n  env.CI_BUILD_NUMBER || // Appflow\n  env.CI_NAME || // Codeship and others\n  env.CONTINUOUS_INTEGRATION || // Travis CI, Cirrus CI\n  env.RUN_ID || // TaskCluster, dsari\n  exports.name ||\n  false)\n)\n\nfunction checkEnv (obj) {\n  // \"env\": \"CIRRUS\"\n  if (typeof obj === 'string') return !!env[obj]\n\n  // \"env\": { \"env\": \"NODE\", \"includes\": \"/app/.heroku/node/bin/node\" }\n  if ('env' in obj) {\n    // Currently there are no other types, uncomment when there are\n    // if ('includes' in obj) {\n    return env[obj.env] && env[obj.env].includes(obj.includes)\n    // }\n  }\n  if ('any' in obj) {\n    return obj.any.some(function (k) {\n      return !!env[k]\n    })\n  }\n  return Object.keys(obj).every(function (k) {\n    return env[k] === obj[k]\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAEzC,MAAMC,GAAG,GAAGC,OAAO,CAACD,GAAG;;AAEvB;AACAE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,UAAU,EAAE;EACzCC,KAAK,EAAEP,OAAO,CAACQ,GAAG,CAAC,UAAUC,CAAC,EAAE;IAC9B,OAAOA,CAAC,CAACC,QAAQ;EACnB,CAAC;AACH,CAAC,CAAC;AAEFJ,OAAO,CAACK,IAAI,GAAG,IAAI;AACnBL,OAAO,CAACM,IAAI,GAAG,IAAI;AAEnBZ,OAAO,CAACa,OAAO,CAAC,UAAUC,MAAM,EAAE;EAChC,MAAMC,IAAI,GAAGC,KAAK,CAACC,OAAO,CAACH,MAAM,CAACZ,GAAG,CAAC,GAAGY,MAAM,CAACZ,GAAG,GAAG,CAACY,MAAM,CAACZ,GAAG,CAAC;EAClE,MAAMgB,IAAI,GAAGH,IAAI,CAACI,KAAK,CAAC,UAAUC,GAAG,EAAE;IACrC,OAAOC,QAAQ,CAACD,GAAG,CAAC;EACtB,CAAC,CAAC;EAEFd,OAAO,CAACQ,MAAM,CAACJ,QAAQ,CAAC,GAAGQ,IAAI;EAE/B,IAAI,CAACA,IAAI,EAAE;IACT;EACF;EAEAZ,OAAO,CAACK,IAAI,GAAGG,MAAM,CAACH,IAAI;EAE1B,QAAQ,OAAOG,MAAM,CAACQ,EAAE;IACtB,KAAK,QAAQ;MACX;MACAhB,OAAO,CAACM,IAAI,GAAG,CAAC,CAACV,GAAG,CAACY,MAAM,CAACQ,EAAE,CAAC;MAC/B;IACF,KAAK,QAAQ;MACX,IAAI,KAAK,IAAIR,MAAM,CAACQ,EAAE,EAAE;QACtB;QACAhB,OAAO,CAACM,IAAI,GAAGE,MAAM,CAACQ,EAAE,CAACpB,GAAG,IAAIA,GAAG,IAAIA,GAAG,CAACY,MAAM,CAACQ,EAAE,CAACpB,GAAG,CAAC,KAAKY,MAAM,CAACQ,EAAE,CAACC,EAAE;MAC5E,CAAC,MAAM,IAAI,KAAK,IAAIT,MAAM,CAACQ,EAAE,EAAE;QAC7B;QACAhB,OAAO,CAACM,IAAI,GAAGE,MAAM,CAACQ,EAAE,CAACE,GAAG,CAACC,IAAI,CAAC,UAAUC,GAAG,EAAE;UAC/C,OAAO,CAAC,CAACxB,GAAG,CAACwB,GAAG,CAAC;QACnB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACApB,OAAO,CAACM,IAAI,GAAGS,QAAQ,CAACP,MAAM,CAACQ,EAAE,CAAC;MACpC;MACA;IACF;MACE;MACAhB,OAAO,CAACM,IAAI,GAAG,IAAI;EACvB;AACF,CAAC,CAAC;AAEFN,OAAO,CAACY,IAAI,GAAG,CAAC,EACdhB,GAAG,CAACyB,EAAE,KAAK,OAAO;AAAI;AACrBzB,GAAG,CAAC0B,QAAQ;AAAI;AACjB1B,GAAG,CAAC2B,YAAY;AAAI;AACpB3B,GAAG,CAACyB,EAAE;AAAI;AACVzB,GAAG,CAAC4B,SAAS;AAAI;AACjB5B,GAAG,CAAC6B,WAAW;AAAI;AACnB7B,GAAG,CAAC8B,eAAe;AAAI;AACvB9B,GAAG,CAAC+B,OAAO;AAAI;AACf/B,GAAG,CAACgC,sBAAsB;AAAI;AAC9BhC,GAAG,CAACiC,MAAM;AAAI;AACd7B,OAAO,CAACK,IAAI,IACZ,KAAK,CAAC,CACP;AAED,SAASU,QAAQA,CAAED,GAAG,EAAE;EACtB;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAO,CAAC,CAAClB,GAAG,CAACkB,GAAG,CAAC;;EAE9C;EACA,IAAI,KAAK,IAAIA,GAAG,EAAE;IAChB;IACA;IACA,OAAOlB,GAAG,CAACkB,GAAG,CAAClB,GAAG,CAAC,IAAIA,GAAG,CAACkB,GAAG,CAAClB,GAAG,CAAC,CAACkC,QAAQ,CAAChB,GAAG,CAACgB,QAAQ,CAAC;IAC1D;EACF;EACA,IAAI,KAAK,IAAIhB,GAAG,EAAE;IAChB,OAAOA,GAAG,CAACI,GAAG,CAACC,IAAI,CAAC,UAAUY,CAAC,EAAE;MAC/B,OAAO,CAAC,CAACnC,GAAG,CAACmC,CAAC,CAAC;IACjB,CAAC,CAAC;EACJ;EACA,OAAOjC,MAAM,CAACkC,IAAI,CAAClB,GAAG,CAAC,CAACD,KAAK,CAAC,UAAUkB,CAAC,EAAE;IACzC,OAAOnC,GAAG,CAACmC,CAAC,CAAC,KAAKjB,GAAG,CAACiB,CAAC,CAAC;EAC1B,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}