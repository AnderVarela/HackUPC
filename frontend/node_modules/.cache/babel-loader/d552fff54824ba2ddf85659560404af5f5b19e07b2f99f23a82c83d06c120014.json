{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fuzzyMatches = fuzzyMatches;\nexports.getDefaultNormalizer = getDefaultNormalizer;\nexports.makeNormalizer = makeNormalizer;\nexports.matches = matches;\nfunction assertNotNullOrUndefined(matcher) {\n  if (matcher === null || matcher === undefined) {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`\n    `It looks like ${matcher} was passed instead of a matcher. Did you do something like getByText(${matcher})?`);\n  }\n}\nfunction fuzzyMatches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n  if (typeof matcher === 'string' || typeof matcher === 'number') {\n    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());\n  } else if (typeof matcher === 'function') {\n    return matcher(normalizedText, node);\n  } else {\n    return matchRegExp(matcher, normalizedText);\n  }\n}\nfunction matches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n  if (matcher instanceof Function) {\n    return matcher(normalizedText, node);\n  } else if (matcher instanceof RegExp) {\n    return matchRegExp(matcher, normalizedText);\n  } else {\n    return normalizedText === String(matcher);\n  }\n}\nfunction getDefaultNormalizer({\n  trim = true,\n  collapseWhitespace = true\n} = {}) {\n  return text => {\n    let normalizedText = text;\n    normalizedText = trim ? normalizedText.trim() : normalizedText;\n    normalizedText = collapseWhitespace ? normalizedText.replace(/\\s+/g, ' ') : normalizedText;\n    return normalizedText;\n  };\n}\n\n/**\n * Constructs a normalizer to pass to functions in matches.js\n * @param {boolean|undefined} trim The user-specified value for `trim`, without\n * any defaulting having been applied\n * @param {boolean|undefined} collapseWhitespace The user-specified value for\n * `collapseWhitespace`, without any defaulting having been applied\n * @param {Function|undefined} normalizer The user-specified normalizer\n * @returns {Function} A normalizer\n */\n\nfunction makeNormalizer({\n  trim,\n  collapseWhitespace,\n  normalizer\n}) {\n  if (!normalizer) {\n    // No custom normalizer specified. Just use default.\n    return getDefaultNormalizer({\n      trim,\n      collapseWhitespace\n    });\n  }\n  if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {\n    // They've also specified a value for trim or collapseWhitespace\n    throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use \"getDefaultNormalizer({trim, collapseWhitespace})\" and compose that into your normalizer');\n  }\n  return normalizer;\n}\nfunction matchRegExp(matcher, text) {\n  const match = matcher.test(text);\n  if (matcher.global && matcher.lastIndex !== 0) {\n    console.warn(`To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.`);\n    matcher.lastIndex = 0;\n  }\n  return match;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","fuzzyMatches","getDefaultNormalizer","makeNormalizer","matches","assertNotNullOrUndefined","matcher","undefined","Error","textToMatch","node","normalizer","normalizedText","toLowerCase","includes","toString","matchRegExp","Function","RegExp","String","trim","collapseWhitespace","text","replace","match","test","global","lastIndex","console","warn"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/matches.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fuzzyMatches = fuzzyMatches;\nexports.getDefaultNormalizer = getDefaultNormalizer;\nexports.makeNormalizer = makeNormalizer;\nexports.matches = matches;\nfunction assertNotNullOrUndefined(matcher) {\n  if (matcher === null || matcher === undefined) {\n    throw new Error(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`\n    `It looks like ${matcher} was passed instead of a matcher. Did you do something like getByText(${matcher})?`);\n  }\n}\nfunction fuzzyMatches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n  if (typeof matcher === 'string' || typeof matcher === 'number') {\n    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());\n  } else if (typeof matcher === 'function') {\n    return matcher(normalizedText, node);\n  } else {\n    return matchRegExp(matcher, normalizedText);\n  }\n}\nfunction matches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n  if (matcher instanceof Function) {\n    return matcher(normalizedText, node);\n  } else if (matcher instanceof RegExp) {\n    return matchRegExp(matcher, normalizedText);\n  } else {\n    return normalizedText === String(matcher);\n  }\n}\nfunction getDefaultNormalizer({\n  trim = true,\n  collapseWhitespace = true\n} = {}) {\n  return text => {\n    let normalizedText = text;\n    normalizedText = trim ? normalizedText.trim() : normalizedText;\n    normalizedText = collapseWhitespace ? normalizedText.replace(/\\s+/g, ' ') : normalizedText;\n    return normalizedText;\n  };\n}\n\n/**\n * Constructs a normalizer to pass to functions in matches.js\n * @param {boolean|undefined} trim The user-specified value for `trim`, without\n * any defaulting having been applied\n * @param {boolean|undefined} collapseWhitespace The user-specified value for\n * `collapseWhitespace`, without any defaulting having been applied\n * @param {Function|undefined} normalizer The user-specified normalizer\n * @returns {Function} A normalizer\n */\n\nfunction makeNormalizer({\n  trim,\n  collapseWhitespace,\n  normalizer\n}) {\n  if (!normalizer) {\n    // No custom normalizer specified. Just use default.\n    return getDefaultNormalizer({\n      trim,\n      collapseWhitespace\n    });\n  }\n  if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {\n    // They've also specified a value for trim or collapseWhitespace\n    throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use \"getDefaultNormalizer({trim, collapseWhitespace})\" and compose that into your normalizer');\n  }\n  return normalizer;\n}\nfunction matchRegExp(matcher, text) {\n  const match = matcher.test(text);\n  if (matcher.global && matcher.lastIndex !== 0) {\n    console.warn(`To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.`);\n    matcher.lastIndex = 0;\n  }\n  return match;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}