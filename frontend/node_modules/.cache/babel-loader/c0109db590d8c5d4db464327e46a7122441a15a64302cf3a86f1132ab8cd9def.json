{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst util = __importStar(require(\"../util\"));\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('space-before-blocks');\nexports.default = util.createRule({\n  name: 'space-before-blocks',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent spacing before blocks',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: baseRule.meta.fixable,\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    messages: Object.assign({\n      // @ts-expect-error -- we report on this messageId so we need to ensure it's there in case ESLint changes in future\n      unexpectedSpace: 'Unexpected space before opening brace.',\n      // @ts-expect-error -- we report on this messageId so we need to ensure it's there in case ESLint changes in future\n      missingSpace: 'Missing space before opening brace.'\n    }, baseRule.meta.messages)\n  },\n  defaultOptions: ['always'],\n  create(context, [config]) {\n    const rules = baseRule.create(context);\n    const sourceCode = context.getSourceCode();\n    let requireSpace = true;\n    if (typeof config === 'object') {\n      requireSpace = config.classes === 'always';\n    } else if (config === 'never') {\n      requireSpace = false;\n    }\n    function checkPrecedingSpace(node) {\n      const precedingToken = sourceCode.getTokenBefore(node);\n      if (precedingToken && util.isTokenOnSameLine(precedingToken, node)) {\n        // eslint-disable-next-line deprecation/deprecation -- TODO - switch once our min ESLint version is 6.7.0\n        const hasSpace = sourceCode.isSpaceBetweenTokens(precedingToken, node);\n        if (requireSpace && !hasSpace) {\n          context.report({\n            node,\n            messageId: 'missingSpace',\n            fix(fixer) {\n              return fixer.insertTextBefore(node, ' ');\n            }\n          });\n        } else if (!requireSpace && hasSpace) {\n          context.report({\n            node,\n            messageId: 'unexpectedSpace',\n            fix(fixer) {\n              return fixer.removeRange([precedingToken.range[1], node.range[0]]);\n            }\n          });\n        }\n      }\n    }\n    function checkSpaceAfterEnum(node) {\n      const punctuator = sourceCode.getTokenAfter(node.id);\n      if (punctuator) {\n        checkPrecedingSpace(punctuator);\n      }\n    }\n    return Object.assign(Object.assign({}, rules), {\n      TSEnumDeclaration: checkSpaceAfterEnum,\n      TSInterfaceBody: checkPrecedingSpace\n    });\n  }\n});","map":{"version":3,"names":["util","__importStar","require","getESLintCoreRule_1","baseRule","getESLintCoreRule","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","hasSuggestions","schema","messages","Object","assign","unexpectedSpace","missingSpace","defaultOptions","create","context","config","rules","sourceCode","getSourceCode","requireSpace","classes","checkPrecedingSpace","node","precedingToken","getTokenBefore","isTokenOnSameLine","hasSpace","isSpaceBetweenTokens","report","messageId","fix","fixer","insertTextBefore","removeRange","range","checkSpaceAfterEnum","punctuator","getTokenAfter","id","TSEnumDeclaration","TSInterfaceBody"],"sources":["../../src/rules/space-before-blocks.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAAA,IAAA,GAAAC,YAAA,CAAAC,OAAA;AACA,MAAAC,mBAAA,GAAAD,OAAA;AAEA,MAAME,QAAQ,GAAG,IAAAD,mBAAA,CAAAE,iBAAiB,EAAC,qBAAqB,CAAC;AAKzDC,OAAA,CAAAC,OAAA,GAAeP,IAAI,CAACQ,UAAU,CAAsB;EAClDC,IAAI,EAAE,qBAAqB;EAC3BC,IAAI,EAAE;IACJC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;MACJC,WAAW,EAAE,0CAA0C;MACvDC,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE;KAClB;IACDC,OAAO,EAAEZ,QAAQ,CAACM,IAAI,CAACM,OAAO;IAC9BC,cAAc,EAAEb,QAAQ,CAACM,IAAI,CAACO,cAAc;IAC5CC,MAAM,EAAEd,QAAQ,CAACM,IAAI,CAACQ,MAAM;IAC5BC,QAAQ,EAAAC,MAAA,CAAAC,MAAA;MACN;MACAC,eAAe,EAAE,wCAAwC;MACzD;MACAC,YAAY,EAAE;IAAqC,GAChDnB,QAAQ,CAACM,IAAI,CAACS,QAAQ;GAE5B;EACDK,cAAc,EAAE,CAAC,QAAQ,CAAC;EAC1BC,MAAMA,CAACC,OAAO,EAAE,CAACC,MAAM,CAAC;IACtB,MAAMC,KAAK,GAAGxB,QAAQ,CAACqB,MAAM,CAACC,OAAO,CAAC;IACtC,MAAMG,UAAU,GAAGH,OAAO,CAACI,aAAa,EAAE;IAE1C,IAAIC,YAAY,GAAG,IAAI;IAEvB,IAAI,OAAOJ,MAAM,KAAK,QAAQ,EAAE;MAC9BI,YAAY,GAAGJ,MAAM,CAACK,OAAO,KAAK,QAAQ;KAC3C,MAAM,IAAIL,MAAM,KAAK,OAAO,EAAE;MAC7BI,YAAY,GAAG,KAAK;;IAGtB,SAASE,mBAAmBA,CAC1BC,IAA+C;MAE/C,MAAMC,cAAc,GAAGN,UAAU,CAACO,cAAc,CAACF,IAAI,CAAC;MACtD,IAAIC,cAAc,IAAInC,IAAI,CAACqC,iBAAiB,CAACF,cAAc,EAAED,IAAI,CAAC,EAAE;QAClE;QACA,MAAMI,QAAQ,GAAGT,UAAU,CAACU,oBAAoB,CAC9CJ,cAAc,EACdD,IAAsB,CACvB;QAED,IAAIH,YAAY,IAAI,CAACO,QAAQ,EAAE;UAC7BZ,OAAO,CAACc,MAAM,CAAC;YACbN,IAAI;YACJO,SAAS,EAAE,cAAc;YACzBC,GAAGA,CAACC,KAAK;cACP,OAAOA,KAAK,CAACC,gBAAgB,CAACV,IAAI,EAAE,GAAG,CAAC;YAC1C;WACD,CAAC;SACH,MAAM,IAAI,CAACH,YAAY,IAAIO,QAAQ,EAAE;UACpCZ,OAAO,CAACc,MAAM,CAAC;YACbN,IAAI;YACJO,SAAS,EAAE,iBAAiB;YAC5BC,GAAGA,CAACC,KAAK;cACP,OAAOA,KAAK,CAACE,WAAW,CAAC,CACvBV,cAAc,CAACW,KAAK,CAAC,CAAC,CAAC,EACvBZ,IAAI,CAACY,KAAK,CAAC,CAAC,CAAC,CACd,CAAC;YACJ;WACD,CAAC;;;IAGR;IAEA,SAASC,mBAAmBA,CAACb,IAAgC;MAC3D,MAAMc,UAAU,GAAGnB,UAAU,CAACoB,aAAa,CAACf,IAAI,CAACgB,EAAE,CAAC;MACpD,IAAIF,UAAU,EAAE;QACdf,mBAAmB,CAACe,UAAU,CAAC;;IAEnC;IAEA,OAAA5B,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKO,KAAK;MACRuB,iBAAiB,EAAEJ,mBAAmB;MACtCK,eAAe,EAAEnB;IAAmB;EAExC;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}