{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n        return endResult;\n      }\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\nexport default stripIndentTransformer;","map":{"version":3,"names":["stripIndentTransformer","type","arguments","length","undefined","onEndResult","endResult","match","indent","Math","min","apply","_toConsumableArray","map","el","regexp","RegExp","replace","Error"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\common-tags\\src\\stripIndentTransformer\\stripIndentTransformer.js"],"sourcesContent":["/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nconst stripIndentTransformer = (type = 'initial') => ({\n  onEndResult(endResult) {\n    if (type === 'initial') {\n      // remove the shortest leading indentation from each line\n      const match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n      const indent = match && Math.min(...match.map(el => el.length));\n      if (indent) {\n        const regexp = new RegExp(`^.{${indent}}`, 'gm');\n        return endResult.replace(regexp, '');\n      }\n      return endResult;\n    }\n    if (type === 'all') {\n      // remove all indentation from each line\n      return endResult.replace(/^[^\\S\\n]+/gm, '');\n    }\n    throw new Error(`Unknown type: ${type}`);\n  },\n});\n\nexport default stripIndentTransformer;\n"],"mappings":";;;;;;;;;;;AAAA;;;;;AAKA,IAAMA,sBAAA,GAAyB,SAAzBA,sBAAyBA,CAAA;EAAA,IAACC,IAAD,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQ,SAAR;EAAA,OAAuB;IACpDG,WADoD,WAAAA,YACxCC,SADwC,EAC7B;MACrB,IAAIL,IAAA,KAAS,SAAb,EAAwB;QACtB;QACA,IAAMM,KAAA,GAAQD,SAAA,CAAUC,KAAV,CAAgB,mBAAhB,CAAd;QACA,IAAMC,MAAA,GAASD,KAAA,IAASE,IAAA,CAAKC,GAAL,CAAAC,KAAA,CAAAF,IAAA,EAAAG,kBAAA,CAAYL,KAAA,CAAMM,GAAN,CAAU,UAAAC,EAAA;UAAA,OAAMA,EAAA,CAAGX,MAAT;QAAA,CAAV,CAAZ,EAAxB;QACA,IAAIK,MAAJ,EAAY;UACV,IAAMO,MAAA,GAAS,IAAIC,MAAJ,SAAiBR,MAAjB,QAA4B,IAA5B,CAAf;UACA,OAAOF,SAAA,CAAUW,OAAV,CAAkBF,MAAlB,EAA0B,EAA1B,CAAP;QACD;QACD,OAAOT,SAAP;MACD;MACD,IAAIL,IAAA,KAAS,KAAb,EAAoB;QAClB;QACA,OAAOK,SAAA,CAAUW,OAAV,CAAkB,aAAlB,EAAiC,EAAjC,CAAP;MACD;MACD,MAAM,IAAIC,KAAJ,oBAA2BjB,IAA3B,CAAN;IACD;EAjBmD,CAAvB;AAAA,CAA/B;AAoBA,eAAeD,sBAAf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}