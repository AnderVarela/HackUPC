{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = timeout;\nvar _initialParams = require('./internal/initialParams.js');\nvar _initialParams2 = _interopRequireDefault(_initialParams);\nvar _wrapAsync = require('./internal/wrapAsync.js');\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n  var fn = (0, _wrapAsync2.default)(asyncFn);\n  return (0, _initialParams2.default)((args, callback) => {\n    var timedOut = false;\n    var timer;\n    function timeoutCallback() {\n      var name = asyncFn.name || 'anonymous';\n      var error = new Error('Callback function \"' + name + '\" timed out.');\n      error.code = 'ETIMEDOUT';\n      if (info) {\n        error.info = info;\n      }\n      timedOut = true;\n      callback(error);\n    }\n    args.push((...cbArgs) => {\n      if (!timedOut) {\n        callback(...cbArgs);\n        clearTimeout(timer);\n      }\n    });\n\n    // setup timer and call original function\n    timer = setTimeout(timeoutCallback, milliseconds);\n    fn(...args);\n  });\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","timeout","_initialParams","require","_initialParams2","_interopRequireDefault","_wrapAsync","_wrapAsync2","obj","__esModule","asyncFn","milliseconds","info","fn","args","callback","timedOut","timer","timeoutCallback","name","error","Error","code","push","cbArgs","clearTimeout","setTimeout","module"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/async/timeout.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = timeout;\n\nvar _initialParams = require('./internal/initialParams.js');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = (0, _wrapAsync2.default)(asyncFn);\n\n    return (0, _initialParams2.default)((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\nmodule.exports = exports.default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,OAAO;AAEzB,IAAIC,cAAc,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAE3D,IAAIC,eAAe,GAAGC,sBAAsB,CAACH,cAAc,CAAC;AAE5D,IAAII,UAAU,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AAEnD,IAAII,WAAW,GAAGF,sBAAsB,CAACC,UAAU,CAAC;AAEpD,SAASD,sBAAsBA,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAER,OAAO,EAAEQ;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,OAAOA,CAACS,OAAO,EAAEC,YAAY,EAAEC,IAAI,EAAE;EAC1C,IAAIC,EAAE,GAAG,CAAC,CAAC,EAAEN,WAAW,CAACP,OAAO,EAAEU,OAAO,CAAC;EAE1C,OAAO,CAAC,CAAC,EAAEN,eAAe,CAACJ,OAAO,EAAE,CAACc,IAAI,EAAEC,QAAQ,KAAK;IACpD,IAAIC,QAAQ,GAAG,KAAK;IACpB,IAAIC,KAAK;IAET,SAASC,eAAeA,CAAA,EAAG;MACvB,IAAIC,IAAI,GAAGT,OAAO,CAACS,IAAI,IAAI,WAAW;MACtC,IAAIC,KAAK,GAAG,IAAIC,KAAK,CAAC,qBAAqB,GAAGF,IAAI,GAAG,cAAc,CAAC;MACpEC,KAAK,CAACE,IAAI,GAAG,WAAW;MACxB,IAAIV,IAAI,EAAE;QACNQ,KAAK,CAACR,IAAI,GAAGA,IAAI;MACrB;MACAI,QAAQ,GAAG,IAAI;MACfD,QAAQ,CAACK,KAAK,CAAC;IACnB;IAEAN,IAAI,CAACS,IAAI,CAAC,CAAC,GAAGC,MAAM,KAAK;MACrB,IAAI,CAACR,QAAQ,EAAE;QACXD,QAAQ,CAAC,GAAGS,MAAM,CAAC;QACnBC,YAAY,CAACR,KAAK,CAAC;MACvB;IACJ,CAAC,CAAC;;IAEF;IACAA,KAAK,GAAGS,UAAU,CAACR,eAAe,EAAEP,YAAY,CAAC;IACjDE,EAAE,CAAC,GAAGC,IAAI,CAAC;EACf,CAAC,CAAC;AACN;AACAa,MAAM,CAAC7B,OAAO,GAAGA,OAAO,CAACE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}