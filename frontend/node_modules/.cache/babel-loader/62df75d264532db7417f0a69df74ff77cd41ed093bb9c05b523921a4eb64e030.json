{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TYPE_KEYWORDS = void 0;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nfunction removeSpaces(str) {\n  return str.replace(/\\s/g, '');\n}\nfunction stringifyNode(node, sourceCode) {\n  return removeSpaces(sourceCode.getText(node));\n}\nfunction getCustomMessage(bannedType) {\n  if (bannedType == null) {\n    return '';\n  }\n  if (typeof bannedType === 'string') {\n    return ` ${bannedType}`;\n  }\n  if (bannedType.message) {\n    return ` ${bannedType.message}`;\n  }\n  return '';\n}\nconst defaultTypes = {\n  String: {\n    message: 'Use string instead',\n    fixWith: 'string'\n  },\n  Boolean: {\n    message: 'Use boolean instead',\n    fixWith: 'boolean'\n  },\n  Number: {\n    message: 'Use number instead',\n    fixWith: 'number'\n  },\n  Symbol: {\n    message: 'Use symbol instead',\n    fixWith: 'symbol'\n  },\n  BigInt: {\n    message: 'Use bigint instead',\n    fixWith: 'bigint'\n  },\n  Function: {\n    message: ['The `Function` type accepts any function-like value.', 'It provides no type safety when calling the function, which can be a common source of bugs.', 'It also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.', 'If you are expecting the function to accept certain arguments, you should explicitly define the function shape.'].join('\\n')\n  },\n  // object typing\n  Object: {\n    message: ['The `Object` type actually means \"any non-nullish value\", so it is marginally better than `unknown`.', '- If you want a type meaning \"any object\", you probably want `object` instead.', '- If you want a type meaning \"any value\", you probably want `unknown` instead.', '- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.'].join('\\n'),\n    suggest: ['object', 'unknown', 'NonNullable<unknown>']\n  },\n  '{}': {\n    message: ['`{}` actually means \"any non-nullish value\".', '- If you want a type meaning \"any object\", you probably want `object` instead.', '- If you want a type meaning \"any value\", you probably want `unknown` instead.', '- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.', '- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.'].join('\\n'),\n    suggest: ['object', 'unknown', 'Record<string, never>', 'NonNullable<unknown>']\n  }\n};\nexports.TYPE_KEYWORDS = {\n  bigint: utils_1.AST_NODE_TYPES.TSBigIntKeyword,\n  boolean: utils_1.AST_NODE_TYPES.TSBooleanKeyword,\n  never: utils_1.AST_NODE_TYPES.TSNeverKeyword,\n  null: utils_1.AST_NODE_TYPES.TSNullKeyword,\n  number: utils_1.AST_NODE_TYPES.TSNumberKeyword,\n  object: utils_1.AST_NODE_TYPES.TSObjectKeyword,\n  string: utils_1.AST_NODE_TYPES.TSStringKeyword,\n  symbol: utils_1.AST_NODE_TYPES.TSSymbolKeyword,\n  undefined: utils_1.AST_NODE_TYPES.TSUndefinedKeyword,\n  unknown: utils_1.AST_NODE_TYPES.TSUnknownKeyword,\n  void: utils_1.AST_NODE_TYPES.TSVoidKeyword\n};\nexports.default = util.createRule({\n  name: 'ban-types',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow certain types',\n      recommended: 'error'\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    messages: {\n      bannedTypeMessage: \"Don't use `{{name}}` as a type.{{customMessage}}\",\n      bannedTypeReplacement: 'Replace `{{name}}` with `{{replacement}}`.'\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        types: {\n          type: 'object',\n          additionalProperties: {\n            oneOf: [{\n              type: 'null'\n            }, {\n              type: 'boolean'\n            }, {\n              type: 'string'\n            }, {\n              type: 'object',\n              properties: {\n                message: {\n                  type: 'string'\n                },\n                fixWith: {\n                  type: 'string'\n                },\n                suggest: {\n                  type: 'array',\n                  items: {\n                    type: 'string'\n                  }\n                }\n              },\n              additionalProperties: false\n            }]\n          }\n        },\n        extendDefaults: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{}],\n  create(context, [options]) {\n    var _a, _b;\n    const extendDefaults = (_a = options.extendDefaults) !== null && _a !== void 0 ? _a : true;\n    const customTypes = (_b = options.types) !== null && _b !== void 0 ? _b : {};\n    const types = Object.assign({}, extendDefaults ? defaultTypes : {}, customTypes);\n    const bannedTypes = new Map(Object.entries(types).map(([type, data]) => [removeSpaces(type), data]));\n    function checkBannedTypes(typeNode, name = stringifyNode(typeNode, context.getSourceCode())) {\n      const bannedType = bannedTypes.get(name);\n      if (bannedType === undefined || bannedType === false) {\n        return;\n      }\n      const customMessage = getCustomMessage(bannedType);\n      const fixWith = bannedType && typeof bannedType === 'object' && bannedType.fixWith;\n      const suggest = bannedType && typeof bannedType === 'object' ? bannedType.suggest : undefined;\n      context.report({\n        node: typeNode,\n        messageId: 'bannedTypeMessage',\n        data: {\n          name,\n          customMessage\n        },\n        fix: fixWith ? fixer => fixer.replaceText(typeNode, fixWith) : null,\n        suggest: suggest === null || suggest === void 0 ? void 0 : suggest.map(replacement => ({\n          messageId: 'bannedTypeReplacement',\n          data: {\n            name,\n            replacement\n          },\n          fix: fixer => fixer.replaceText(typeNode, replacement)\n        }))\n      });\n    }\n    const keywordSelectors = util.objectReduceKey(exports.TYPE_KEYWORDS, (acc, keyword) => {\n      if (bannedTypes.has(keyword)) {\n        acc[exports.TYPE_KEYWORDS[keyword]] = node => checkBannedTypes(node, keyword);\n      }\n      return acc;\n    }, {});\n    return Object.assign(Object.assign({}, keywordSelectors), {\n      TSTypeLiteral(node) {\n        if (node.members.length) {\n          return;\n        }\n        checkBannedTypes(node);\n      },\n      TSTupleType(node) {\n        if (node.elementTypes.length === 0) {\n          checkBannedTypes(node);\n        }\n      },\n      TSTypeReference(node) {\n        checkBannedTypes(node.typeName);\n        if (node.typeParameters) {\n          checkBannedTypes(node);\n        }\n      },\n      TSInterfaceHeritage(node) {\n        checkBannedTypes(node);\n      },\n      TSClassImplements(node) {\n        checkBannedTypes(node);\n      }\n    });\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","removeSpaces","str","replace","stringifyNode","node","sourceCode","getText","getCustomMessage","bannedType","message","defaultTypes","String","fixWith","Boolean","Number","Symbol","BigInt","Function","join","Object","suggest","exports","TYPE_KEYWORDS","bigint","AST_NODE_TYPES","TSBigIntKeyword","boolean","TSBooleanKeyword","never","TSNeverKeyword","null","TSNullKeyword","number","TSNumberKeyword","object","TSObjectKeyword","string","TSStringKeyword","symbol","TSSymbolKeyword","undefined","TSUndefinedKeyword","unknown","TSUnknownKeyword","void","TSVoidKeyword","default","createRule","name","meta","type","docs","description","recommended","fixable","hasSuggestions","messages","bannedTypeMessage","bannedTypeReplacement","schema","properties","types","additionalProperties","oneOf","items","extendDefaults","defaultOptions","create","context","options","_a","customTypes","_b","assign","bannedTypes","Map","entries","map","data","checkBannedTypes","typeNode","getSourceCode","get","customMessage","report","messageId","fix","fixer","replaceText","replacement","keywordSelectors","objectReduceKey","acc","keyword","has","TSTypeLiteral","members","length","TSTupleType","elementTypes","TSTypeReference","typeName","typeParameters","TSInterfaceHeritage","TSClassImplements"],"sources":["../../src/rules/ban-types.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}