{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printIteratorEntries = printIteratorEntries;\nexports.printIteratorValues = printIteratorValues;\nexports.printListItems = printListItems;\nexports.printObjectProperties = printObjectProperties;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst getKeysOfEnumerableProperties = (object, compareKeys) => {\n  const rawKeys = Object.keys(object);\n  const keys = compareKeys !== null ? rawKeys.sort(compareKeys) : rawKeys;\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(object).forEach(symbol => {\n      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {\n        keys.push(symbol);\n      }\n    });\n  }\n  return keys;\n};\n\n/**\n * Return entries (for example, of a map)\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, braces)\n */\nfunction printIteratorEntries(iterator, config, indentation, depth, refs, printer,\n// Too bad, so sad that separator for ECMAScript Map has been ' => '\n// What a distracting diff if you change a data structure to/from\n// ECMAScript Object or Immutable.Map/OrderedMap which use the default.\nseparator = ': ') {\n  let result = '';\n  let width = 0;\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      result += indentationNext;\n      if (width++ === config.maxWidth) {\n        result += '…';\n        break;\n      }\n      const name = printer(current.value[0], config, indentationNext, depth, refs);\n      const value = printer(current.value[1], config, indentationNext, depth, refs);\n      result += name + separator + value;\n      current = iterator.next();\n      if (!current.done) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n\n/**\n * Return values (for example, of a set)\n * with spacing, indentation, and comma\n * without surrounding punctuation (braces or brackets)\n */\nfunction printIteratorValues(iterator, config, indentation, depth, refs, printer) {\n  let result = '';\n  let width = 0;\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      result += indentationNext;\n      if (width++ === config.maxWidth) {\n        result += '…';\n        break;\n      }\n      result += printer(current.value, config, indentationNext, depth, refs);\n      current = iterator.next();\n      if (!current.done) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n\n/**\n * Return items (for example, of an array)\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, brackets)\n **/\nfunction printListItems(list, config, indentation, depth, refs, printer) {\n  let result = '';\n  if (list.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < list.length; i++) {\n      result += indentationNext;\n      if (i === config.maxWidth) {\n        result += '…';\n        break;\n      }\n      if (i in list) {\n        result += printer(list[i], config, indentationNext, depth, refs);\n      }\n      if (i < list.length - 1) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n\n/**\n * Return properties of an object\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, braces)\n */\nfunction printObjectProperties(val, config, indentation, depth, refs, printer) {\n  let result = '';\n  const keys = getKeysOfEnumerableProperties(val, config.compareKeys);\n  if (keys.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const name = printer(key, config, indentationNext, depth, refs);\n      const value = printer(val[key], config, indentationNext, depth, refs);\n      result += `${indentationNext + name}: ${value}`;\n      if (i < keys.length - 1) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","printIteratorEntries","printIteratorValues","printListItems","printObjectProperties","getKeysOfEnumerableProperties","object","compareKeys","rawKeys","keys","sort","getOwnPropertySymbols","forEach","symbol","getOwnPropertyDescriptor","enumerable","push","iterator","config","indentation","depth","refs","printer","separator","result","width","current","next","done","spacingOuter","indentationNext","indent","maxWidth","name","spacingInner","min","list","length","i","val","key"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@types/jest/node_modules/pretty-format/build/collections.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printIteratorEntries = printIteratorEntries;\nexports.printIteratorValues = printIteratorValues;\nexports.printListItems = printListItems;\nexports.printObjectProperties = printObjectProperties;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst getKeysOfEnumerableProperties = (object, compareKeys) => {\n  const rawKeys = Object.keys(object);\n  const keys = compareKeys !== null ? rawKeys.sort(compareKeys) : rawKeys;\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(object).forEach(symbol => {\n      if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {\n        keys.push(symbol);\n      }\n    });\n  }\n  return keys;\n};\n\n/**\n * Return entries (for example, of a map)\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, braces)\n */\nfunction printIteratorEntries(\n  iterator,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  // Too bad, so sad that separator for ECMAScript Map has been ' => '\n  // What a distracting diff if you change a data structure to/from\n  // ECMAScript Object or Immutable.Map/OrderedMap which use the default.\n  separator = ': '\n) {\n  let result = '';\n  let width = 0;\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      result += indentationNext;\n      if (width++ === config.maxWidth) {\n        result += '…';\n        break;\n      }\n      const name = printer(\n        current.value[0],\n        config,\n        indentationNext,\n        depth,\n        refs\n      );\n      const value = printer(\n        current.value[1],\n        config,\n        indentationNext,\n        depth,\n        refs\n      );\n      result += name + separator + value;\n      current = iterator.next();\n      if (!current.done) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n\n/**\n * Return values (for example, of a set)\n * with spacing, indentation, and comma\n * without surrounding punctuation (braces or brackets)\n */\nfunction printIteratorValues(\n  iterator,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer\n) {\n  let result = '';\n  let width = 0;\n  let current = iterator.next();\n  if (!current.done) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    while (!current.done) {\n      result += indentationNext;\n      if (width++ === config.maxWidth) {\n        result += '…';\n        break;\n      }\n      result += printer(current.value, config, indentationNext, depth, refs);\n      current = iterator.next();\n      if (!current.done) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n\n/**\n * Return items (for example, of an array)\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, brackets)\n **/\nfunction printListItems(list, config, indentation, depth, refs, printer) {\n  let result = '';\n  if (list.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < list.length; i++) {\n      result += indentationNext;\n      if (i === config.maxWidth) {\n        result += '…';\n        break;\n      }\n      if (i in list) {\n        result += printer(list[i], config, indentationNext, depth, refs);\n      }\n      if (i < list.length - 1) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n\n/**\n * Return properties of an object\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, braces)\n */\nfunction printObjectProperties(val, config, indentation, depth, refs, printer) {\n  let result = '';\n  const keys = getKeysOfEnumerableProperties(val, config.compareKeys);\n  if (keys.length) {\n    result += config.spacingOuter;\n    const indentationNext = indentation + config.indent;\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const name = printer(key, config, indentationNext, depth, refs);\n      const value = printer(val[key], config, indentationNext, depth, refs);\n      result += `${indentationNext + name}: ${value}`;\n      if (i < keys.length - 1) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n    result += config.spacingOuter + indentation;\n  }\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}