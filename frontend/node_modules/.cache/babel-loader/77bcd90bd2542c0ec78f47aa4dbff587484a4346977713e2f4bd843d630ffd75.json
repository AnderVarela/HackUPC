{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Referencer_jsxPragma, _Referencer_jsxFragmentName, _Referencer_hasReferencedJsxFactory, _Referencer_hasReferencedJsxFragmentFactory, _Referencer_lib, _Referencer_emitDecoratorMetadata;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Referencer = void 0;\nconst types_1 = require(\"@typescript-eslint/types\");\nconst assert_1 = require(\"../assert\");\nconst definition_1 = require(\"../definition\");\nconst lib_1 = require(\"../lib\");\nconst ClassVisitor_1 = require(\"./ClassVisitor\");\nconst ExportVisitor_1 = require(\"./ExportVisitor\");\nconst ImportVisitor_1 = require(\"./ImportVisitor\");\nconst PatternVisitor_1 = require(\"./PatternVisitor\");\nconst Reference_1 = require(\"./Reference\");\nconst TypeVisitor_1 = require(\"./TypeVisitor\");\nconst Visitor_1 = require(\"./Visitor\");\n// Referencing variables and creating bindings.\nclass Referencer extends Visitor_1.Visitor {\n  constructor(options, scopeManager) {\n    super(options);\n    _Referencer_jsxPragma.set(this, void 0);\n    _Referencer_jsxFragmentName.set(this, void 0);\n    _Referencer_hasReferencedJsxFactory.set(this, false);\n    _Referencer_hasReferencedJsxFragmentFactory.set(this, false);\n    _Referencer_lib.set(this, void 0);\n    _Referencer_emitDecoratorMetadata.set(this, void 0);\n    this.scopeManager = scopeManager;\n    __classPrivateFieldSet(this, _Referencer_jsxPragma, options.jsxPragma, \"f\");\n    __classPrivateFieldSet(this, _Referencer_jsxFragmentName, options.jsxFragmentName, \"f\");\n    __classPrivateFieldSet(this, _Referencer_lib, options.lib, \"f\");\n    __classPrivateFieldSet(this, _Referencer_emitDecoratorMetadata, options.emitDecoratorMetadata, \"f\");\n  }\n  currentScope(dontThrowOnNull) {\n    if (!dontThrowOnNull) {\n      (0, assert_1.assert)(this.scopeManager.currentScope, 'aaa');\n    }\n    return this.scopeManager.currentScope;\n  }\n  close(node) {\n    while (this.currentScope(true) && node === this.currentScope().block) {\n      this.scopeManager.currentScope = this.currentScope().close(this.scopeManager);\n    }\n  }\n  referencingDefaultValue(pattern, assignments, maybeImplicitGlobal, init) {\n    assignments.forEach(assignment => {\n      this.currentScope().referenceValue(pattern, Reference_1.ReferenceFlag.Write, assignment.right, maybeImplicitGlobal, init);\n    });\n  }\n  populateGlobalsFromLib(globalScope) {\n    for (const lib of __classPrivateFieldGet(this, _Referencer_lib, \"f\")) {\n      const variables = lib_1.lib[lib];\n      /* istanbul ignore if */\n      if (!variables) {\n        throw new Error(`Invalid value for lib provided: ${lib}`);\n      }\n      for (const [name, variable] of Object.entries(variables)) {\n        globalScope.defineImplicitVariable(name, variable);\n      }\n    }\n    // for const assertions (`{} as const` / `<const>{}`)\n    globalScope.defineImplicitVariable('const', {\n      eslintImplicitGlobalSetting: 'readonly',\n      isTypeVariable: true,\n      isValueVariable: false\n    });\n  }\n  /**\n   * Searches for a variable named \"name\" in the upper scopes and adds a pseudo-reference from itself to itself\n   */\n  referenceInSomeUpperScope(name) {\n    let scope = this.scopeManager.currentScope;\n    while (scope) {\n      const variable = scope.set.get(name);\n      if (!variable) {\n        scope = scope.upper;\n        continue;\n      }\n      scope.referenceValue(variable.identifiers[0]);\n      return true;\n    }\n    return false;\n  }\n  referenceJsxPragma() {\n    if (__classPrivateFieldGet(this, _Referencer_jsxPragma, \"f\") == null || __classPrivateFieldGet(this, _Referencer_hasReferencedJsxFactory, \"f\")) {\n      return;\n    }\n    __classPrivateFieldSet(this, _Referencer_hasReferencedJsxFactory, this.referenceInSomeUpperScope(__classPrivateFieldGet(this, _Referencer_jsxPragma, \"f\")), \"f\");\n  }\n  referenceJsxFragment() {\n    if (__classPrivateFieldGet(this, _Referencer_jsxFragmentName, \"f\") == null || __classPrivateFieldGet(this, _Referencer_hasReferencedJsxFragmentFactory, \"f\")) {\n      return;\n    }\n    __classPrivateFieldSet(this, _Referencer_hasReferencedJsxFragmentFactory, this.referenceInSomeUpperScope(__classPrivateFieldGet(this, _Referencer_jsxFragmentName, \"f\")), \"f\");\n  }\n  ///////////////////\n  // Visit helpers //\n  ///////////////////\n  visitClass(node) {\n    ClassVisitor_1.ClassVisitor.visit(this, node, __classPrivateFieldGet(this, _Referencer_emitDecoratorMetadata, \"f\"));\n  }\n  visitForIn(node) {\n    if (node.left.type === types_1.AST_NODE_TYPES.VariableDeclaration && node.left.kind !== 'var') {\n      this.scopeManager.nestForScope(node);\n    }\n    if (node.left.type === types_1.AST_NODE_TYPES.VariableDeclaration) {\n      this.visit(node.left);\n      this.visitPattern(node.left.declarations[0].id, pattern => {\n        this.currentScope().referenceValue(pattern, Reference_1.ReferenceFlag.Write, node.right, null, true);\n      });\n    } else {\n      this.visitPattern(node.left, (pattern, info) => {\n        const maybeImplicitGlobal = !this.currentScope().isStrict ? {\n          pattern,\n          node\n        } : null;\n        this.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);\n        this.currentScope().referenceValue(pattern, Reference_1.ReferenceFlag.Write, node.right, maybeImplicitGlobal, false);\n      }, {\n        processRightHandNodes: true\n      });\n    }\n    this.visit(node.right);\n    this.visit(node.body);\n    this.close(node);\n  }\n  visitFunctionParameterTypeAnnotation(node) {\n    if ('typeAnnotation' in node) {\n      this.visitType(node.typeAnnotation);\n    } else if (node.type === types_1.AST_NODE_TYPES.AssignmentPattern) {\n      this.visitType(node.left.typeAnnotation);\n    } else if (node.type === types_1.AST_NODE_TYPES.TSParameterProperty) {\n      this.visitFunctionParameterTypeAnnotation(node.parameter);\n    }\n  }\n  visitFunction(node) {\n    // FunctionDeclaration name is defined in upper scope\n    // NOTE: Not referring variableScope. It is intended.\n    // Since\n    //  in ES5, FunctionDeclaration should be in FunctionBody.\n    //  in ES6, FunctionDeclaration should be block scoped.\n    var _a;\n    if (node.type === types_1.AST_NODE_TYPES.FunctionExpression) {\n      if (node.id) {\n        // FunctionExpression with name creates its special scope;\n        // FunctionExpressionNameScope.\n        this.scopeManager.nestFunctionExpressionNameScope(node);\n      }\n    } else if (node.id) {\n      // id is defined in upper scope\n      this.currentScope().defineIdentifier(node.id, new definition_1.FunctionNameDefinition(node.id, node));\n    }\n    // Consider this function is in the MethodDefinition.\n    this.scopeManager.nestFunctionScope(node, false);\n    // Process parameter declarations.\n    for (const param of node.params) {\n      this.visitPattern(param, (pattern, info) => {\n        this.currentScope().defineIdentifier(pattern, new definition_1.ParameterDefinition(pattern, node, info.rest));\n        this.referencingDefaultValue(pattern, info.assignments, null, true);\n      }, {\n        processRightHandNodes: true\n      });\n      this.visitFunctionParameterTypeAnnotation(param);\n      (_a = param.decorators) === null || _a === void 0 ? void 0 : _a.forEach(d => this.visit(d));\n    }\n    this.visitType(node.returnType);\n    this.visitType(node.typeParameters);\n    // In TypeScript there are a number of function-like constructs which have no body,\n    // so check it exists before traversing\n    if (node.body) {\n      // Skip BlockStatement to prevent creating BlockStatement scope.\n      if (node.body.type === types_1.AST_NODE_TYPES.BlockStatement) {\n        this.visitChildren(node.body);\n      } else {\n        this.visit(node.body);\n      }\n    }\n    this.close(node);\n  }\n  visitProperty(node) {\n    if (node.computed) {\n      this.visit(node.key);\n    }\n    this.visit(node.value);\n  }\n  visitType(node) {\n    if (!node) {\n      return;\n    }\n    TypeVisitor_1.TypeVisitor.visit(this, node);\n  }\n  visitTypeAssertion(node) {\n    this.visit(node.expression);\n    this.visitType(node.typeAnnotation);\n  }\n  /////////////////////\n  // Visit selectors //\n  /////////////////////\n  ArrowFunctionExpression(node) {\n    this.visitFunction(node);\n  }\n  AssignmentExpression(node) {\n    let left = node.left;\n    switch (left.type) {\n      case types_1.AST_NODE_TYPES.TSAsExpression:\n      case types_1.AST_NODE_TYPES.TSTypeAssertion:\n        // explicitly visit the type annotation\n        this.visitType(left.typeAnnotation);\n      // intentional fallthrough\n      case types_1.AST_NODE_TYPES.TSNonNullExpression:\n        // unwrap the expression\n        left = left.expression;\n    }\n    if (PatternVisitor_1.PatternVisitor.isPattern(left)) {\n      if (node.operator === '=') {\n        this.visitPattern(left, (pattern, info) => {\n          const maybeImplicitGlobal = !this.currentScope().isStrict ? {\n            pattern,\n            node\n          } : null;\n          this.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);\n          this.currentScope().referenceValue(pattern, Reference_1.ReferenceFlag.Write, node.right, maybeImplicitGlobal, false);\n        }, {\n          processRightHandNodes: true\n        });\n      } else if (left.type === types_1.AST_NODE_TYPES.Identifier) {\n        this.currentScope().referenceValue(left, Reference_1.ReferenceFlag.ReadWrite, node.right);\n      }\n    } else {\n      this.visit(left);\n    }\n    this.visit(node.right);\n  }\n  BlockStatement(node) {\n    if (this.scopeManager.isES6()) {\n      this.scopeManager.nestBlockScope(node);\n    }\n    this.visitChildren(node);\n    this.close(node);\n  }\n  BreakStatement() {\n    // don't reference the break statement's label\n  }\n  CallExpression(node) {\n    this.visitChildren(node, ['typeParameters']);\n    this.visitType(node.typeParameters);\n  }\n  CatchClause(node) {\n    this.scopeManager.nestCatchScope(node);\n    if (node.param) {\n      const param = node.param;\n      this.visitPattern(param, (pattern, info) => {\n        this.currentScope().defineIdentifier(pattern, new definition_1.CatchClauseDefinition(param, node));\n        this.referencingDefaultValue(pattern, info.assignments, null, true);\n      }, {\n        processRightHandNodes: true\n      });\n    }\n    this.visit(node.body);\n    this.close(node);\n  }\n  ClassExpression(node) {\n    this.visitClass(node);\n  }\n  ClassDeclaration(node) {\n    this.visitClass(node);\n  }\n  ContinueStatement() {\n    // don't reference the continue statement's label\n  }\n  ExportAllDeclaration() {\n    // this defines no local variables\n  }\n  ExportDefaultDeclaration(node) {\n    if (node.declaration.type === types_1.AST_NODE_TYPES.Identifier) {\n      ExportVisitor_1.ExportVisitor.visit(this, node);\n    } else {\n      this.visit(node.declaration);\n    }\n  }\n  ExportNamedDeclaration(node) {\n    if (node.declaration) {\n      this.visit(node.declaration);\n    } else {\n      ExportVisitor_1.ExportVisitor.visit(this, node);\n    }\n  }\n  ForInStatement(node) {\n    this.visitForIn(node);\n  }\n  ForOfStatement(node) {\n    this.visitForIn(node);\n  }\n  ForStatement(node) {\n    // Create ForStatement declaration.\n    // NOTE: In ES6, ForStatement dynamically generates per iteration environment. However, this is\n    // a static analyzer, we only generate one scope for ForStatement.\n    if (node.init && node.init.type === types_1.AST_NODE_TYPES.VariableDeclaration && node.init.kind !== 'var') {\n      this.scopeManager.nestForScope(node);\n    }\n    this.visitChildren(node);\n    this.close(node);\n  }\n  FunctionDeclaration(node) {\n    this.visitFunction(node);\n  }\n  FunctionExpression(node) {\n    this.visitFunction(node);\n  }\n  Identifier(node) {\n    this.currentScope().referenceValue(node);\n    this.visitType(node.typeAnnotation);\n  }\n  ImportDeclaration(node) {\n    (0, assert_1.assert)(this.scopeManager.isES6() && this.scopeManager.isModule(), 'ImportDeclaration should appear when the mode is ES6 and in the module context.');\n    ImportVisitor_1.ImportVisitor.visit(this, node);\n  }\n  JSXAttribute(node) {\n    this.visit(node.value);\n  }\n  JSXClosingElement() {\n    // should not be counted as a reference\n  }\n  JSXFragment(node) {\n    this.referenceJsxPragma();\n    this.referenceJsxFragment();\n    this.visitChildren(node);\n  }\n  JSXIdentifier(node) {\n    this.currentScope().referenceValue(node);\n  }\n  JSXMemberExpression(node) {\n    if (node.object.type !== types_1.AST_NODE_TYPES.JSXIdentifier) {\n      this.visit(node.object);\n    } else {\n      if (node.object.name !== 'this') {\n        this.visit(node.object);\n      }\n    }\n    // we don't ever reference the property as it's always going to be a property on the thing\n  }\n  JSXOpeningElement(node) {\n    this.referenceJsxPragma();\n    if (node.name.type === types_1.AST_NODE_TYPES.JSXIdentifier) {\n      if (node.name.name[0].toUpperCase() === node.name.name[0] || node.name.name === 'this') {\n        // lower cased component names are always treated as \"intrinsic\" names, and are converted to a string,\n        // not a variable by JSX transforms:\n        // <div /> => React.createElement(\"div\", null)\n        // the only case we want to visit a lower-cased component has its name as \"this\",\n        this.visit(node.name);\n      }\n    } else {\n      this.visit(node.name);\n    }\n    this.visitType(node.typeParameters);\n    for (const attr of node.attributes) {\n      this.visit(attr);\n    }\n  }\n  LabeledStatement(node) {\n    this.visit(node.body);\n  }\n  MemberExpression(node) {\n    this.visit(node.object);\n    if (node.computed) {\n      this.visit(node.property);\n    }\n  }\n  MetaProperty() {\n    // meta properties all builtin globals\n  }\n  NewExpression(node) {\n    this.visitChildren(node, ['typeParameters']);\n    this.visitType(node.typeParameters);\n  }\n  PrivateIdentifier() {\n    // private identifiers are members on classes and thus have no variables to to reference\n  }\n  Program(node) {\n    const globalScope = this.scopeManager.nestGlobalScope(node);\n    this.populateGlobalsFromLib(globalScope);\n    if (this.scopeManager.isGlobalReturn()) {\n      // Force strictness of GlobalScope to false when using node.js scope.\n      this.currentScope().isStrict = false;\n      this.scopeManager.nestFunctionScope(node, false);\n    }\n    if (this.scopeManager.isES6() && this.scopeManager.isModule()) {\n      this.scopeManager.nestModuleScope(node);\n    }\n    if (this.scopeManager.isStrictModeSupported() && this.scopeManager.isImpliedStrict()) {\n      this.currentScope().isStrict = true;\n    }\n    this.visitChildren(node);\n    this.close(node);\n  }\n  Property(node) {\n    this.visitProperty(node);\n  }\n  SwitchStatement(node) {\n    this.visit(node.discriminant);\n    if (this.scopeManager.isES6()) {\n      this.scopeManager.nestSwitchScope(node);\n    }\n    for (const switchCase of node.cases) {\n      this.visit(switchCase);\n    }\n    this.close(node);\n  }\n  TaggedTemplateExpression(node) {\n    this.visit(node.tag);\n    this.visit(node.quasi);\n    this.visitType(node.typeParameters);\n  }\n  TSAsExpression(node) {\n    this.visitTypeAssertion(node);\n  }\n  TSDeclareFunction(node) {\n    this.visitFunction(node);\n  }\n  TSImportEqualsDeclaration(node) {\n    this.currentScope().defineIdentifier(node.id, new definition_1.ImportBindingDefinition(node.id, node, node));\n    if (node.moduleReference.type === types_1.AST_NODE_TYPES.TSQualifiedName) {\n      this.visit(node.moduleReference.left);\n    } else {\n      this.visit(node.moduleReference);\n    }\n  }\n  TSEmptyBodyFunctionExpression(node) {\n    this.visitFunction(node);\n  }\n  TSEnumDeclaration(node) {\n    this.currentScope().defineIdentifier(node.id, new definition_1.TSEnumNameDefinition(node.id, node));\n    // enum members can be referenced within the enum body\n    this.scopeManager.nestTSEnumScope(node);\n    // define the enum name again inside the new enum scope\n    // references to the enum should not resolve directly to the enum\n    this.currentScope().defineIdentifier(node.id, new definition_1.TSEnumNameDefinition(node.id, node));\n    for (const member of node.members) {\n      // TS resolves literal named members to be actual names\n      // enum Foo {\n      //   'a' = 1,\n      //   b = a, // this references the 'a' member\n      // }\n      if (member.id.type === types_1.AST_NODE_TYPES.Literal && typeof member.id.value === 'string') {\n        const name = member.id;\n        this.currentScope().defineLiteralIdentifier(name, new definition_1.TSEnumMemberDefinition(name, member));\n      } else if (!member.computed && member.id.type === types_1.AST_NODE_TYPES.Identifier) {\n        this.currentScope().defineIdentifier(member.id, new definition_1.TSEnumMemberDefinition(member.id, member));\n      }\n      this.visit(member.initializer);\n    }\n    this.close(node);\n  }\n  TSInstantiationExpression(node) {\n    this.visitChildren(node, ['typeParameters']);\n    this.visitType(node.typeParameters);\n  }\n  TSInterfaceDeclaration(node) {\n    this.visitType(node);\n  }\n  TSModuleDeclaration(node) {\n    if (node.id.type === types_1.AST_NODE_TYPES.Identifier && !node.global) {\n      this.currentScope().defineIdentifier(node.id, new definition_1.TSModuleNameDefinition(node.id, node));\n    }\n    this.scopeManager.nestTSModuleScope(node);\n    this.visit(node.body);\n    this.close(node);\n  }\n  TSSatisfiesExpression(node) {\n    this.visitTypeAssertion(node);\n  }\n  TSTypeAliasDeclaration(node) {\n    this.visitType(node);\n  }\n  TSTypeAssertion(node) {\n    this.visitTypeAssertion(node);\n  }\n  UpdateExpression(node) {\n    if (PatternVisitor_1.PatternVisitor.isPattern(node.argument)) {\n      this.visitPattern(node.argument, pattern => {\n        this.currentScope().referenceValue(pattern, Reference_1.ReferenceFlag.ReadWrite, null);\n      });\n    } else {\n      this.visitChildren(node);\n    }\n  }\n  VariableDeclaration(node) {\n    const variableTargetScope = node.kind === 'var' ? this.currentScope().variableScope : this.currentScope();\n    for (const decl of node.declarations) {\n      const init = decl.init;\n      this.visitPattern(decl.id, (pattern, info) => {\n        variableTargetScope.defineIdentifier(pattern, new definition_1.VariableDefinition(pattern, decl, node));\n        this.referencingDefaultValue(pattern, info.assignments, null, true);\n        if (init) {\n          this.currentScope().referenceValue(pattern, Reference_1.ReferenceFlag.Write, init, null, true);\n        }\n      }, {\n        processRightHandNodes: true\n      });\n      if (decl.init) {\n        this.visit(decl.init);\n      }\n      if ('typeAnnotation' in decl.id) {\n        this.visitType(decl.id.typeAnnotation);\n      }\n    }\n  }\n  WithStatement(node) {\n    this.visit(node.object);\n    // Then nest scope for WithStatement.\n    this.scopeManager.nestWithScope(node);\n    this.visit(node.body);\n    this.close(node);\n  }\n  ImportAttribute() {\n    // import assertions are module metadata and thus have no variables to reference\n  }\n}\nexports.Referencer = Referencer;\n_Referencer_jsxPragma = new WeakMap(), _Referencer_jsxFragmentName = new WeakMap(), _Referencer_hasReferencedJsxFactory = new WeakMap(), _Referencer_hasReferencedJsxFragmentFactory = new WeakMap(), _Referencer_lib = new WeakMap(), _Referencer_emitDecoratorMetadata = new WeakMap();","map":{"version":3,"names":["types_1","require","assert_1","definition_1","lib_1","ClassVisitor_1","ExportVisitor_1","ImportVisitor_1","PatternVisitor_1","Reference_1","TypeVisitor_1","Visitor_1","Referencer","Visitor","constructor","options","scopeManager","_Referencer_jsxPragma","set","_Referencer_jsxFragmentName","_Referencer_hasReferencedJsxFactory","_Referencer_hasReferencedJsxFragmentFactory","_Referencer_lib","_Referencer_emitDecoratorMetadata","__classPrivateFieldSet","jsxPragma","jsxFragmentName","lib","emitDecoratorMetadata","currentScope","dontThrowOnNull","assert","close","node","block","referencingDefaultValue","pattern","assignments","maybeImplicitGlobal","init","forEach","assignment","referenceValue","ReferenceFlag","Write","right","populateGlobalsFromLib","globalScope","__classPrivateFieldGet","variables","Error","name","variable","Object","entries","defineImplicitVariable","eslintImplicitGlobalSetting","isTypeVariable","isValueVariable","referenceInSomeUpperScope","scope","get","upper","identifiers","referenceJsxPragma","referenceJsxFragment","visitClass","ClassVisitor","visit","visitForIn","left","type","AST_NODE_TYPES","VariableDeclaration","kind","nestForScope","visitPattern","declarations","id","info","isStrict","processRightHandNodes","body","visitFunctionParameterTypeAnnotation","visitType","typeAnnotation","AssignmentPattern","TSParameterProperty","parameter","visitFunction","FunctionExpression","nestFunctionExpressionNameScope","defineIdentifier","FunctionNameDefinition","nestFunctionScope","param","params","ParameterDefinition","rest","_a","decorators","d","returnType","typeParameters","BlockStatement","visitChildren","visitProperty","computed","key","value","TypeVisitor","visitTypeAssertion","expression","ArrowFunctionExpression","AssignmentExpression","TSAsExpression","TSTypeAssertion","TSNonNullExpression","PatternVisitor","isPattern","operator","Identifier","ReadWrite","isES6","nestBlockScope","BreakStatement","CallExpression","CatchClause","nestCatchScope","CatchClauseDefinition","ClassExpression","ClassDeclaration","ContinueStatement","ExportAllDeclaration","ExportDefaultDeclaration","declaration","ExportVisitor","ExportNamedDeclaration","ForInStatement","ForOfStatement","ForStatement","FunctionDeclaration","ImportDeclaration","isModule","ImportVisitor","JSXAttribute","JSXClosingElement","JSXFragment","JSXIdentifier","JSXMemberExpression","object","JSXOpeningElement","toUpperCase","attr","attributes","LabeledStatement","MemberExpression","property","MetaProperty","NewExpression","PrivateIdentifier","Program","nestGlobalScope","isGlobalReturn","nestModuleScope","isStrictModeSupported","isImpliedStrict","Property","SwitchStatement","discriminant","nestSwitchScope","switchCase","cases","TaggedTemplateExpression","tag","quasi","TSDeclareFunction","TSImportEqualsDeclaration","ImportBindingDefinition","moduleReference","TSQualifiedName","TSEmptyBodyFunctionExpression","TSEnumDeclaration","TSEnumNameDefinition","nestTSEnumScope","member","members","Literal","defineLiteralIdentifier","TSEnumMemberDefinition","initializer","TSInstantiationExpression","TSInterfaceDeclaration","TSModuleDeclaration","global","TSModuleNameDefinition","nestTSModuleScope","TSSatisfiesExpression","TSTypeAliasDeclaration","UpdateExpression","argument","variableTargetScope","variableScope","decl","VariableDefinition","WithStatement","nestWithScope","ImportAttribute","exports"],"sources":["../../src/referencer/Referencer.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}