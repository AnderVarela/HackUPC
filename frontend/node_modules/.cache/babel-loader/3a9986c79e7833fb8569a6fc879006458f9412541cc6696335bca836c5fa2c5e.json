{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inferSingleRun = void 0;\nconst path_1 = require(\"path\");\n/**\n * ESLint (and therefore typescript-eslint) is used in both \"single run\"/one-time contexts,\n * such as an ESLint CLI invocation, and long-running sessions (such as continuous feedback\n * on a file in an IDE).\n *\n * When typescript-eslint handles TypeScript Program management behind the scenes, this distinction\n * is important because there is significant overhead to managing the so called Watch Programs\n * needed for the long-running use-case. We therefore use the following logic to figure out which\n * of these contexts applies to the current execution.\n *\n * @returns Whether this is part of a single run, rather than a long-running process.\n */\nfunction inferSingleRun(options) {\n  if (\n  // single-run implies type-aware linting - no projects means we can't be in single-run mode\n  (options === null || options === void 0 ? void 0 : options.project) == null ||\n  // programs passed via options means the user should be managing the programs, so we shouldn't\n  // be creating our own single-run programs accidentally\n  (options === null || options === void 0 ? void 0 : options.programs) != null) {\n    return false;\n  }\n  // Allow users to explicitly inform us of their intent to perform a single run (or not) with TSESTREE_SINGLE_RUN\n  if (process.env.TSESTREE_SINGLE_RUN === 'false') {\n    return false;\n  }\n  if (process.env.TSESTREE_SINGLE_RUN === 'true') {\n    return true;\n  }\n  // Currently behind a flag while we gather real-world feedback\n  if (options === null || options === void 0 ? void 0 : options.allowAutomaticSingleRunInference) {\n    if (\n    // Default to single runs for CI processes. CI=true is set by most CI providers by default.\n    process.env.CI === 'true' ||\n    // This will be true for invocations such as `npx eslint ...` and `./node_modules/.bin/eslint ...`\n    process.argv[1].endsWith((0, path_1.normalize)('node_modules/.bin/eslint'))) {\n      return true;\n    }\n  }\n  /**\n   * We default to assuming that this run could be part of a long-running session (e.g. in an IDE)\n   * and watch programs will therefore be required.\n   *\n   * Unless we can reliably infer otherwise, we default to assuming that this run could be part\n   * of a long-running session (e.g. in an IDE) and watch programs will therefore be required\n   */\n  return false;\n}\nexports.inferSingleRun = inferSingleRun;","map":{"version":3,"names":["path_1","require","inferSingleRun","options","project","programs","process","env","TSESTREE_SINGLE_RUN","allowAutomaticSingleRunInference","CI","argv","endsWith","normalize","exports"],"sources":["../../src/parseSettings/inferSingleRun.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAIA;;;;;;;;;;;;AAYA,SAAgBC,cAAcA,CAACC,OAAoC;EACjE;EACE;EACA,CAAAA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,OAAO,KAAI,IAAI;EACxB;EACA;EACA,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,QAAQ,KAAI,IAAI,EACzB;IACA,OAAO,KAAK;;EAGd;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,mBAAmB,KAAK,OAAO,EAAE;IAC/C,OAAO,KAAK;;EAEd,IAAIF,OAAO,CAACC,GAAG,CAACC,mBAAmB,KAAK,MAAM,EAAE;IAC9C,OAAO,IAAI;;EAGb;EACA,IAAIL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,gCAAgC,EAAE;IAC7C;IACE;IACAH,OAAO,CAACC,GAAG,CAACG,EAAE,KAAK,MAAM;IACzB;IACAJ,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAAZ,MAAA,CAAAa,SAAS,EAAC,0BAA0B,CAAC,CAAC,EAC/D;MACA,OAAO,IAAI;;;EAIf;;;;;;;EAOA,OAAO,KAAK;AACd;AAvCAC,OAAA,CAAAZ,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}