{"ast":null,"code":"const {\n  validate: validateOptions\n} = require('schema-utils');\nconst {\n  getRefreshGlobalScope,\n  getWebpackVersion\n} = require('./globals');\nconst {\n  getAdditionalEntries,\n  getIntegrationEntry,\n  getRefreshGlobal,\n  getSocketIntegration,\n  injectRefreshEntry,\n  injectRefreshLoader,\n  makeRefreshRuntimeModule,\n  normalizeOptions\n} = require('./utils');\nconst schema = require('./options.json');\nclass ReactRefreshPlugin {\n  /**\n   * @param {import('./types').ReactRefreshPluginOptions} [options] Options for react-refresh-plugin.\n   */\n  constructor(options = {}) {\n    validateOptions(schema, options, {\n      name: 'React Refresh Plugin',\n      baseDataPath: 'options'\n    });\n\n    /**\n     * @readonly\n     * @type {import('./types').NormalizedPluginOptions}\n     */\n    this.options = normalizeOptions(options);\n  }\n\n  /**\n   * Applies the plugin.\n   * @param {import('webpack').Compiler} compiler A webpack compiler object.\n   * @returns {void}\n   */\n  apply(compiler) {\n    // Skip processing in non-development mode, but allow manual force-enabling\n    if (\n    // Webpack do not set process.env.NODE_ENV, so we need to check for mode.\n    // Ref: https://github.com/webpack/webpack/issues/7074\n    (compiler.options.mode !== 'development' ||\n    // We also check for production process.env.NODE_ENV,\n    // in case it was set and mode is non-development (e.g. 'none')\n    process.env.NODE_ENV && process.env.NODE_ENV === 'production') && !this.options.forceEnable) {\n      return;\n    }\n    const webpackVersion = getWebpackVersion(compiler);\n    const logger = compiler.getInfrastructureLogger(this.constructor.name);\n\n    // Get Webpack imports from compiler instance (if available) -\n    // this allow mono-repos to use different versions of Webpack without conflicts.\n    const webpack = compiler.webpack || require('webpack');\n    const {\n      DefinePlugin,\n      EntryDependency,\n      EntryPlugin,\n      ModuleFilenameHelpers,\n      NormalModule,\n      ProvidePlugin,\n      RuntimeGlobals,\n      Template\n    } = webpack;\n\n    // Inject react-refresh context to all Webpack entry points.\n    // This should create `EntryDependency` objects when available,\n    // and fallback to patching the `entry` object for legacy workflows.\n    const addEntries = getAdditionalEntries({\n      devServer: compiler.options.devServer,\n      options: this.options\n    });\n    if (EntryPlugin) {\n      // Prepended entries does not care about injection order,\n      // so we can utilise EntryPlugin for simpler logic.\n      addEntries.prependEntries.forEach(entry => {\n        new EntryPlugin(compiler.context, entry, {\n          name: undefined\n        }).apply(compiler);\n      });\n      const integrationEntry = getIntegrationEntry(this.options.overlay.sockIntegration);\n      const socketEntryData = [];\n      compiler.hooks.make.tap({\n        name: this.constructor.name,\n        stage: Number.POSITIVE_INFINITY\n      }, compilation => {\n        // Exhaustively search all entries for `integrationEntry`.\n        // If found, mark those entries and the index of `integrationEntry`.\n        for (const [name, entryData] of compilation.entries.entries()) {\n          const index = entryData.dependencies.findIndex(dep => dep.request && dep.request.includes(integrationEntry));\n          if (index !== -1) {\n            socketEntryData.push({\n              name,\n              index\n            });\n          }\n        }\n      });\n\n      // Overlay entries need to be injected AFTER integration's entry,\n      // so we will loop through everything in `finishMake` instead of `make`.\n      // This ensures we can traverse all entry points and inject stuff with the correct order.\n      addEntries.overlayEntries.forEach((entry, idx, arr) => {\n        compiler.hooks.finishMake.tapPromise({\n          name: this.constructor.name,\n          stage: Number.MIN_SAFE_INTEGER + (arr.length - idx - 1)\n        }, compilation => {\n          // Only hook into the current compiler\n          if (compilation.compiler !== compiler) {\n            return Promise.resolve();\n          }\n          const injectData = socketEntryData.length ? socketEntryData : [{\n            name: undefined\n          }];\n          return Promise.all(injectData.map(({\n            name,\n            index\n          }) => {\n            return new Promise((resolve, reject) => {\n              const options = {\n                name\n              };\n              const dep = EntryPlugin.createDependency(entry, options);\n              compilation.addEntry(compiler.context, dep, options, err => {\n                if (err) return reject(err);\n\n                // If the entry is not a global one,\n                // and we have registered the index for integration entry,\n                // we will reorder all entry dependencies to our desired order.\n                // That is, to have additional entries DIRECTLY behind integration entry.\n                if (name && typeof index !== 'undefined') {\n                  const entryData = compilation.entries.get(name);\n                  entryData.dependencies.splice(index + 1, 0, entryData.dependencies.splice(entryData.dependencies.length - 1, 1)[0]);\n                }\n                resolve();\n              });\n            });\n          })).then(() => {});\n        });\n      });\n    } else {\n      compiler.options.entry = injectRefreshEntry(compiler.options.entry, addEntries);\n    }\n\n    // Inject necessary modules and variables to bundle's global scope\n    const refreshGlobal = getRefreshGlobalScope(RuntimeGlobals || {});\n    /** @type {Record<string, string | boolean>}*/\n    const definedModules = {\n      // Mapping of react-refresh globals to Webpack runtime globals\n      $RefreshReg$: `${refreshGlobal}.register`,\n      $RefreshSig$: `${refreshGlobal}.signature`,\n      'typeof $RefreshReg$': 'function',\n      'typeof $RefreshSig$': 'function',\n      // Library mode\n      __react_refresh_library__: JSON.stringify(Template.toIdentifier(this.options.library || compiler.options.output.uniqueName || compiler.options.output.library))\n    };\n    /** @type {Record<string, string>} */\n    const providedModules = {\n      __react_refresh_utils__: require.resolve('./runtime/RefreshUtils')\n    };\n    if (this.options.overlay === false) {\n      // Stub errorOverlay module so their calls can be erased\n      definedModules.__react_refresh_error_overlay__ = false;\n      definedModules.__react_refresh_polyfill_url__ = false;\n      definedModules.__react_refresh_socket__ = false;\n    } else {\n      definedModules.__react_refresh_polyfill_url__ = this.options.overlay.useURLPolyfill || false;\n      if (this.options.overlay.module) {\n        providedModules.__react_refresh_error_overlay__ = require.resolve(this.options.overlay.module);\n      }\n      if (this.options.overlay.sockIntegration) {\n        providedModules.__react_refresh_socket__ = getSocketIntegration(this.options.overlay.sockIntegration);\n      }\n    }\n    new DefinePlugin(definedModules).apply(compiler);\n    new ProvidePlugin(providedModules).apply(compiler);\n    const match = ModuleFilenameHelpers.matchObject.bind(undefined, this.options);\n    let loggedHotWarning = false;\n    compiler.hooks.compilation.tap(this.constructor.name, (compilation, {\n      normalModuleFactory\n    }) => {\n      // Only hook into the current compiler\n      if (compilation.compiler !== compiler) {\n        return;\n      }\n\n      // Tap into version-specific compilation hooks\n      switch (webpackVersion) {\n        case 4:\n          {\n            const outputOptions = compilation.mainTemplate.outputOptions;\n            compilation.mainTemplate.hooks.require.tap(this.constructor.name,\n            // Constructs the module template for react-refresh\n            (source, chunk, hash) => {\n              // Check for the output filename\n              // This is to ensure we are processing a JS-related chunk\n              let filename = outputOptions.filename;\n              if (typeof filename === 'function') {\n                // Only usage of the `chunk` property is documented by Webpack.\n                // However, some internal Webpack plugins uses other properties,\n                // so we also pass them through to be on the safe side.\n                filename = filename({\n                  contentHashType: 'javascript',\n                  chunk,\n                  hash\n                });\n              }\n\n              // Check whether the current compilation is outputting to JS,\n              // since other plugins can trigger compilations for other file types too.\n              // If we apply the transform to them, their compilation will break fatally.\n              // One prominent example of this is the HTMLWebpackPlugin.\n              // If filename is falsy, something is terribly wrong and there's nothing we can do.\n              if (!filename || !filename.includes('.js')) {\n                return source;\n              }\n\n              // Split template source code into lines for easier processing\n              const lines = source.split('\\n');\n              // Webpack generates this line when the MainTemplate is called\n              const moduleInitializationLineNumber = lines.findIndex(line => line.includes('modules[moduleId].call('));\n              // Unable to find call to module execution -\n              // this happens if the current module does not call MainTemplate.\n              // In this case, we will return the original source and won't mess with it.\n              if (moduleInitializationLineNumber === -1) {\n                return source;\n              }\n              const moduleInterceptor = Template.asString([`${refreshGlobal}.setup(moduleId);`, 'try {', Template.indent(lines[moduleInitializationLineNumber]), '} finally {', Template.indent(`${refreshGlobal}.cleanup(moduleId);`), '}']);\n              return Template.asString([...lines.slice(0, moduleInitializationLineNumber), '', outputOptions.strictModuleExceptionHandling ? Template.indent(moduleInterceptor) : moduleInterceptor, '', ...lines.slice(moduleInitializationLineNumber + 1, lines.length)]);\n            });\n            compilation.mainTemplate.hooks.requireExtensions.tap(this.constructor.name,\n            // Setup react-refresh globals as extensions to Webpack's require function\n            source => {\n              return Template.asString([source, '', getRefreshGlobal(Template)]);\n            });\n            normalModuleFactory.hooks.afterResolve.tap(this.constructor.name,\n            // Add react-refresh loader to process files that matches specified criteria\n            data => {\n              return injectRefreshLoader(data, {\n                match,\n                options: {\n                  const: false,\n                  esModule: false\n                }\n              });\n            });\n            compilation.hooks.normalModuleLoader.tap(\n            // `Number.POSITIVE_INFINITY` ensures this check will run only after all other taps\n            {\n              name: this.constructor.name,\n              stage: Number.POSITIVE_INFINITY\n            },\n            // Check for existence of the HMR runtime -\n            // it is the foundation to this plugin working correctly\n            context => {\n              if (!context.hot && !loggedHotWarning) {\n                logger.warn(['Hot Module Replacement (HMR) is not enabled!', 'React Refresh requires HMR to function properly.'].join(' '));\n                loggedHotWarning = true;\n              }\n            });\n            break;\n          }\n        case 5:\n          {\n            // Set factory for EntryDependency which is used to initialise the module\n            compilation.dependencyFactories.set(EntryDependency, normalModuleFactory);\n            const ReactRefreshRuntimeModule = makeRefreshRuntimeModule(webpack);\n            compilation.hooks.additionalTreeRuntimeRequirements.tap(this.constructor.name,\n            // Setup react-refresh globals with a Webpack runtime module\n            (chunk, runtimeRequirements) => {\n              runtimeRequirements.add(RuntimeGlobals.interceptModuleExecution);\n              runtimeRequirements.add(RuntimeGlobals.moduleCache);\n              runtimeRequirements.add(refreshGlobal);\n              compilation.addRuntimeModule(chunk, new ReactRefreshRuntimeModule());\n            });\n            normalModuleFactory.hooks.afterResolve.tap(this.constructor.name,\n            // Add react-refresh loader to process files that matches specified criteria\n            resolveData => {\n              injectRefreshLoader(resolveData.createData, {\n                match,\n                options: {\n                  const: compilation.runtimeTemplate.supportsConst(),\n                  esModule: this.options.esModule\n                }\n              });\n            });\n            NormalModule.getCompilationHooks(compilation).loader.tap(\n            // `Infinity` ensures this check will run only after all other taps\n            {\n              name: this.constructor.name,\n              stage: Infinity\n            },\n            // Check for existence of the HMR runtime -\n            // it is the foundation to this plugin working correctly\n            context => {\n              if (!context.hot && !loggedHotWarning) {\n                logger.warn(['Hot Module Replacement (HMR) is not enabled!', 'React Refresh requires HMR to function properly.'].join(' '));\n                loggedHotWarning = true;\n              }\n            });\n            break;\n          }\n        default:\n          {\n            // Do nothing - this should be an impossible case\n          }\n      }\n    });\n  }\n}\nmodule.exports.ReactRefreshPlugin = ReactRefreshPlugin;\nmodule.exports = ReactRefreshPlugin;","map":{"version":3,"names":["validate","validateOptions","require","getRefreshGlobalScope","getWebpackVersion","getAdditionalEntries","getIntegrationEntry","getRefreshGlobal","getSocketIntegration","injectRefreshEntry","injectRefreshLoader","makeRefreshRuntimeModule","normalizeOptions","schema","ReactRefreshPlugin","constructor","options","name","baseDataPath","apply","compiler","mode","process","env","NODE_ENV","forceEnable","webpackVersion","logger","getInfrastructureLogger","webpack","DefinePlugin","EntryDependency","EntryPlugin","ModuleFilenameHelpers","NormalModule","ProvidePlugin","RuntimeGlobals","Template","addEntries","devServer","prependEntries","forEach","entry","context","undefined","integrationEntry","overlay","sockIntegration","socketEntryData","hooks","make","tap","stage","Number","POSITIVE_INFINITY","compilation","entryData","entries","index","dependencies","findIndex","dep","request","includes","push","overlayEntries","idx","arr","finishMake","tapPromise","MIN_SAFE_INTEGER","length","Promise","resolve","injectData","all","map","reject","createDependency","addEntry","err","get","splice","then","refreshGlobal","definedModules","$RefreshReg$","$RefreshSig$","__react_refresh_library__","JSON","stringify","toIdentifier","library","output","uniqueName","providedModules","__react_refresh_utils__","__react_refresh_error_overlay__","__react_refresh_polyfill_url__","__react_refresh_socket__","useURLPolyfill","module","match","matchObject","bind","loggedHotWarning","normalModuleFactory","outputOptions","mainTemplate","source","chunk","hash","filename","contentHashType","lines","split","moduleInitializationLineNumber","line","moduleInterceptor","asString","indent","slice","strictModuleExceptionHandling","requireExtensions","afterResolve","data","const","esModule","normalModuleLoader","hot","warn","join","dependencyFactories","set","ReactRefreshRuntimeModule","additionalTreeRuntimeRequirements","runtimeRequirements","add","interceptModuleExecution","moduleCache","addRuntimeModule","resolveData","createData","runtimeTemplate","supportsConst","getCompilationHooks","loader","Infinity","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/index.js"],"sourcesContent":["const { validate: validateOptions } = require('schema-utils');\nconst { getRefreshGlobalScope, getWebpackVersion } = require('./globals');\nconst {\n  getAdditionalEntries,\n  getIntegrationEntry,\n  getRefreshGlobal,\n  getSocketIntegration,\n  injectRefreshEntry,\n  injectRefreshLoader,\n  makeRefreshRuntimeModule,\n  normalizeOptions,\n} = require('./utils');\nconst schema = require('./options.json');\n\nclass ReactRefreshPlugin {\n  /**\n   * @param {import('./types').ReactRefreshPluginOptions} [options] Options for react-refresh-plugin.\n   */\n  constructor(options = {}) {\n    validateOptions(schema, options, {\n      name: 'React Refresh Plugin',\n      baseDataPath: 'options',\n    });\n\n    /**\n     * @readonly\n     * @type {import('./types').NormalizedPluginOptions}\n     */\n    this.options = normalizeOptions(options);\n  }\n\n  /**\n   * Applies the plugin.\n   * @param {import('webpack').Compiler} compiler A webpack compiler object.\n   * @returns {void}\n   */\n  apply(compiler) {\n    // Skip processing in non-development mode, but allow manual force-enabling\n    if (\n      // Webpack do not set process.env.NODE_ENV, so we need to check for mode.\n      // Ref: https://github.com/webpack/webpack/issues/7074\n      (compiler.options.mode !== 'development' ||\n        // We also check for production process.env.NODE_ENV,\n        // in case it was set and mode is non-development (e.g. 'none')\n        (process.env.NODE_ENV && process.env.NODE_ENV === 'production')) &&\n      !this.options.forceEnable\n    ) {\n      return;\n    }\n\n    const webpackVersion = getWebpackVersion(compiler);\n    const logger = compiler.getInfrastructureLogger(this.constructor.name);\n\n    // Get Webpack imports from compiler instance (if available) -\n    // this allow mono-repos to use different versions of Webpack without conflicts.\n    const webpack = compiler.webpack || require('webpack');\n    const {\n      DefinePlugin,\n      EntryDependency,\n      EntryPlugin,\n      ModuleFilenameHelpers,\n      NormalModule,\n      ProvidePlugin,\n      RuntimeGlobals,\n      Template,\n    } = webpack;\n\n    // Inject react-refresh context to all Webpack entry points.\n    // This should create `EntryDependency` objects when available,\n    // and fallback to patching the `entry` object for legacy workflows.\n    const addEntries = getAdditionalEntries({\n      devServer: compiler.options.devServer,\n      options: this.options,\n    });\n    if (EntryPlugin) {\n      // Prepended entries does not care about injection order,\n      // so we can utilise EntryPlugin for simpler logic.\n      addEntries.prependEntries.forEach((entry) => {\n        new EntryPlugin(compiler.context, entry, { name: undefined }).apply(compiler);\n      });\n\n      const integrationEntry = getIntegrationEntry(this.options.overlay.sockIntegration);\n      const socketEntryData = [];\n      compiler.hooks.make.tap(\n        { name: this.constructor.name, stage: Number.POSITIVE_INFINITY },\n        (compilation) => {\n          // Exhaustively search all entries for `integrationEntry`.\n          // If found, mark those entries and the index of `integrationEntry`.\n          for (const [name, entryData] of compilation.entries.entries()) {\n            const index = entryData.dependencies.findIndex(\n              (dep) => dep.request && dep.request.includes(integrationEntry)\n            );\n            if (index !== -1) {\n              socketEntryData.push({ name, index });\n            }\n          }\n        }\n      );\n\n      // Overlay entries need to be injected AFTER integration's entry,\n      // so we will loop through everything in `finishMake` instead of `make`.\n      // This ensures we can traverse all entry points and inject stuff with the correct order.\n      addEntries.overlayEntries.forEach((entry, idx, arr) => {\n        compiler.hooks.finishMake.tapPromise(\n          { name: this.constructor.name, stage: Number.MIN_SAFE_INTEGER + (arr.length - idx - 1) },\n          (compilation) => {\n            // Only hook into the current compiler\n            if (compilation.compiler !== compiler) {\n              return Promise.resolve();\n            }\n\n            const injectData = socketEntryData.length ? socketEntryData : [{ name: undefined }];\n            return Promise.all(\n              injectData.map(({ name, index }) => {\n                return new Promise((resolve, reject) => {\n                  const options = { name };\n                  const dep = EntryPlugin.createDependency(entry, options);\n                  compilation.addEntry(compiler.context, dep, options, (err) => {\n                    if (err) return reject(err);\n\n                    // If the entry is not a global one,\n                    // and we have registered the index for integration entry,\n                    // we will reorder all entry dependencies to our desired order.\n                    // That is, to have additional entries DIRECTLY behind integration entry.\n                    if (name && typeof index !== 'undefined') {\n                      const entryData = compilation.entries.get(name);\n                      entryData.dependencies.splice(\n                        index + 1,\n                        0,\n                        entryData.dependencies.splice(entryData.dependencies.length - 1, 1)[0]\n                      );\n                    }\n\n                    resolve();\n                  });\n                });\n              })\n            ).then(() => {});\n          }\n        );\n      });\n    } else {\n      compiler.options.entry = injectRefreshEntry(compiler.options.entry, addEntries);\n    }\n\n    // Inject necessary modules and variables to bundle's global scope\n    const refreshGlobal = getRefreshGlobalScope(RuntimeGlobals || {});\n    /** @type {Record<string, string | boolean>}*/\n    const definedModules = {\n      // Mapping of react-refresh globals to Webpack runtime globals\n      $RefreshReg$: `${refreshGlobal}.register`,\n      $RefreshSig$: `${refreshGlobal}.signature`,\n      'typeof $RefreshReg$': 'function',\n      'typeof $RefreshSig$': 'function',\n\n      // Library mode\n      __react_refresh_library__: JSON.stringify(\n        Template.toIdentifier(\n          this.options.library ||\n            compiler.options.output.uniqueName ||\n            compiler.options.output.library\n        )\n      ),\n    };\n    /** @type {Record<string, string>} */\n    const providedModules = {\n      __react_refresh_utils__: require.resolve('./runtime/RefreshUtils'),\n    };\n\n    if (this.options.overlay === false) {\n      // Stub errorOverlay module so their calls can be erased\n      definedModules.__react_refresh_error_overlay__ = false;\n      definedModules.__react_refresh_polyfill_url__ = false;\n      definedModules.__react_refresh_socket__ = false;\n    } else {\n      definedModules.__react_refresh_polyfill_url__ = this.options.overlay.useURLPolyfill || false;\n\n      if (this.options.overlay.module) {\n        providedModules.__react_refresh_error_overlay__ = require.resolve(\n          this.options.overlay.module\n        );\n      }\n      if (this.options.overlay.sockIntegration) {\n        providedModules.__react_refresh_socket__ = getSocketIntegration(\n          this.options.overlay.sockIntegration\n        );\n      }\n    }\n\n    new DefinePlugin(definedModules).apply(compiler);\n    new ProvidePlugin(providedModules).apply(compiler);\n\n    const match = ModuleFilenameHelpers.matchObject.bind(undefined, this.options);\n    let loggedHotWarning = false;\n    compiler.hooks.compilation.tap(\n      this.constructor.name,\n      (compilation, { normalModuleFactory }) => {\n        // Only hook into the current compiler\n        if (compilation.compiler !== compiler) {\n          return;\n        }\n\n        // Tap into version-specific compilation hooks\n        switch (webpackVersion) {\n          case 4: {\n            const outputOptions = compilation.mainTemplate.outputOptions;\n            compilation.mainTemplate.hooks.require.tap(\n              this.constructor.name,\n              // Constructs the module template for react-refresh\n              (source, chunk, hash) => {\n                // Check for the output filename\n                // This is to ensure we are processing a JS-related chunk\n                let filename = outputOptions.filename;\n                if (typeof filename === 'function') {\n                  // Only usage of the `chunk` property is documented by Webpack.\n                  // However, some internal Webpack plugins uses other properties,\n                  // so we also pass them through to be on the safe side.\n                  filename = filename({\n                    contentHashType: 'javascript',\n                    chunk,\n                    hash,\n                  });\n                }\n\n                // Check whether the current compilation is outputting to JS,\n                // since other plugins can trigger compilations for other file types too.\n                // If we apply the transform to them, their compilation will break fatally.\n                // One prominent example of this is the HTMLWebpackPlugin.\n                // If filename is falsy, something is terribly wrong and there's nothing we can do.\n                if (!filename || !filename.includes('.js')) {\n                  return source;\n                }\n\n                // Split template source code into lines for easier processing\n                const lines = source.split('\\n');\n                // Webpack generates this line when the MainTemplate is called\n                const moduleInitializationLineNumber = lines.findIndex((line) =>\n                  line.includes('modules[moduleId].call(')\n                );\n                // Unable to find call to module execution -\n                // this happens if the current module does not call MainTemplate.\n                // In this case, we will return the original source and won't mess with it.\n                if (moduleInitializationLineNumber === -1) {\n                  return source;\n                }\n\n                const moduleInterceptor = Template.asString([\n                  `${refreshGlobal}.setup(moduleId);`,\n                  'try {',\n                  Template.indent(lines[moduleInitializationLineNumber]),\n                  '} finally {',\n                  Template.indent(`${refreshGlobal}.cleanup(moduleId);`),\n                  '}',\n                ]);\n\n                return Template.asString([\n                  ...lines.slice(0, moduleInitializationLineNumber),\n                  '',\n                  outputOptions.strictModuleExceptionHandling\n                    ? Template.indent(moduleInterceptor)\n                    : moduleInterceptor,\n                  '',\n                  ...lines.slice(moduleInitializationLineNumber + 1, lines.length),\n                ]);\n              }\n            );\n\n            compilation.mainTemplate.hooks.requireExtensions.tap(\n              this.constructor.name,\n              // Setup react-refresh globals as extensions to Webpack's require function\n              (source) => {\n                return Template.asString([source, '', getRefreshGlobal(Template)]);\n              }\n            );\n\n            normalModuleFactory.hooks.afterResolve.tap(\n              this.constructor.name,\n              // Add react-refresh loader to process files that matches specified criteria\n              (data) => {\n                return injectRefreshLoader(data, {\n                  match,\n                  options: { const: false, esModule: false },\n                });\n              }\n            );\n\n            compilation.hooks.normalModuleLoader.tap(\n              // `Number.POSITIVE_INFINITY` ensures this check will run only after all other taps\n              { name: this.constructor.name, stage: Number.POSITIVE_INFINITY },\n              // Check for existence of the HMR runtime -\n              // it is the foundation to this plugin working correctly\n              (context) => {\n                if (!context.hot && !loggedHotWarning) {\n                  logger.warn(\n                    [\n                      'Hot Module Replacement (HMR) is not enabled!',\n                      'React Refresh requires HMR to function properly.',\n                    ].join(' ')\n                  );\n                  loggedHotWarning = true;\n                }\n              }\n            );\n\n            break;\n          }\n          case 5: {\n            // Set factory for EntryDependency which is used to initialise the module\n            compilation.dependencyFactories.set(EntryDependency, normalModuleFactory);\n\n            const ReactRefreshRuntimeModule = makeRefreshRuntimeModule(webpack);\n            compilation.hooks.additionalTreeRuntimeRequirements.tap(\n              this.constructor.name,\n              // Setup react-refresh globals with a Webpack runtime module\n              (chunk, runtimeRequirements) => {\n                runtimeRequirements.add(RuntimeGlobals.interceptModuleExecution);\n                runtimeRequirements.add(RuntimeGlobals.moduleCache);\n                runtimeRequirements.add(refreshGlobal);\n                compilation.addRuntimeModule(chunk, new ReactRefreshRuntimeModule());\n              }\n            );\n\n            normalModuleFactory.hooks.afterResolve.tap(\n              this.constructor.name,\n              // Add react-refresh loader to process files that matches specified criteria\n              (resolveData) => {\n                injectRefreshLoader(resolveData.createData, {\n                  match,\n                  options: {\n                    const: compilation.runtimeTemplate.supportsConst(),\n                    esModule: this.options.esModule,\n                  },\n                });\n              }\n            );\n\n            NormalModule.getCompilationHooks(compilation).loader.tap(\n              // `Infinity` ensures this check will run only after all other taps\n              { name: this.constructor.name, stage: Infinity },\n              // Check for existence of the HMR runtime -\n              // it is the foundation to this plugin working correctly\n              (context) => {\n                if (!context.hot && !loggedHotWarning) {\n                  logger.warn(\n                    [\n                      'Hot Module Replacement (HMR) is not enabled!',\n                      'React Refresh requires HMR to function properly.',\n                    ].join(' ')\n                  );\n                  loggedHotWarning = true;\n                }\n              }\n            );\n\n            break;\n          }\n          default: {\n            // Do nothing - this should be an impossible case\n          }\n        }\n      }\n    );\n  }\n}\n\nmodule.exports.ReactRefreshPlugin = ReactRefreshPlugin;\nmodule.exports = ReactRefreshPlugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}