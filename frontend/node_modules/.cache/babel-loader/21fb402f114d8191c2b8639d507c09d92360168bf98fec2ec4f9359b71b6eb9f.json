{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: ({\n    params: {\n      len\n    }\n  }) => (0, codegen_1.str)`must NOT have more than ${len} items`,\n  params: ({\n    params: {\n      len\n    }\n  }) => (0, codegen_1._)`{limit: ${len}}`\n};\nconst def = {\n  keyword: \"unevaluatedItems\",\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  error,\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      data,\n      it\n    } = cxt;\n    const items = it.items || 0;\n    if (items === true) return;\n    const len = gen.const(\"len\", (0, codegen_1._)`${data}.length`);\n    if (schema === false) {\n      cxt.setParams({\n        len: items\n      });\n      cxt.fail((0, codegen_1._)`${len} > ${items}`);\n    } else if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n      const valid = gen.var(\"valid\", (0, codegen_1._)`${len} <= ${items}`);\n      gen.if((0, codegen_1.not)(valid), () => validateItems(valid, items));\n      cxt.ok(valid);\n    }\n    it.items = true;\n    function validateItems(valid, from) {\n      gen.forRange(\"i\", from, len, i => {\n        cxt.subschema({\n          keyword: \"unevaluatedItems\",\n          dataProp: i,\n          dataPropType: util_1.Type.Num\n        }, valid);\n        if (!it.allErrors) gen.if((0, codegen_1.not)(valid), () => gen.break());\n      });\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","util_1","error","message","params","len","str","_","def","keyword","type","schemaType","code","cxt","gen","schema","data","it","items","const","setParams","fail","alwaysValidSchema","valid","var","if","not","validateItems","ok","from","forRange","i","subschema","dataProp","dataPropType","Type","Num","allErrors","break","exports","default"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\css-minimizer-webpack-plugin\\node_modules\\ajv\\lib\\vocabularies\\unevaluated\\unevaluatedItems.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, Type} from \"../../compile/util\"\n\nexport type UnevaluatedItemsError = ErrorObject<\"unevaluatedItems\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"unevaluatedItems\",\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, data, it} = cxt\n    const items = it.items || 0\n    if (items === true) return\n    const len = gen.const(\"len\", _`${data}.length`)\n    if (schema === false) {\n      cxt.setParams({len: items})\n      cxt.fail(_`${len} > ${items}`)\n    } else if (typeof schema == \"object\" && !alwaysValidSchema(it, schema)) {\n      const valid = gen.var(\"valid\", _`${len} <= ${items}`)\n      gen.if(not(valid), () => validateItems(valid, items))\n      cxt.ok(valid)\n    }\n    it.items = true\n\n    function validateItems(valid: Name, from: Name | number): void {\n      gen.forRange(\"i\", from, len, (i) => {\n        cxt.subschema({keyword: \"unevaluatedItems\", dataProp: i, dataPropType: Type.Num}, valid)\n        if (!it.allErrors) gen.if(not(valid), () => gen.break())\n      })\n    }\n  },\n}\n\nexport default def\n"],"mappings":";;;;;AAOA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AAIA,MAAME,KAAK,GAA2B;EACpCC,OAAO,EAAEA,CAAC;IAACC,MAAM,EAAE;MAACC;IAAG;EAAC,CAAC,KAAK,IAAAN,SAAA,CAAAO,GAAG,4BAA2BD,GAAG,QAAQ;EACvED,MAAM,EAAEA,CAAC;IAACA,MAAM,EAAE;MAACC;IAAG;EAAC,CAAC,KAAK,IAAAN,SAAA,CAAAQ,CAAC,YAAWF,GAAG;CAC7C;AAED,MAAMG,GAAG,GAA0B;EACjCC,OAAO,EAAE,kBAAkB;EAC3BC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;EACjCT,KAAK;EACLU,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACC,GAAG;MAAEC,MAAM;MAAEC,IAAI;MAAEC;IAAE,CAAC,GAAGJ,GAAG;IACnC,MAAMK,KAAK,GAAGD,EAAE,CAACC,KAAK,IAAI,CAAC;IAC3B,IAAIA,KAAK,KAAK,IAAI,EAAE;IACpB,MAAMb,GAAG,GAAGS,GAAG,CAACK,KAAK,CAAC,KAAK,EAAE,IAAApB,SAAA,CAAAQ,CAAC,IAAGS,IAAI,SAAS,CAAC;IAC/C,IAAID,MAAM,KAAK,KAAK,EAAE;MACpBF,GAAG,CAACO,SAAS,CAAC;QAACf,GAAG,EAAEa;MAAK,CAAC,CAAC;MAC3BL,GAAG,CAACQ,IAAI,CAAC,IAAAtB,SAAA,CAAAQ,CAAC,IAAGF,GAAG,MAAMa,KAAK,EAAE,CAAC;IAChC,CAAC,MAAM,IAAI,OAAOH,MAAM,IAAI,QAAQ,IAAI,CAAC,IAAAd,MAAA,CAAAqB,iBAAiB,EAACL,EAAE,EAAEF,MAAM,CAAC,EAAE;MACtE,MAAMQ,KAAK,GAAGT,GAAG,CAACU,GAAG,CAAC,OAAO,EAAE,IAAAzB,SAAA,CAAAQ,CAAC,IAAGF,GAAG,OAAOa,KAAK,EAAE,CAAC;MACrDJ,GAAG,CAACW,EAAE,CAAC,IAAA1B,SAAA,CAAA2B,GAAG,EAACH,KAAK,CAAC,EAAE,MAAMI,aAAa,CAACJ,KAAK,EAAEL,KAAK,CAAC,CAAC;MACrDL,GAAG,CAACe,EAAE,CAACL,KAAK,CAAC;IACf;IACAN,EAAE,CAACC,KAAK,GAAG,IAAI;IAEf,SAASS,aAAaA,CAACJ,KAAW,EAAEM,IAAmB;MACrDf,GAAG,CAACgB,QAAQ,CAAC,GAAG,EAAED,IAAI,EAAExB,GAAG,EAAG0B,CAAC,IAAI;QACjClB,GAAG,CAACmB,SAAS,CAAC;UAACvB,OAAO,EAAE,kBAAkB;UAAEwB,QAAQ,EAAEF,CAAC;UAAEG,YAAY,EAAEjC,MAAA,CAAAkC,IAAI,CAACC;QAAG,CAAC,EAAEb,KAAK,CAAC;QACxF,IAAI,CAACN,EAAE,CAACoB,SAAS,EAAEvB,GAAG,CAACW,EAAE,CAAC,IAAA1B,SAAA,CAAA2B,GAAG,EAACH,KAAK,CAAC,EAAE,MAAMT,GAAG,CAACwB,KAAK,EAAE,CAAC;MAC1D,CAAC,CAAC;IACJ;EACF;CACD;AAEDC,OAAA,CAAAC,OAAA,GAAehC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}