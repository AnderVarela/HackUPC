{"ast":null,"code":"/**\n * class Action\n *\n * Base class for all actions\n * Do not call in your code, use this class only for inherits your own action\n *\n * Information about how to convert command line strings to Javascript objects.\n * Action objects are used by an ArgumentParser to represent the information\n * needed to parse a single argument from one or more strings from the command\n * line. The keyword arguments to the Action constructor are also all attributes\n * of Action instances.\n *\n * ##### Allowed keywords:\n *\n * - `store`\n * - `storeConstant`\n * - `storeTrue`\n * - `storeFalse`\n * - `append`\n * - `appendConstant`\n * - `count`\n * - `help`\n * - `version`\n *\n * Information about action options see [[Action.new]]\n *\n * See also [original guide](http://docs.python.org/dev/library/argparse.html#action)\n *\n **/\n\n'use strict';\n\n// Constants\nvar c = require('./const');\n\n/**\n * new Action(options)\n *\n * Base class for all actions. Used only for inherits\n *\n *\n * ##### Options:\n *\n * - `optionStrings`  A list of command-line option strings for the action.\n * - `dest`  Attribute to hold the created object(s)\n * - `nargs`  The number of command-line arguments that should be consumed.\n * By default, one argument will be consumed and a single value will be\n * produced.\n * - `constant`  Default value for an action with no value.\n * - `defaultValue`  The value to be produced if the option is not specified.\n * - `type`  Cast to 'string'|'int'|'float'|'complex'|function (string). If\n * None, 'string'.\n * - `choices`  The choices available.\n * - `required`  True if the action must always be specified at the command\n * line.\n * - `help`  The help describing the argument.\n * - `metavar`  The name to be used for the option's argument with the help\n * string. If None, the 'dest' value will be used as the name.\n *\n * ##### nargs supported values:\n *\n * - `N` (an integer) consumes N arguments (and produces a list)\n * - `?`  consumes zero or one arguments\n * - `*` consumes zero or more arguments (and produces a list)\n * - `+` consumes one or more arguments (and produces a list)\n *\n * Note: that the difference between the default and nargs=1 is that with the\n * default, a single value will be produced, while with nargs=1, a list\n * containing a single value will be produced.\n **/\nvar Action = module.exports = function Action(options) {\n  options = options || {};\n  this.optionStrings = options.optionStrings || [];\n  this.dest = options.dest;\n  this.nargs = typeof options.nargs !== 'undefined' ? options.nargs : null;\n  this.constant = typeof options.constant !== 'undefined' ? options.constant : null;\n  this.defaultValue = options.defaultValue;\n  this.type = typeof options.type !== 'undefined' ? options.type : null;\n  this.choices = typeof options.choices !== 'undefined' ? options.choices : null;\n  this.required = typeof options.required !== 'undefined' ? options.required : false;\n  this.help = typeof options.help !== 'undefined' ? options.help : null;\n  this.metavar = typeof options.metavar !== 'undefined' ? options.metavar : null;\n  if (!(this.optionStrings instanceof Array)) {\n    throw new Error('optionStrings should be an array');\n  }\n  if (typeof this.required !== 'undefined' && typeof this.required !== 'boolean') {\n    throw new Error('required should be a boolean');\n  }\n};\n\n/**\n * Action#getName -> String\n *\n * Tells action name\n **/\nAction.prototype.getName = function () {\n  if (this.optionStrings.length > 0) {\n    return this.optionStrings.join('/');\n  } else if (this.metavar !== null && this.metavar !== c.SUPPRESS) {\n    return this.metavar;\n  } else if (typeof this.dest !== 'undefined' && this.dest !== c.SUPPRESS) {\n    return this.dest;\n  }\n  return null;\n};\n\n/**\n * Action#isOptional -> Boolean\n *\n * Return true if optional\n **/\nAction.prototype.isOptional = function () {\n  return !this.isPositional();\n};\n\n/**\n * Action#isPositional -> Boolean\n *\n * Return true if positional\n **/\nAction.prototype.isPositional = function () {\n  return this.optionStrings.length === 0;\n};\n\n/**\n * Action#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Should be implemented in inherited classes\n *\n * ##### Example\n *\n *      ActionCount.prototype.call = function (parser, namespace, values, optionString) {\n *        namespace.set(this.dest, (namespace[this.dest] || 0) + 1);\n *      };\n *\n **/\nAction.prototype.call = function () {\n  throw new Error('.call() not defined'); // Not Implemented error\n};","map":{"version":3,"names":["c","require","Action","module","exports","options","optionStrings","dest","nargs","constant","defaultValue","type","choices","required","help","metavar","Array","Error","prototype","getName","length","join","SUPPRESS","isOptional","isPositional","call"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/argparse/lib/action.js"],"sourcesContent":["/**\n * class Action\n *\n * Base class for all actions\n * Do not call in your code, use this class only for inherits your own action\n *\n * Information about how to convert command line strings to Javascript objects.\n * Action objects are used by an ArgumentParser to represent the information\n * needed to parse a single argument from one or more strings from the command\n * line. The keyword arguments to the Action constructor are also all attributes\n * of Action instances.\n *\n * ##### Allowed keywords:\n *\n * - `store`\n * - `storeConstant`\n * - `storeTrue`\n * - `storeFalse`\n * - `append`\n * - `appendConstant`\n * - `count`\n * - `help`\n * - `version`\n *\n * Information about action options see [[Action.new]]\n *\n * See also [original guide](http://docs.python.org/dev/library/argparse.html#action)\n *\n **/\n\n'use strict';\n\n\n// Constants\nvar c = require('./const');\n\n\n/**\n * new Action(options)\n *\n * Base class for all actions. Used only for inherits\n *\n *\n * ##### Options:\n *\n * - `optionStrings`  A list of command-line option strings for the action.\n * - `dest`  Attribute to hold the created object(s)\n * - `nargs`  The number of command-line arguments that should be consumed.\n * By default, one argument will be consumed and a single value will be\n * produced.\n * - `constant`  Default value for an action with no value.\n * - `defaultValue`  The value to be produced if the option is not specified.\n * - `type`  Cast to 'string'|'int'|'float'|'complex'|function (string). If\n * None, 'string'.\n * - `choices`  The choices available.\n * - `required`  True if the action must always be specified at the command\n * line.\n * - `help`  The help describing the argument.\n * - `metavar`  The name to be used for the option's argument with the help\n * string. If None, the 'dest' value will be used as the name.\n *\n * ##### nargs supported values:\n *\n * - `N` (an integer) consumes N arguments (and produces a list)\n * - `?`  consumes zero or one arguments\n * - `*` consumes zero or more arguments (and produces a list)\n * - `+` consumes one or more arguments (and produces a list)\n *\n * Note: that the difference between the default and nargs=1 is that with the\n * default, a single value will be produced, while with nargs=1, a list\n * containing a single value will be produced.\n **/\nvar Action = module.exports = function Action(options) {\n  options = options || {};\n  this.optionStrings = options.optionStrings || [];\n  this.dest = options.dest;\n  this.nargs = typeof options.nargs !== 'undefined' ? options.nargs : null;\n  this.constant = typeof options.constant !== 'undefined' ? options.constant : null;\n  this.defaultValue = options.defaultValue;\n  this.type = typeof options.type !== 'undefined' ? options.type : null;\n  this.choices = typeof options.choices !== 'undefined' ? options.choices : null;\n  this.required = typeof options.required !== 'undefined' ? options.required : false;\n  this.help = typeof options.help !== 'undefined' ? options.help : null;\n  this.metavar = typeof options.metavar !== 'undefined' ? options.metavar : null;\n\n  if (!(this.optionStrings instanceof Array)) {\n    throw new Error('optionStrings should be an array');\n  }\n  if (typeof this.required !== 'undefined' && typeof this.required !== 'boolean') {\n    throw new Error('required should be a boolean');\n  }\n};\n\n/**\n * Action#getName -> String\n *\n * Tells action name\n **/\nAction.prototype.getName = function () {\n  if (this.optionStrings.length > 0) {\n    return this.optionStrings.join('/');\n  } else if (this.metavar !== null && this.metavar !== c.SUPPRESS) {\n    return this.metavar;\n  } else if (typeof this.dest !== 'undefined' && this.dest !== c.SUPPRESS) {\n    return this.dest;\n  }\n  return null;\n};\n\n/**\n * Action#isOptional -> Boolean\n *\n * Return true if optional\n **/\nAction.prototype.isOptional = function () {\n  return !this.isPositional();\n};\n\n/**\n * Action#isPositional -> Boolean\n *\n * Return true if positional\n **/\nAction.prototype.isPositional = function () {\n  return (this.optionStrings.length === 0);\n};\n\n/**\n * Action#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Should be implemented in inherited classes\n *\n * ##### Example\n *\n *      ActionCount.prototype.call = function (parser, namespace, values, optionString) {\n *        namespace.set(this.dest, (namespace[this.dest] || 0) + 1);\n *      };\n *\n **/\nAction.prototype.call = function () {\n  throw new Error('.call() not defined');// Not Implemented error\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}