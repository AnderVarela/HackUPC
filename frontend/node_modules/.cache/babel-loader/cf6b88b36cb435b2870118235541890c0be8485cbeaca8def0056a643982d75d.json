{"ast":null,"code":"/**\n * Fixes block-shadowed let/const bindings in Safari 10/11.\n * https://kangax.github.io/compat-table/es6/#test-let_scope_shadow_resolution\n */\nexport default function ({\n  types: t\n}) {\n  return {\n    name: \"transform-safari-block-shadowing\",\n    visitor: {\n      VariableDeclarator(path) {\n        // the issue only affects let and const bindings:\n        const kind = path.parent.kind;\n        if (kind !== \"let\" && kind !== \"const\") return;\n\n        // ignore non-block-scoped bindings:\n        const block = path.scope.block;\n        if (t.isFunction(block) || t.isProgram(block)) return;\n        const bindings = t.getOuterBindingIdentifiers(path.node.id);\n        for (const name of Object.keys(bindings)) {\n          let scope = path.scope;\n\n          // ignore parent bindings (note: impossible due to let/const?)\n          if (!scope.hasOwnBinding(name)) continue;\n\n          // check if shadowed within the nearest function/program boundary\n          while (scope = scope.parent) {\n            if (scope.hasOwnBinding(name)) {\n              path.scope.rename(name);\n              break;\n            }\n            if (t.isFunction(scope.block) || t.isProgram(scope.block)) {\n              break;\n            }\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["types","t","name","visitor","VariableDeclarator","path","kind","parent","block","scope","isFunction","isProgram","bindings","getOuterBindingIdentifiers","node","id","Object","keys","hasOwnBinding","rename"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@babel/preset-modules/src/plugins/transform-safari-block-shadowing/index.js"],"sourcesContent":["/**\n * Fixes block-shadowed let/const bindings in Safari 10/11.\n * https://kangax.github.io/compat-table/es6/#test-let_scope_shadow_resolution\n */\nexport default function({ types: t }) {\n  return {\n    name: \"transform-safari-block-shadowing\",\n    visitor: {\n      VariableDeclarator(path) {\n        // the issue only affects let and const bindings:\n        const kind = path.parent.kind;\n        if (kind !== \"let\" && kind !== \"const\") return;\n\n        // ignore non-block-scoped bindings:\n        const block = path.scope.block;\n        if (t.isFunction(block) || t.isProgram(block)) return;\n\n        const bindings = t.getOuterBindingIdentifiers(path.node.id);\n        for (const name of Object.keys(bindings)) {\n          let scope = path.scope;\n\n          // ignore parent bindings (note: impossible due to let/const?)\n          if (!scope.hasOwnBinding(name)) continue;\n\n          // check if shadowed within the nearest function/program boundary\n          while ((scope = scope.parent)) {\n            if (scope.hasOwnBinding(name)) {\n              path.scope.rename(name);\n              break;\n            }\n            if (t.isFunction(scope.block) || t.isProgram(scope.block)) {\n              break;\n            }\n          }\n        }\n      },\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,UAAS;EAAEA,KAAK,EAAEC;AAAE,CAAC,EAAE;EACpC,OAAO;IACLC,IAAI,EAAE,kCAAkC;IACxCC,OAAO,EAAE;MACPC,kBAAkBA,CAACC,IAAI,EAAE;QACvB;QACA,MAAMC,IAAI,GAAGD,IAAI,CAACE,MAAM,CAACD,IAAI;QAC7B,IAAIA,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,OAAO,EAAE;;QAExC;QACA,MAAME,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACD,KAAK;QAC9B,IAAIP,CAAC,CAACS,UAAU,CAACF,KAAK,CAAC,IAAIP,CAAC,CAACU,SAAS,CAACH,KAAK,CAAC,EAAE;QAE/C,MAAMI,QAAQ,GAAGX,CAAC,CAACY,0BAA0B,CAACR,IAAI,CAACS,IAAI,CAACC,EAAE,CAAC;QAC3D,KAAK,MAAMb,IAAI,IAAIc,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC,EAAE;UACxC,IAAIH,KAAK,GAAGJ,IAAI,CAACI,KAAK;;UAEtB;UACA,IAAI,CAACA,KAAK,CAACS,aAAa,CAAChB,IAAI,CAAC,EAAE;;UAEhC;UACA,OAAQO,KAAK,GAAGA,KAAK,CAACF,MAAM,EAAG;YAC7B,IAAIE,KAAK,CAACS,aAAa,CAAChB,IAAI,CAAC,EAAE;cAC7BG,IAAI,CAACI,KAAK,CAACU,MAAM,CAACjB,IAAI,CAAC;cACvB;YACF;YACA,IAAID,CAAC,CAACS,UAAU,CAACD,KAAK,CAACD,KAAK,CAAC,IAAIP,CAAC,CAACU,SAAS,CAACF,KAAK,CAACD,KAAK,CAAC,EAAE;cACzD;YACF;UACF;QACF;MACF;IACF;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}