{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\nvar _markup = require('./lib/markup');\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nconst FRAGMENT_NODE = 11;\nconst ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\nconst testHasAttribute = val => {\n  try {\n    return typeof val.hasAttribute === 'function' && val.hasAttribute('is');\n  } catch {\n    return false;\n  }\n};\nconst testNode = val => {\n  const constructorName = val.constructor.name;\n  const {\n    nodeType,\n    tagName\n  } = val;\n  const isCustomElement = typeof tagName === 'string' && tagName.includes('-') || testHasAttribute(val);\n  return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === 'Text' || nodeType === COMMENT_NODE && constructorName === 'Comment' || nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment';\n};\nconst test = val => val?.constructor?.name && testNode(val);\nexports.test = test;\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\nconst serialize = (node, config, indentation, depth, refs, printer) => {\n  if (nodeIsText(node)) {\n    return (0, _markup.printText)(node.data, config);\n  }\n  if (nodeIsComment(node)) {\n    return (0, _markup.printComment)(node.data, config);\n  }\n  const type = nodeIsFragment(node) ? 'DocumentFragment' : node.tagName.toLowerCase();\n  if (++depth > config.maxDepth) {\n    return (0, _markup.printElementAsLeaf)(type, config);\n  }\n  return (0, _markup.printElement)(type, (0, _markup.printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes, attr => attr.name).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {\n    props[attribute.name] = attribute.value;\n    return props;\n  }, {}), config, indentation + config.indent, depth, refs, printer), (0, _markup.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);\n};\nexports.serialize = serialize;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","test","serialize","default","_markup","require","ELEMENT_NODE","TEXT_NODE","COMMENT_NODE","FRAGMENT_NODE","ELEMENT_REGEXP","testHasAttribute","val","hasAttribute","testNode","constructorName","constructor","name","nodeType","tagName","isCustomElement","includes","nodeIsText","node","nodeIsComment","nodeIsFragment","config","indentation","depth","refs","printer","printText","data","printComment","type","toLowerCase","maxDepth","printElementAsLeaf","printElement","printProps","Array","from","attributes","attr","sort","reduce","props","attribute","indent","printChildren","prototype","slice","call","childNodes","children","plugin","_default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@types/jest/node_modules/pretty-format/build/plugins/DOMElement.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\nvar _markup = require('./lib/markup');\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nconst FRAGMENT_NODE = 11;\nconst ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\nconst testHasAttribute = val => {\n  try {\n    return typeof val.hasAttribute === 'function' && val.hasAttribute('is');\n  } catch {\n    return false;\n  }\n};\nconst testNode = val => {\n  const constructorName = val.constructor.name;\n  const {nodeType, tagName} = val;\n  const isCustomElement =\n    (typeof tagName === 'string' && tagName.includes('-')) ||\n    testHasAttribute(val);\n  return (\n    (nodeType === ELEMENT_NODE &&\n      (ELEMENT_REGEXP.test(constructorName) || isCustomElement)) ||\n    (nodeType === TEXT_NODE && constructorName === 'Text') ||\n    (nodeType === COMMENT_NODE && constructorName === 'Comment') ||\n    (nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment')\n  );\n};\nconst test = val => val?.constructor?.name && testNode(val);\nexports.test = test;\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE;\n}\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE;\n}\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\nconst serialize = (node, config, indentation, depth, refs, printer) => {\n  if (nodeIsText(node)) {\n    return (0, _markup.printText)(node.data, config);\n  }\n  if (nodeIsComment(node)) {\n    return (0, _markup.printComment)(node.data, config);\n  }\n  const type = nodeIsFragment(node)\n    ? 'DocumentFragment'\n    : node.tagName.toLowerCase();\n  if (++depth > config.maxDepth) {\n    return (0, _markup.printElementAsLeaf)(type, config);\n  }\n  return (0, _markup.printElement)(\n    type,\n    (0, _markup.printProps)(\n      nodeIsFragment(node)\n        ? []\n        : Array.from(node.attributes, attr => attr.name).sort(),\n      nodeIsFragment(node)\n        ? {}\n        : Array.from(node.attributes).reduce((props, attribute) => {\n            props[attribute.name] = attribute.value;\n            return props;\n          }, {}),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer\n    ),\n    (0, _markup.printChildren)(\n      Array.prototype.slice.call(node.childNodes || node.children),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer\n    ),\n    config,\n    indentation\n  );\n};\nexports.serialize = serialize;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}