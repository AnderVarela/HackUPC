{"ast":null,"code":"/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\n\n/************************************** EDITABLE DEFAULTS *****************************************/\n\n// The default values below must be integers within the stated ranges.\n\n/*\r\n * The maximum number of decimal places (DP) of the results of operations involving division:\r\n * div and sqrt, and pow with negative exponents.\r\n */\nvar DP = 20,\n  // 0 to MAX_DP\n\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\n  RM = 1,\n  // 0, 1, 2 or 3\n\n  // The maximum value of DP and Big.DP.\n  MAX_DP = 1E6,\n  // 0 to 1000000\n\n  // The maximum magnitude of the exponent argument to the pow method.\n  MAX_POWER = 1E6,\n  // 1 to 1000000\n\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\n  NE = -7,\n  // 0 to -1000000\n\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big.\r\n   * (This limit is not enforced or checked.)\r\n   */\n  PE = 21,\n  // 0 to 1000000\n\n  /**************************************************************************************************/\n\n  // Error messages.\n  NAME = '[big.js] ',\n  INVALID = NAME + 'Invalid ',\n  INVALID_DP = INVALID + 'decimal places',\n  INVALID_RM = INVALID + 'rounding mode',\n  DIV_BY_ZERO = NAME + 'Division by zero',\n  // The shared prototype object.\n  P = {},\n  UNDEFINED = void 0,\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n\n/*\r\n * Create and return a Big constructor.\r\n *\r\n */\nfunction _Big_() {\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\n  function Big(n) {\n    var x = this;\n\n    // Enable constructor usage without new.\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\n\n    // Duplicate.\n    if (n instanceof Big) {\n      x.s = n.s;\n      x.e = n.e;\n      x.c = n.c.slice();\n    } else {\n      parse(x, n);\n    }\n\n    /*\r\n     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n     * points to Object.\r\n     */\n    x.constructor = Big;\n  }\n  Big.prototype = P;\n  Big.DP = DP;\n  Big.RM = RM;\n  Big.NE = NE;\n  Big.PE = PE;\n  Big.version = '5.2.2';\n  return Big;\n}\n\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\nfunction parse(x, n) {\n  var e, i, nl;\n\n  // Minus zero?\n  if (n === 0 && 1 / n < 0) n = '-0';else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\n\n  // Determine sign.\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n\n  // Decimal point?\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\n\n  // Exponential form?\n  if ((i = n.search(/e/i)) > 0) {\n    // Determine exponent.\n    if (e < 0) e = i;\n    e += +n.slice(i + 1);\n    n = n.substring(0, i);\n  } else if (e < 0) {\n    // Integer.\n    e = n.length;\n  }\n  nl = n.length;\n\n  // Determine leading zeros.\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n  if (i == nl) {\n    // Zero.\n    x.c = [x.e = 0];\n  } else {\n    // Determine trailing zeros.\n    for (; nl > 0 && n.charAt(--nl) == '0';);\n    x.e = e - i - 1;\n    x.c = [];\n\n    // Convert string to array of digits without leading/trailing zeros.\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n  }\n  return x;\n}\n\n/*\r\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n * Called by stringify, P.div, P.round and P.sqrt.\r\n *\r\n * x {Big} The Big to round.\r\n * dp {number} Integer, 0 to MAX_DP inclusive.\r\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\nfunction round(x, dp, rm, more) {\n  var xc = x.c,\n    i = x.e + dp + 1;\n  if (i < xc.length) {\n    if (rm === 1) {\n      // xc[i] is the digit after the digit that may be rounded up.\n      more = xc[i] >= 5;\n    } else if (rm === 2) {\n      more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n    } else if (rm === 3) {\n      more = more || !!xc[0];\n    } else {\n      more = false;\n      if (rm !== 0) throw Error(INVALID_RM);\n    }\n    if (i < 1) {\n      xc.length = 1;\n      if (more) {\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n        x.e = -dp;\n        xc[0] = 1;\n      } else {\n        // Zero.\n        xc[0] = x.e = 0;\n      }\n    } else {\n      // Remove any digits after the required decimal places.\n      xc.length = i--;\n\n      // Round up?\n      if (more) {\n        // Rounding up may mean the previous digit has to be rounded up.\n        for (; ++xc[i] > 9;) {\n          xc[i] = 0;\n          if (!i--) {\n            ++x.e;\n            xc.unshift(1);\n          }\n        }\n      }\n\n      // Remove trailing zeros.\n      for (i = xc.length; !xc[--i];) xc.pop();\n    }\n  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n    throw Error(INVALID_RM);\n  }\n  return x;\n}\n\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n *\r\n * x {Big}\r\n * id? {number} Caller id.\r\n *         1 toExponential\r\n *         2 toFixed\r\n *         3 toPrecision\r\n *         4 valueOf\r\n * n? {number|undefined} Caller's argument.\r\n * k? {number|undefined}\r\n */\nfunction stringify(x, id, n, k) {\n  var e,\n    s,\n    Big = x.constructor,\n    z = !x.c[0];\n  if (n !== UNDEFINED) {\n    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n      throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n    }\n    x = new Big(x);\n\n    // The index of the digit that may be rounded up.\n    n = k - x.e;\n\n    // Round?\n    if (x.c.length > ++k) round(x, n, Big.RM);\n\n    // toFixed: recalculate k as x.e may have changed if value rounded up.\n    if (id == 2) k = x.e + n + 1;\n\n    // Append zeros?\n    for (; x.c.length < k;) x.c.push(0);\n  }\n  e = x.e;\n  s = x.c.join('');\n  n = s.length;\n\n  // Exponential notation?\n  if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n\n    // Normal notation.\n  } else if (e < 0) {\n    for (; ++e;) s = '0' + s;\n    s = '0.' + s;\n  } else if (e > 0) {\n    if (++e > n) for (e -= n; e--;) s += '0';else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\n  } else if (n > 1) {\n    s = s.charAt(0) + '.' + s.slice(1);\n  }\n  return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n\n// Prototype/instance methods\n\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\nP.abs = function () {\n  var x = new this.constructor(this);\n  x.s = 1;\n  return x;\n};\n\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n*/\nP.cmp = function (y) {\n  var isneg,\n    x = this,\n    xc = x.c,\n    yc = (y = new x.constructor(y)).c,\n    i = x.s,\n    j = y.s,\n    k = x.e,\n    l = y.e;\n\n  // Either zero?\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\n\n  // Signs differ?\n  if (i != j) return i;\n  isneg = i < 0;\n\n  // Compare exponents.\n  if (k != l) return k > l ^ isneg ? 1 : -1;\n  j = (k = xc.length) < (l = yc.length) ? k : l;\n\n  // Compare digit by digit.\n  for (i = -1; ++i < j;) {\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n  }\n\n  // Compare lengths.\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\nP.div = function (y) {\n  var x = this,\n    Big = x.constructor,\n    a = x.c,\n    // dividend\n    b = (y = new Big(y)).c,\n    // divisor\n    k = x.s == y.s ? 1 : -1,\n    dp = Big.DP;\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\n\n  // Divisor is zero?\n  if (!b[0]) throw Error(DIV_BY_ZERO);\n\n  // Dividend is 0? Return +-0.\n  if (!a[0]) return new Big(k * 0);\n  var bl,\n    bt,\n    n,\n    cmp,\n    ri,\n    bz = b.slice(),\n    ai = bl = b.length,\n    al = a.length,\n    r = a.slice(0, bl),\n    // remainder\n    rl = r.length,\n    q = y,\n    // quotient\n    qc = q.c = [],\n    qi = 0,\n    d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n\n  q.s = k;\n  k = d < 0 ? 0 : d;\n\n  // Create version of divisor with leading zero.\n  bz.unshift(0);\n\n  // Add zeros to make remainder as long as divisor.\n  for (; rl++ < bl;) r.push(0);\n  do {\n    // n is how many times the divisor goes into current remainder.\n    for (n = 0; n < 10; n++) {\n      // Compare divisor and remainder.\n      if (bl != (rl = r.length)) {\n        cmp = bl > rl ? 1 : -1;\n      } else {\n        for (ri = -1, cmp = 0; ++ri < bl;) {\n          if (b[ri] != r[ri]) {\n            cmp = b[ri] > r[ri] ? 1 : -1;\n            break;\n          }\n        }\n      }\n\n      // If divisor < remainder, subtract divisor from remainder.\n      if (cmp < 0) {\n        // Remainder can't be more than 1 digit longer than divisor.\n        // Equalise lengths using divisor with extra leading zero?\n        for (bt = rl == bl ? b : bz; rl;) {\n          if (r[--rl] < bt[rl]) {\n            ri = rl;\n            for (; ri && !r[--ri];) r[ri] = 9;\n            --r[ri];\n            r[rl] += 10;\n          }\n          r[rl] -= bt[rl];\n        }\n        for (; !r[0];) r.shift();\n      } else {\n        break;\n      }\n    }\n\n    // Add the digit n to the result array.\n    qc[qi++] = cmp ? n : ++n;\n\n    // Update the remainder.\n    if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\n  if (!qc[0] && qi != 1) {\n    // There can't be more than one zero.\n    qc.shift();\n    q.e--;\n  }\n\n  // Round?\n  if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\n  return q;\n};\n\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\nP.eq = function (y) {\n  return !this.cmp(y);\n};\n\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\nP.gt = function (y) {\n  return this.cmp(y) > 0;\n};\n\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\nP.gte = function (y) {\n  return this.cmp(y) > -1;\n};\n\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\nP.lt = function (y) {\n  return this.cmp(y) < 0;\n};\n\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\nP.lte = function (y) {\n  return this.cmp(y) < 1;\n};\n\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\nP.minus = P.sub = function (y) {\n  var i,\n    j,\n    t,\n    xlty,\n    x = this,\n    Big = x.constructor,\n    a = x.s,\n    b = (y = new Big(y)).s;\n\n  // Signs differ?\n  if (a != b) {\n    y.s = -b;\n    return x.plus(y);\n  }\n  var xc = x.c.slice(),\n    xe = x.e,\n    yc = y.c,\n    ye = y.e;\n\n  // Either zero?\n  if (!xc[0] || !yc[0]) {\n    // y is non-zero? x is non-zero? Or both are zero.\n    return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n  }\n\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\n  if (a = xe - ye) {\n    if (xlty = a < 0) {\n      a = -a;\n      t = xc;\n    } else {\n      ye = xe;\n      t = yc;\n    }\n    t.reverse();\n    for (b = a; b--;) t.push(0);\n    t.reverse();\n  } else {\n    // Exponents equal. Check digit by digit.\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n    for (a = b = 0; b < j; b++) {\n      if (xc[b] != yc[b]) {\n        xlty = xc[b] < yc[b];\n        break;\n      }\n    }\n  }\n\n  // x < y? Point xc to the array of the bigger number.\n  if (xlty) {\n    t = xc;\n    xc = yc;\n    yc = t;\n    y.s = -y.s;\n  }\n\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\n\n  // Subtract yc from xc.\n  for (b = i; j > a;) {\n    if (xc[--j] < yc[j]) {\n      for (i = j; i && !xc[--i];) xc[i] = 9;\n      --xc[i];\n      xc[j] += 10;\n    }\n    xc[j] -= yc[j];\n  }\n\n  // Remove trailing zeros.\n  for (; xc[--b] === 0;) xc.pop();\n\n  // Remove leading zeros and adjust exponent accordingly.\n  for (; xc[0] === 0;) {\n    xc.shift();\n    --ye;\n  }\n  if (!xc[0]) {\n    // n - n = +0\n    y.s = 1;\n\n    // Result must be zero.\n    xc = [ye = 0];\n  }\n  y.c = xc;\n  y.e = ye;\n  return y;\n};\n\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\nP.mod = function (y) {\n  var ygtx,\n    x = this,\n    Big = x.constructor,\n    a = x.s,\n    b = (y = new Big(y)).s;\n  if (!y.c[0]) throw Error(DIV_BY_ZERO);\n  x.s = y.s = 1;\n  ygtx = y.cmp(x) == 1;\n  x.s = a;\n  y.s = b;\n  if (ygtx) return new Big(x);\n  a = Big.DP;\n  b = Big.RM;\n  Big.DP = Big.RM = 0;\n  x = x.div(y);\n  Big.DP = a;\n  Big.RM = b;\n  return this.minus(x.times(y));\n};\n\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\nP.plus = P.add = function (y) {\n  var t,\n    x = this,\n    Big = x.constructor,\n    a = x.s,\n    b = (y = new Big(y)).s;\n\n  // Signs differ?\n  if (a != b) {\n    y.s = -b;\n    return x.minus(y);\n  }\n  var xe = x.e,\n    xc = x.c,\n    ye = y.e,\n    yc = y.c;\n\n  // Either zero? y is non-zero? x is non-zero? Or both are zero.\n  if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n  xc = xc.slice();\n\n  // Prepend zeros to equalise exponents.\n  // Note: reverse faster than unshifts.\n  if (a = xe - ye) {\n    if (a > 0) {\n      ye = xe;\n      t = yc;\n    } else {\n      a = -a;\n      t = xc;\n    }\n    t.reverse();\n    for (; a--;) t.push(0);\n    t.reverse();\n  }\n\n  // Point xc to the longer array.\n  if (xc.length - yc.length < 0) {\n    t = yc;\n    yc = xc;\n    xc = t;\n  }\n  a = yc.length;\n\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n  for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n  if (b) {\n    xc.unshift(b);\n    ++ye;\n  }\n\n  // Remove trailing zeros.\n  for (a = xc.length; xc[--a] === 0;) xc.pop();\n  y.c = xc;\n  y.e = ye;\n  return y;\n};\n\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\nP.pow = function (n) {\n  var x = this,\n    one = new x.constructor(1),\n    y = one,\n    isneg = n < 0;\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\n  if (isneg) n = -n;\n  for (;;) {\n    if (n & 1) y = y.times(x);\n    n >>= 1;\n    if (!n) break;\n    x = x.times(x);\n  }\n  return isneg ? one.div(y) : y;\n};\n\n/*\r\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n * multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n * If rm is not specified, use Big.RM.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n */\nP.round = function (dp, rm) {\n  var Big = this.constructor;\n  if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\n  return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\nP.sqrt = function () {\n  var r,\n    c,\n    t,\n    x = this,\n    Big = x.constructor,\n    s = x.s,\n    e = x.e,\n    half = new Big(0.5);\n\n  // Zero?\n  if (!x.c[0]) return new Big(x);\n\n  // Negative?\n  if (s < 0) throw Error(NAME + 'No square root');\n\n  // Estimate.\n  s = Math.sqrt(x + '');\n\n  // Math.sqrt underflow/overflow?\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n  if (s === 0 || s === 1 / 0) {\n    c = x.c.join('');\n    if (!(c.length + e & 1)) c += '0';\n    s = Math.sqrt(c);\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n    r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n  } else {\n    r = new Big(s);\n  }\n  e = r.e + (Big.DP += 4);\n\n  // Newton-Raphson iteration.\n  do {\n    t = r;\n    r = half.times(t.plus(x.div(t)));\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n  return round(r, Big.DP -= 4, Big.RM);\n};\n\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\nP.times = P.mul = function (y) {\n  var c,\n    x = this,\n    Big = x.constructor,\n    xc = x.c,\n    yc = (y = new Big(y)).c,\n    a = xc.length,\n    b = yc.length,\n    i = x.e,\n    j = y.e;\n\n  // Determine sign of result.\n  y.s = x.s == y.s ? 1 : -1;\n\n  // Return signed 0 if either 0.\n  if (!xc[0] || !yc[0]) return new Big(y.s * 0);\n\n  // Initialise exponent of result as x.e + y.e.\n  y.e = i + j;\n\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n  if (a < b) {\n    c = xc;\n    xc = yc;\n    yc = c;\n    j = a;\n    a = b;\n    b = j;\n  }\n\n  // Initialise coefficient array of result with zeros.\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\n\n  // Multiply.\n\n  // i is initially xc.length.\n  for (i = b; i--;) {\n    b = 0;\n\n    // a is yc.length.\n    for (j = a + i; j > i;) {\n      // Current sum of products at this digit position, plus carry.\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\n      c[j--] = b % 10;\n\n      // carry\n      b = b / 10 | 0;\n    }\n    c[j] = (c[j] + b) % 10;\n  }\n\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\n  if (b) ++y.e;else c.shift();\n\n  // Remove trailing zeros.\n  for (i = c.length; !c[--i];) c.pop();\n  y.c = c;\n  return y;\n};\n\n/*\r\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n */\nP.toExponential = function (dp) {\n  return stringify(this, 1, dp, dp);\n};\n\n/*\r\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\nP.toFixed = function (dp) {\n  return stringify(this, 2, dp, this.e + dp);\n};\n\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Integer, 1 to MAX_DP inclusive.\r\n */\nP.toPrecision = function (sd) {\n  return stringify(this, 3, sd, sd - 1);\n};\n\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\nP.toString = function () {\n  return stringify(this);\n};\n\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\nP.valueOf = P.toJSON = function () {\n  return stringify(this, 4);\n};\n\n// Export\n\nexport var Big = _Big_();\nexport default Big;","map":{"version":3,"names":["DP","RM","MAX_DP","MAX_POWER","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","_Big_","Big","n","x","s","e","c","slice","parse","constructor","prototype","version","i","nl","test","Error","charAt","indexOf","replace","search","substring","length","round","dp","rm","more","xc","unshift","pop","stringify","id","k","z","push","join","abs","cmp","y","isneg","yc","j","l","div","a","b","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","d","shift","eq","gt","gte","lt","lte","minus","sub","t","xlty","plus","xe","ye","reverse","mod","ygtx","times","add","pow","one","sqrt","half","Math","toExponential","mul","Array","toFixed","toPrecision","sd","toString","valueOf","toJSON"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/big.js/big.mjs"],"sourcesContent":["/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n  // The default values below must be integers within the stated ranges.\r\n\r\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\r\nvar DP = 20,          // 0 to MAX_DP\r\n\r\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\r\n  RM = 1,             // 0, 1, 2 or 3\r\n\r\n  // The maximum value of DP and Big.DP.\r\n  MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n  // The maximum magnitude of the exponent argument to the pow method.\r\n  MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\r\n  NE = -7,            // 0 to -1000000\r\n\r\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big.\r\n   * (This limit is not enforced or checked.)\r\n   */\r\n  PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n  // Error messages.\r\n  NAME = '[big.js] ',\r\n  INVALID = NAME + 'Invalid ',\r\n  INVALID_DP = INVALID + 'decimal places',\r\n  INVALID_RM = INVALID + 'rounding mode',\r\n  DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n  // The shared prototype object.\r\n  P = {},\r\n  UNDEFINED = void 0,\r\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n/*\r\n * Create and return a Big constructor.\r\n *\r\n */\r\nfunction _Big_() {\r\n\r\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\r\n  function Big(n) {\r\n    var x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n    // Duplicate.\r\n    if (n instanceof Big) {\r\n      x.s = n.s;\r\n      x.e = n.e;\r\n      x.c = n.c.slice();\r\n    } else {\r\n      parse(x, n);\r\n    }\r\n\r\n    /*\r\n     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n     * points to Object.\r\n     */\r\n    x.constructor = Big;\r\n  }\r\n\r\n  Big.prototype = P;\r\n  Big.DP = DP;\r\n  Big.RM = RM;\r\n  Big.NE = NE;\r\n  Big.PE = PE;\r\n  Big.version = '5.2.2';\r\n\r\n  return Big;\r\n}\r\n\r\n\r\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\r\nfunction parse(x, n) {\r\n  var e, i, nl;\r\n\r\n  // Minus zero?\r\n  if (n === 0 && 1 / n < 0) n = '-0';\r\n  else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n  // Determine sign.\r\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n  // Decimal point?\r\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = n.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +n.slice(i + 1);\r\n    n = n.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = n.length;\r\n  }\r\n\r\n  nl = n.length;\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n  if (i == nl) {\r\n\r\n    // Zero.\r\n    x.c = [x.e = 0];\r\n  } else {\r\n\r\n    // Determine trailing zeros.\r\n    for (; nl > 0 && n.charAt(--nl) == '0';);\r\n    x.e = e - i - 1;\r\n    x.c = [];\r\n\r\n    // Convert string to array of digits without leading/trailing zeros.\r\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n * Called by stringify, P.div, P.round and P.sqrt.\r\n *\r\n * x {Big} The Big to round.\r\n * dp {number} Integer, 0 to MAX_DP inclusive.\r\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\r\nfunction round(x, dp, rm, more) {\r\n  var xc = x.c,\r\n    i = x.e + dp + 1;\r\n\r\n  if (i < xc.length) {\r\n    if (rm === 1) {\r\n\r\n      // xc[i] is the digit after the digit that may be rounded up.\r\n      more = xc[i] >= 5;\r\n    } else if (rm === 2) {\r\n      more = xc[i] > 5 || xc[i] == 5 &&\r\n        (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n    } else if (rm === 3) {\r\n      more = more || !!xc[0];\r\n    } else {\r\n      more = false;\r\n      if (rm !== 0) throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (i < 1) {\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = -dp;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else {\r\n\r\n      // Remove any digits after the required decimal places.\r\n      xc.length = i--;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[i] > 9;) {\r\n          xc[i] = 0;\r\n          if (!i--) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xc.length; !xc[--i];) xc.pop();\r\n    }\r\n  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n    throw Error(INVALID_RM);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n *\r\n * x {Big}\r\n * id? {number} Caller id.\r\n *         1 toExponential\r\n *         2 toFixed\r\n *         3 toPrecision\r\n *         4 valueOf\r\n * n? {number|undefined} Caller's argument.\r\n * k? {number|undefined}\r\n */\r\nfunction stringify(x, id, n, k) {\r\n  var e, s,\r\n    Big = x.constructor,\r\n    z = !x.c[0];\r\n\r\n  if (n !== UNDEFINED) {\r\n    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n      throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n    }\r\n\r\n    x = new Big(x);\r\n\r\n    // The index of the digit that may be rounded up.\r\n    n = k - x.e;\r\n\r\n    // Round?\r\n    if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n    // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n    if (id == 2) k = x.e + n + 1;\r\n\r\n    // Append zeros?\r\n    for (; x.c.length < k;) x.c.push(0);\r\n  }\r\n\r\n  e = x.e;\r\n  s = x.c.join('');\r\n  n = s.length;\r\n\r\n  // Exponential notation?\r\n  if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n  // Normal notation.\r\n  } else if (e < 0) {\r\n    for (; ++e;) s = '0' + s;\r\n    s = '0.' + s;\r\n  } else if (e > 0) {\r\n    if (++e > n) for (e -= n; e--;) s += '0';\r\n    else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n  } else if (n > 1) {\r\n    s = s.charAt(0) + '.' + s.slice(1);\r\n  }\r\n\r\n  return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n}\r\n\r\n\r\n// Prototype/instance methods\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\r\nP.abs = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n*/\r\nP.cmp = function (y) {\r\n  var isneg,\r\n    x = this,\r\n    xc = x.c,\r\n    yc = (y = new x.constructor(y)).c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  isneg = i < 0;\r\n\r\n  // Compare exponents.\r\n  if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = -1; ++i < j;) {\r\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.div = function (y) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    a = x.c,                  // dividend\r\n    b = (y = new Big(y)).c,   // divisor\r\n    k = x.s == y.s ? 1 : -1,\r\n    dp = Big.DP;\r\n\r\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n  // Divisor is zero?\r\n  if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  // Dividend is 0? Return +-0.\r\n  if (!a[0]) return new Big(k * 0);\r\n\r\n  var bl, bt, n, cmp, ri,\r\n    bz = b.slice(),\r\n    ai = bl = b.length,\r\n    al = a.length,\r\n    r = a.slice(0, bl),   // remainder\r\n    rl = r.length,\r\n    q = y,                // quotient\r\n    qc = q.c = [],\r\n    qi = 0,\r\n    d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n  q.s = k;\r\n  k = d < 0 ? 0 : d;\r\n\r\n  // Create version of divisor with leading zero.\r\n  bz.unshift(0);\r\n\r\n  // Add zeros to make remainder as long as divisor.\r\n  for (; rl++ < bl;) r.push(0);\r\n\r\n  do {\r\n\r\n    // n is how many times the divisor goes into current remainder.\r\n    for (n = 0; n < 10; n++) {\r\n\r\n      // Compare divisor and remainder.\r\n      if (bl != (rl = r.length)) {\r\n        cmp = bl > rl ? 1 : -1;\r\n      } else {\r\n        for (ri = -1, cmp = 0; ++ri < bl;) {\r\n          if (b[ri] != r[ri]) {\r\n            cmp = b[ri] > r[ri] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If divisor < remainder, subtract divisor from remainder.\r\n      if (cmp < 0) {\r\n\r\n        // Remainder can't be more than 1 digit longer than divisor.\r\n        // Equalise lengths using divisor with extra leading zero?\r\n        for (bt = rl == bl ? b : bz; rl;) {\r\n          if (r[--rl] < bt[rl]) {\r\n            ri = rl;\r\n            for (; ri && !r[--ri];) r[ri] = 9;\r\n            --r[ri];\r\n            r[rl] += 10;\r\n          }\r\n          r[rl] -= bt[rl];\r\n        }\r\n\r\n        for (; !r[0];) r.shift();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Add the digit n to the result array.\r\n    qc[qi++] = cmp ? n : ++n;\r\n\r\n    // Update the remainder.\r\n    if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n    else r = [a[ai]];\r\n\r\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n  if (!qc[0] && qi != 1) {\r\n\r\n    // There can't be more than one zero.\r\n    qc.shift();\r\n    q.e--;\r\n  }\r\n\r\n  // Round?\r\n  if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n  return q;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\r\nP.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\r\nP.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.gte = function (y) {\r\n  return this.cmp(y) > -1;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\r\nP.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var i, j, t, xlty,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.plus(y);\r\n  }\r\n\r\n  var xc = x.c.slice(),\r\n    xe = x.e,\r\n    yc = y.c,\r\n    ye = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n\r\n    // y is non-zero? x is non-zero? Or both are zero.\r\n    return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n  }\r\n\r\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n  if (a = xe - ye) {\r\n\r\n    if (xlty = a < 0) {\r\n      a = -a;\r\n      t = xc;\r\n    } else {\r\n      ye = xe;\r\n      t = yc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (b = a; b--;) t.push(0);\r\n    t.reverse();\r\n  } else {\r\n\r\n    // Exponents equal. Check digit by digit.\r\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n    for (a = b = 0; b < j; b++) {\r\n      if (xc[b] != yc[b]) {\r\n        xlty = xc[b] < yc[b];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // x < y? Point xc to the array of the bigger number.\r\n  if (xlty) {\r\n    t = xc;\r\n    xc = yc;\r\n    yc = t;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\r\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n  // Subtract yc from xc.\r\n  for (b = i; j > a;) {\r\n    if (xc[--j] < yc[j]) {\r\n      for (i = j; i && !xc[--i];) xc[i] = 9;\r\n      --xc[i];\r\n      xc[j] += 10;\r\n    }\r\n\r\n    xc[j] -= yc[j];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xc[--b] === 0;) xc.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xc[0] === 0;) {\r\n    xc.shift();\r\n    --ye;\r\n  }\r\n\r\n  if (!xc[0]) {\r\n\r\n    // n - n = +0\r\n    y.s = 1;\r\n\r\n    // Result must be zero.\r\n    xc = [ye = 0];\r\n  }\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\r\nP.mod = function (y) {\r\n  var ygtx,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  x.s = y.s = 1;\r\n  ygtx = y.cmp(x) == 1;\r\n  x.s = a;\r\n  y.s = b;\r\n\r\n  if (ygtx) return new Big(x);\r\n\r\n  a = Big.DP;\r\n  b = Big.RM;\r\n  Big.DP = Big.RM = 0;\r\n  x = x.div(y);\r\n  Big.DP = a;\r\n  Big.RM = b;\r\n\r\n  return this.minus(x.times(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\r\nP.plus = P.add = function (y) {\r\n  var t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.minus(y);\r\n  }\r\n\r\n  var xe = x.e,\r\n    xc = x.c,\r\n    ye = y.e,\r\n    yc = y.c;\r\n\r\n  // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n  if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n  xc = xc.slice();\r\n\r\n  // Prepend zeros to equalise exponents.\r\n  // Note: reverse faster than unshifts.\r\n  if (a = xe - ye) {\r\n    if (a > 0) {\r\n      ye = xe;\r\n      t = yc;\r\n    } else {\r\n      a = -a;\r\n      t = xc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (; a--;) t.push(0);\r\n    t.reverse();\r\n  }\r\n\r\n  // Point xc to the longer array.\r\n  if (xc.length - yc.length < 0) {\r\n    t = yc;\r\n    yc = xc;\r\n    xc = t;\r\n  }\r\n\r\n  a = yc.length;\r\n\r\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n  for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n  if (b) {\r\n    xc.unshift(b);\r\n    ++ye;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP.pow = function (n) {\r\n  var x = this,\r\n    one = new x.constructor(1),\r\n    y = one,\r\n    isneg = n < 0;\r\n\r\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n  if (isneg) n = -n;\r\n\r\n  for (;;) {\r\n    if (n & 1) y = y.times(x);\r\n    n >>= 1;\r\n    if (!n) break;\r\n    x = x.times(x);\r\n  }\r\n\r\n  return isneg ? one.div(y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n * multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n * If rm is not specified, use Big.RM.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n */\r\nP.round = function (dp, rm) {\r\n  var Big = this.constructor;\r\n  if (dp === UNDEFINED) dp = 0;\r\n  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n  return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.sqrt = function () {\r\n  var r, c, t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    s = x.s,\r\n    e = x.e,\r\n    half = new Big(0.5);\r\n\r\n  // Zero?\r\n  if (!x.c[0]) return new Big(x);\r\n\r\n  // Negative?\r\n  if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n  // Estimate.\r\n  s = Math.sqrt(x + '');\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n  if (s === 0 || s === 1 / 0) {\r\n    c = x.c.join('');\r\n    if (!(c.length + e & 1)) c += '0';\r\n    s = Math.sqrt(c);\r\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n  } else {\r\n    r = new Big(s);\r\n  }\r\n\r\n  e = r.e + (Big.DP += 4);\r\n\r\n  // Newton-Raphson iteration.\r\n  do {\r\n    t = r;\r\n    r = half.times(t.plus(x.div(t)));\r\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n  return round(r, Big.DP -= 4, Big.RM);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\r\nP.times = P.mul = function (y) {\r\n  var c,\r\n    x = this,\r\n    Big = x.constructor,\r\n    xc = x.c,\r\n    yc = (y = new Big(y)).c,\r\n    a = xc.length,\r\n    b = yc.length,\r\n    i = x.e,\r\n    j = y.e;\r\n\r\n  // Determine sign of result.\r\n  y.s = x.s == y.s ? 1 : -1;\r\n\r\n  // Return signed 0 if either 0.\r\n  if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n  // Initialise exponent of result as x.e + y.e.\r\n  y.e = i + j;\r\n\r\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n  if (a < b) {\r\n    c = xc;\r\n    xc = yc;\r\n    yc = c;\r\n    j = a;\r\n    a = b;\r\n    b = j;\r\n  }\r\n\r\n  // Initialise coefficient array of result with zeros.\r\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n  // Multiply.\r\n\r\n  // i is initially xc.length.\r\n  for (i = b; i--;) {\r\n    b = 0;\r\n\r\n    // a is yc.length.\r\n    for (j = a + i; j > i;) {\r\n\r\n      // Current sum of products at this digit position, plus carry.\r\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n      c[j--] = b % 10;\r\n\r\n      // carry\r\n      b = b / 10 | 0;\r\n    }\r\n\r\n    c[j] = (c[j] + b) % 10;\r\n  }\r\n\r\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n  if (b) ++y.e;\r\n  else c.shift();\r\n\r\n  // Remove trailing zeros.\r\n  for (i = c.length; !c[--i];) c.pop();\r\n  y.c = c;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n */\r\nP.toExponential = function (dp) {\r\n  return stringify(this, 1, dp, dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\r\nP.toFixed = function (dp) {\r\n  return stringify(this, 2, dp, this.e + dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Integer, 1 to MAX_DP inclusive.\r\n */\r\nP.toPrecision = function (sd) {\r\n  return stringify(this, 3, sd, sd - 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\r\nP.toString = function () {\r\n  return stringify(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  return stringify(this, 4);\r\n};\r\n\r\n\r\n// Export\r\n\r\n\r\nexport var Big = _Big_();\r\n\r\nexport default Big;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}