{"ast":null,"code":"'use strict';\n\nconst promise = require('./promise');\nconst streamify = require('./streamify');\nmodule.exports = stringify;\n\n/**\n * Public function `stringify`.\n *\n * Returns a promise and asynchronously serialises a data structure to a\n * JSON string. Sanely handles promises, buffers, maps and other iterables.\n *\n * @param data:          The data to transform\n *\n * @option space:        Indentation string, or the number of spaces\n *                       to indent each nested level by.\n *\n * @option promises:     'resolve' or 'ignore', default is 'resolve'.\n *\n * @option buffers:      'toString' or 'ignore', default is 'toString'.\n *\n * @option maps:         'object' or 'ignore', default is 'object'.\n *\n * @option iterables:    'array' or 'ignore', default is 'array'.\n *\n * @option circular:     'error' or 'ignore', default is 'error'.\n *\n * @option yieldRate:     The number of data items to process per timeslice,\n *                        default is 16384.\n *\n * @option bufferLength:  The length of the buffer, default is 1024.\n *\n * @option highWaterMark: If set, will be passed to the readable stream constructor\n *                        as the value for the highWaterMark option.\n *\n * @option Promise:       The promise constructor to use, defaults to bluebird.\n **/\nfunction stringify(data, options) {\n  const json = [];\n  const Promise = promise(options);\n  const stream = streamify(data, options);\n  let resolve, reject;\n  stream.on('data', read);\n  stream.on('end', end);\n  stream.on('error', error);\n  stream.on('dataError', error);\n  return new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  function read(chunk) {\n    json.push(chunk);\n  }\n  function end() {\n    resolve(json.join(''));\n  }\n  function error(e) {\n    reject(e);\n  }\n}","map":{"version":3,"names":["promise","require","streamify","module","exports","stringify","data","options","json","Promise","stream","resolve","reject","on","read","end","error","res","rej","chunk","push","join","e"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/bfj/src/stringify.js"],"sourcesContent":["'use strict'\n\nconst promise = require('./promise')\nconst streamify = require('./streamify')\n\nmodule.exports = stringify\n\n/**\n * Public function `stringify`.\n *\n * Returns a promise and asynchronously serialises a data structure to a\n * JSON string. Sanely handles promises, buffers, maps and other iterables.\n *\n * @param data:          The data to transform\n *\n * @option space:        Indentation string, or the number of spaces\n *                       to indent each nested level by.\n *\n * @option promises:     'resolve' or 'ignore', default is 'resolve'.\n *\n * @option buffers:      'toString' or 'ignore', default is 'toString'.\n *\n * @option maps:         'object' or 'ignore', default is 'object'.\n *\n * @option iterables:    'array' or 'ignore', default is 'array'.\n *\n * @option circular:     'error' or 'ignore', default is 'error'.\n *\n * @option yieldRate:     The number of data items to process per timeslice,\n *                        default is 16384.\n *\n * @option bufferLength:  The length of the buffer, default is 1024.\n *\n * @option highWaterMark: If set, will be passed to the readable stream constructor\n *                        as the value for the highWaterMark option.\n *\n * @option Promise:       The promise constructor to use, defaults to bluebird.\n **/\nfunction stringify (data, options) {\n  const json = []\n  const Promise = promise(options)\n  const stream = streamify(data, options)\n\n  let resolve, reject\n\n  stream.on('data', read)\n  stream.on('end', end)\n  stream.on('error', error)\n  stream.on('dataError', error)\n\n  return new Promise((res, rej) => {\n    resolve = res\n    reject = rej\n  })\n\n  function read (chunk) {\n    json.push(chunk)\n  }\n\n  function end () {\n    resolve(json.join(''))\n  }\n\n  function error (e) {\n    reject(e)\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AAExCE,MAAM,CAACC,OAAO,GAAGC,SAAS;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAASA,CAAEC,IAAI,EAAEC,OAAO,EAAE;EACjC,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,OAAO,GAAGT,OAAO,CAACO,OAAO,CAAC;EAChC,MAAMG,MAAM,GAAGR,SAAS,CAACI,IAAI,EAAEC,OAAO,CAAC;EAEvC,IAAII,OAAO,EAAEC,MAAM;EAEnBF,MAAM,CAACG,EAAE,CAAC,MAAM,EAAEC,IAAI,CAAC;EACvBJ,MAAM,CAACG,EAAE,CAAC,KAAK,EAAEE,GAAG,CAAC;EACrBL,MAAM,CAACG,EAAE,CAAC,OAAO,EAAEG,KAAK,CAAC;EACzBN,MAAM,CAACG,EAAE,CAAC,WAAW,EAAEG,KAAK,CAAC;EAE7B,OAAO,IAAIP,OAAO,CAAC,CAACQ,GAAG,EAAEC,GAAG,KAAK;IAC/BP,OAAO,GAAGM,GAAG;IACbL,MAAM,GAAGM,GAAG;EACd,CAAC,CAAC;EAEF,SAASJ,IAAIA,CAAEK,KAAK,EAAE;IACpBX,IAAI,CAACY,IAAI,CAACD,KAAK,CAAC;EAClB;EAEA,SAASJ,GAAGA,CAAA,EAAI;IACdJ,OAAO,CAACH,IAAI,CAACa,IAAI,CAAC,EAAE,CAAC,CAAC;EACxB;EAEA,SAASL,KAAKA,CAAEM,CAAC,EAAE;IACjBV,MAAM,CAACU,CAAC,CAAC;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}