{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = retryable;\nvar _retry = require('./retry.js');\nvar _retry2 = _interopRequireDefault(_retry);\nvar _initialParams = require('./internal/initialParams.js');\nvar _initialParams2 = _interopRequireDefault(_initialParams);\nvar _wrapAsync = require('./internal/wrapAsync.js');\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\nvar _promiseCallback = require('./internal/promiseCallback.js');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable(opts, task) {\n  if (!task) {\n    task = opts;\n    opts = null;\n  }\n  let arity = opts && opts.arity || task.length;\n  if ((0, _wrapAsync.isAsync)(task)) {\n    arity += 1;\n  }\n  var _task = (0, _wrapAsync2.default)(task);\n  return (0, _initialParams2.default)((args, callback) => {\n    if (args.length < arity - 1 || callback == null) {\n      args.push(callback);\n      callback = (0, _promiseCallback.promiseCallback)();\n    }\n    function taskFn(cb) {\n      _task(...args, cb);\n    }\n    if (opts) (0, _retry2.default)(opts, taskFn, callback);else (0, _retry2.default)(taskFn, callback);\n    return callback[_promiseCallback.PROMISE_SYMBOL];\n  });\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","retryable","_retry","require","_retry2","_interopRequireDefault","_initialParams","_initialParams2","_wrapAsync","_wrapAsync2","_promiseCallback","obj","__esModule","opts","task","arity","length","isAsync","_task","args","callback","push","promiseCallback","taskFn","cb","PROMISE_SYMBOL","module"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/async/retryable.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = retryable;\n\nvar _retry = require('./retry.js');\n\nvar _retry2 = _interopRequireDefault(_retry);\n\nvar _initialParams = require('./internal/initialParams.js');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _promiseCallback = require('./internal/promiseCallback.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable(opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = opts && opts.arity || task.length;\n    if ((0, _wrapAsync.isAsync)(task)) {\n        arity += 1;\n    }\n    var _task = (0, _wrapAsync2.default)(task);\n    return (0, _initialParams2.default)((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = (0, _promiseCallback.promiseCallback)();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) (0, _retry2.default)(opts, taskFn, callback);else (0, _retry2.default)(taskFn, callback);\n\n        return callback[_promiseCallback.PROMISE_SYMBOL];\n    });\n}\nmodule.exports = exports.default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,SAAS;AAE3B,IAAIC,MAAM,GAAGC,OAAO,CAAC,YAAY,CAAC;AAElC,IAAIC,OAAO,GAAGC,sBAAsB,CAACH,MAAM,CAAC;AAE5C,IAAII,cAAc,GAAGH,OAAO,CAAC,6BAA6B,CAAC;AAE3D,IAAII,eAAe,GAAGF,sBAAsB,CAACC,cAAc,CAAC;AAE5D,IAAIE,UAAU,GAAGL,OAAO,CAAC,yBAAyB,CAAC;AAEnD,IAAIM,WAAW,GAAGJ,sBAAsB,CAACG,UAAU,CAAC;AAEpD,IAAIE,gBAAgB,GAAGP,OAAO,CAAC,+BAA+B,CAAC;AAE/D,SAASE,sBAAsBA,CAACM,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEX,OAAO,EAAEW;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASV,SAASA,CAACY,IAAI,EAAEC,IAAI,EAAE;EAC3B,IAAI,CAACA,IAAI,EAAE;IACPA,IAAI,GAAGD,IAAI;IACXA,IAAI,GAAG,IAAI;EACf;EACA,IAAIE,KAAK,GAAGF,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAID,IAAI,CAACE,MAAM;EAC7C,IAAI,CAAC,CAAC,EAAER,UAAU,CAACS,OAAO,EAAEH,IAAI,CAAC,EAAE;IAC/BC,KAAK,IAAI,CAAC;EACd;EACA,IAAIG,KAAK,GAAG,CAAC,CAAC,EAAET,WAAW,CAACT,OAAO,EAAEc,IAAI,CAAC;EAC1C,OAAO,CAAC,CAAC,EAAEP,eAAe,CAACP,OAAO,EAAE,CAACmB,IAAI,EAAEC,QAAQ,KAAK;IACpD,IAAID,IAAI,CAACH,MAAM,GAAGD,KAAK,GAAG,CAAC,IAAIK,QAAQ,IAAI,IAAI,EAAE;MAC7CD,IAAI,CAACE,IAAI,CAACD,QAAQ,CAAC;MACnBA,QAAQ,GAAG,CAAC,CAAC,EAAEV,gBAAgB,CAACY,eAAe,EAAE,CAAC;IACtD;IACA,SAASC,MAAMA,CAACC,EAAE,EAAE;MAChBN,KAAK,CAAC,GAAGC,IAAI,EAAEK,EAAE,CAAC;IACtB;IAEA,IAAIX,IAAI,EAAE,CAAC,CAAC,EAAET,OAAO,CAACJ,OAAO,EAAEa,IAAI,EAAEU,MAAM,EAAEH,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,EAAEhB,OAAO,CAACJ,OAAO,EAAEuB,MAAM,EAAEH,QAAQ,CAAC;IAElG,OAAOA,QAAQ,CAACV,gBAAgB,CAACe,cAAc,CAAC;EACpD,CAAC,CAAC;AACN;AACAC,MAAM,CAAC5B,OAAO,GAAGA,OAAO,CAACE,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}