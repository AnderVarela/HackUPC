{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProgramFromConfigFile = exports.useProvidedPrograms = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst ts = __importStar(require(\"typescript\"));\nconst shared_1 = require(\"./shared\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:useProvidedProgram');\nfunction useProvidedPrograms(programInstances, parseSettings) {\n  log('Retrieving ast for %s from provided program instance(s)', parseSettings.filePath);\n  let astAndProgram;\n  for (const programInstance of programInstances) {\n    astAndProgram = (0, shared_1.getAstFromProgram)(programInstance, parseSettings);\n    // Stop at the first applicable program instance\n    if (astAndProgram) {\n      break;\n    }\n  }\n  if (!astAndProgram) {\n    const relativeFilePath = path.relative(parseSettings.tsconfigRootDir || process.cwd(), parseSettings.filePath);\n    const errorLines = ['\"parserOptions.programs\" has been provided for @typescript-eslint/parser.', `The file was not found in any of the provided program instance(s): ${relativeFilePath}`];\n    throw new Error(errorLines.join('\\n'));\n  }\n  astAndProgram.program.getTypeChecker(); // ensure parent pointers are set in source files\n  return astAndProgram;\n}\nexports.useProvidedPrograms = useProvidedPrograms;\n/**\n * Utility offered by parser to help consumers construct their own program instance.\n *\n * @param configFile the path to the tsconfig.json file, relative to `projectDirectory`\n * @param projectDirectory the project directory to use as the CWD, defaults to `process.cwd()`\n */\nfunction createProgramFromConfigFile(configFile, projectDirectory) {\n  if (ts.sys === undefined) {\n    throw new Error('`createProgramFromConfigFile` is only supported in a Node-like environment.');\n  }\n  const parsed = ts.getParsedCommandLineOfConfigFile(configFile, shared_1.CORE_COMPILER_OPTIONS, {\n    onUnRecoverableConfigFileDiagnostic: diag => {\n      throw new Error(formatDiagnostics([diag])); // ensures that `parsed` is defined.\n    },\n    fileExists: fs.existsSync,\n    getCurrentDirectory: () => projectDirectory && path.resolve(projectDirectory) || process.cwd(),\n    readDirectory: ts.sys.readDirectory,\n    readFile: file => fs.readFileSync(file, 'utf-8'),\n    useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames\n  });\n  const result = parsed; // parsed is not undefined, since we throw on failure.\n  if (result.errors.length) {\n    throw new Error(formatDiagnostics(result.errors));\n  }\n  const host = ts.createCompilerHost(result.options, true);\n  return ts.createProgram(result.fileNames, result.options, host);\n}\nexports.createProgramFromConfigFile = createProgramFromConfigFile;\nfunction formatDiagnostics(diagnostics) {\n  return ts.formatDiagnostics(diagnostics, {\n    getCanonicalFileName: f => f,\n    getCurrentDirectory: process.cwd,\n    getNewLine: () => '\\n'\n  });\n}","map":{"version":3,"names":["debug_1","__importDefault","require","fs","__importStar","path","ts","shared_1","log","default","useProvidedPrograms","programInstances","parseSettings","filePath","astAndProgram","programInstance","getAstFromProgram","relativeFilePath","relative","tsconfigRootDir","process","cwd","errorLines","Error","join","program","getTypeChecker","exports","createProgramFromConfigFile","configFile","projectDirectory","sys","undefined","parsed","getParsedCommandLineOfConfigFile","CORE_COMPILER_OPTIONS","onUnRecoverableConfigFileDiagnostic","diag","formatDiagnostics","fileExists","existsSync","getCurrentDirectory","resolve","readDirectory","readFile","file","readFileSync","useCaseSensitiveFileNames","result","errors","length","host","createCompilerHost","options","createProgram","fileNames","diagnostics","getCanonicalFileName","f","getNewLine"],"sources":["../../src/create-program/useProvidedPrograms.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}