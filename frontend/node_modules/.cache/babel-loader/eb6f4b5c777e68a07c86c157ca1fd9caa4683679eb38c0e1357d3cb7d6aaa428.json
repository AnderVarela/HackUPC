{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMethodOrPropertySelector = exports.isMetaSelector = exports.selectorTypeToMessageString = void 0;\nconst enums_1 = require(\"./enums\");\nfunction selectorTypeToMessageString(selectorType) {\n  const notCamelCase = selectorType.replace(/([A-Z])/g, ' $1');\n  return notCamelCase.charAt(0).toUpperCase() + notCamelCase.slice(1);\n}\nexports.selectorTypeToMessageString = selectorTypeToMessageString;\nfunction isMetaSelector(selector) {\n  return selector in enums_1.MetaSelectors;\n}\nexports.isMetaSelector = isMetaSelector;\nfunction isMethodOrPropertySelector(selector) {\n  return selector === enums_1.MetaSelectors.method || selector === enums_1.MetaSelectors.property;\n}\nexports.isMethodOrPropertySelector = isMethodOrPropertySelector;","map":{"version":3,"names":["enums_1","require","selectorTypeToMessageString","selectorType","notCamelCase","replace","charAt","toUpperCase","slice","exports","isMetaSelector","selector","MetaSelectors","isMethodOrPropertySelector","method","property"],"sources":["../../../src/rules/naming-convention-utils/shared.ts"],"sourcesContent":[null],"mappings":";;;;;;AAMA,MAAAA,OAAA,GAAAC,OAAA;AAEA,SAASC,2BAA2BA,CAACC,YAA6B;EAChE,MAAMC,YAAY,GAAGD,YAAY,CAACE,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC;EAC5D,OAAOD,YAAY,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGH,YAAY,CAACI,KAAK,CAAC,CAAC,CAAC;AACrE;AAiBEC,OAAA,CAAAP,2BAAA,GAAAA,2BAAA;AAfF,SAASQ,cAAcA,CACrBC,QAAsE;EAEtE,OAAOA,QAAQ,IAAIX,OAAA,CAAAY,aAAa;AAClC;AAYEH,OAAA,CAAAC,cAAA,GAAAA,cAAA;AAVF,SAASG,0BAA0BA,CACjCF,QAAsE;EAEtE,OACEA,QAAQ,KAAKX,OAAA,CAAAY,aAAa,CAACE,MAAM,IAAIH,QAAQ,KAAKX,OAAA,CAAAY,aAAa,CAACG,QAAQ;AAE5E;AAKEN,OAAA,CAAAI,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}