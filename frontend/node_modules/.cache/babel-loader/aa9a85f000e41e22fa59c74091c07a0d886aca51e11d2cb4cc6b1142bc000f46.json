{"ast":null,"code":"/**\n * class Namespace\n *\n * Simple object for storing attributes. Implements equality by attribute names\n * and values, and provides a simple string representation.\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#the-namespace-object\n **/\n'use strict';\n\nvar $$ = require('./utils');\n\n/**\n * new Namespace(options)\n * - options(object): predefined propertis for result object\n *\n **/\nvar Namespace = module.exports = function Namespace(options) {\n  $$.extend(this, options);\n};\n\n/**\n * Namespace#isset(key) -> Boolean\n * - key (string|number): property name\n *\n * Tells whenever `namespace` contains given `key` or not.\n **/\nNamespace.prototype.isset = function (key) {\n  return $$.has(this, key);\n};\n\n/**\n * Namespace#set(key, value) -> self\n * -key (string|number|object): propery name\n * -value (mixed): new property value\n *\n * Set the property named key with value.\n * If key object then set all key properties to namespace object\n **/\nNamespace.prototype.set = function (key, value) {\n  if (typeof key === 'object') {\n    $$.extend(this, key);\n  } else {\n    this[key] = value;\n  }\n  return this;\n};\n\n/**\n * Namespace#get(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return the property key or defaulValue if not set\n **/\nNamespace.prototype.get = function (key, defaultValue) {\n  return !this[key] ? defaultValue : this[key];\n};\n\n/**\n * Namespace#unset(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return data[key](and delete it) or defaultValue\n **/\nNamespace.prototype.unset = function (key, defaultValue) {\n  var value = this[key];\n  if (value !== null) {\n    delete this[key];\n    return value;\n  }\n  return defaultValue;\n};","map":{"version":3,"names":["$$","require","Namespace","module","exports","options","extend","prototype","isset","key","has","set","value","get","defaultValue","unset"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/argparse/lib/namespace.js"],"sourcesContent":["/**\n * class Namespace\n *\n * Simple object for storing attributes. Implements equality by attribute names\n * and values, and provides a simple string representation.\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#the-namespace-object\n **/\n'use strict';\n\nvar $$ = require('./utils');\n\n/**\n * new Namespace(options)\n * - options(object): predefined propertis for result object\n *\n **/\nvar Namespace = module.exports = function Namespace(options) {\n  $$.extend(this, options);\n};\n\n/**\n * Namespace#isset(key) -> Boolean\n * - key (string|number): property name\n *\n * Tells whenever `namespace` contains given `key` or not.\n **/\nNamespace.prototype.isset = function (key) {\n  return $$.has(this, key);\n};\n\n/**\n * Namespace#set(key, value) -> self\n * -key (string|number|object): propery name\n * -value (mixed): new property value\n *\n * Set the property named key with value.\n * If key object then set all key properties to namespace object\n **/\nNamespace.prototype.set = function (key, value) {\n  if (typeof (key) === 'object') {\n    $$.extend(this, key);\n  } else {\n    this[key] = value;\n  }\n  return this;\n};\n\n/**\n * Namespace#get(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return the property key or defaulValue if not set\n **/\nNamespace.prototype.get = function (key, defaultValue) {\n  return !this[key] ? defaultValue : this[key];\n};\n\n/**\n * Namespace#unset(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return data[key](and delete it) or defaultValue\n **/\nNamespace.prototype.unset = function (key, defaultValue) {\n  var value = this[key];\n  if (value !== null) {\n    delete this[key];\n    return value;\n  }\n  return defaultValue;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,EAAE,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAGC,MAAM,CAACC,OAAO,GAAG,SAASF,SAASA,CAACG,OAAO,EAAE;EAC3DL,EAAE,CAACM,MAAM,CAAC,IAAI,EAAED,OAAO,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAH,SAAS,CAACK,SAAS,CAACC,KAAK,GAAG,UAAUC,GAAG,EAAE;EACzC,OAAOT,EAAE,CAACU,GAAG,CAAC,IAAI,EAAED,GAAG,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,SAAS,CAACK,SAAS,CAACI,GAAG,GAAG,UAAUF,GAAG,EAAEG,KAAK,EAAE;EAC9C,IAAI,OAAQH,GAAI,KAAK,QAAQ,EAAE;IAC7BT,EAAE,CAACM,MAAM,CAAC,IAAI,EAAEG,GAAG,CAAC;EACtB,CAAC,MAAM;IACL,IAAI,CAACA,GAAG,CAAC,GAAGG,KAAK;EACnB;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,SAAS,CAACK,SAAS,CAACM,GAAG,GAAG,UAAUJ,GAAG,EAAEK,YAAY,EAAE;EACrD,OAAO,CAAC,IAAI,CAACL,GAAG,CAAC,GAAGK,YAAY,GAAG,IAAI,CAACL,GAAG,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,SAAS,CAACK,SAAS,CAACQ,KAAK,GAAG,UAAUN,GAAG,EAAEK,YAAY,EAAE;EACvD,IAAIF,KAAK,GAAG,IAAI,CAACH,GAAG,CAAC;EACrB,IAAIG,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,IAAI,CAACH,GAAG,CAAC;IAChB,OAAOG,KAAK;EACd;EACA,OAAOE,YAAY;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}