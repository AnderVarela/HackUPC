{"ast":null,"code":"var SourceMapGenerator = require('source-map').SourceMapGenerator;\nvar all = require('./helpers').all;\nvar isRemoteResource = require('../utils/is-remote-resource');\nvar isWindows = process.platform == 'win32';\nvar NIX_SEPARATOR_PATTERN = /\\//g;\nvar UNKNOWN_SOURCE = '$stdin';\nvar WINDOWS_SEPARATOR = '\\\\';\nfunction store(serializeContext, element) {\n  var fromString = typeof element == 'string';\n  var value = fromString ? element : element[1];\n  var mappings = fromString ? null : element[2];\n  var wrap = serializeContext.wrap;\n  wrap(serializeContext, value);\n  track(serializeContext, value, mappings);\n  serializeContext.output.push(value);\n}\nfunction wrap(serializeContext, value) {\n  if (serializeContext.column + value.length > serializeContext.format.wrapAt) {\n    track(serializeContext, serializeContext.format.breakWith, false);\n    serializeContext.output.push(serializeContext.format.breakWith);\n  }\n}\nfunction track(serializeContext, value, mappings) {\n  var parts = value.split('\\n');\n  if (mappings) {\n    trackAllMappings(serializeContext, mappings);\n  }\n  serializeContext.line += parts.length - 1;\n  serializeContext.column = parts.length > 1 ? 0 : serializeContext.column + parts.pop().length;\n}\nfunction trackAllMappings(serializeContext, mappings) {\n  for (var i = 0, l = mappings.length; i < l; i++) {\n    trackMapping(serializeContext, mappings[i]);\n  }\n}\nfunction trackMapping(serializeContext, mapping) {\n  var line = mapping[0];\n  var column = mapping[1];\n  var originalSource = mapping[2];\n  var source = originalSource;\n  var storedSource = source || UNKNOWN_SOURCE;\n  if (isWindows && source && !isRemoteResource(source)) {\n    storedSource = source.replace(NIX_SEPARATOR_PATTERN, WINDOWS_SEPARATOR);\n  }\n  serializeContext.outputMap.addMapping({\n    generated: {\n      line: serializeContext.line,\n      column: serializeContext.column\n    },\n    source: storedSource,\n    original: {\n      line: line,\n      column: column\n    }\n  });\n  if (serializeContext.inlineSources && originalSource in serializeContext.sourcesContent) {\n    serializeContext.outputMap.setSourceContent(storedSource, serializeContext.sourcesContent[originalSource]);\n  }\n}\nfunction serializeStylesAndSourceMap(tokens, context) {\n  var serializeContext = {\n    column: 0,\n    format: context.options.format,\n    indentBy: 0,\n    indentWith: '',\n    inlineSources: context.options.sourceMapInlineSources,\n    line: 1,\n    output: [],\n    outputMap: new SourceMapGenerator(),\n    sourcesContent: context.sourcesContent,\n    spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,\n    store: store,\n    wrap: context.options.format.wrapAt ? wrap : function () {/* noop */}\n  };\n  all(serializeContext, tokens);\n  return {\n    sourceMap: serializeContext.outputMap,\n    styles: serializeContext.output.join('')\n  };\n}\nmodule.exports = serializeStylesAndSourceMap;","map":{"version":3,"names":["SourceMapGenerator","require","all","isRemoteResource","isWindows","process","platform","NIX_SEPARATOR_PATTERN","UNKNOWN_SOURCE","WINDOWS_SEPARATOR","store","serializeContext","element","fromString","value","mappings","wrap","track","output","push","column","length","format","wrapAt","breakWith","parts","split","trackAllMappings","line","pop","i","l","trackMapping","mapping","originalSource","source","storedSource","replace","outputMap","addMapping","generated","original","inlineSources","sourcesContent","setSourceContent","serializeStylesAndSourceMap","tokens","context","options","indentBy","indentWith","sourceMapInlineSources","spaceAfterClosingBrace","compatibility","properties","sourceMap","styles","join","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/clean-css/lib/writer/source-maps.js"],"sourcesContent":["var SourceMapGenerator = require('source-map').SourceMapGenerator;\nvar all = require('./helpers').all;\n\nvar isRemoteResource = require('../utils/is-remote-resource');\n\nvar isWindows = process.platform == 'win32';\n\nvar NIX_SEPARATOR_PATTERN = /\\//g;\nvar UNKNOWN_SOURCE = '$stdin';\nvar WINDOWS_SEPARATOR = '\\\\';\n\nfunction store(serializeContext, element) {\n  var fromString = typeof element == 'string';\n  var value = fromString ? element : element[1];\n  var mappings = fromString ? null : element[2];\n  var wrap = serializeContext.wrap;\n\n  wrap(serializeContext, value);\n  track(serializeContext, value, mappings);\n  serializeContext.output.push(value);\n}\n\nfunction wrap(serializeContext, value) {\n  if (serializeContext.column + value.length > serializeContext.format.wrapAt) {\n    track(serializeContext, serializeContext.format.breakWith, false);\n    serializeContext.output.push(serializeContext.format.breakWith);\n  }\n}\n\nfunction track(serializeContext, value, mappings) {\n  var parts = value.split('\\n');\n\n  if (mappings) {\n    trackAllMappings(serializeContext, mappings);\n  }\n\n  serializeContext.line += parts.length - 1;\n  serializeContext.column = parts.length > 1 ? 0 : (serializeContext.column + parts.pop().length);\n}\n\nfunction trackAllMappings(serializeContext, mappings) {\n  for (var i = 0, l = mappings.length; i < l; i++) {\n    trackMapping(serializeContext, mappings[i]);\n  }\n}\n\nfunction trackMapping(serializeContext, mapping) {\n  var line = mapping[0];\n  var column = mapping[1];\n  var originalSource = mapping[2];\n  var source = originalSource;\n  var storedSource = source || UNKNOWN_SOURCE;\n\n  if (isWindows && source && !isRemoteResource(source)) {\n    storedSource = source.replace(NIX_SEPARATOR_PATTERN, WINDOWS_SEPARATOR);\n  }\n\n  serializeContext.outputMap.addMapping({\n    generated: {\n      line: serializeContext.line,\n      column: serializeContext.column\n    },\n    source: storedSource,\n    original: {\n      line: line,\n      column: column\n    }\n  });\n\n  if (serializeContext.inlineSources && (originalSource in serializeContext.sourcesContent)) {\n    serializeContext.outputMap.setSourceContent(\n      storedSource,\n      serializeContext.sourcesContent[originalSource]\n    );\n  }\n}\n\nfunction serializeStylesAndSourceMap(tokens, context) {\n  var serializeContext = {\n    column: 0,\n    format: context.options.format,\n    indentBy: 0,\n    indentWith: '',\n    inlineSources: context.options.sourceMapInlineSources,\n    line: 1,\n    output: [],\n    outputMap: new SourceMapGenerator(),\n    sourcesContent: context.sourcesContent,\n    spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,\n    store: store,\n    wrap: context.options.format.wrapAt\n      ? wrap\n      : function() { /* noop */ }\n  };\n\n  all(serializeContext, tokens);\n\n  return {\n    sourceMap: serializeContext.outputMap,\n    styles: serializeContext.output.join('')\n  };\n}\n\nmodule.exports = serializeStylesAndSourceMap;\n"],"mappings":"AAAA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,YAAY,CAAC,CAACD,kBAAkB;AACjE,IAAIE,GAAG,GAAGD,OAAO,CAAC,WAAW,CAAC,CAACC,GAAG;AAElC,IAAIC,gBAAgB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAE7D,IAAIG,SAAS,GAAGC,OAAO,CAACC,QAAQ,IAAI,OAAO;AAE3C,IAAIC,qBAAqB,GAAG,KAAK;AACjC,IAAIC,cAAc,GAAG,QAAQ;AAC7B,IAAIC,iBAAiB,GAAG,IAAI;AAE5B,SAASC,KAAKA,CAACC,gBAAgB,EAAEC,OAAO,EAAE;EACxC,IAAIC,UAAU,GAAG,OAAOD,OAAO,IAAI,QAAQ;EAC3C,IAAIE,KAAK,GAAGD,UAAU,GAAGD,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIG,QAAQ,GAAGF,UAAU,GAAG,IAAI,GAAGD,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAII,IAAI,GAAGL,gBAAgB,CAACK,IAAI;EAEhCA,IAAI,CAACL,gBAAgB,EAAEG,KAAK,CAAC;EAC7BG,KAAK,CAACN,gBAAgB,EAAEG,KAAK,EAAEC,QAAQ,CAAC;EACxCJ,gBAAgB,CAACO,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC;AACrC;AAEA,SAASE,IAAIA,CAACL,gBAAgB,EAAEG,KAAK,EAAE;EACrC,IAAIH,gBAAgB,CAACS,MAAM,GAAGN,KAAK,CAACO,MAAM,GAAGV,gBAAgB,CAACW,MAAM,CAACC,MAAM,EAAE;IAC3EN,KAAK,CAACN,gBAAgB,EAAEA,gBAAgB,CAACW,MAAM,CAACE,SAAS,EAAE,KAAK,CAAC;IACjEb,gBAAgB,CAACO,MAAM,CAACC,IAAI,CAACR,gBAAgB,CAACW,MAAM,CAACE,SAAS,CAAC;EACjE;AACF;AAEA,SAASP,KAAKA,CAACN,gBAAgB,EAAEG,KAAK,EAAEC,QAAQ,EAAE;EAChD,IAAIU,KAAK,GAAGX,KAAK,CAACY,KAAK,CAAC,IAAI,CAAC;EAE7B,IAAIX,QAAQ,EAAE;IACZY,gBAAgB,CAAChB,gBAAgB,EAAEI,QAAQ,CAAC;EAC9C;EAEAJ,gBAAgB,CAACiB,IAAI,IAAIH,KAAK,CAACJ,MAAM,GAAG,CAAC;EACzCV,gBAAgB,CAACS,MAAM,GAAGK,KAAK,CAACJ,MAAM,GAAG,CAAC,GAAG,CAAC,GAAIV,gBAAgB,CAACS,MAAM,GAAGK,KAAK,CAACI,GAAG,CAAC,CAAC,CAACR,MAAO;AACjG;AAEA,SAASM,gBAAgBA,CAAChB,gBAAgB,EAAEI,QAAQ,EAAE;EACpD,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGhB,QAAQ,CAACM,MAAM,EAAES,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC/CE,YAAY,CAACrB,gBAAgB,EAAEI,QAAQ,CAACe,CAAC,CAAC,CAAC;EAC7C;AACF;AAEA,SAASE,YAAYA,CAACrB,gBAAgB,EAAEsB,OAAO,EAAE;EAC/C,IAAIL,IAAI,GAAGK,OAAO,CAAC,CAAC,CAAC;EACrB,IAAIb,MAAM,GAAGa,OAAO,CAAC,CAAC,CAAC;EACvB,IAAIC,cAAc,GAAGD,OAAO,CAAC,CAAC,CAAC;EAC/B,IAAIE,MAAM,GAAGD,cAAc;EAC3B,IAAIE,YAAY,GAAGD,MAAM,IAAI3B,cAAc;EAE3C,IAAIJ,SAAS,IAAI+B,MAAM,IAAI,CAAChC,gBAAgB,CAACgC,MAAM,CAAC,EAAE;IACpDC,YAAY,GAAGD,MAAM,CAACE,OAAO,CAAC9B,qBAAqB,EAAEE,iBAAiB,CAAC;EACzE;EAEAE,gBAAgB,CAAC2B,SAAS,CAACC,UAAU,CAAC;IACpCC,SAAS,EAAE;MACTZ,IAAI,EAAEjB,gBAAgB,CAACiB,IAAI;MAC3BR,MAAM,EAAET,gBAAgB,CAACS;IAC3B,CAAC;IACDe,MAAM,EAAEC,YAAY;IACpBK,QAAQ,EAAE;MACRb,IAAI,EAAEA,IAAI;MACVR,MAAM,EAAEA;IACV;EACF,CAAC,CAAC;EAEF,IAAIT,gBAAgB,CAAC+B,aAAa,IAAKR,cAAc,IAAIvB,gBAAgB,CAACgC,cAAe,EAAE;IACzFhC,gBAAgB,CAAC2B,SAAS,CAACM,gBAAgB,CACzCR,YAAY,EACZzB,gBAAgB,CAACgC,cAAc,CAACT,cAAc,CAChD,CAAC;EACH;AACF;AAEA,SAASW,2BAA2BA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACpD,IAAIpC,gBAAgB,GAAG;IACrBS,MAAM,EAAE,CAAC;IACTE,MAAM,EAAEyB,OAAO,CAACC,OAAO,CAAC1B,MAAM;IAC9B2B,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE,EAAE;IACdR,aAAa,EAAEK,OAAO,CAACC,OAAO,CAACG,sBAAsB;IACrDvB,IAAI,EAAE,CAAC;IACPV,MAAM,EAAE,EAAE;IACVoB,SAAS,EAAE,IAAItC,kBAAkB,CAAC,CAAC;IACnC2C,cAAc,EAAEI,OAAO,CAACJ,cAAc;IACtCS,sBAAsB,EAAEL,OAAO,CAACC,OAAO,CAACK,aAAa,CAACC,UAAU,CAACF,sBAAsB;IACvF1C,KAAK,EAAEA,KAAK;IACZM,IAAI,EAAE+B,OAAO,CAACC,OAAO,CAAC1B,MAAM,CAACC,MAAM,GAC/BP,IAAI,GACJ,YAAW,CAAE;EACnB,CAAC;EAEDd,GAAG,CAACS,gBAAgB,EAAEmC,MAAM,CAAC;EAE7B,OAAO;IACLS,SAAS,EAAE5C,gBAAgB,CAAC2B,SAAS;IACrCkB,MAAM,EAAE7C,gBAAgB,CAACO,MAAM,CAACuC,IAAI,CAAC,EAAE;EACzC,CAAC;AACH;AAEAC,MAAM,CAACC,OAAO,GAAGd,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}