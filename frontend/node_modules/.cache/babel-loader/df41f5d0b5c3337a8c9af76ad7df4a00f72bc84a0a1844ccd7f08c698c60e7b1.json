{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isVariableDeclarator = exports.isTypeKeyword = exports.isTypeAssertion = exports.isTSFunctionType = exports.isTSConstructorType = exports.isSetter = exports.isOptionalCallExpression = exports.isOptionalChainPunctuator = exports.isNotOptionalChainPunctuator = exports.isNotNonNullAssertionPunctuator = exports.isNonNullAssertionPunctuator = exports.isLogicalOrOperator = exports.isLoop = exports.isImportKeyword = exports.isIdentifier = exports.isFunctionType = exports.isFunctionOrFunctionType = exports.isFunction = exports.isClassOrTypeElement = exports.isConstructor = exports.isAwaitKeyword = exports.isAwaitExpression = void 0;\nconst ts_estree_1 = require(\"../ts-estree\");\nconst helpers_1 = require(\"./helpers\");\nconst isOptionalChainPunctuator = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, {\n  value: '?.'\n});\nexports.isOptionalChainPunctuator = isOptionalChainPunctuator;\nconst isNotOptionalChainPunctuator = (0, helpers_1.isNotTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, {\n  value: '?.'\n});\nexports.isNotOptionalChainPunctuator = isNotOptionalChainPunctuator;\nconst isNonNullAssertionPunctuator = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, {\n  value: '!'\n});\nexports.isNonNullAssertionPunctuator = isNonNullAssertionPunctuator;\nconst isNotNonNullAssertionPunctuator = (0, helpers_1.isNotTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, {\n  value: '!'\n});\nexports.isNotNonNullAssertionPunctuator = isNotNonNullAssertionPunctuator;\n/**\n * Returns true if and only if the node represents: foo?.() or foo.bar?.()\n */\nconst isOptionalCallExpression = (0, helpers_1.isNodeOfTypeWithConditions)(ts_estree_1.AST_NODE_TYPES.CallExpression,\n// this flag means the call expression itself is option\n// i.e. it is foo.bar?.() and not foo?.bar()\n{\n  optional: true\n});\nexports.isOptionalCallExpression = isOptionalCallExpression;\n/**\n * Returns true if and only if the node represents logical OR\n */\nconst isLogicalOrOperator = (0, helpers_1.isNodeOfTypeWithConditions)(ts_estree_1.AST_NODE_TYPES.LogicalExpression, {\n  operator: '||'\n});\nexports.isLogicalOrOperator = isLogicalOrOperator;\n/**\n * Checks if a node is a type assertion:\n * ```\n * x as foo\n * <foo>x\n * ```\n */\nconst isTypeAssertion = (0, helpers_1.isNodeOfTypes)([ts_estree_1.AST_NODE_TYPES.TSAsExpression, ts_estree_1.AST_NODE_TYPES.TSTypeAssertion]);\nexports.isTypeAssertion = isTypeAssertion;\nconst isVariableDeclarator = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.VariableDeclarator);\nexports.isVariableDeclarator = isVariableDeclarator;\nconst functionTypes = [ts_estree_1.AST_NODE_TYPES.ArrowFunctionExpression, ts_estree_1.AST_NODE_TYPES.FunctionDeclaration, ts_estree_1.AST_NODE_TYPES.FunctionExpression];\nconst isFunction = (0, helpers_1.isNodeOfTypes)(functionTypes);\nexports.isFunction = isFunction;\nconst functionTypeTypes = [ts_estree_1.AST_NODE_TYPES.TSCallSignatureDeclaration, ts_estree_1.AST_NODE_TYPES.TSConstructorType, ts_estree_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, ts_estree_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, ts_estree_1.AST_NODE_TYPES.TSFunctionType, ts_estree_1.AST_NODE_TYPES.TSMethodSignature];\nconst isFunctionType = (0, helpers_1.isNodeOfTypes)(functionTypeTypes);\nexports.isFunctionType = isFunctionType;\nconst isFunctionOrFunctionType = (0, helpers_1.isNodeOfTypes)([...functionTypes, ...functionTypeTypes]);\nexports.isFunctionOrFunctionType = isFunctionOrFunctionType;\nconst isTSFunctionType = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.TSFunctionType);\nexports.isTSFunctionType = isTSFunctionType;\nconst isTSConstructorType = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.TSConstructorType);\nexports.isTSConstructorType = isTSConstructorType;\nconst isClassOrTypeElement = (0, helpers_1.isNodeOfTypes)([\n// ClassElement\nts_estree_1.AST_NODE_TYPES.PropertyDefinition, ts_estree_1.AST_NODE_TYPES.FunctionExpression, ts_estree_1.AST_NODE_TYPES.MethodDefinition, ts_estree_1.AST_NODE_TYPES.TSAbstractPropertyDefinition, ts_estree_1.AST_NODE_TYPES.TSAbstractMethodDefinition, ts_estree_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, ts_estree_1.AST_NODE_TYPES.TSIndexSignature,\n// TypeElement\nts_estree_1.AST_NODE_TYPES.TSCallSignatureDeclaration, ts_estree_1.AST_NODE_TYPES.TSConstructSignatureDeclaration,\n// AST_NODE_TYPES.TSIndexSignature,\nts_estree_1.AST_NODE_TYPES.TSMethodSignature, ts_estree_1.AST_NODE_TYPES.TSPropertySignature]);\nexports.isClassOrTypeElement = isClassOrTypeElement;\n/**\n * Checks if a node is a constructor method.\n */\nconst isConstructor = (0, helpers_1.isNodeOfTypeWithConditions)(ts_estree_1.AST_NODE_TYPES.MethodDefinition, {\n  kind: 'constructor'\n});\nexports.isConstructor = isConstructor;\n/**\n * Checks if a node is a setter method.\n */\nfunction isSetter(node) {\n  return !!node && (node.type === ts_estree_1.AST_NODE_TYPES.MethodDefinition || node.type === ts_estree_1.AST_NODE_TYPES.Property) && node.kind === 'set';\n}\nexports.isSetter = isSetter;\nconst isIdentifier = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.Identifier);\nexports.isIdentifier = isIdentifier;\n/**\n * Checks if a node represents an `await â€¦` expression.\n */\nconst isAwaitExpression = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.AwaitExpression);\nexports.isAwaitExpression = isAwaitExpression;\n/**\n * Checks if a possible token is the `await` keyword.\n */\nconst isAwaitKeyword = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Identifier, {\n  value: 'await'\n});\nexports.isAwaitKeyword = isAwaitKeyword;\n/**\n * Checks if a possible token is the `type` keyword.\n */\nconst isTypeKeyword = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Identifier, {\n  value: 'type'\n});\nexports.isTypeKeyword = isTypeKeyword;\n/**\n * Checks if a possible token is the `import` keyword.\n */\nconst isImportKeyword = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Keyword, {\n  value: 'import'\n});\nexports.isImportKeyword = isImportKeyword;\nconst isLoop = (0, helpers_1.isNodeOfTypes)([ts_estree_1.AST_NODE_TYPES.DoWhileStatement, ts_estree_1.AST_NODE_TYPES.ForStatement, ts_estree_1.AST_NODE_TYPES.ForInStatement, ts_estree_1.AST_NODE_TYPES.ForOfStatement, ts_estree_1.AST_NODE_TYPES.WhileStatement]);\nexports.isLoop = isLoop;","map":{"version":3,"names":["ts_estree_1","require","helpers_1","isOptionalChainPunctuator","isTokenOfTypeWithConditions","AST_TOKEN_TYPES","Punctuator","value","exports","isNotOptionalChainPunctuator","isNotTokenOfTypeWithConditions","isNonNullAssertionPunctuator","isNotNonNullAssertionPunctuator","isOptionalCallExpression","isNodeOfTypeWithConditions","AST_NODE_TYPES","CallExpression","optional","isLogicalOrOperator","LogicalExpression","operator","isTypeAssertion","isNodeOfTypes","TSAsExpression","TSTypeAssertion","isVariableDeclarator","isNodeOfType","VariableDeclarator","functionTypes","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression","isFunction","functionTypeTypes","TSCallSignatureDeclaration","TSConstructorType","TSConstructSignatureDeclaration","TSEmptyBodyFunctionExpression","TSFunctionType","TSMethodSignature","isFunctionType","isFunctionOrFunctionType","isTSFunctionType","isTSConstructorType","isClassOrTypeElement","PropertyDefinition","MethodDefinition","TSAbstractPropertyDefinition","TSAbstractMethodDefinition","TSIndexSignature","TSPropertySignature","isConstructor","kind","isSetter","node","type","Property","isIdentifier","Identifier","isAwaitExpression","AwaitExpression","isAwaitKeyword","isTypeKeyword","isImportKeyword","Keyword","isLoop","DoWhileStatement","ForStatement","ForInStatement","ForOfStatement","WhileStatement"],"sources":["../../src/ast-utils/predicates.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}