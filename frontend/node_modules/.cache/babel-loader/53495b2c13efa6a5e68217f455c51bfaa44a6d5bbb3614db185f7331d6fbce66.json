{"ast":null,"code":"\"use strict\";\n\n/**\n * Note this file is rather type-unsafe in its current state.\n * This is due to some really funky type conversions between different node types.\n * This is done intentionally based on the internal implementation of the base indent rule.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment  */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('indent');\nconst KNOWN_NODES = new Set([\n// Class properties aren't yet supported by eslint...\nutils_1.AST_NODE_TYPES.PropertyDefinition,\n// ts keywords\nutils_1.AST_NODE_TYPES.TSAbstractKeyword, utils_1.AST_NODE_TYPES.TSAnyKeyword, utils_1.AST_NODE_TYPES.TSBooleanKeyword, utils_1.AST_NODE_TYPES.TSNeverKeyword, utils_1.AST_NODE_TYPES.TSNumberKeyword, utils_1.AST_NODE_TYPES.TSStringKeyword, utils_1.AST_NODE_TYPES.TSSymbolKeyword, utils_1.AST_NODE_TYPES.TSUndefinedKeyword, utils_1.AST_NODE_TYPES.TSUnknownKeyword, utils_1.AST_NODE_TYPES.TSVoidKeyword, utils_1.AST_NODE_TYPES.TSNullKeyword,\n// ts specific nodes we want to support\nutils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition, utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition, utils_1.AST_NODE_TYPES.TSArrayType, utils_1.AST_NODE_TYPES.TSAsExpression, utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration, utils_1.AST_NODE_TYPES.TSConditionalType, utils_1.AST_NODE_TYPES.TSConstructorType, utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, utils_1.AST_NODE_TYPES.TSDeclareFunction, utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, utils_1.AST_NODE_TYPES.TSEnumDeclaration, utils_1.AST_NODE_TYPES.TSEnumMember, utils_1.AST_NODE_TYPES.TSExportAssignment, utils_1.AST_NODE_TYPES.TSExternalModuleReference, utils_1.AST_NODE_TYPES.TSFunctionType, utils_1.AST_NODE_TYPES.TSImportType, utils_1.AST_NODE_TYPES.TSIndexedAccessType, utils_1.AST_NODE_TYPES.TSIndexSignature, utils_1.AST_NODE_TYPES.TSInferType, utils_1.AST_NODE_TYPES.TSInterfaceBody, utils_1.AST_NODE_TYPES.TSInterfaceDeclaration, utils_1.AST_NODE_TYPES.TSInterfaceHeritage, utils_1.AST_NODE_TYPES.TSIntersectionType, utils_1.AST_NODE_TYPES.TSImportEqualsDeclaration, utils_1.AST_NODE_TYPES.TSLiteralType, utils_1.AST_NODE_TYPES.TSMappedType, utils_1.AST_NODE_TYPES.TSMethodSignature, 'TSMinusToken', utils_1.AST_NODE_TYPES.TSModuleBlock, utils_1.AST_NODE_TYPES.TSModuleDeclaration, utils_1.AST_NODE_TYPES.TSNonNullExpression, utils_1.AST_NODE_TYPES.TSParameterProperty, 'TSPlusToken', utils_1.AST_NODE_TYPES.TSPropertySignature, utils_1.AST_NODE_TYPES.TSQualifiedName, 'TSQuestionToken', utils_1.AST_NODE_TYPES.TSRestType, utils_1.AST_NODE_TYPES.TSThisType, utils_1.AST_NODE_TYPES.TSTupleType, utils_1.AST_NODE_TYPES.TSTypeAnnotation, utils_1.AST_NODE_TYPES.TSTypeLiteral, utils_1.AST_NODE_TYPES.TSTypeOperator, utils_1.AST_NODE_TYPES.TSTypeParameter, utils_1.AST_NODE_TYPES.TSTypeParameterDeclaration, utils_1.AST_NODE_TYPES.TSTypeParameterInstantiation, utils_1.AST_NODE_TYPES.TSTypeReference, utils_1.AST_NODE_TYPES.TSUnionType, utils_1.AST_NODE_TYPES.Decorator]);\nexports.default = util.createRule({\n  name: 'indent',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent indentation',\n      // too opinionated to be recommended\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'whitespace',\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    messages: baseRule.meta.messages\n  },\n  defaultOptions: [\n  // typescript docs and playground use 4 space indent\n  4, {\n    // typescript docs indent the case from the switch\n    // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html#example-4\n    SwitchCase: 1,\n    flatTernaryExpressions: false,\n    ignoredNodes: []\n  }],\n  create(context, optionsWithDefaults) {\n    // because we extend the base rule, have to update opts on the context\n    // the context defines options as readonly though...\n    const contextWithDefaults = Object.create(context, {\n      options: {\n        writable: false,\n        configurable: false,\n        value: optionsWithDefaults\n      }\n    });\n    const rules = baseRule.create(contextWithDefaults);\n    /**\n     * Converts from a TSPropertySignature to a Property\n     * @param node a TSPropertySignature node\n     * @param [type] the type to give the new node\n     * @returns a Property node\n     */\n    function TSPropertySignatureToProperty(node, type = utils_1.AST_NODE_TYPES.Property) {\n      const base = {\n        // indent doesn't actually use these\n        key: null,\n        value: null,\n        // Property flags\n        computed: false,\n        method: false,\n        kind: 'init',\n        // this will stop eslint from interrogating the type literal\n        shorthand: true,\n        // location data\n        parent: node.parent,\n        range: node.range,\n        loc: node.loc\n      };\n      if (type === utils_1.AST_NODE_TYPES.Property) {\n        return Object.assign({\n          type\n        }, base);\n      } else {\n        return Object.assign({\n          type,\n          static: false,\n          readonly: false,\n          declare: false\n        }, base);\n      }\n    }\n    return Object.assign({}, rules, {\n      // overwrite the base rule here so we can use our KNOWN_NODES list instead\n      '*:exit'(node) {\n        // For nodes we care about, skip the default handling, because it just marks the node as ignored...\n        if (!KNOWN_NODES.has(node.type)) {\n          rules['*:exit'](node);\n        }\n      },\n      VariableDeclaration(node) {\n        // https://github.com/typescript-eslint/typescript-eslint/issues/441\n        if (node.declarations.length === 0) {\n          return;\n        }\n        return rules.VariableDeclaration(node);\n      },\n      TSAsExpression(node) {\n        // transform it to a BinaryExpression\n        return rules['BinaryExpression, LogicalExpression']({\n          type: utils_1.AST_NODE_TYPES.BinaryExpression,\n          operator: 'as',\n          left: node.expression,\n          // the first typeAnnotation includes the as token\n          right: node.typeAnnotation,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n      TSConditionalType(node) {\n        // transform it to a ConditionalExpression\n        return rules.ConditionalExpression({\n          type: utils_1.AST_NODE_TYPES.ConditionalExpression,\n          test: {\n            type: utils_1.AST_NODE_TYPES.BinaryExpression,\n            operator: 'extends',\n            left: node.checkType,\n            right: node.extendsType,\n            // location data\n            range: [node.checkType.range[0], node.extendsType.range[1]],\n            loc: {\n              start: node.checkType.loc.start,\n              end: node.extendsType.loc.end\n            }\n          },\n          consequent: node.trueType,\n          alternate: node.falseType,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n      'TSEnumDeclaration, TSTypeLiteral'(node) {\n        // transform it to an ObjectExpression\n        return rules['ObjectExpression, ObjectPattern']({\n          type: utils_1.AST_NODE_TYPES.ObjectExpression,\n          properties: node.members.map(member => TSPropertySignatureToProperty(member)),\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n      TSImportEqualsDeclaration(node) {\n        // transform it to an VariableDeclaration\n        // use VariableDeclaration instead of ImportDeclaration because it's essentially the same thing\n        const {\n          id,\n          moduleReference\n        } = node;\n        return rules.VariableDeclaration({\n          type: utils_1.AST_NODE_TYPES.VariableDeclaration,\n          kind: 'const',\n          declarations: [{\n            type: utils_1.AST_NODE_TYPES.VariableDeclarator,\n            range: [id.range[0], moduleReference.range[1]],\n            loc: {\n              start: id.loc.start,\n              end: moduleReference.loc.end\n            },\n            id: id,\n            init: {\n              type: utils_1.AST_NODE_TYPES.CallExpression,\n              callee: {\n                type: utils_1.AST_NODE_TYPES.Identifier,\n                name: 'require',\n                range: [moduleReference.range[0], moduleReference.range[0] + 'require'.length],\n                loc: {\n                  start: moduleReference.loc.start,\n                  end: {\n                    line: moduleReference.loc.end.line,\n                    column: moduleReference.loc.start.line + 'require'.length\n                  }\n                }\n              },\n              arguments: 'expression' in moduleReference ? [moduleReference.expression] : [],\n              // location data\n              range: moduleReference.range,\n              loc: moduleReference.loc\n            }\n          }],\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n      TSIndexedAccessType(node) {\n        // convert to a MemberExpression\n        return rules['MemberExpression, JSXMemberExpression, MetaProperty']({\n          type: utils_1.AST_NODE_TYPES.MemberExpression,\n          object: node.objectType,\n          property: node.indexType,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc,\n          optional: false,\n          computed: true\n        });\n      },\n      TSInterfaceBody(node) {\n        // transform it to an ClassBody\n        return rules['BlockStatement, ClassBody']({\n          type: utils_1.AST_NODE_TYPES.ClassBody,\n          body: node.body.map(p => TSPropertySignatureToProperty(p, utils_1.AST_NODE_TYPES.PropertyDefinition)),\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n      'TSInterfaceDeclaration[extends.length > 0]'(node) {\n        // transform it to a ClassDeclaration\n        return rules['ClassDeclaration[superClass], ClassExpression[superClass]']({\n          type: utils_1.AST_NODE_TYPES.ClassDeclaration,\n          body: node.body,\n          id: null,\n          // TODO: This is invalid, there can be more than one extends in interface\n          superClass: node.extends[0].expression,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n      TSMappedType(node) {\n        const sourceCode = context.getSourceCode();\n        const squareBracketStart = sourceCode.getTokenBefore(node.typeParameter);\n        // transform it to an ObjectExpression\n        return rules['ObjectExpression, ObjectPattern']({\n          type: utils_1.AST_NODE_TYPES.ObjectExpression,\n          properties: [{\n            type: utils_1.AST_NODE_TYPES.Property,\n            key: node.typeParameter,\n            value: node.typeAnnotation,\n            // location data\n            range: [squareBracketStart.range[0], node.typeAnnotation ? node.typeAnnotation.range[1] : squareBracketStart.range[0]],\n            loc: {\n              start: squareBracketStart.loc.start,\n              end: node.typeAnnotation ? node.typeAnnotation.loc.end : squareBracketStart.loc.end\n            },\n            kind: 'init',\n            computed: false,\n            method: false,\n            shorthand: false\n          }],\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n      TSModuleBlock(node) {\n        // transform it to a BlockStatement\n        return rules['BlockStatement, ClassBody']({\n          type: utils_1.AST_NODE_TYPES.BlockStatement,\n          body: node.body,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n      TSQualifiedName(node) {\n        return rules['MemberExpression, JSXMemberExpression, MetaProperty']({\n          type: utils_1.AST_NODE_TYPES.MemberExpression,\n          object: node.left,\n          property: node.right,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc,\n          optional: false,\n          computed: false\n        });\n      },\n      TSTupleType(node) {\n        // transform it to an ArrayExpression\n        return rules['ArrayExpression, ArrayPattern']({\n          type: utils_1.AST_NODE_TYPES.ArrayExpression,\n          elements: node.elementTypes,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      },\n      TSTypeParameterDeclaration(node) {\n        if (!node.params.length) {\n          return;\n        }\n        const [name, ...attributes] = node.params;\n        // JSX is about the closest we can get because the angle brackets\n        // it's not perfect but it works!\n        return rules.JSXOpeningElement({\n          type: utils_1.AST_NODE_TYPES.JSXOpeningElement,\n          selfClosing: false,\n          name: name,\n          attributes: attributes,\n          // location data\n          parent: node.parent,\n          range: node.range,\n          loc: node.loc\n        });\n      }\n    });\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","getESLintCoreRule_1","baseRule","getESLintCoreRule","KNOWN_NODES","Set","AST_NODE_TYPES","PropertyDefinition","TSAbstractKeyword","TSAnyKeyword","TSBooleanKeyword","TSNeverKeyword","TSNumberKeyword","TSStringKeyword","TSSymbolKeyword","TSUndefinedKeyword","TSUnknownKeyword","TSVoidKeyword","TSNullKeyword","TSAbstractPropertyDefinition","TSAbstractMethodDefinition","TSArrayType","TSAsExpression","TSCallSignatureDeclaration","TSConditionalType","TSConstructorType","TSConstructSignatureDeclaration","TSDeclareFunction","TSEmptyBodyFunctionExpression","TSEnumDeclaration","TSEnumMember","TSExportAssignment","TSExternalModuleReference","TSFunctionType","TSImportType","TSIndexedAccessType","TSIndexSignature","TSInferType","TSInterfaceBody","TSInterfaceDeclaration","TSInterfaceHeritage","TSIntersectionType","TSImportEqualsDeclaration","TSLiteralType","TSMappedType","TSMethodSignature","TSModuleBlock","TSModuleDeclaration","TSNonNullExpression","TSParameterProperty","TSPropertySignature","TSQualifiedName","TSRestType","TSThisType","TSTupleType","TSTypeAnnotation","TSTypeLiteral","TSTypeOperator","TSTypeParameter","TSTypeParameterDeclaration","TSTypeParameterInstantiation","TSTypeReference","TSUnionType","Decorator","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","hasSuggestions","schema","messages","defaultOptions","SwitchCase","flatTernaryExpressions","ignoredNodes","create","context","optionsWithDefaults","contextWithDefaults","Object","options","writable","configurable","value","rules","TSPropertySignatureToProperty","node","Property","base","key","computed","method","kind","shorthand","parent","range","loc","assign","static","readonly","declare","*:exit","has","VariableDeclaration","declarations","length","BinaryExpression","operator","left","expression","right","typeAnnotation","ConditionalExpression","test","checkType","extendsType","start","end","consequent","trueType","alternate","falseType","TSEnumDeclaration, TSTypeLiteral","ObjectExpression","properties","members","map","member","id","moduleReference","VariableDeclarator","init","CallExpression","callee","Identifier","line","column","arguments","MemberExpression","object","objectType","property","indexType","optional","ClassBody","body","p","TSInterfaceDeclaration[extends.length > 0]","ClassDeclaration","superClass","extends","sourceCode","getSourceCode","squareBracketStart","getTokenBefore","typeParameter","BlockStatement","ArrayExpression","elements","elementTypes","params","attributes","JSXOpeningElement","selfClosing"],"sources":["../../src/rules/indent.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}