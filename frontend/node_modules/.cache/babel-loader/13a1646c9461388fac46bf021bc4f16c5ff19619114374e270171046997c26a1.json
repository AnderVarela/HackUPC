{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: ({\n    params\n  }) => (0, codegen_1.str)`must match \"${params.ifClause}\" schema`,\n  params: ({\n    params\n  }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`\n};\nconst def = {\n  keyword: \"if\",\n  schemaType: [\"object\", \"boolean\"],\n  trackErrors: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      parentSchema,\n      it\n    } = cxt;\n    if (parentSchema.then === undefined && parentSchema.else === undefined) {\n      (0, util_1.checkStrictMode)(it, '\"if\" without \"then\" and \"else\" is ignored');\n    }\n    const hasThen = hasSchema(it, \"then\");\n    const hasElse = hasSchema(it, \"else\");\n    if (!hasThen && !hasElse) return;\n    const valid = gen.let(\"valid\", true);\n    const schValid = gen.name(\"_valid\");\n    validateIf();\n    cxt.reset();\n    if (hasThen && hasElse) {\n      const ifClause = gen.let(\"ifClause\");\n      cxt.setParams({\n        ifClause\n      });\n      gen.if(schValid, validateClause(\"then\", ifClause), validateClause(\"else\", ifClause));\n    } else if (hasThen) {\n      gen.if(schValid, validateClause(\"then\"));\n    } else {\n      gen.if((0, codegen_1.not)(schValid), validateClause(\"else\"));\n    }\n    cxt.pass(valid, () => cxt.error(true));\n    function validateIf() {\n      const schCxt = cxt.subschema({\n        keyword: \"if\",\n        compositeRule: true,\n        createErrors: false,\n        allErrors: false\n      }, schValid);\n      cxt.mergeEvaluated(schCxt);\n    }\n    function validateClause(keyword, ifClause) {\n      return () => {\n        const schCxt = cxt.subschema({\n          keyword\n        }, schValid);\n        gen.assign(valid, schValid);\n        cxt.mergeValidEvaluated(schCxt, valid);\n        if (ifClause) gen.assign(ifClause, (0, codegen_1._)`${keyword}`);else cxt.setParams({\n          ifClause: keyword\n        });\n      };\n    }\n  }\n};\nfunction hasSchema(it, keyword) {\n  const schema = it.schema[keyword];\n  return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);\n}\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","util_1","error","message","params","str","ifClause","_","def","keyword","schemaType","trackErrors","code","cxt","gen","parentSchema","it","then","undefined","else","checkStrictMode","hasThen","hasSchema","hasElse","valid","let","schValid","name","validateIf","reset","setParams","if","validateClause","not","pass","schCxt","subschema","compositeRule","createErrors","allErrors","mergeEvaluated","assign","mergeValidEvaluated","schema","alwaysValidSchema","exports","default"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\css-minimizer-webpack-plugin\\node_modules\\ajv\\lib\\vocabularies\\applicator\\if.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {SchemaObjCxt} from \"../../compile\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode} from \"../../compile/util\"\n\nexport type IfKeywordError = ErrorObject<\"if\", {failingKeyword: string}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params}) => str`must match \"${params.ifClause}\" schema`,\n  params: ({params}) => _`{failingKeyword: ${params.ifClause}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"if\",\n  schemaType: [\"object\", \"boolean\"],\n  trackErrors: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, parentSchema, it} = cxt\n    if (parentSchema.then === undefined && parentSchema.else === undefined) {\n      checkStrictMode(it, '\"if\" without \"then\" and \"else\" is ignored')\n    }\n    const hasThen = hasSchema(it, \"then\")\n    const hasElse = hasSchema(it, \"else\")\n    if (!hasThen && !hasElse) return\n\n    const valid = gen.let(\"valid\", true)\n    const schValid = gen.name(\"_valid\")\n    validateIf()\n    cxt.reset()\n\n    if (hasThen && hasElse) {\n      const ifClause = gen.let(\"ifClause\")\n      cxt.setParams({ifClause})\n      gen.if(schValid, validateClause(\"then\", ifClause), validateClause(\"else\", ifClause))\n    } else if (hasThen) {\n      gen.if(schValid, validateClause(\"then\"))\n    } else {\n      gen.if(not(schValid), validateClause(\"else\"))\n    }\n\n    cxt.pass(valid, () => cxt.error(true))\n\n    function validateIf(): void {\n      const schCxt = cxt.subschema(\n        {\n          keyword: \"if\",\n          compositeRule: true,\n          createErrors: false,\n          allErrors: false,\n        },\n        schValid\n      )\n      cxt.mergeEvaluated(schCxt)\n    }\n\n    function validateClause(keyword: string, ifClause?: Name): () => void {\n      return () => {\n        const schCxt = cxt.subschema({keyword}, schValid)\n        gen.assign(valid, schValid)\n        cxt.mergeValidEvaluated(schCxt, valid)\n        if (ifClause) gen.assign(ifClause, _`${keyword}`)\n        else cxt.setParams({ifClause: keyword})\n      }\n    }\n  },\n}\n\nfunction hasSchema(it: SchemaObjCxt, keyword: string): boolean {\n  const schema = it.schema[keyword]\n  return schema !== undefined && !alwaysValidSchema(it, schema)\n}\n\nexport default def\n"],"mappings":";;;;;AAQA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AAIA,MAAME,KAAK,GAA2B;EACpCC,OAAO,EAAEA,CAAC;IAACC;EAAM,CAAC,KAAK,IAAAL,SAAA,CAAAM,GAAG,gBAAeD,MAAM,CAACE,QAAQ,UAAU;EAClEF,MAAM,EAAEA,CAAC;IAACA;EAAM,CAAC,KAAK,IAAAL,SAAA,CAAAQ,CAAC,qBAAoBH,MAAM,CAACE,QAAQ;CAC3D;AAED,MAAME,GAAG,GAA0B;EACjCC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;EACjCC,WAAW,EAAE,IAAI;EACjBT,KAAK;EACLU,IAAIA,CAACC,GAAe;IAClB,MAAM;MAACC,GAAG;MAAEC,YAAY;MAAEC;IAAE,CAAC,GAAGH,GAAG;IACnC,IAAIE,YAAY,CAACE,IAAI,KAAKC,SAAS,IAAIH,YAAY,CAACI,IAAI,KAAKD,SAAS,EAAE;MACtE,IAAAjB,MAAA,CAAAmB,eAAe,EAACJ,EAAE,EAAE,2CAA2C,CAAC;IAClE;IACA,MAAMK,OAAO,GAAGC,SAAS,CAACN,EAAE,EAAE,MAAM,CAAC;IACrC,MAAMO,OAAO,GAAGD,SAAS,CAACN,EAAE,EAAE,MAAM,CAAC;IACrC,IAAI,CAACK,OAAO,IAAI,CAACE,OAAO,EAAE;IAE1B,MAAMC,KAAK,GAAGV,GAAG,CAACW,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;IACpC,MAAMC,QAAQ,GAAGZ,GAAG,CAACa,IAAI,CAAC,QAAQ,CAAC;IACnCC,UAAU,EAAE;IACZf,GAAG,CAACgB,KAAK,EAAE;IAEX,IAAIR,OAAO,IAAIE,OAAO,EAAE;MACtB,MAAMjB,QAAQ,GAAGQ,GAAG,CAACW,GAAG,CAAC,UAAU,CAAC;MACpCZ,GAAG,CAACiB,SAAS,CAAC;QAACxB;MAAQ,CAAC,CAAC;MACzBQ,GAAG,CAACiB,EAAE,CAACL,QAAQ,EAAEM,cAAc,CAAC,MAAM,EAAE1B,QAAQ,CAAC,EAAE0B,cAAc,CAAC,MAAM,EAAE1B,QAAQ,CAAC,CAAC;IACtF,CAAC,MAAM,IAAIe,OAAO,EAAE;MAClBP,GAAG,CAACiB,EAAE,CAACL,QAAQ,EAAEM,cAAc,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAC,MAAM;MACLlB,GAAG,CAACiB,EAAE,CAAC,IAAAhC,SAAA,CAAAkC,GAAG,EAACP,QAAQ,CAAC,EAAEM,cAAc,CAAC,MAAM,CAAC,CAAC;IAC/C;IAEAnB,GAAG,CAACqB,IAAI,CAACV,KAAK,EAAE,MAAMX,GAAG,CAACX,KAAK,CAAC,IAAI,CAAC,CAAC;IAEtC,SAAS0B,UAAUA,CAAA;MACjB,MAAMO,MAAM,GAAGtB,GAAG,CAACuB,SAAS,CAC1B;QACE3B,OAAO,EAAE,IAAI;QACb4B,aAAa,EAAE,IAAI;QACnBC,YAAY,EAAE,KAAK;QACnBC,SAAS,EAAE;OACZ,EACDb,QAAQ,CACT;MACDb,GAAG,CAAC2B,cAAc,CAACL,MAAM,CAAC;IAC5B;IAEA,SAASH,cAAcA,CAACvB,OAAe,EAAEH,QAAe;MACtD,OAAO,MAAK;QACV,MAAM6B,MAAM,GAAGtB,GAAG,CAACuB,SAAS,CAAC;UAAC3B;QAAO,CAAC,EAAEiB,QAAQ,CAAC;QACjDZ,GAAG,CAAC2B,MAAM,CAACjB,KAAK,EAAEE,QAAQ,CAAC;QAC3Bb,GAAG,CAAC6B,mBAAmB,CAACP,MAAM,EAAEX,KAAK,CAAC;QACtC,IAAIlB,QAAQ,EAAEQ,GAAG,CAAC2B,MAAM,CAACnC,QAAQ,EAAE,IAAAP,SAAA,CAAAQ,CAAC,IAAGE,OAAO,EAAE,CAAC,MAC5CI,GAAG,CAACiB,SAAS,CAAC;UAACxB,QAAQ,EAAEG;QAAO,CAAC,CAAC;MACzC,CAAC;IACH;EACF;CACD;AAED,SAASa,SAASA,CAACN,EAAgB,EAAEP,OAAe;EAClD,MAAMkC,MAAM,GAAG3B,EAAE,CAAC2B,MAAM,CAAClC,OAAO,CAAC;EACjC,OAAOkC,MAAM,KAAKzB,SAAS,IAAI,CAAC,IAAAjB,MAAA,CAAA2C,iBAAiB,EAAC5B,EAAE,EAAE2B,MAAM,CAAC;AAC/D;AAEAE,OAAA,CAAAC,OAAA,GAAetC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}