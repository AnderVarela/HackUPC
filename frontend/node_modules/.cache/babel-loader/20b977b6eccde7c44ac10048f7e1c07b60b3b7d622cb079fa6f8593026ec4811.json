{"ast":null,"code":"'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'string',\n    inline: function (it, keyword, schema) {\n      return getRegExp() + '.test(data' + (it.dataLevel || '') + ')';\n      function getRegExp() {\n        try {\n          if (typeof schema == 'object') return new RegExp(schema.pattern, schema.flags);\n          var rx = schema.match(/^\\/(.*)\\/([gimuy]*)$/);\n          if (rx) return new RegExp(rx[1], rx[2]);\n          throw new Error('cannot parse string into RegExp');\n        } catch (e) {\n          console.error('regular expression', schema, 'is invalid');\n          throw e;\n        }\n      }\n    },\n    metaSchema: {\n      type: ['string', 'object'],\n      properties: {\n        pattern: {\n          type: 'string'\n        },\n        flags: {\n          type: 'string'\n        }\n      },\n      required: ['pattern'],\n      additionalProperties: false\n    }\n  };\n  ajv.addKeyword('regexp', defFunc.definition);\n  return ajv;\n};","map":{"version":3,"names":["module","exports","defFunc","ajv","definition","type","inline","it","keyword","schema","getRegExp","dataLevel","RegExp","pattern","flags","rx","match","Error","e","console","error","metaSchema","properties","required","additionalProperties","addKeyword"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/ajv-keywords/keywords/regexp.js"],"sourcesContent":["'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'string',\n    inline: function (it, keyword, schema) {\n      return getRegExp() + '.test(data' + (it.dataLevel || '') + ')';\n\n      function getRegExp() {\n        try {\n          if (typeof schema == 'object')\n            return new RegExp(schema.pattern, schema.flags);\n\n          var rx = schema.match(/^\\/(.*)\\/([gimuy]*)$/);\n          if (rx) return new RegExp(rx[1], rx[2]);\n          throw new Error('cannot parse string into RegExp');\n        } catch(e) {\n          console.error('regular expression', schema, 'is invalid');\n          throw e;\n        }\n      }\n    },\n    metaSchema: {\n      type: ['string', 'object'],\n      properties: {\n        pattern: { type: 'string' },\n        flags: { type: 'string' }\n      },\n      required: ['pattern'],\n      additionalProperties: false\n    }\n  };\n\n  ajv.addKeyword('regexp', defFunc.definition);\n  return ajv;\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG,SAASC,OAAOA,CAACC,GAAG,EAAE;EACrCD,OAAO,CAACE,UAAU,GAAG;IACnBC,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,SAAAA,CAAUC,EAAE,EAAEC,OAAO,EAAEC,MAAM,EAAE;MACrC,OAAOC,SAAS,CAAC,CAAC,GAAG,YAAY,IAAIH,EAAE,CAACI,SAAS,IAAI,EAAE,CAAC,GAAG,GAAG;MAE9D,SAASD,SAASA,CAAA,EAAG;QACnB,IAAI;UACF,IAAI,OAAOD,MAAM,IAAI,QAAQ,EAC3B,OAAO,IAAIG,MAAM,CAACH,MAAM,CAACI,OAAO,EAAEJ,MAAM,CAACK,KAAK,CAAC;UAEjD,IAAIC,EAAE,GAAGN,MAAM,CAACO,KAAK,CAAC,sBAAsB,CAAC;UAC7C,IAAID,EAAE,EAAE,OAAO,IAAIH,MAAM,CAACG,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,CAAC;UACvC,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;QACpD,CAAC,CAAC,OAAMC,CAAC,EAAE;UACTC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEX,MAAM,EAAE,YAAY,CAAC;UACzD,MAAMS,CAAC;QACT;MACF;IACF,CAAC;IACDG,UAAU,EAAE;MACVhB,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;MAC1BiB,UAAU,EAAE;QACVT,OAAO,EAAE;UAAER,IAAI,EAAE;QAAS,CAAC;QAC3BS,KAAK,EAAE;UAAET,IAAI,EAAE;QAAS;MAC1B,CAAC;MACDkB,QAAQ,EAAE,CAAC,SAAS,CAAC;MACrBC,oBAAoB,EAAE;IACxB;EACF,CAAC;EAEDrB,GAAG,CAACsB,UAAU,CAAC,QAAQ,EAAEvB,OAAO,CAACE,UAAU,CAAC;EAC5C,OAAOD,GAAG;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}