{"ast":null,"code":"\"use strict\";\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {import(\"./index.js\").InternalResult} InternalResult */\n\n/**\n * @template T\n * @param {import(\"./index.js\").InternalOptions<T>} options\n * @returns {Promise<InternalResult>}\n */\nconst minify = async options => {\n  const minifyFns = Array.isArray(options.minimizer.implementation) ? options.minimizer.implementation : [options.minimizer.implementation];\n  /** @type {InternalResult} */\n\n  const result = {\n    outputs: [],\n    warnings: [],\n    errors: []\n  };\n  let needSourceMap = false;\n  for (let i = 0; i <= minifyFns.length - 1; i++) {\n    const minifyFn = minifyFns[i];\n    const minifyOptions = Array.isArray(options.minimizer.options) ? options.minimizer.options[i] : options.minimizer.options;\n    const prevResult = result.outputs.length > 0 ? result.outputs[result.outputs.length - 1] : {\n      code: options.input,\n      map: options.inputSourceMap\n    };\n    const {\n      code,\n      map\n    } = prevResult; // eslint-disable-next-line no-await-in-loop\n\n    const minifyResult = await minifyFn({\n      [options.name]: code\n    }, map, minifyOptions);\n    if (typeof minifyResult.code !== \"string\") {\n      throw new Error(\"minimizer function doesn't return the 'code' property or result is not a string value\");\n    }\n    if (minifyResult.map) {\n      needSourceMap = true;\n    }\n    if (minifyResult.errors) {\n      result.errors = result.errors.concat(minifyResult.errors);\n    }\n    if (minifyResult.warnings) {\n      result.warnings = result.warnings.concat(minifyResult.warnings);\n    }\n    result.outputs.push({\n      code: minifyResult.code,\n      map: minifyResult.map\n    });\n  }\n  if (!needSourceMap) {\n    result.outputs = [result.outputs[result.outputs.length - 1]];\n  }\n  return result;\n};\n/**\n * @param {string} options\n * @returns {Promise<InternalResult>}\n */\n\nasync function transform(options) {\n  // 'use strict' => this === undefined (Clean Scope)\n  // Safer for possible security issues, albeit not critical at all here\n  // eslint-disable-next-line no-new-func, no-param-reassign\n  const evaluatedOptions = new Function(\"exports\", \"require\", \"module\", \"__filename\", \"__dirname\", `'use strict'\\nreturn ${options}`)(exports, require, module, __filename, __dirname);\n  return minify(evaluatedOptions);\n}\nmodule.exports = {\n  minify,\n  transform\n};","map":{"version":3,"names":["minify","options","minifyFns","Array","isArray","minimizer","implementation","result","outputs","warnings","errors","needSourceMap","i","length","minifyFn","minifyOptions","prevResult","code","input","map","inputSourceMap","minifyResult","name","Error","concat","push","transform","evaluatedOptions","Function","exports","require","module","__filename","__dirname"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/css-minimizer-webpack-plugin/dist/minify.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {import(\"./index.js\").InternalResult} InternalResult */\n\n/**\n * @template T\n * @param {import(\"./index.js\").InternalOptions<T>} options\n * @returns {Promise<InternalResult>}\n */\nconst minify = async options => {\n  const minifyFns = Array.isArray(options.minimizer.implementation) ? options.minimizer.implementation : [options.minimizer.implementation];\n  /** @type {InternalResult} */\n\n  const result = {\n    outputs: [],\n    warnings: [],\n    errors: []\n  };\n  let needSourceMap = false;\n\n  for (let i = 0; i <= minifyFns.length - 1; i++) {\n    const minifyFn = minifyFns[i];\n    const minifyOptions = Array.isArray(options.minimizer.options) ? options.minimizer.options[i] : options.minimizer.options;\n    const prevResult = result.outputs.length > 0 ? result.outputs[result.outputs.length - 1] : {\n      code: options.input,\n      map: options.inputSourceMap\n    };\n    const {\n      code,\n      map\n    } = prevResult; // eslint-disable-next-line no-await-in-loop\n\n    const minifyResult = await minifyFn({\n      [options.name]: code\n    }, map, minifyOptions);\n\n    if (typeof minifyResult.code !== \"string\") {\n      throw new Error(\"minimizer function doesn't return the 'code' property or result is not a string value\");\n    }\n\n    if (minifyResult.map) {\n      needSourceMap = true;\n    }\n\n    if (minifyResult.errors) {\n      result.errors = result.errors.concat(minifyResult.errors);\n    }\n\n    if (minifyResult.warnings) {\n      result.warnings = result.warnings.concat(minifyResult.warnings);\n    }\n\n    result.outputs.push({\n      code: minifyResult.code,\n      map: minifyResult.map\n    });\n  }\n\n  if (!needSourceMap) {\n    result.outputs = [result.outputs[result.outputs.length - 1]];\n  }\n\n  return result;\n};\n/**\n * @param {string} options\n * @returns {Promise<InternalResult>}\n */\n\n\nasync function transform(options) {\n  // 'use strict' => this === undefined (Clean Scope)\n  // Safer for possible security issues, albeit not critical at all here\n  // eslint-disable-next-line no-new-func, no-param-reassign\n  const evaluatedOptions = new Function(\"exports\", \"require\", \"module\", \"__filename\", \"__dirname\", `'use strict'\\nreturn ${options}`)(exports, require, module, __filename, __dirname);\n  return minify(evaluatedOptions);\n}\n\nmodule.exports = {\n  minify,\n  transform\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}