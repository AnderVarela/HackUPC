{"ast":null,"code":"'use strict';\n\nvar testArray = function testArray(t, actual, expected, msg) {\n  t.deepEqual(actual, expected, msg);\n  t.equal(actual.length, expected.length, 'expected ' + expected.length + ', got ' + actual.length);\n};\nmodule.exports = function (flat, t) {\n  t.test('flattens', function (st) {\n    testArray(st, flat([1, [2], [[3]], [[['four']]]]), [1, 2, [3], [['four']]], 'missing depth only flattens 1 deep');\n    testArray(st, flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, [3], [['four']]], 'depth of 1 only flattens 1 deep');\n    st.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, 3, ['four']], 'depth of 1 only flattens 1 deep: sanity check');\n    testArray(st, flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, ['four']], 'depth of 2 only flattens 2 deep');\n    st.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, 'four'], 'depth of 2 only flattens 2 deep: sanity check');\n    testArray(st, flat([1, [2], [[3]], [[['four']]]], 3), [1, 2, 3, 'four'], 'depth of 3 only flattens 3 deep');\n    testArray(st, flat([1, [2], [[3]], [[['four']]]], Infinity), [1, 2, 3, 'four'], 'depth of Infinity flattens all the way');\n    st.end();\n  });\n  t.test('sparse arrays', function (st) {\n    // eslint-disable-next-line no-sparse-arrays\n    st.deepEqual(flat([, [1]]), flat([[], [1]]), 'an array hole is treated the same as an empty array');\n    st.end();\n  });\n};","map":{"version":3,"names":["testArray","t","actual","expected","msg","deepEqual","equal","length","module","exports","flat","test","st","notDeepEqual","Infinity","end"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/array.prototype.flat/test/tests.js"],"sourcesContent":["'use strict';\n\nvar testArray = function testArray(t, actual, expected, msg) {\n\tt.deepEqual(actual, expected, msg);\n\tt.equal(actual.length, expected.length, 'expected ' + expected.length + ', got ' + actual.length);\n};\n\nmodule.exports = function (flat, t) {\n\tt.test('flattens', function (st) {\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]]), [1, 2, [3], [['four']]], 'missing depth only flattens 1 deep');\n\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, [3], [['four']]], 'depth of 1 only flattens 1 deep');\n\t\tst.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, 3, ['four']], 'depth of 1 only flattens 1 deep: sanity check');\n\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, ['four']], 'depth of 2 only flattens 2 deep');\n\t\tst.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, 'four'], 'depth of 2 only flattens 2 deep: sanity check');\n\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], 3), [1, 2, 3, 'four'], 'depth of 3 only flattens 3 deep');\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], Infinity), [1, 2, 3, 'four'], 'depth of Infinity flattens all the way');\n\n\t\tst.end();\n\t});\n\n\tt.test('sparse arrays', function (st) {\n\t\t// eslint-disable-next-line no-sparse-arrays\n\t\tst.deepEqual(flat([, [1]]), flat([[], [1]]), 'an array hole is treated the same as an empty array');\n\n\t\tst.end();\n\t});\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}