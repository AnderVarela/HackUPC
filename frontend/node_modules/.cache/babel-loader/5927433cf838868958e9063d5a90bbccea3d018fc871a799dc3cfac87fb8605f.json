{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"tsutils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'non-nullable-type-assertion-style',\n  meta: {\n    docs: {\n      description: 'Enforce non-null assertions over explicit type casts',\n      recommended: 'strict',\n      requiresTypeChecking: true\n    },\n    fixable: 'code',\n    messages: {\n      preferNonNullAssertion: 'Use a ! assertion to more succinctly remove null and undefined from the type.'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n  create(context) {\n    const parserServices = util.getParserServices(context);\n    const checker = parserServices.program.getTypeChecker();\n    const sourceCode = context.getSourceCode();\n    const getTypesIfNotLoose = node => {\n      const type = checker.getTypeAtLocation(parserServices.esTreeNodeToTSNodeMap.get(node));\n      if (tsutils.isTypeFlagSet(type, ts.TypeFlags.Any | ts.TypeFlags.Unknown)) {\n        return undefined;\n      }\n      return tsutils.unionTypeParts(type);\n    };\n    const couldBeNullish = type => {\n      if (type.flags & ts.TypeFlags.TypeParameter) {\n        const constraint = type.getConstraint();\n        return constraint == null || couldBeNullish(constraint);\n      } else if (tsutils.isUnionType(type)) {\n        for (const part of type.types) {\n          if (couldBeNullish(part)) {\n            return true;\n          }\n        }\n        return false;\n      } else {\n        return (type.flags & (ts.TypeFlags.Null | ts.TypeFlags.Undefined)) !== 0;\n      }\n    };\n    const sameTypeWithoutNullish = (assertedTypes, originalTypes) => {\n      const nonNullishOriginalTypes = originalTypes.filter(type => (type.flags & (ts.TypeFlags.Null | ts.TypeFlags.Undefined)) === 0);\n      if (nonNullishOriginalTypes.length === originalTypes.length) {\n        return false;\n      }\n      for (const assertedType of assertedTypes) {\n        if (couldBeNullish(assertedType) || !nonNullishOriginalTypes.includes(assertedType)) {\n          return false;\n        }\n      }\n      for (const originalType of nonNullishOriginalTypes) {\n        if (!assertedTypes.includes(originalType)) {\n          return false;\n        }\n      }\n      return true;\n    };\n    const isConstAssertion = node => {\n      return node.typeAnnotation.type === utils_1.AST_NODE_TYPES.TSTypeReference && node.typeAnnotation.typeName.type === utils_1.AST_NODE_TYPES.Identifier && node.typeAnnotation.typeName.name === 'const';\n    };\n    return {\n      'TSAsExpression, TSTypeAssertion'(node) {\n        if (isConstAssertion(node)) {\n          return;\n        }\n        const originalTypes = getTypesIfNotLoose(node.expression);\n        if (!originalTypes) {\n          return;\n        }\n        const assertedTypes = getTypesIfNotLoose(node.typeAnnotation);\n        if (!assertedTypes) {\n          return;\n        }\n        if (sameTypeWithoutNullish(assertedTypes, originalTypes)) {\n          context.report({\n            fix(fixer) {\n              return fixer.replaceText(node, `${sourceCode.getText(node.expression)}!`);\n            },\n            messageId: 'preferNonNullAssertion',\n            node\n          });\n        }\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","tsutils","__importStar","ts","util","exports","default","createRule","name","meta","docs","description","recommended","requiresTypeChecking","fixable","messages","preferNonNullAssertion","schema","type","defaultOptions","create","context","parserServices","getParserServices","checker","program","getTypeChecker","sourceCode","getSourceCode","getTypesIfNotLoose","node","getTypeAtLocation","esTreeNodeToTSNodeMap","get","isTypeFlagSet","TypeFlags","Any","Unknown","undefined","unionTypeParts","couldBeNullish","flags","TypeParameter","constraint","getConstraint","isUnionType","part","types","Null","Undefined","sameTypeWithoutNullish","assertedTypes","originalTypes","nonNullishOriginalTypes","filter","length","assertedType","includes","originalType","isConstAssertion","typeAnnotation","AST_NODE_TYPES","TSTypeReference","typeName","Identifier","TSAsExpression, TSTypeAssertion","expression","report","fix","fixer","replaceText","getText","messageId"],"sources":["../../src/rules/non-nullable-type-assertion-style.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}