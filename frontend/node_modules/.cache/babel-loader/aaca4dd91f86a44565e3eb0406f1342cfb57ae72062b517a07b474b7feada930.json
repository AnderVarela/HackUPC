{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\n// Constants\nvar c = require('../const');\nvar $$ = require('../utils');\nvar HelpFormatter = require('./formatter.js');\n\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which adds default values to argument help.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction ArgumentDefaultsHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n}\nutil.inherits(ArgumentDefaultsHelpFormatter, HelpFormatter);\nArgumentDefaultsHelpFormatter.prototype._getHelpString = function (action) {\n  var help = action.help;\n  if (action.help.indexOf('%(defaultValue)s') === -1) {\n    if (action.defaultValue !== c.SUPPRESS) {\n      var defaulting_nargs = [c.OPTIONAL, c.ZERO_OR_MORE];\n      if (action.isOptional() || defaulting_nargs.indexOf(action.nargs) >= 0) {\n        help += ' (default: %(defaultValue)s)';\n      }\n    }\n  }\n  return help;\n};\nmodule.exports.ArgumentDefaultsHelpFormatter = ArgumentDefaultsHelpFormatter;\n\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which retains any formatting in descriptions.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction RawDescriptionHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n}\nutil.inherits(RawDescriptionHelpFormatter, HelpFormatter);\nRawDescriptionHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = text.split('\\n');\n  lines = lines.map(function (line) {\n    return $$.trimEnd(indent + line);\n  });\n  return lines.join('\\n');\n};\nmodule.exports.RawDescriptionHelpFormatter = RawDescriptionHelpFormatter;\n\n/**\n * new RawTextHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawTextHelpFormatter, ...})\n *\n * Help message formatter which retains formatting of all help text.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction RawTextHelpFormatter(options) {\n  RawDescriptionHelpFormatter.call(this, options);\n}\nutil.inherits(RawTextHelpFormatter, RawDescriptionHelpFormatter);\nRawTextHelpFormatter.prototype._splitLines = function (text) {\n  return text.split('\\n');\n};\nmodule.exports.RawTextHelpFormatter = RawTextHelpFormatter;","map":{"version":3,"names":["util","require","c","$$","HelpFormatter","ArgumentDefaultsHelpFormatter","options","call","inherits","prototype","_getHelpString","action","help","indexOf","defaultValue","SUPPRESS","defaulting_nargs","OPTIONAL","ZERO_OR_MORE","isOptional","nargs","module","exports","RawDescriptionHelpFormatter","_fillText","text","width","indent","lines","split","map","line","trimEnd","join","RawTextHelpFormatter","_splitLines"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/argparse/lib/help/added_formatters.js"],"sourcesContent":["'use strict';\n\nvar util    = require('util');\n\n// Constants\nvar c = require('../const');\n\nvar $$ = require('../utils');\nvar HelpFormatter = require('./formatter.js');\n\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which adds default values to argument help.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction ArgumentDefaultsHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n}\n\nutil.inherits(ArgumentDefaultsHelpFormatter, HelpFormatter);\n\nArgumentDefaultsHelpFormatter.prototype._getHelpString = function (action) {\n  var help = action.help;\n  if (action.help.indexOf('%(defaultValue)s') === -1) {\n    if (action.defaultValue !== c.SUPPRESS) {\n      var defaulting_nargs = [ c.OPTIONAL, c.ZERO_OR_MORE ];\n      if (action.isOptional() || (defaulting_nargs.indexOf(action.nargs) >= 0)) {\n        help += ' (default: %(defaultValue)s)';\n      }\n    }\n  }\n  return help;\n};\n\nmodule.exports.ArgumentDefaultsHelpFormatter = ArgumentDefaultsHelpFormatter;\n\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which retains any formatting in descriptions.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction RawDescriptionHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n}\n\nutil.inherits(RawDescriptionHelpFormatter, HelpFormatter);\n\nRawDescriptionHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = text.split('\\n');\n  lines = lines.map(function (line) {\n    return $$.trimEnd(indent + line);\n  });\n  return lines.join('\\n');\n};\nmodule.exports.RawDescriptionHelpFormatter = RawDescriptionHelpFormatter;\n\n/**\n * new RawTextHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawTextHelpFormatter, ...})\n *\n * Help message formatter which retains formatting of all help text.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nfunction RawTextHelpFormatter(options) {\n  RawDescriptionHelpFormatter.call(this, options);\n}\n\nutil.inherits(RawTextHelpFormatter, RawDescriptionHelpFormatter);\n\nRawTextHelpFormatter.prototype._splitLines = function (text) {\n  return text.split('\\n');\n};\n\nmodule.exports.RawTextHelpFormatter = RawTextHelpFormatter;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAMC,OAAO,CAAC,MAAM,CAAC;;AAE7B;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,UAAU,CAAC;AAE3B,IAAIE,EAAE,GAAGF,OAAO,CAAC,UAAU,CAAC;AAC5B,IAAIG,aAAa,GAAGH,OAAO,CAAC,gBAAgB,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,6BAA6BA,CAACC,OAAO,EAAE;EAC9CF,aAAa,CAACG,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;AACnC;AAEAN,IAAI,CAACQ,QAAQ,CAACH,6BAA6B,EAAED,aAAa,CAAC;AAE3DC,6BAA6B,CAACI,SAAS,CAACC,cAAc,GAAG,UAAUC,MAAM,EAAE;EACzE,IAAIC,IAAI,GAAGD,MAAM,CAACC,IAAI;EACtB,IAAID,MAAM,CAACC,IAAI,CAACC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;IAClD,IAAIF,MAAM,CAACG,YAAY,KAAKZ,CAAC,CAACa,QAAQ,EAAE;MACtC,IAAIC,gBAAgB,GAAG,CAAEd,CAAC,CAACe,QAAQ,EAAEf,CAAC,CAACgB,YAAY,CAAE;MACrD,IAAIP,MAAM,CAACQ,UAAU,CAAC,CAAC,IAAKH,gBAAgB,CAACH,OAAO,CAACF,MAAM,CAACS,KAAK,CAAC,IAAI,CAAE,EAAE;QACxER,IAAI,IAAI,8BAA8B;MACxC;IACF;EACF;EACA,OAAOA,IAAI;AACb,CAAC;AAEDS,MAAM,CAACC,OAAO,CAACjB,6BAA6B,GAAGA,6BAA6B;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASkB,2BAA2BA,CAACjB,OAAO,EAAE;EAC5CF,aAAa,CAACG,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;AACnC;AAEAN,IAAI,CAACQ,QAAQ,CAACe,2BAA2B,EAAEnB,aAAa,CAAC;AAEzDmB,2BAA2B,CAACd,SAAS,CAACe,SAAS,GAAG,UAAUC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAE;EAC/E,IAAIC,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,IAAI,CAAC;EAC5BD,KAAK,GAAGA,KAAK,CAACE,GAAG,CAAC,UAAUC,IAAI,EAAE;IAChC,OAAO5B,EAAE,CAAC6B,OAAO,CAACL,MAAM,GAAGI,IAAI,CAAC;EAClC,CAAC,CAAC;EACF,OAAOH,KAAK,CAACK,IAAI,CAAC,IAAI,CAAC;AACzB,CAAC;AACDZ,MAAM,CAACC,OAAO,CAACC,2BAA2B,GAAGA,2BAA2B;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASW,oBAAoBA,CAAC5B,OAAO,EAAE;EACrCiB,2BAA2B,CAAChB,IAAI,CAAC,IAAI,EAAED,OAAO,CAAC;AACjD;AAEAN,IAAI,CAACQ,QAAQ,CAAC0B,oBAAoB,EAAEX,2BAA2B,CAAC;AAEhEW,oBAAoB,CAACzB,SAAS,CAAC0B,WAAW,GAAG,UAAUV,IAAI,EAAE;EAC3D,OAAOA,IAAI,CAACI,KAAK,CAAC,IAAI,CAAC;AACzB,CAAC;AAEDR,MAAM,CAACC,OAAO,CAACY,oBAAoB,GAAGA,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}