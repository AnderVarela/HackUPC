{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configure = configure;\nexports.getConfig = getConfig;\nexports.runWithExpensiveErrorDiagnosticsDisabled = runWithExpensiveErrorDiagnosticsDisabled;\nvar _prettyDom = require(\"./pretty-dom\");\n// It would be cleaner for this to live inside './queries', but\n// other parts of the code assume that all exports from\n// './queries' are query functions.\nlet config = {\n  testIdAttribute: 'data-testid',\n  asyncUtilTimeout: 1000,\n  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.\n  // forcing react-testing-library to wrap all async functions would've been\n  // a total nightmare (consider wrapping every findBy* query and then also\n  // updating `within` so those would be wrapped too. Total nightmare).\n  // so we have this config option that's really only intended for\n  // react-testing-library to use. For that reason, this feature will remain\n  // undocumented.\n  asyncWrapper: cb => cb(),\n  unstable_advanceTimersWrapper: cb => cb(),\n  eventWrapper: cb => cb(),\n  // default value for the `hidden` option in `ByRole` queries\n  defaultHidden: false,\n  // default value for the `ignore` option in `ByText` queries\n  defaultIgnore: 'script, style',\n  // showOriginalStackTrace flag to show the full error stack traces for async errors\n  showOriginalStackTrace: false,\n  // throw errors w/ suggestions for better queries. Opt in so off by default.\n  throwSuggestions: false,\n  // called when getBy* queries fail. (message, container) => Error\n  getElementError(message, container) {\n    const prettifiedDOM = (0, _prettyDom.prettyDOM)(container);\n    const error = new Error([message, `Ignored nodes: comments, ${config.defaultIgnore}\\n${prettifiedDOM}`].filter(Boolean).join('\\n\\n'));\n    error.name = 'TestingLibraryElementError';\n    return error;\n  },\n  _disableExpensiveErrorDiagnostics: false,\n  computedStyleSupportsPseudoElements: false\n};\nfunction runWithExpensiveErrorDiagnosticsDisabled(callback) {\n  try {\n    config._disableExpensiveErrorDiagnostics = true;\n    return callback();\n  } finally {\n    config._disableExpensiveErrorDiagnostics = false;\n  }\n}\nfunction configure(newConfig) {\n  if (typeof newConfig === 'function') {\n    // Pass the existing config out to the provided function\n    // and accept a delta in return\n    newConfig = newConfig(config);\n  }\n\n  // Merge the incoming config delta\n  config = {\n    ...config,\n    ...newConfig\n  };\n}\nfunction getConfig() {\n  return config;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","configure","getConfig","runWithExpensiveErrorDiagnosticsDisabled","_prettyDom","require","config","testIdAttribute","asyncUtilTimeout","asyncWrapper","cb","unstable_advanceTimersWrapper","eventWrapper","defaultHidden","defaultIgnore","showOriginalStackTrace","throwSuggestions","getElementError","message","container","prettifiedDOM","prettyDOM","error","Error","filter","Boolean","join","name","_disableExpensiveErrorDiagnostics","computedStyleSupportsPseudoElements","callback","newConfig"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/config.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configure = configure;\nexports.getConfig = getConfig;\nexports.runWithExpensiveErrorDiagnosticsDisabled = runWithExpensiveErrorDiagnosticsDisabled;\nvar _prettyDom = require(\"./pretty-dom\");\n// It would be cleaner for this to live inside './queries', but\n// other parts of the code assume that all exports from\n// './queries' are query functions.\nlet config = {\n  testIdAttribute: 'data-testid',\n  asyncUtilTimeout: 1000,\n  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.\n  // forcing react-testing-library to wrap all async functions would've been\n  // a total nightmare (consider wrapping every findBy* query and then also\n  // updating `within` so those would be wrapped too. Total nightmare).\n  // so we have this config option that's really only intended for\n  // react-testing-library to use. For that reason, this feature will remain\n  // undocumented.\n  asyncWrapper: cb => cb(),\n  unstable_advanceTimersWrapper: cb => cb(),\n  eventWrapper: cb => cb(),\n  // default value for the `hidden` option in `ByRole` queries\n  defaultHidden: false,\n  // default value for the `ignore` option in `ByText` queries\n  defaultIgnore: 'script, style',\n  // showOriginalStackTrace flag to show the full error stack traces for async errors\n  showOriginalStackTrace: false,\n  // throw errors w/ suggestions for better queries. Opt in so off by default.\n  throwSuggestions: false,\n  // called when getBy* queries fail. (message, container) => Error\n  getElementError(message, container) {\n    const prettifiedDOM = (0, _prettyDom.prettyDOM)(container);\n    const error = new Error([message, `Ignored nodes: comments, ${config.defaultIgnore}\\n${prettifiedDOM}`].filter(Boolean).join('\\n\\n'));\n    error.name = 'TestingLibraryElementError';\n    return error;\n  },\n  _disableExpensiveErrorDiagnostics: false,\n  computedStyleSupportsPseudoElements: false\n};\nfunction runWithExpensiveErrorDiagnosticsDisabled(callback) {\n  try {\n    config._disableExpensiveErrorDiagnostics = true;\n    return callback();\n  } finally {\n    config._disableExpensiveErrorDiagnostics = false;\n  }\n}\nfunction configure(newConfig) {\n  if (typeof newConfig === 'function') {\n    // Pass the existing config out to the provided function\n    // and accept a delta in return\n    newConfig = newConfig(config);\n  }\n\n  // Merge the incoming config delta\n  config = {\n    ...config,\n    ...newConfig\n  };\n}\nfunction getConfig() {\n  return config;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,SAAS,GAAGA,SAAS;AAC7BF,OAAO,CAACG,SAAS,GAAGA,SAAS;AAC7BH,OAAO,CAACI,wCAAwC,GAAGA,wCAAwC;AAC3F,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC;AACA;AACA;AACA,IAAIC,MAAM,GAAG;EACXC,eAAe,EAAE,aAAa;EAC9BC,gBAAgB,EAAE,IAAI;EACtB;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAEC,EAAE,IAAIA,EAAE,CAAC,CAAC;EACxBC,6BAA6B,EAAED,EAAE,IAAIA,EAAE,CAAC,CAAC;EACzCE,YAAY,EAAEF,EAAE,IAAIA,EAAE,CAAC,CAAC;EACxB;EACAG,aAAa,EAAE,KAAK;EACpB;EACAC,aAAa,EAAE,eAAe;EAC9B;EACAC,sBAAsB,EAAE,KAAK;EAC7B;EACAC,gBAAgB,EAAE,KAAK;EACvB;EACAC,eAAeA,CAACC,OAAO,EAAEC,SAAS,EAAE;IAClC,MAAMC,aAAa,GAAG,CAAC,CAAC,EAAEhB,UAAU,CAACiB,SAAS,EAAEF,SAAS,CAAC;IAC1D,MAAMG,KAAK,GAAG,IAAIC,KAAK,CAAC,CAACL,OAAO,EAAG,4BAA2BZ,MAAM,CAACQ,aAAc,KAAIM,aAAc,EAAC,CAAC,CAACI,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrIJ,KAAK,CAACK,IAAI,GAAG,4BAA4B;IACzC,OAAOL,KAAK;EACd,CAAC;EACDM,iCAAiC,EAAE,KAAK;EACxCC,mCAAmC,EAAE;AACvC,CAAC;AACD,SAAS1B,wCAAwCA,CAAC2B,QAAQ,EAAE;EAC1D,IAAI;IACFxB,MAAM,CAACsB,iCAAiC,GAAG,IAAI;IAC/C,OAAOE,QAAQ,CAAC,CAAC;EACnB,CAAC,SAAS;IACRxB,MAAM,CAACsB,iCAAiC,GAAG,KAAK;EAClD;AACF;AACA,SAAS3B,SAASA,CAAC8B,SAAS,EAAE;EAC5B,IAAI,OAAOA,SAAS,KAAK,UAAU,EAAE;IACnC;IACA;IACAA,SAAS,GAAGA,SAAS,CAACzB,MAAM,CAAC;EAC/B;;EAEA;EACAA,MAAM,GAAG;IACP,GAAGA,MAAM;IACT,GAAGyB;EACL,CAAC;AACH;AACA,SAAS7B,SAASA,CAAA,EAAG;EACnB,OAAOI,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}