{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst shared = root => {\n  const sch = {\n    nullable: {\n      type: \"boolean\"\n    },\n    metadata: {\n      optionalProperties: {\n        union: {\n          elements: {\n            ref: \"schema\"\n          }\n        }\n      },\n      additionalProperties: true\n    }\n  };\n  if (root) sch.definitions = {\n    values: {\n      ref: \"schema\"\n    }\n  };\n  return sch;\n};\nconst emptyForm = root => ({\n  optionalProperties: shared(root)\n});\nconst refForm = root => ({\n  properties: {\n    ref: {\n      type: \"string\"\n    }\n  },\n  optionalProperties: shared(root)\n});\nconst typeForm = root => ({\n  properties: {\n    type: {\n      enum: [\"boolean\", \"timestamp\", \"string\", \"float32\", \"float64\", \"int8\", \"uint8\", \"int16\", \"uint16\", \"int32\", \"uint32\"]\n    }\n  },\n  optionalProperties: shared(root)\n});\nconst enumForm = root => ({\n  properties: {\n    enum: {\n      elements: {\n        type: \"string\"\n      }\n    }\n  },\n  optionalProperties: shared(root)\n});\nconst elementsForm = root => ({\n  properties: {\n    elements: {\n      ref: \"schema\"\n    }\n  },\n  optionalProperties: shared(root)\n});\nconst propertiesForm = root => ({\n  properties: {\n    properties: {\n      values: {\n        ref: \"schema\"\n      }\n    }\n  },\n  optionalProperties: {\n    optionalProperties: {\n      values: {\n        ref: \"schema\"\n      }\n    },\n    additionalProperties: {\n      type: \"boolean\"\n    },\n    ...shared(root)\n  }\n});\nconst optionalPropertiesForm = root => ({\n  properties: {\n    optionalProperties: {\n      values: {\n        ref: \"schema\"\n      }\n    }\n  },\n  optionalProperties: {\n    additionalProperties: {\n      type: \"boolean\"\n    },\n    ...shared(root)\n  }\n});\nconst discriminatorForm = root => ({\n  properties: {\n    discriminator: {\n      type: \"string\"\n    },\n    mapping: {\n      values: {\n        metadata: {\n          union: [propertiesForm(false), optionalPropertiesForm(false)]\n        }\n      }\n    }\n  },\n  optionalProperties: shared(root)\n});\nconst valuesForm = root => ({\n  properties: {\n    values: {\n      ref: \"schema\"\n    }\n  },\n  optionalProperties: shared(root)\n});\nconst schema = root => ({\n  metadata: {\n    union: [emptyForm, refForm, typeForm, enumForm, elementsForm, propertiesForm, optionalPropertiesForm, discriminatorForm, valuesForm].map(s => s(root))\n  }\n});\nconst jtdMetaSchema = {\n  definitions: {\n    schema: schema(false)\n  },\n  ...schema(true)\n};\nexports.default = jtdMetaSchema;","map":{"version":3,"names":["shared","root","sch","nullable","type","metadata","optionalProperties","union","elements","ref","additionalProperties","definitions","values","emptyForm","refForm","properties","typeForm","enum","enumForm","elementsForm","propertiesForm","optionalPropertiesForm","discriminatorForm","discriminator","mapping","valuesForm","schema","map","s","jtdMetaSchema","exports","default"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\refs\\jtd-schema.ts"],"sourcesContent":["import {SchemaObject} from \"../types\"\n\ntype MetaSchema = (root: boolean) => SchemaObject\n\nconst shared: MetaSchema = (root) => {\n  const sch: SchemaObject = {\n    nullable: {type: \"boolean\"},\n    metadata: {\n      optionalProperties: {\n        union: {elements: {ref: \"schema\"}},\n      },\n      additionalProperties: true,\n    },\n  }\n  if (root) sch.definitions = {values: {ref: \"schema\"}}\n  return sch\n}\n\nconst emptyForm: MetaSchema = (root) => ({\n  optionalProperties: shared(root),\n})\n\nconst refForm: MetaSchema = (root) => ({\n  properties: {\n    ref: {type: \"string\"},\n  },\n  optionalProperties: shared(root),\n})\n\nconst typeForm: MetaSchema = (root) => ({\n  properties: {\n    type: {\n      enum: [\n        \"boolean\",\n        \"timestamp\",\n        \"string\",\n        \"float32\",\n        \"float64\",\n        \"int8\",\n        \"uint8\",\n        \"int16\",\n        \"uint16\",\n        \"int32\",\n        \"uint32\",\n      ],\n    },\n  },\n  optionalProperties: shared(root),\n})\n\nconst enumForm: MetaSchema = (root) => ({\n  properties: {\n    enum: {elements: {type: \"string\"}},\n  },\n  optionalProperties: shared(root),\n})\n\nconst elementsForm: MetaSchema = (root) => ({\n  properties: {\n    elements: {ref: \"schema\"},\n  },\n  optionalProperties: shared(root),\n})\n\nconst propertiesForm: MetaSchema = (root) => ({\n  properties: {\n    properties: {values: {ref: \"schema\"}},\n  },\n  optionalProperties: {\n    optionalProperties: {values: {ref: \"schema\"}},\n    additionalProperties: {type: \"boolean\"},\n    ...shared(root),\n  },\n})\n\nconst optionalPropertiesForm: MetaSchema = (root) => ({\n  properties: {\n    optionalProperties: {values: {ref: \"schema\"}},\n  },\n  optionalProperties: {\n    additionalProperties: {type: \"boolean\"},\n    ...shared(root),\n  },\n})\n\nconst discriminatorForm: MetaSchema = (root) => ({\n  properties: {\n    discriminator: {type: \"string\"},\n    mapping: {\n      values: {\n        metadata: {\n          union: [propertiesForm(false), optionalPropertiesForm(false)],\n        },\n      },\n    },\n  },\n  optionalProperties: shared(root),\n})\n\nconst valuesForm: MetaSchema = (root) => ({\n  properties: {\n    values: {ref: \"schema\"},\n  },\n  optionalProperties: shared(root),\n})\n\nconst schema: MetaSchema = (root) => ({\n  metadata: {\n    union: [\n      emptyForm,\n      refForm,\n      typeForm,\n      enumForm,\n      elementsForm,\n      propertiesForm,\n      optionalPropertiesForm,\n      discriminatorForm,\n      valuesForm,\n    ].map((s) => s(root)),\n  },\n})\n\nconst jtdMetaSchema: SchemaObject = {\n  definitions: {\n    schema: schema(false),\n  },\n  ...schema(true),\n}\n\nexport default jtdMetaSchema\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}