{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst semver = __importStar(require(\"semver\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util = __importStar(require(\"../util\"));\nconst is3dot5 = semver.satisfies(ts.version, `>= 3.5.0 || >= 3.5.1-rc || >= 3.5.0-beta`, {\n  includePrerelease: true\n});\nconst is3dot9 = is3dot5 && semver.satisfies(ts.version, `>= 3.9.0 || >= 3.9.1-rc || >= 3.9.0-beta`, {\n  includePrerelease: true\n});\nexports.default = util.createRule({\n  name: 'no-unnecessary-type-constraint',\n  meta: {\n    docs: {\n      description: 'Disallow unnecessary constraints on generic types',\n      recommended: 'error'\n    },\n    hasSuggestions: true,\n    messages: {\n      unnecessaryConstraint: 'Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary.',\n      removeUnnecessaryConstraint: 'Remove the unnecessary `{{constraint}}` constraint.'\n    },\n    schema: [],\n    type: 'suggestion'\n  },\n  defaultOptions: [],\n  create(context) {\n    if (!is3dot5) {\n      return {};\n    }\n    // In theory, we could use the type checker for more advanced constraint types...\n    // ...but in practice, these types are rare, and likely not worth requiring type info.\n    // https://github.com/typescript-eslint/typescript-eslint/pull/2516#discussion_r495731858\n    const unnecessaryConstraints = is3dot9 ? new Map([[utils_1.AST_NODE_TYPES.TSAnyKeyword, 'any'], [utils_1.AST_NODE_TYPES.TSUnknownKeyword, 'unknown']]) : new Map([[utils_1.AST_NODE_TYPES.TSUnknownKeyword, 'unknown']]);\n    const inJsx = context.getFilename().toLowerCase().endsWith('tsx');\n    const source = context.getSourceCode();\n    const checkNode = (node, inArrowFunction) => {\n      const constraint = unnecessaryConstraints.get(node.constraint.type);\n      function shouldAddTrailingComma() {\n        if (!inArrowFunction || !inJsx) {\n          return false;\n        }\n        // Only <T>() => {} would need trailing comma\n        return node.parent.params.length === 1 && source.getTokensAfter(node)[0].value !== ',' && !node.default;\n      }\n      if (constraint) {\n        context.report({\n          data: {\n            constraint,\n            name: node.name.name\n          },\n          suggest: [{\n            messageId: 'removeUnnecessaryConstraint',\n            data: {\n              constraint\n            },\n            fix(fixer) {\n              return fixer.replaceTextRange([node.name.range[1], node.constraint.range[1]], shouldAddTrailingComma() ? ',' : '');\n            }\n          }],\n          messageId: 'unnecessaryConstraint',\n          node\n        });\n      }\n    };\n    return {\n      ':not(ArrowFunctionExpression) > TSTypeParameterDeclaration > TSTypeParameter[constraint]'(node) {\n        checkNode(node, false);\n      },\n      'ArrowFunctionExpression > TSTypeParameterDeclaration > TSTypeParameter[constraint]'(node) {\n        checkNode(node, true);\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","semver","__importStar","ts","util","is3dot5","satisfies","version","includePrerelease","is3dot9","exports","default","createRule","name","meta","docs","description","recommended","hasSuggestions","messages","unnecessaryConstraint","removeUnnecessaryConstraint","schema","type","defaultOptions","create","context","unnecessaryConstraints","Map","AST_NODE_TYPES","TSAnyKeyword","TSUnknownKeyword","inJsx","getFilename","toLowerCase","endsWith","source","getSourceCode","checkNode","node","inArrowFunction","constraint","get","shouldAddTrailingComma","parent","params","length","getTokensAfter","value","report","data","suggest","messageId","fix","fixer","replaceTextRange","range",":not(ArrowFunctionExpression) > TSTypeParameterDeclaration > TSTypeParameter[constraint]","ArrowFunctionExpression > TSTypeParameterDeclaration > TSTypeParameter[constraint]"],"sources":["../../src/rules/no-unnecessary-type-constraint.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}