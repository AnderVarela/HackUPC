{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar anObjectOrUndefined = require('../internals/an-object-or-undefined');\nvar aString = require('../internals/a-string');\nvar hasOwn = require('../internals/has-own-property');\nvar arrayFromConstructorAndList = require('../internals/array-from-constructor-and-list');\nvar base64Map = require('../internals/base64-map');\nvar getAlphabetOption = require('../internals/get-alphabet-option');\nvar base64Alphabet = base64Map.c2i;\nvar base64UrlAlphabet = base64Map.c2iUrl;\nvar Uint8Array = global.Uint8Array;\nvar SyntaxError = global.SyntaxError;\nvar charAt = uncurryThis(''.charAt);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\nvar push = uncurryThis([].push);\nvar SPACES = /[\\t\\n\\f\\r ]/g;\nvar EXTRA_BITS = 'Extra bits';\n\n// `Uint8Array.fromBase64` method\n// https://github.com/tc39/proposal-arraybuffer-base64\nif (Uint8Array) $({\n  target: 'Uint8Array',\n  stat: true,\n  forced: true\n}, {\n  fromBase64: function fromBase64(string /* , options */) {\n    aString(string);\n    var options = arguments.length > 1 ? anObjectOrUndefined(arguments[1]) : undefined;\n    var alphabet = getAlphabetOption(options) === 'base64' ? base64Alphabet : base64UrlAlphabet;\n    var strict = options ? !!options.strict : false;\n    var input = strict ? string : replace(string, SPACES, '');\n    if (input.length % 4 === 0) {\n      if (stringSlice(input, -2) === '==') input = stringSlice(input, 0, -2);else if (stringSlice(input, -1) === '=') input = stringSlice(input, 0, -1);\n    } else if (strict) throw new SyntaxError('Input is not correctly padded');\n    var lastChunkSize = input.length % 4;\n    switch (lastChunkSize) {\n      case 1:\n        throw new SyntaxError('Bad input length');\n      case 2:\n        input += 'AA';\n        break;\n      case 3:\n        input += 'A';\n    }\n    var bytes = [];\n    var i = 0;\n    var inputLength = input.length;\n    var at = function (shift) {\n      var chr = charAt(input, i + shift);\n      if (!hasOwn(alphabet, chr)) throw new SyntaxError('Bad char in input: \"' + chr + '\"');\n      return alphabet[chr] << 18 - 6 * shift;\n    };\n    for (; i < inputLength; i += 4) {\n      var triplet = at(0) + at(1) + at(2) + at(3);\n      push(bytes, triplet >> 16 & 255, triplet >> 8 & 255, triplet & 255);\n    }\n    var byteLength = bytes.length;\n    if (lastChunkSize === 2) {\n      if (strict && bytes[byteLength - 2] !== 0) throw new SyntaxError(EXTRA_BITS);\n      byteLength -= 2;\n    } else if (lastChunkSize === 3) {\n      if (strict && bytes[byteLength - 1] !== 0) throw new SyntaxError(EXTRA_BITS);\n      byteLength--;\n    }\n    return arrayFromConstructorAndList(Uint8Array, bytes, byteLength);\n  }\n});","map":{"version":3,"names":["$","require","global","uncurryThis","anObjectOrUndefined","aString","hasOwn","arrayFromConstructorAndList","base64Map","getAlphabetOption","base64Alphabet","c2i","base64UrlAlphabet","c2iUrl","Uint8Array","SyntaxError","charAt","replace","stringSlice","slice","push","SPACES","EXTRA_BITS","target","stat","forced","fromBase64","string","options","arguments","length","undefined","alphabet","strict","input","lastChunkSize","bytes","i","inputLength","at","shift","chr","triplet","byteLength"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/core-js/modules/esnext.uint8-array.from-base64.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar anObjectOrUndefined = require('../internals/an-object-or-undefined');\nvar aString = require('../internals/a-string');\nvar hasOwn = require('../internals/has-own-property');\nvar arrayFromConstructorAndList = require('../internals/array-from-constructor-and-list');\nvar base64Map = require('../internals/base64-map');\nvar getAlphabetOption = require('../internals/get-alphabet-option');\n\nvar base64Alphabet = base64Map.c2i;\nvar base64UrlAlphabet = base64Map.c2iUrl;\n\nvar Uint8Array = global.Uint8Array;\nvar SyntaxError = global.SyntaxError;\nvar charAt = uncurryThis(''.charAt);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\nvar push = uncurryThis([].push);\nvar SPACES = /[\\t\\n\\f\\r ]/g;\nvar EXTRA_BITS = 'Extra bits';\n\n// `Uint8Array.fromBase64` method\n// https://github.com/tc39/proposal-arraybuffer-base64\nif (Uint8Array) $({ target: 'Uint8Array', stat: true, forced: true }, {\n  fromBase64: function fromBase64(string /* , options */) {\n    aString(string);\n    var options = arguments.length > 1 ? anObjectOrUndefined(arguments[1]) : undefined;\n    var alphabet = getAlphabetOption(options) === 'base64' ? base64Alphabet : base64UrlAlphabet;\n    var strict = options ? !!options.strict : false;\n\n    var input = strict ? string : replace(string, SPACES, '');\n\n    if (input.length % 4 === 0) {\n      if (stringSlice(input, -2) === '==') input = stringSlice(input, 0, -2);\n      else if (stringSlice(input, -1) === '=') input = stringSlice(input, 0, -1);\n    } else if (strict) throw new SyntaxError('Input is not correctly padded');\n\n    var lastChunkSize = input.length % 4;\n\n    switch (lastChunkSize) {\n      case 1: throw new SyntaxError('Bad input length');\n      case 2: input += 'AA'; break;\n      case 3: input += 'A';\n    }\n\n    var bytes = [];\n    var i = 0;\n    var inputLength = input.length;\n\n    var at = function (shift) {\n      var chr = charAt(input, i + shift);\n      if (!hasOwn(alphabet, chr)) throw new SyntaxError('Bad char in input: \"' + chr + '\"');\n      return alphabet[chr] << (18 - 6 * shift);\n    };\n\n    for (; i < inputLength; i += 4) {\n      var triplet = at(0) + at(1) + at(2) + at(3);\n      push(bytes, (triplet >> 16) & 255, (triplet >> 8) & 255, triplet & 255);\n    }\n\n    var byteLength = bytes.length;\n\n    if (lastChunkSize === 2) {\n      if (strict && bytes[byteLength - 2] !== 0) throw new SyntaxError(EXTRA_BITS);\n      byteLength -= 2;\n    } else if (lastChunkSize === 3) {\n      if (strict && bytes[byteLength - 1] !== 0) throw new SyntaxError(EXTRA_BITS);\n      byteLength--;\n    }\n\n    return arrayFromConstructorAndList(Uint8Array, bytes, byteLength);\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}