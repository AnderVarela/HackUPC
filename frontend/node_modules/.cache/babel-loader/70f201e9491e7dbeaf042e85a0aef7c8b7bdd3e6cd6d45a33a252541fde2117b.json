{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pruneAsync = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst print_help_1 = require(\"./utils/print-help\");\nconst runEslint_1 = require(\"./runEslint\");\nconst constants_1 = require(\"../constants\");\nconst bulk_suppressions_file_1 = require(\"../bulk-suppressions-file\");\nasync function pruneAsync() {\n  const args = process.argv.slice(3);\n  if (args.includes('--help') || args.includes('-h')) {\n    (0, print_help_1.printPruneHelp)();\n    process.exit(0);\n  }\n  if (args.length > 0) {\n    throw new Error(`@rushstack/eslint-bulk: Unknown arguments: ${args.join(' ')}`);\n  }\n  const normalizedCwd = process.cwd().replace(/\\\\/g, '/');\n  const allFiles = await getAllFilesWithExistingSuppressionsForCwdAsync(normalizedCwd);\n  if (allFiles.length > 0) {\n    process.env[constants_1.ESLINT_BULK_PRUNE_ENV_VAR_NAME] = '1';\n    console.log(`Pruning suppressions for ${allFiles.length} files...`);\n    await (0, runEslint_1.runEslintAsync)(allFiles, 'prune');\n  } else {\n    console.log('No files with existing suppressions found.');\n    (0, bulk_suppressions_file_1.deleteBulkSuppressionsFileInEslintrcFolder)(normalizedCwd);\n  }\n}\nexports.pruneAsync = pruneAsync;\nasync function getAllFilesWithExistingSuppressionsForCwdAsync(normalizedCwd) {\n  const {\n    jsonObject: bulkSuppressionsConfigJson\n  } = (0, bulk_suppressions_file_1.getSuppressionsConfigForEslintrcFolderPath)(normalizedCwd);\n  const allFiles = new Set();\n  for (const {\n    file: filePath\n  } of bulkSuppressionsConfigJson.suppressions) {\n    allFiles.add(filePath);\n  }\n  const allFilesArray = Array.from(allFiles);\n  const allExistingFiles = [];\n  // TODO: limit parallelism here with something similar to `Async.forEachAsync` from `node-core-library`.\n  await Promise.all(allFilesArray.map(async filePath => {\n    try {\n      await fs_1.default.promises.access(filePath, fs_1.default.constants.F_OK);\n      allExistingFiles.push(filePath);\n    } catch (_a) {\n      // Doesn't exist - ignore\n    }\n  }));\n  console.log(`Found ${allExistingFiles.length} files with existing suppressions.`);\n  const deletedCount = allFilesArray.length - allExistingFiles.length;\n  if (deletedCount > 0) {\n    console.log(`${deletedCount} files with suppressions were deleted.`);\n  }\n  return allExistingFiles;\n}","map":{"version":3,"names":["fs_1","__importDefault","require","print_help_1","runEslint_1","constants_1","bulk_suppressions_file_1","pruneAsync","args","process","argv","slice","includes","printPruneHelp","exit","length","Error","join","normalizedCwd","cwd","replace","allFiles","getAllFilesWithExistingSuppressionsForCwdAsync","env","ESLINT_BULK_PRUNE_ENV_VAR_NAME","console","log","runEslintAsync","deleteBulkSuppressionsFileInEslintrcFolder","exports","jsonObject","bulkSuppressionsConfigJson","getSuppressionsConfigForEslintrcFolderPath","Set","file","filePath","suppressions","add","allFilesArray","Array","from","allExistingFiles","Promise","all","map","default","promises","access","constants","F_OK","push","_a","deletedCount"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@rushstack\\eslint-patch\\src\\eslint-bulk-suppressions\\cli\\prune.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport fs from 'fs';\n\nimport { printPruneHelp } from './utils/print-help';\nimport { runEslintAsync } from './runEslint';\nimport { ESLINT_BULK_PRUNE_ENV_VAR_NAME } from '../constants';\nimport {\n  deleteBulkSuppressionsFileInEslintrcFolder,\n  getSuppressionsConfigForEslintrcFolderPath\n} from '../bulk-suppressions-file';\n\nexport async function pruneAsync(): Promise<void> {\n  const args: string[] = process.argv.slice(3);\n\n  if (args.includes('--help') || args.includes('-h')) {\n    printPruneHelp();\n    process.exit(0);\n  }\n\n  if (args.length > 0) {\n    throw new Error(`@rushstack/eslint-bulk: Unknown arguments: ${args.join(' ')}`);\n  }\n\n  const normalizedCwd: string = process.cwd().replace(/\\\\/g, '/');\n  const allFiles: string[] = await getAllFilesWithExistingSuppressionsForCwdAsync(normalizedCwd);\n  if (allFiles.length > 0) {\n    process.env[ESLINT_BULK_PRUNE_ENV_VAR_NAME] = '1';\n    console.log(`Pruning suppressions for ${allFiles.length} files...`);\n    await runEslintAsync(allFiles, 'prune');\n  } else {\n    console.log('No files with existing suppressions found.');\n    deleteBulkSuppressionsFileInEslintrcFolder(normalizedCwd);\n  }\n}\n\nasync function getAllFilesWithExistingSuppressionsForCwdAsync(normalizedCwd: string): Promise<string[]> {\n  const { jsonObject: bulkSuppressionsConfigJson } =\n    getSuppressionsConfigForEslintrcFolderPath(normalizedCwd);\n  const allFiles: Set<string> = new Set();\n  for (const { file: filePath } of bulkSuppressionsConfigJson.suppressions) {\n    allFiles.add(filePath);\n  }\n\n  const allFilesArray: string[] = Array.from(allFiles);\n\n  const allExistingFiles: string[] = [];\n  // TODO: limit parallelism here with something similar to `Async.forEachAsync` from `node-core-library`.\n  await Promise.all(\n    allFilesArray.map(async (filePath: string) => {\n      try {\n        await fs.promises.access(filePath, fs.constants.F_OK);\n        allExistingFiles.push(filePath);\n      } catch {\n        // Doesn't exist - ignore\n      }\n    })\n  );\n\n  console.log(`Found ${allExistingFiles.length} files with existing suppressions.`);\n  const deletedCount: number = allFilesArray.length - allExistingFiles.length;\n  if (deletedCount > 0) {\n    console.log(`${deletedCount} files with suppressions were deleted.`);\n  }\n\n  return allExistingFiles;\n}\n"],"mappings":";;AAAA;AACA;;;;;;;;;;AAEA,MAAAA,IAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,WAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AACA,MAAAI,wBAAA,GAAAJ,OAAA;AAKO,eAAeK,UAAUA,CAAA;EAC9B,MAAMC,IAAI,GAAaC,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;EAE5C,IAAIH,IAAI,CAACI,QAAQ,CAAC,QAAQ,CAAC,IAAIJ,IAAI,CAACI,QAAQ,CAAC,IAAI,CAAC,EAAE;IAClD,IAAAT,YAAA,CAAAU,cAAc,GAAE;IAChBJ,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC;EACjB;EAEA,IAAIN,IAAI,CAACO,MAAM,GAAG,CAAC,EAAE;IACnB,MAAM,IAAIC,KAAK,CAAC,8CAA8CR,IAAI,CAACS,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;EACjF;EAEA,MAAMC,aAAa,GAAWT,OAAO,CAACU,GAAG,EAAE,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EAC/D,MAAMC,QAAQ,GAAa,MAAMC,8CAA8C,CAACJ,aAAa,CAAC;EAC9F,IAAIG,QAAQ,CAACN,MAAM,GAAG,CAAC,EAAE;IACvBN,OAAO,CAACc,GAAG,CAAClB,WAAA,CAAAmB,8BAA8B,CAAC,GAAG,GAAG;IACjDC,OAAO,CAACC,GAAG,CAAC,4BAA4BL,QAAQ,CAACN,MAAM,WAAW,CAAC;IACnE,MAAM,IAAAX,WAAA,CAAAuB,cAAc,EAACN,QAAQ,EAAE,OAAO,CAAC;EACzC,CAAC,MAAM;IACLI,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IACzD,IAAApB,wBAAA,CAAAsB,0CAA0C,EAACV,aAAa,CAAC;EAC3D;AACF;AAtBAW,OAAA,CAAAtB,UAAA,GAAAA,UAAA;AAwBA,eAAee,8CAA8CA,CAACJ,aAAqB;EACjF,MAAM;IAAEY,UAAU,EAAEC;EAA0B,CAAE,GAC9C,IAAAzB,wBAAA,CAAA0B,0CAA0C,EAACd,aAAa,CAAC;EAC3D,MAAMG,QAAQ,GAAgB,IAAIY,GAAG,EAAE;EACvC,KAAK,MAAM;IAAEC,IAAI,EAAEC;EAAQ,CAAE,IAAIJ,0BAA0B,CAACK,YAAY,EAAE;IACxEf,QAAQ,CAACgB,GAAG,CAACF,QAAQ,CAAC;EACxB;EAEA,MAAMG,aAAa,GAAaC,KAAK,CAACC,IAAI,CAACnB,QAAQ,CAAC;EAEpD,MAAMoB,gBAAgB,GAAa,EAAE;EACrC;EACA,MAAMC,OAAO,CAACC,GAAG,CACfL,aAAa,CAACM,GAAG,CAAC,MAAOT,QAAgB,IAAI;IAC3C,IAAI;MACF,MAAMnC,IAAA,CAAA6C,OAAE,CAACC,QAAQ,CAACC,MAAM,CAACZ,QAAQ,EAAEnC,IAAA,CAAA6C,OAAE,CAACG,SAAS,CAACC,IAAI,CAAC;MACrDR,gBAAgB,CAACS,IAAI,CAACf,QAAQ,CAAC;IACjC,CAAC,CAAC,OAAAgB,EAAA,EAAM;MACN;IAAA;EAEJ,CAAC,CAAC,CACH;EAED1B,OAAO,CAACC,GAAG,CAAC,SAASe,gBAAgB,CAAC1B,MAAM,oCAAoC,CAAC;EACjF,MAAMqC,YAAY,GAAWd,aAAa,CAACvB,MAAM,GAAG0B,gBAAgB,CAAC1B,MAAM;EAC3E,IAAIqC,YAAY,GAAG,CAAC,EAAE;IACpB3B,OAAO,CAACC,GAAG,CAAC,GAAG0B,YAAY,wCAAwC,CAAC;EACtE;EAEA,OAAOX,gBAAgB;AACzB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}