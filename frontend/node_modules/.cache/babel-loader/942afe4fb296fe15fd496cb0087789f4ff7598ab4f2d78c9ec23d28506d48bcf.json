{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explorer = void 0;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _ExplorerBase = require(\"./ExplorerBase\");\nvar _readFile = require(\"./readFile\");\nvar _cacheWrapper = require(\"./cacheWrapper\");\nvar _getDirectory = require(\"./getDirectory\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass Explorer extends _ExplorerBase.ExplorerBase {\n  constructor(options) {\n    super(options);\n  }\n  async search(searchFrom = process.cwd()) {\n    const startDirectory = await (0, _getDirectory.getDirectory)(searchFrom);\n    const result = await this.searchFromDirectory(startDirectory);\n    return result;\n  }\n  async searchFromDirectory(dir) {\n    const absoluteDir = _path.default.resolve(process.cwd(), dir);\n    const run = async () => {\n      const result = await this.searchDirectory(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n      if (nextDir) {\n        return this.searchFromDirectory(nextDir);\n      }\n      const transformResult = await this.config.transform(result);\n      return transformResult;\n    };\n    if (this.searchCache) {\n      return (0, _cacheWrapper.cacheWrapper)(this.searchCache, absoluteDir, run);\n    }\n    return run();\n  }\n  async searchDirectory(dir) {\n    for await (const place of this.config.searchPlaces) {\n      const placeResult = await this.loadSearchPlace(dir, place);\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    } // config not found\n\n    return null;\n  }\n  async loadSearchPlace(dir, place) {\n    const filepath = _path.default.join(dir, place);\n    const fileContents = await (0, _readFile.readFile)(filepath);\n    const result = await this.createCosmiconfigResult(filepath, fileContents);\n    return result;\n  }\n  async loadFileContent(filepath, content) {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = await loader(filepath, content);\n    return loaderResult;\n  }\n  async createCosmiconfigResult(filepath, content) {\n    const fileContent = await this.loadFileContent(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n    return result;\n  }\n  async load(filepath) {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n    const runLoad = async () => {\n      const fileContents = await (0, _readFile.readFile)(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const result = await this.createCosmiconfigResult(absoluteFilePath, fileContents);\n      const transformResult = await this.config.transform(result);\n      return transformResult;\n    };\n    if (this.loadCache) {\n      return (0, _cacheWrapper.cacheWrapper)(this.loadCache, absoluteFilePath, runLoad);\n    }\n    return runLoad();\n  }\n}\nexports.Explorer = Explorer;","map":{"version":3,"names":["_path","_interopRequireDefault","require","_ExplorerBase","_readFile","_cacheWrapper","_getDirectory","Explorer","ExplorerBase","constructor","options","search","searchFrom","process","cwd","startDirectory","getDirectory","result","searchFromDirectory","dir","absoluteDir","default","resolve","run","searchDirectory","nextDir","nextDirectoryToSearch","transformResult","config","transform","searchCache","cacheWrapper","place","searchPlaces","placeResult","loadSearchPlace","shouldSearchStopWithResult","filepath","join","fileContents","readFile","createCosmiconfigResult","loadFileContent","content","trim","undefined","loader","getLoaderEntryForFile","loaderResult","fileContent","loadedContentToCosmiconfigResult","load","validateFilePath","absoluteFilePath","runLoad","throwNotFound","loadCache"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\cosmiconfig\\src\\Explorer.ts"],"sourcesContent":["import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFile } from './readFile';\nimport { cacheWrapper } from './cacheWrapper';\nimport { getDirectory } from './getDirectory';\nimport { CosmiconfigResult, ExplorerOptions, LoadedFileContent } from './types';\n\nclass Explorer extends ExplorerBase<ExplorerOptions> {\n  public constructor(options: ExplorerOptions) {\n    super(options);\n  }\n\n  public async search(\n    searchFrom: string = process.cwd(),\n  ): Promise<CosmiconfigResult> {\n    const startDirectory = await getDirectory(searchFrom);\n    const result = await this.searchFromDirectory(startDirectory);\n\n    return result;\n  }\n\n  private async searchFromDirectory(dir: string): Promise<CosmiconfigResult> {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = async (): Promise<CosmiconfigResult> => {\n      const result = await this.searchDirectory(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectory(nextDir);\n      }\n\n      const transformResult = await this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapper(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private async searchDirectory(dir: string): Promise<CosmiconfigResult> {\n    for await (const place of this.config.searchPlaces) {\n      const placeResult = await this.loadSearchPlace(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private async loadSearchPlace(\n    dir: string,\n    place: string,\n  ): Promise<CosmiconfigResult> {\n    const filepath = path.join(dir, place);\n    const fileContents = await readFile(filepath);\n\n    const result = await this.createCosmiconfigResult(filepath, fileContents);\n\n    return result;\n  }\n\n  private async loadFileContent(\n    filepath: string,\n    content: string | null,\n  ): Promise<LoadedFileContent> {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = await loader(filepath, content);\n    return loaderResult;\n  }\n\n  private async createCosmiconfigResult(\n    filepath: string,\n    content: string | null,\n  ): Promise<CosmiconfigResult> {\n    const fileContent = await this.loadFileContent(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public async load(filepath: string): Promise<CosmiconfigResult> {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoad = async (): Promise<CosmiconfigResult> => {\n      const fileContents = await readFile(absoluteFilePath, {\n        throwNotFound: true,\n      });\n\n      const result = await this.createCosmiconfigResult(\n        absoluteFilePath,\n        fileContents,\n      );\n\n      const transformResult = await this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapper(this.loadCache, absoluteFilePath, runLoad);\n    }\n\n    return runLoad();\n  }\n}\n\nexport { Explorer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}