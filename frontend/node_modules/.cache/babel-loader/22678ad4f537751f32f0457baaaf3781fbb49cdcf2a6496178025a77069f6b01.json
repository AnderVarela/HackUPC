{"ast":null,"code":"// Limited implementation of python % string operator, supports only %s and %r for now\n// (other formats are not used here, but may appear in custom templates)\n\n'use strict';\n\nconst {\n  inspect\n} = require('util');\nmodule.exports = function sub(pattern, ...values) {\n  let regex = /%(?:(%)|(-)?(\\*)?(?:\\((\\w+)\\))?([A-Za-z]))/g;\n  let result = pattern.replace(regex, function (_, is_literal, is_left_align, is_padded, name, format) {\n    if (is_literal) return '%';\n    let padded_count = 0;\n    if (is_padded) {\n      if (values.length === 0) throw new TypeError('not enough arguments for format string');\n      padded_count = values.shift();\n      if (!Number.isInteger(padded_count)) throw new TypeError('* wants int');\n    }\n    let str;\n    if (name !== undefined) {\n      let dict = values[0];\n      if (typeof dict !== 'object' || dict === null) throw new TypeError('format requires a mapping');\n      if (!(name in dict)) throw new TypeError(`no such key: '${name}'`);\n      str = dict[name];\n    } else {\n      if (values.length === 0) throw new TypeError('not enough arguments for format string');\n      str = values.shift();\n    }\n    switch (format) {\n      case 's':\n        str = String(str);\n        break;\n      case 'r':\n        str = inspect(str);\n        break;\n      case 'd':\n      case 'i':\n        if (typeof str !== 'number') {\n          throw new TypeError(`%${format} format: a number is required, not ${typeof str}`);\n        }\n        str = String(str.toFixed(0));\n        break;\n      default:\n        throw new TypeError(`unsupported format character '${format}'`);\n    }\n    if (padded_count > 0) {\n      return is_left_align ? str.padEnd(padded_count) : str.padStart(padded_count);\n    } else {\n      return str;\n    }\n  });\n  if (values.length) {\n    if (values.length === 1 && typeof values[0] === 'object' && values[0] !== null) {\n      // mapping\n    } else {\n      throw new TypeError('not all arguments converted during string formatting');\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["inspect","require","module","exports","sub","pattern","values","regex","result","replace","_","is_literal","is_left_align","is_padded","name","format","padded_count","length","TypeError","shift","Number","isInteger","str","undefined","dict","String","toFixed","padEnd","padStart"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@eslint/eslintrc/node_modules/argparse/lib/sub.js"],"sourcesContent":["// Limited implementation of python % string operator, supports only %s and %r for now\n// (other formats are not used here, but may appear in custom templates)\n\n'use strict'\n\nconst { inspect } = require('util')\n\n\nmodule.exports = function sub(pattern, ...values) {\n    let regex = /%(?:(%)|(-)?(\\*)?(?:\\((\\w+)\\))?([A-Za-z]))/g\n\n    let result = pattern.replace(regex, function (_, is_literal, is_left_align, is_padded, name, format) {\n        if (is_literal) return '%'\n\n        let padded_count = 0\n        if (is_padded) {\n            if (values.length === 0) throw new TypeError('not enough arguments for format string')\n            padded_count = values.shift()\n            if (!Number.isInteger(padded_count)) throw new TypeError('* wants int')\n        }\n\n        let str\n        if (name !== undefined) {\n            let dict = values[0]\n            if (typeof dict !== 'object' || dict === null) throw new TypeError('format requires a mapping')\n            if (!(name in dict)) throw new TypeError(`no such key: '${name}'`)\n            str = dict[name]\n        } else {\n            if (values.length === 0) throw new TypeError('not enough arguments for format string')\n            str = values.shift()\n        }\n\n        switch (format) {\n            case 's':\n                str = String(str)\n                break\n            case 'r':\n                str = inspect(str)\n                break\n            case 'd':\n            case 'i':\n                if (typeof str !== 'number') {\n                    throw new TypeError(`%${format} format: a number is required, not ${typeof str}`)\n                }\n                str = String(str.toFixed(0))\n                break\n            default:\n                throw new TypeError(`unsupported format character '${format}'`)\n        }\n\n        if (padded_count > 0) {\n            return is_left_align ? str.padEnd(padded_count) : str.padStart(padded_count)\n        } else {\n            return str\n        }\n    })\n\n    if (values.length) {\n        if (values.length === 1 && typeof values[0] === 'object' && values[0] !== null) {\n            // mapping\n        } else {\n            throw new TypeError('not all arguments converted during string formatting')\n        }\n    }\n\n    return result\n}\n"],"mappings":"AAAA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAGnCC,MAAM,CAACC,OAAO,GAAG,SAASC,GAAGA,CAACC,OAAO,EAAE,GAAGC,MAAM,EAAE;EAC9C,IAAIC,KAAK,GAAG,6CAA6C;EAEzD,IAAIC,MAAM,GAAGH,OAAO,CAACI,OAAO,CAACF,KAAK,EAAE,UAAUG,CAAC,EAAEC,UAAU,EAAEC,aAAa,EAAEC,SAAS,EAAEC,IAAI,EAAEC,MAAM,EAAE;IACjG,IAAIJ,UAAU,EAAE,OAAO,GAAG;IAE1B,IAAIK,YAAY,GAAG,CAAC;IACpB,IAAIH,SAAS,EAAE;MACX,IAAIP,MAAM,CAACW,MAAM,KAAK,CAAC,EAAE,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;MACtFF,YAAY,GAAGV,MAAM,CAACa,KAAK,CAAC,CAAC;MAC7B,IAAI,CAACC,MAAM,CAACC,SAAS,CAACL,YAAY,CAAC,EAAE,MAAM,IAAIE,SAAS,CAAC,aAAa,CAAC;IAC3E;IAEA,IAAII,GAAG;IACP,IAAIR,IAAI,KAAKS,SAAS,EAAE;MACpB,IAAIC,IAAI,GAAGlB,MAAM,CAAC,CAAC,CAAC;MACpB,IAAI,OAAOkB,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE,MAAM,IAAIN,SAAS,CAAC,2BAA2B,CAAC;MAC/F,IAAI,EAAEJ,IAAI,IAAIU,IAAI,CAAC,EAAE,MAAM,IAAIN,SAAS,CAAE,iBAAgBJ,IAAK,GAAE,CAAC;MAClEQ,GAAG,GAAGE,IAAI,CAACV,IAAI,CAAC;IACpB,CAAC,MAAM;MACH,IAAIR,MAAM,CAACW,MAAM,KAAK,CAAC,EAAE,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;MACtFI,GAAG,GAAGhB,MAAM,CAACa,KAAK,CAAC,CAAC;IACxB;IAEA,QAAQJ,MAAM;MACV,KAAK,GAAG;QACJO,GAAG,GAAGG,MAAM,CAACH,GAAG,CAAC;QACjB;MACJ,KAAK,GAAG;QACJA,GAAG,GAAGtB,OAAO,CAACsB,GAAG,CAAC;QAClB;MACJ,KAAK,GAAG;MACR,KAAK,GAAG;QACJ,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;UACzB,MAAM,IAAIJ,SAAS,CAAE,IAAGH,MAAO,sCAAqC,OAAOO,GAAI,EAAC,CAAC;QACrF;QACAA,GAAG,GAAGG,MAAM,CAACH,GAAG,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;QAC5B;MACJ;QACI,MAAM,IAAIR,SAAS,CAAE,iCAAgCH,MAAO,GAAE,CAAC;IACvE;IAEA,IAAIC,YAAY,GAAG,CAAC,EAAE;MAClB,OAAOJ,aAAa,GAAGU,GAAG,CAACK,MAAM,CAACX,YAAY,CAAC,GAAGM,GAAG,CAACM,QAAQ,CAACZ,YAAY,CAAC;IAChF,CAAC,MAAM;MACH,OAAOM,GAAG;IACd;EACJ,CAAC,CAAC;EAEF,IAAIhB,MAAM,CAACW,MAAM,EAAE;IACf,IAAIX,MAAM,CAACW,MAAM,KAAK,CAAC,IAAI,OAAOX,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAIA,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MAC5E;IAAA,CACH,MAAM;MACH,MAAM,IAAIY,SAAS,CAAC,sDAAsD,CAAC;IAC/E;EACJ;EAEA,OAAOV,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}