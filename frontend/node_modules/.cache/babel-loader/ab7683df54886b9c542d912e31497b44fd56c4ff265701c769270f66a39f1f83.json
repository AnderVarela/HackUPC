{"ast":null,"code":"/**\n * Utility for resolving a module relative to another module\n * @author Teddy Katz\n */\n\nimport Module from \"module\";\n\n/*\n * `Module.createRequire` is added in v12.2.0. It supports URL as well.\n * We only support the case where the argument is a filepath, not a URL.\n */\nconst createRequire = Module.createRequire;\n\n/**\n * Resolves a Node module relative to another module\n * @param {string} moduleName The name of a Node module, or a path to a Node module.\n * @param {string} relativeToPath An absolute path indicating the module that `moduleName` should be resolved relative to. This must be\n * a file rather than a directory, but the file need not actually exist.\n * @returns {string} The absolute path that would result from calling `require.resolve(moduleName)` in a file located at `relativeToPath`\n */\nfunction resolve(moduleName, relativeToPath) {\n  try {\n    return createRequire(relativeToPath).resolve(moduleName);\n  } catch (error) {\n    // This `if` block is for older Node.js than 12.0.0. We can remove this block in the future.\n    if (typeof error === \"object\" && error !== null && error.code === \"MODULE_NOT_FOUND\" && !error.requireStack && error.message.includes(moduleName)) {\n      error.message += `\\nRequire stack:\\n- ${relativeToPath}`;\n    }\n    throw error;\n  }\n}\nexport { resolve };","map":{"version":3,"names":["Module","createRequire","resolve","moduleName","relativeToPath","error","code","requireStack","message","includes"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@eslint/eslintrc/lib/shared/relative-module-resolver.js"],"sourcesContent":["/**\n * Utility for resolving a module relative to another module\n * @author Teddy Katz\n */\n\nimport Module from \"module\";\n\n/*\n * `Module.createRequire` is added in v12.2.0. It supports URL as well.\n * We only support the case where the argument is a filepath, not a URL.\n */\nconst createRequire = Module.createRequire;\n\n/**\n * Resolves a Node module relative to another module\n * @param {string} moduleName The name of a Node module, or a path to a Node module.\n * @param {string} relativeToPath An absolute path indicating the module that `moduleName` should be resolved relative to. This must be\n * a file rather than a directory, but the file need not actually exist.\n * @returns {string} The absolute path that would result from calling `require.resolve(moduleName)` in a file located at `relativeToPath`\n */\nfunction resolve(moduleName, relativeToPath) {\n    try {\n        return createRequire(relativeToPath).resolve(moduleName);\n    } catch (error) {\n\n        // This `if` block is for older Node.js than 12.0.0. We can remove this block in the future.\n        if (\n            typeof error === \"object\" &&\n            error !== null &&\n            error.code === \"MODULE_NOT_FOUND\" &&\n            !error.requireStack &&\n            error.message.includes(moduleName)\n        ) {\n            error.message += `\\nRequire stack:\\n- ${relativeToPath}`;\n        }\n        throw error;\n    }\n}\n\nexport {\n    resolve\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,QAAQ;;AAE3B;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGD,MAAM,CAACC,aAAa;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,UAAU,EAAEC,cAAc,EAAE;EACzC,IAAI;IACA,OAAOH,aAAa,CAACG,cAAc,CAAC,CAACF,OAAO,CAACC,UAAU,CAAC;EAC5D,CAAC,CAAC,OAAOE,KAAK,EAAE;IAEZ;IACA,IACI,OAAOA,KAAK,KAAK,QAAQ,IACzBA,KAAK,KAAK,IAAI,IACdA,KAAK,CAACC,IAAI,KAAK,kBAAkB,IACjC,CAACD,KAAK,CAACE,YAAY,IACnBF,KAAK,CAACG,OAAO,CAACC,QAAQ,CAACN,UAAU,CAAC,EACpC;MACEE,KAAK,CAACG,OAAO,IAAK,uBAAsBJ,cAAe,EAAC;IAC5D;IACA,MAAMC,KAAK;EACf;AACJ;AAEA,SACIH,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}