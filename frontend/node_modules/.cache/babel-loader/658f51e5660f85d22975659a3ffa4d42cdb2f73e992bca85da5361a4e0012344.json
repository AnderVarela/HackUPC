{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst tsutils = __importStar(require(\"tsutils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('dot-notation');\nexports.default = (0, util_1.createRule)({\n  name: 'dot-notation',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce dot notation whenever possible',\n      recommended: 'strict',\n      extendsBaseRule: true,\n      requiresTypeChecking: true\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        allowKeywords: {\n          type: 'boolean',\n          default: true\n        },\n        allowPattern: {\n          type: 'string',\n          default: ''\n        },\n        allowPrivateClassPropertyAccess: {\n          type: 'boolean',\n          default: false\n        },\n        allowProtectedClassPropertyAccess: {\n          type: 'boolean',\n          default: false\n        },\n        allowIndexSignaturePropertyAccess: {\n          type: 'boolean',\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    fixable: baseRule.meta.fixable,\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    messages: baseRule.meta.messages\n  },\n  defaultOptions: [{\n    allowPrivateClassPropertyAccess: false,\n    allowProtectedClassPropertyAccess: false,\n    allowIndexSignaturePropertyAccess: false,\n    allowKeywords: true,\n    allowPattern: ''\n  }],\n  create(context, [options]) {\n    var _a;\n    const rules = baseRule.create(context);\n    const {\n      program,\n      esTreeNodeToTSNodeMap\n    } = (0, util_1.getParserServices)(context);\n    const typeChecker = program.getTypeChecker();\n    const allowPrivateClassPropertyAccess = options.allowPrivateClassPropertyAccess;\n    const allowProtectedClassPropertyAccess = options.allowProtectedClassPropertyAccess;\n    const allowIndexSignaturePropertyAccess = ((_a = options.allowIndexSignaturePropertyAccess) !== null && _a !== void 0 ? _a : false) || tsutils.isCompilerOptionEnabled(program.getCompilerOptions(),\n    // @ts-expect-error - TS is refining the type to never for some reason\n    'noPropertyAccessFromIndexSignature');\n    return {\n      MemberExpression(node) {\n        var _a, _b;\n        if ((allowPrivateClassPropertyAccess || allowProtectedClassPropertyAccess || allowIndexSignaturePropertyAccess) && node.computed) {\n          // for perf reasons - only fetch symbols if we have to\n          const propertySymbol = typeChecker.getSymbolAtLocation(esTreeNodeToTSNodeMap.get(node.property));\n          const modifierKind = (_b = (0, util_1.getModifiers)((_a = propertySymbol === null || propertySymbol === void 0 ? void 0 : propertySymbol.getDeclarations()) === null || _a === void 0 ? void 0 : _a[0])) === null || _b === void 0 ? void 0 : _b[0].kind;\n          if (allowPrivateClassPropertyAccess && modifierKind === ts.SyntaxKind.PrivateKeyword || allowProtectedClassPropertyAccess && modifierKind === ts.SyntaxKind.ProtectedKeyword) {\n            return;\n          }\n          if (propertySymbol === undefined && allowIndexSignaturePropertyAccess) {\n            const objectType = typeChecker.getTypeAtLocation(esTreeNodeToTSNodeMap.get(node.object));\n            const indexType = objectType.getNonNullableType().getStringIndexType();\n            if (indexType !== undefined) {\n              return;\n            }\n          }\n        }\n        rules.MemberExpression(node);\n      }\n    };\n  }\n});","map":{"version":3,"names":["tsutils","__importStar","require","ts","util_1","getESLintCoreRule_1","baseRule","getESLintCoreRule","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","requiresTypeChecking","schema","properties","allowKeywords","allowPattern","allowPrivateClassPropertyAccess","allowProtectedClassPropertyAccess","allowIndexSignaturePropertyAccess","additionalProperties","fixable","hasSuggestions","messages","defaultOptions","create","context","options","rules","program","esTreeNodeToTSNodeMap","getParserServices","typeChecker","getTypeChecker","_a","isCompilerOptionEnabled","getCompilerOptions","MemberExpression","node","computed","propertySymbol","getSymbolAtLocation","get","property","modifierKind","_b","getModifiers","getDeclarations","kind","SyntaxKind","PrivateKeyword","ProtectedKeyword","undefined","objectType","getTypeAtLocation","object","indexType","getNonNullableType","getStringIndexType"],"sources":["../../src/rules/dot-notation.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,YAAA,CAAAC,OAAA;AACA,MAAAC,EAAA,GAAAF,YAAA,CAAAC,OAAA;AAMA,MAAAE,MAAA,GAAAF,OAAA;AACA,MAAAG,mBAAA,GAAAH,OAAA;AAEA,MAAMI,QAAQ,GAAG,IAAAD,mBAAA,CAAAE,iBAAiB,EAAC,cAAc,CAAC;AAKlDC,OAAA,CAAAC,OAAA,GAAe,IAAAL,MAAA,CAAAM,UAAU,EAAsB;EAC7CC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAE;IACJC,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE;MACJC,WAAW,EAAE,wCAAwC;MACrDC,WAAW,EAAE,QAAQ;MACrBC,eAAe,EAAE,IAAI;MACrBC,oBAAoB,EAAE;KACvB;IACDC,MAAM,EAAE,CACN;MACEN,IAAI,EAAE,QAAQ;MACdO,UAAU,EAAE;QACVC,aAAa,EAAE;UACbR,IAAI,EAAE,SAAS;UACfJ,OAAO,EAAE;SACV;QACDa,YAAY,EAAE;UACZT,IAAI,EAAE,QAAQ;UACdJ,OAAO,EAAE;SACV;QACDc,+BAA+B,EAAE;UAC/BV,IAAI,EAAE,SAAS;UACfJ,OAAO,EAAE;SACV;QACDe,iCAAiC,EAAE;UACjCX,IAAI,EAAE,SAAS;UACfJ,OAAO,EAAE;SACV;QACDgB,iCAAiC,EAAE;UACjCZ,IAAI,EAAE,SAAS;UACfJ,OAAO,EAAE;;OAEZ;MACDiB,oBAAoB,EAAE;KACvB,CACF;IACDC,OAAO,EAAErB,QAAQ,CAACM,IAAI,CAACe,OAAO;IAC9BC,cAAc,EAAEtB,QAAQ,CAACM,IAAI,CAACgB,cAAc;IAC5CC,QAAQ,EAAEvB,QAAQ,CAACM,IAAI,CAACiB;GACzB;EACDC,cAAc,EAAE,CACd;IACEP,+BAA+B,EAAE,KAAK;IACtCC,iCAAiC,EAAE,KAAK;IACxCC,iCAAiC,EAAE,KAAK;IACxCJ,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE;GACf,CACF;EACDS,MAAMA,CAACC,OAAO,EAAE,CAACC,OAAO,CAAC;;IACvB,MAAMC,KAAK,GAAG5B,QAAQ,CAACyB,MAAM,CAACC,OAAO,CAAC;IAEtC,MAAM;MAAEG,OAAO;MAAEC;IAAqB,CAAE,GAAG,IAAAhC,MAAA,CAAAiC,iBAAiB,EAACL,OAAO,CAAC;IACrE,MAAMM,WAAW,GAAGH,OAAO,CAACI,cAAc,EAAE;IAE5C,MAAMhB,+BAA+B,GACnCU,OAAO,CAACV,+BAA+B;IACzC,MAAMC,iCAAiC,GACrCS,OAAO,CAACT,iCAAiC;IAC3C,MAAMC,iCAAiC,GACrC,CAAC,CAAAe,EAAA,GAAAP,OAAO,CAACR,iCAAiC,cAAAe,EAAA,cAAAA,EAAA,GAAI,KAAK,KACnDxC,OAAO,CAACyC,uBAAuB,CAC7BN,OAAO,CAACO,kBAAkB,EAAE;IAC5B;IACA,oCAAoC,CACrC;IAEH,OAAO;MACLC,gBAAgBA,CAACC,IAA+B;;QAC9C,IACE,CAACrB,+BAA+B,IAC9BC,iCAAiC,IACjCC,iCAAiC,KACnCmB,IAAI,CAACC,QAAQ,EACb;UACA;UACA,MAAMC,cAAc,GAAGR,WAAW,CAACS,mBAAmB,CACpDX,qBAAqB,CAACY,GAAG,CAACJ,IAAI,CAACK,QAAQ,CAAC,CACzC;UACD,MAAMC,YAAY,GAAG,CAAAC,EAAA,OAAA/C,MAAA,CAAAgD,YAAY,EAC/B,CAAAZ,EAAA,GAAAM,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEO,eAAe,EAAE,cAAAb,EAAA,uBAAAA,EAAA,CAAG,CAAC,CAAC,CACvC,cAAAW,EAAA,uBAAAA,EAAA,CAAG,CAAC,EAAEG,IAAI;UACX,IACG/B,+BAA+B,IAC9B2B,YAAY,KAAK/C,EAAE,CAACoD,UAAU,CAACC,cAAc,IAC9ChC,iCAAiC,IAChC0B,YAAY,KAAK/C,EAAE,CAACoD,UAAU,CAACE,gBAAiB,EAClD;YACA;;UAEF,IACEX,cAAc,KAAKY,SAAS,IAC5BjC,iCAAiC,EACjC;YACA,MAAMkC,UAAU,GAAGrB,WAAW,CAACsB,iBAAiB,CAC9CxB,qBAAqB,CAACY,GAAG,CAACJ,IAAI,CAACiB,MAAM,CAAC,CACvC;YACD,MAAMC,SAAS,GAAGH,UAAU,CACzBI,kBAAkB,EAAE,CACpBC,kBAAkB,EAAE;YACvB,IAAIF,SAAS,KAAKJ,SAAS,EAAE;cAC3B;;;;QAINxB,KAAK,CAACS,gBAAgB,CAACC,IAAI,CAAC;MAC9B;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}