{"ast":null,"code":"// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state) {\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key) {\n  if (typeof this.jobs[key] == 'function') {\n    this.jobs[key]();\n  }\n}","map":{"version":3,"names":["module","exports","abort","state","Object","keys","jobs","forEach","clean","bind","key"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/asynckit/lib/abort.js"],"sourcesContent":["// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n"],"mappings":"AAAA;AACAA,MAAM,CAACC,OAAO,GAAGC,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA,SAASA,KAAKA,CAACC,KAAK,EACpB;EACEC,MAAM,CAACC,IAAI,CAACF,KAAK,CAACG,IAAI,CAAC,CAACC,OAAO,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAAC,CAAC;;EAElD;EACAA,KAAK,CAACG,IAAI,GAAG,CAAC,CAAC;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,KAAKA,CAACE,GAAG,EAClB;EACE,IAAI,OAAO,IAAI,CAACJ,IAAI,CAACI,GAAG,CAAC,IAAI,UAAU,EACvC;IACE,IAAI,CAACJ,IAAI,CAACI,GAAG,CAAC,CAAC,CAAC;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}