{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"tsutils\"));\nconst util = __importStar(require(\"../util\"));\nconst util_1 = require(\"../util\");\nexports.default = util.createRule({\n  name: 'no-unsafe-member-access',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow member access on a value with type `any`',\n      recommended: 'error',\n      requiresTypeChecking: true\n    },\n    messages: {\n      unsafeMemberExpression: 'Unsafe member access {{property}} on an `any` value.',\n      unsafeThisMemberExpression: ['Unsafe member access {{property}} on an `any` value. `this` is typed as `any`.', 'You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.'].join('\\n'),\n      unsafeComputedMemberAccess: 'Computed name {{property}} resolves to an any value.'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n  create(context) {\n    const {\n      program,\n      esTreeNodeToTSNodeMap\n    } = util.getParserServices(context);\n    const checker = program.getTypeChecker();\n    const compilerOptions = program.getCompilerOptions();\n    const isNoImplicitThis = tsutils.isStrictCompilerOptionEnabled(compilerOptions, 'noImplicitThis');\n    const sourceCode = context.getSourceCode();\n    const stateCache = new Map();\n    function checkMemberExpression(node) {\n      const cachedState = stateCache.get(node);\n      if (cachedState) {\n        return cachedState;\n      }\n      if (node.object.type === utils_1.AST_NODE_TYPES.MemberExpression) {\n        const objectState = checkMemberExpression(node.object);\n        if (objectState === 1 /* State.Unsafe */) {\n          // if the object is unsafe, we know this will be unsafe as well\n          // we don't need to report, as we have already reported on the inner member expr\n          stateCache.set(node, objectState);\n          return objectState;\n        }\n      }\n      const tsNode = esTreeNodeToTSNodeMap.get(node.object);\n      const type = checker.getTypeAtLocation(tsNode);\n      const state = util.isTypeAnyType(type) ? 1 /* State.Unsafe */ : 2 /* State.Safe */;\n      stateCache.set(node, state);\n      if (state === 1 /* State.Unsafe */) {\n        const propertyName = sourceCode.getText(node.property);\n        let messageId = 'unsafeMemberExpression';\n        if (!isNoImplicitThis) {\n          // `this.foo` or `this.foo[bar]`\n          const thisExpression = (0, util_1.getThisExpression)(node);\n          if (thisExpression && util.isTypeAnyType(util.getConstrainedTypeAtLocation(checker, esTreeNodeToTSNodeMap.get(thisExpression)))) {\n            messageId = 'unsafeThisMemberExpression';\n          }\n        }\n        context.report({\n          node,\n          messageId,\n          data: {\n            property: node.computed ? `[${propertyName}]` : `.${propertyName}`\n          }\n        });\n      }\n      return state;\n    }\n    return {\n      // ignore MemberExpression if it's parent is TSClassImplements or TSInterfaceHeritage\n      ':not(TSClassImplements, TSInterfaceHeritage) > MemberExpression': checkMemberExpression,\n      'MemberExpression[computed = true] > *.property'(node) {\n        if (\n        // x[1]\n        node.type === utils_1.AST_NODE_TYPES.Literal ||\n        // x[1++] x[++x] etc\n        // FUN FACT - **all** update expressions return type number, regardless of the argument's type,\n        // because JS engines return NaN if there the argument is not a number.\n        node.type === utils_1.AST_NODE_TYPES.UpdateExpression) {\n          // perf optimizations - literals can obviously never be `any`\n          return;\n        }\n        const tsNode = esTreeNodeToTSNodeMap.get(node);\n        const type = checker.getTypeAtLocation(tsNode);\n        if (util.isTypeAnyType(type)) {\n          const propertyName = sourceCode.getText(node);\n          context.report({\n            node,\n            messageId: 'unsafeComputedMemberAccess',\n            data: {\n              property: `[${propertyName}]`\n            }\n          });\n        }\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","tsutils","__importStar","util","util_1","exports","default","createRule","name","meta","type","docs","description","recommended","requiresTypeChecking","messages","unsafeMemberExpression","unsafeThisMemberExpression","join","unsafeComputedMemberAccess","schema","defaultOptions","create","context","program","esTreeNodeToTSNodeMap","getParserServices","checker","getTypeChecker","compilerOptions","getCompilerOptions","isNoImplicitThis","isStrictCompilerOptionEnabled","sourceCode","getSourceCode","stateCache","Map","checkMemberExpression","node","cachedState","get","object","AST_NODE_TYPES","MemberExpression","objectState","set","tsNode","getTypeAtLocation","state","isTypeAnyType","propertyName","getText","property","messageId","thisExpression","getThisExpression","getConstrainedTypeAtLocation","report","data","computed","MemberExpression[computed = true] > *.property","Literal","UpdateExpression"],"sources":["../../src/rules/no-unsafe-member-access.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}