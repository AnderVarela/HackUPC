{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('lines-around-comment');\nconst COMMENTS_IGNORE_PATTERN = /^\\s*(?:eslint|jshint\\s+|jslint\\s+|istanbul\\s+|globals?\\s+|exported\\s+|jscs)/u;\n/**\n * @returns an array with with any line numbers that are empty.\n */\nfunction getEmptyLineNums(lines) {\n  const emptyLines = lines.map((line, i) => ({\n    code: line.trim(),\n    num: i + 1\n  })).filter(line => !line.code).map(line => line.num);\n  return emptyLines;\n}\n/**\n * @returns an array with with any line numbers that contain comments.\n */\nfunction getCommentLineNums(comments) {\n  const lines = [];\n  comments.forEach(token => {\n    const start = token.loc.start.line;\n    const end = token.loc.end.line;\n    lines.push(start, end);\n  });\n  return lines;\n}\nexports.default = util.createRule({\n  name: 'lines-around-comment',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Require empty lines around comments',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    schema: {\n      type: 'array',\n      items: [{\n        type: 'object',\n        properties: {\n          beforeBlockComment: {\n            type: 'boolean',\n            default: true\n          },\n          afterBlockComment: {\n            type: 'boolean',\n            default: false\n          },\n          beforeLineComment: {\n            type: 'boolean',\n            default: false\n          },\n          afterLineComment: {\n            type: 'boolean',\n            default: false\n          },\n          allowBlockStart: {\n            type: 'boolean',\n            default: false\n          },\n          allowBlockEnd: {\n            type: 'boolean',\n            default: false\n          },\n          allowClassStart: {\n            type: 'boolean'\n          },\n          allowClassEnd: {\n            type: 'boolean'\n          },\n          allowObjectStart: {\n            type: 'boolean'\n          },\n          allowObjectEnd: {\n            type: 'boolean'\n          },\n          allowArrayStart: {\n            type: 'boolean'\n          },\n          allowArrayEnd: {\n            type: 'boolean'\n          },\n          allowInterfaceStart: {\n            type: 'boolean'\n          },\n          allowInterfaceEnd: {\n            type: 'boolean'\n          },\n          allowTypeStart: {\n            type: 'boolean'\n          },\n          allowTypeEnd: {\n            type: 'boolean'\n          },\n          allowEnumStart: {\n            type: 'boolean'\n          },\n          allowEnumEnd: {\n            type: 'boolean'\n          },\n          allowModuleStart: {\n            type: 'boolean'\n          },\n          allowModuleEnd: {\n            type: 'boolean'\n          },\n          ignorePattern: {\n            type: 'string'\n          },\n          applyDefaultIgnorePatterns: {\n            type: 'boolean'\n          }\n        },\n        additionalProperties: false\n      }]\n    },\n    fixable: baseRule.meta.fixable,\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    messages: baseRule.meta.messages\n  },\n  defaultOptions: [{\n    beforeBlockComment: true\n  }],\n  create(context, [_options]) {\n    var _a;\n    const options = _options;\n    const defaultIgnoreRegExp = COMMENTS_IGNORE_PATTERN;\n    const customIgnoreRegExp = new RegExp((_a = options.ignorePattern) !== null && _a !== void 0 ? _a : '', 'u');\n    const sourceCode = context.getSourceCode();\n    const comments = sourceCode.getAllComments();\n    const lines = sourceCode.lines;\n    const commentLines = getCommentLineNums(comments);\n    const emptyLines = getEmptyLineNums(lines);\n    const commentAndEmptyLines = new Set(commentLines.concat(emptyLines));\n    /**\n     * @returns whether comments are on lines starting with or ending with code.\n     */\n    function codeAroundComment(token) {\n      let currentToken = token;\n      do {\n        currentToken = sourceCode.getTokenBefore(currentToken, {\n          includeComments: true\n        });\n      } while (currentToken && util.isCommentToken(currentToken));\n      if (currentToken && util.isTokenOnSameLine(currentToken, token)) {\n        return true;\n      }\n      currentToken = token;\n      do {\n        currentToken = sourceCode.getTokenAfter(currentToken, {\n          includeComments: true\n        });\n      } while (currentToken && util.isCommentToken(currentToken));\n      if (currentToken && util.isTokenOnSameLine(token, currentToken)) {\n        return true;\n      }\n      return false;\n    }\n    /**\n     * @returns whether comments are inside a node type.\n     */\n    function isParentNodeType(parent, nodeType) {\n      return parent.type === nodeType;\n    }\n    /**\n     * @returns the parent node that contains the given token.\n     */\n    function getParentNodeOfToken(token) {\n      const node = sourceCode.getNodeByRangeIndex(token.range[0]);\n      return node;\n    }\n    /**\n     * @returns whether comments are at the parent start.\n     */\n    function isCommentAtParentStart(token, nodeType) {\n      const parent = getParentNodeOfToken(token);\n      if (parent && isParentNodeType(parent, nodeType)) {\n        const parentStartNodeOrToken = parent;\n        return token.loc.start.line - parentStartNodeOrToken.loc.start.line === 1;\n      }\n      return false;\n    }\n    /**\n     * @returns whether comments are at the parent end.\n     */\n    function isCommentAtParentEnd(token, nodeType) {\n      const parent = getParentNodeOfToken(token);\n      return !!parent && isParentNodeType(parent, nodeType) && parent.loc.end.line - token.loc.end.line === 1;\n    }\n    function isCommentAtInterfaceStart(token) {\n      return isCommentAtParentStart(token, utils_1.AST_NODE_TYPES.TSInterfaceBody);\n    }\n    function isCommentAtInterfaceEnd(token) {\n      return isCommentAtParentEnd(token, utils_1.AST_NODE_TYPES.TSInterfaceBody);\n    }\n    function isCommentAtTypeStart(token) {\n      return isCommentAtParentStart(token, utils_1.AST_NODE_TYPES.TSTypeLiteral);\n    }\n    function isCommentAtTypeEnd(token) {\n      return isCommentAtParentEnd(token, utils_1.AST_NODE_TYPES.TSTypeLiteral);\n    }\n    function isCommentAtEnumStart(token) {\n      return isCommentAtParentStart(token, utils_1.AST_NODE_TYPES.TSEnumDeclaration);\n    }\n    function isCommentAtEnumEnd(token) {\n      return isCommentAtParentEnd(token, utils_1.AST_NODE_TYPES.TSEnumDeclaration);\n    }\n    function isCommentAtModuleStart(token) {\n      return isCommentAtParentStart(token, utils_1.AST_NODE_TYPES.TSModuleBlock);\n    }\n    function isCommentAtModuleEnd(token) {\n      return isCommentAtParentEnd(token, utils_1.AST_NODE_TYPES.TSModuleBlock);\n    }\n    function isCommentNearTSConstruct(token) {\n      return isCommentAtInterfaceStart(token) || isCommentAtInterfaceEnd(token) || isCommentAtTypeStart(token) || isCommentAtTypeEnd(token) || isCommentAtEnumStart(token) || isCommentAtEnumEnd(token) || isCommentAtModuleStart(token) || isCommentAtModuleEnd(token);\n    }\n    function checkForEmptyLine(token, {\n      before,\n      after\n    }) {\n      // the base rule handles comments away from TS constructs blocks correctly, we skip those\n      if (!isCommentNearTSConstruct(token)) {\n        return;\n      }\n      if (options.applyDefaultIgnorePatterns !== false && defaultIgnoreRegExp.test(token.value)) {\n        return;\n      }\n      if (options.ignorePattern && customIgnoreRegExp.test(token.value)) {\n        return;\n      }\n      const prevLineNum = token.loc.start.line - 1;\n      const nextLineNum = token.loc.end.line + 1;\n      // we ignore all inline comments\n      if (codeAroundComment(token)) {\n        return;\n      }\n      const interfaceStartAllowed = Boolean(options.allowInterfaceStart) && isCommentAtInterfaceStart(token);\n      const interfaceEndAllowed = Boolean(options.allowInterfaceEnd) && isCommentAtInterfaceEnd(token);\n      const typeStartAllowed = Boolean(options.allowTypeStart) && isCommentAtTypeStart(token);\n      const typeEndAllowed = Boolean(options.allowTypeEnd) && isCommentAtTypeEnd(token);\n      const enumStartAllowed = Boolean(options.allowEnumStart) && isCommentAtEnumStart(token);\n      const enumEndAllowed = Boolean(options.allowEnumEnd) && isCommentAtEnumEnd(token);\n      const moduleStartAllowed = Boolean(options.allowModuleStart) && isCommentAtModuleStart(token);\n      const moduleEndAllowed = Boolean(options.allowModuleEnd) && isCommentAtModuleEnd(token);\n      const exceptionStartAllowed = interfaceStartAllowed || typeStartAllowed || enumStartAllowed || moduleStartAllowed;\n      const exceptionEndAllowed = interfaceEndAllowed || typeEndAllowed || enumEndAllowed || moduleEndAllowed;\n      const previousTokenOrComment = sourceCode.getTokenBefore(token, {\n        includeComments: true\n      });\n      const nextTokenOrComment = sourceCode.getTokenAfter(token, {\n        includeComments: true\n      });\n      // check for newline before\n      if (!exceptionStartAllowed && before && !commentAndEmptyLines.has(prevLineNum) && !(util.isCommentToken(previousTokenOrComment) && util.isTokenOnSameLine(previousTokenOrComment, token))) {\n        const lineStart = token.range[0] - token.loc.start.column;\n        const range = [lineStart, lineStart];\n        context.report({\n          node: token,\n          messageId: 'before',\n          fix(fixer) {\n            return fixer.insertTextBeforeRange(range, '\\n');\n          }\n        });\n      }\n      // check for newline after\n      if (!exceptionEndAllowed && after && !commentAndEmptyLines.has(nextLineNum) && !(util.isCommentToken(nextTokenOrComment) && util.isTokenOnSameLine(token, nextTokenOrComment))) {\n        context.report({\n          node: token,\n          messageId: 'after',\n          fix(fixer) {\n            return fixer.insertTextAfter(token, '\\n');\n          }\n        });\n      }\n    }\n    /**\n     * A custom report function for the baseRule to ignore false positive errors\n     * caused by TS-specific codes\n     */\n    const customReport = descriptor => {\n      if ('node' in descriptor) {\n        if (descriptor.node.type === utils_1.AST_TOKEN_TYPES.Line || descriptor.node.type === utils_1.AST_TOKEN_TYPES.Block) {\n          if (isCommentNearTSConstruct(descriptor.node)) {\n            return;\n          }\n        }\n      }\n      return context.report(descriptor);\n    };\n    const customContext = {\n      report: customReport\n    };\n    // we can't directly proxy `context` because its `report` property is non-configurable\n    // and non-writable. So we proxy `customContext` and redirect all\n    // property access to the original context except for `report`\n    const proxiedContext = new Proxy(customContext, {\n      get(target, path, receiver) {\n        if (path !== 'report') {\n          return Reflect.get(context, path, receiver);\n        }\n        return Reflect.get(target, path, receiver);\n      }\n    });\n    const rules = baseRule.create(proxiedContext);\n    return {\n      Program() {\n        rules.Program();\n        comments.forEach(token => {\n          if (token.type === utils_1.AST_TOKEN_TYPES.Line) {\n            if (options.beforeLineComment || options.afterLineComment) {\n              checkForEmptyLine(token, {\n                after: options.afterLineComment,\n                before: options.beforeLineComment\n              });\n            }\n          } else if (token.type === utils_1.AST_TOKEN_TYPES.Block) {\n            if (options.beforeBlockComment || options.afterBlockComment) {\n              checkForEmptyLine(token, {\n                after: options.afterBlockComment,\n                before: options.beforeBlockComment\n              });\n            }\n          }\n        });\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","getESLintCoreRule_1","baseRule","getESLintCoreRule","COMMENTS_IGNORE_PATTERN","getEmptyLineNums","lines","emptyLines","map","line","i","code","trim","num","filter","getCommentLineNums","comments","forEach","token","start","loc","end","push","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","schema","items","properties","beforeBlockComment","afterBlockComment","beforeLineComment","afterLineComment","allowBlockStart","allowBlockEnd","allowClassStart","allowClassEnd","allowObjectStart","allowObjectEnd","allowArrayStart","allowArrayEnd","allowInterfaceStart","allowInterfaceEnd","allowTypeStart","allowTypeEnd","allowEnumStart","allowEnumEnd","allowModuleStart","allowModuleEnd","ignorePattern","applyDefaultIgnorePatterns","additionalProperties","fixable","hasSuggestions","messages","defaultOptions","create","context","_options","options","defaultIgnoreRegExp","customIgnoreRegExp","RegExp","_a","sourceCode","getSourceCode","getAllComments","commentLines","commentAndEmptyLines","Set","concat","codeAroundComment","currentToken","getTokenBefore","includeComments","isCommentToken","isTokenOnSameLine","getTokenAfter","isParentNodeType","parent","nodeType","getParentNodeOfToken","node","getNodeByRangeIndex","range","isCommentAtParentStart","parentStartNodeOrToken","isCommentAtParentEnd","isCommentAtInterfaceStart","AST_NODE_TYPES","TSInterfaceBody","isCommentAtInterfaceEnd","isCommentAtTypeStart","TSTypeLiteral","isCommentAtTypeEnd","isCommentAtEnumStart","TSEnumDeclaration","isCommentAtEnumEnd","isCommentAtModuleStart","TSModuleBlock","isCommentAtModuleEnd","isCommentNearTSConstruct","checkForEmptyLine","before","after","test","value","prevLineNum","nextLineNum","interfaceStartAllowed","Boolean","interfaceEndAllowed","typeStartAllowed","typeEndAllowed","enumStartAllowed","enumEndAllowed","moduleStartAllowed","moduleEndAllowed","exceptionStartAllowed","exceptionEndAllowed","previousTokenOrComment","nextTokenOrComment","has","lineStart","column","report","messageId","fix","fixer","insertTextBeforeRange","insertTextAfter","customReport","descriptor","AST_TOKEN_TYPES","Line","Block","customContext","proxiedContext","Proxy","get","target","path","receiver","Reflect","rules","Program"],"sources":["../../src/rules/lines-around-comment.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AACA,MAAAG,mBAAA,GAAAH,OAAA;AAEA,MAAMI,QAAQ,GAAG,IAAAD,mBAAA,CAAAE,iBAAiB,EAAC,sBAAsB,CAAC;AAK1D,MAAMC,uBAAuB,GAC3B,8EAA8E;AAEhF;;;AAGA,SAASC,gBAAgBA,CAACC,KAAe;EACvC,MAAMC,UAAU,GAAGD,KAAK,CACrBE,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,MAAM;IACjBC,IAAI,EAAEF,IAAI,CAACG,IAAI,EAAE;IACjBC,GAAG,EAAEH,CAAC,GAAG;GACV,CAAC,CAAC,CACFI,MAAM,CAACL,IAAI,IAAI,CAACA,IAAI,CAACE,IAAI,CAAC,CAC1BH,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,GAAG,CAAC;EAExB,OAAON,UAAU;AACnB;AAEA;;;AAGA,SAASQ,kBAAkBA,CAACC,QAA4B;EACtD,MAAMV,KAAK,GAAa,EAAE;EAE1BU,QAAQ,CAACC,OAAO,CAACC,KAAK,IAAG;IACvB,MAAMC,KAAK,GAAGD,KAAK,CAACE,GAAG,CAACD,KAAK,CAACV,IAAI;IAClC,MAAMY,GAAG,GAAGH,KAAK,CAACE,GAAG,CAACC,GAAG,CAACZ,IAAI;IAE9BH,KAAK,CAACgB,IAAI,CAACH,KAAK,EAAEE,GAAG,CAAC;EACxB,CAAC,CAAC;EACF,OAAOf,KAAK;AACd;AAEAiB,OAAA,CAAAC,OAAA,GAAezB,IAAI,CAAC0B,UAAU,CAAsB;EAClDC,IAAI,EAAE,sBAAsB;EAC5BC,IAAI,EAAE;IACJC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;MACJC,WAAW,EAAE,qCAAqC;MAClDC,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE;KAClB;IACDC,MAAM,EAAE;MACNL,IAAI,EAAE,OAAO;MACbM,KAAK,EAAE,CACL;QACEN,IAAI,EAAE,QAAQ;QACdO,UAAU,EAAE;UACVC,kBAAkB,EAAE;YAClBR,IAAI,EAAE,SAAS;YACfJ,OAAO,EAAE;WACV;UACDa,iBAAiB,EAAE;YACjBT,IAAI,EAAE,SAAS;YACfJ,OAAO,EAAE;WACV;UACDc,iBAAiB,EAAE;YACjBV,IAAI,EAAE,SAAS;YACfJ,OAAO,EAAE;WACV;UACDe,gBAAgB,EAAE;YAChBX,IAAI,EAAE,SAAS;YACfJ,OAAO,EAAE;WACV;UACDgB,eAAe,EAAE;YACfZ,IAAI,EAAE,SAAS;YACfJ,OAAO,EAAE;WACV;UACDiB,aAAa,EAAE;YACbb,IAAI,EAAE,SAAS;YACfJ,OAAO,EAAE;WACV;UACDkB,eAAe,EAAE;YACfd,IAAI,EAAE;WACP;UACDe,aAAa,EAAE;YACbf,IAAI,EAAE;WACP;UACDgB,gBAAgB,EAAE;YAChBhB,IAAI,EAAE;WACP;UACDiB,cAAc,EAAE;YACdjB,IAAI,EAAE;WACP;UACDkB,eAAe,EAAE;YACflB,IAAI,EAAE;WACP;UACDmB,aAAa,EAAE;YACbnB,IAAI,EAAE;WACP;UACDoB,mBAAmB,EAAE;YACnBpB,IAAI,EAAE;WACP;UACDqB,iBAAiB,EAAE;YACjBrB,IAAI,EAAE;WACP;UACDsB,cAAc,EAAE;YACdtB,IAAI,EAAE;WACP;UACDuB,YAAY,EAAE;YACZvB,IAAI,EAAE;WACP;UACDwB,cAAc,EAAE;YACdxB,IAAI,EAAE;WACP;UACDyB,YAAY,EAAE;YACZzB,IAAI,EAAE;WACP;UACD0B,gBAAgB,EAAE;YAChB1B,IAAI,EAAE;WACP;UACD2B,cAAc,EAAE;YACd3B,IAAI,EAAE;WACP;UACD4B,aAAa,EAAE;YACb5B,IAAI,EAAE;WACP;UACD6B,0BAA0B,EAAE;YAC1B7B,IAAI,EAAE;;SAET;QACD8B,oBAAoB,EAAE;OACvB;KAEJ;IACDC,OAAO,EAAEzD,QAAQ,CAACyB,IAAI,CAACgC,OAAO;IAC9BC,cAAc,EAAE1D,QAAQ,CAACyB,IAAI,CAACiC,cAAc;IAC5CC,QAAQ,EAAE3D,QAAQ,CAACyB,IAAI,CAACkC;GACzB;EACDC,cAAc,EAAE,CACd;IACE1B,kBAAkB,EAAE;GACrB,CACF;EACD2B,MAAMA,CAACC,OAAO,EAAE,CAACC,QAAQ,CAAC;;IACxB,MAAMC,OAAO,GAAGD,QAAS;IACzB,MAAME,mBAAmB,GAAG/D,uBAAuB;IACnD,MAAMgE,kBAAkB,GAAG,IAAIC,MAAM,CAAC,CAAAC,EAAA,GAAAJ,OAAO,CAACV,aAAa,cAAAc,EAAA,cAAAA,EAAA,GAAI,EAAE,EAAE,GAAG,CAAC;IAEvE,MAAMC,UAAU,GAAGP,OAAO,CAACQ,aAAa,EAAE;IAC1C,MAAMxD,QAAQ,GAAGuD,UAAU,CAACE,cAAc,EAAE;IAE5C,MAAMnE,KAAK,GAAGiE,UAAU,CAACjE,KAAK;IAC9B,MAAMoE,YAAY,GAAG3D,kBAAkB,CAACC,QAAQ,CAAC;IACjD,MAAMT,UAAU,GAAGF,gBAAgB,CAACC,KAAK,CAAC;IAC1C,MAAMqE,oBAAoB,GAAG,IAAIC,GAAG,CAACF,YAAY,CAACG,MAAM,CAACtE,UAAU,CAAC,CAAC;IAErE;;;IAGA,SAASuE,iBAAiBA,CAAC5D,KAAqB;MAC9C,IAAI6D,YAAY,GAA0B7D,KAAK;MAE/C,GAAG;QACD6D,YAAY,GAAGR,UAAU,CAACS,cAAc,CAACD,YAAY,EAAE;UACrDE,eAAe,EAAE;SAClB,CAAC;OACH,QAAQF,YAAY,IAAIhF,IAAI,CAACmF,cAAc,CAACH,YAAY,CAAC;MAE1D,IAAIA,YAAY,IAAIhF,IAAI,CAACoF,iBAAiB,CAACJ,YAAY,EAAE7D,KAAK,CAAC,EAAE;QAC/D,OAAO,IAAI;;MAGb6D,YAAY,GAAG7D,KAAK;MACpB,GAAG;QACD6D,YAAY,GAAGR,UAAU,CAACa,aAAa,CAACL,YAAY,EAAE;UACpDE,eAAe,EAAE;SAClB,CAAC;OACH,QAAQF,YAAY,IAAIhF,IAAI,CAACmF,cAAc,CAACH,YAAY,CAAC;MAE1D,IAAIA,YAAY,IAAIhF,IAAI,CAACoF,iBAAiB,CAACjE,KAAK,EAAE6D,YAAY,CAAC,EAAE;QAC/D,OAAO,IAAI;;MAGb,OAAO,KAAK;IACd;IAEA;;;IAGA,SAASM,gBAAgBA,CACvBC,MAAqB,EACrBC,QAAW;MAEX,OAAOD,MAAM,CAAC1D,IAAI,KAAK2D,QAAQ;IACjC;IAEA;;;IAGA,SAASC,oBAAoBA,CAACtE,KAAqB;MACjD,MAAMuE,IAAI,GAAGlB,UAAU,CAACmB,mBAAmB,CAACxE,KAAK,CAACyE,KAAK,CAAC,CAAC,CAAC,CAAC;MAE3D,OAAOF,IAAI;IACb;IAEA;;;IAGA,SAASG,sBAAsBA,CAC7B1E,KAAqB,EACrBqE,QAAiC;MAEjC,MAAMD,MAAM,GAAGE,oBAAoB,CAACtE,KAAK,CAAC;MAE1C,IAAIoE,MAAM,IAAID,gBAAgB,CAACC,MAAM,EAAEC,QAAQ,CAAC,EAAE;QAChD,MAAMM,sBAAsB,GAAGP,MAAM;QAErC,OACEpE,KAAK,CAACE,GAAG,CAACD,KAAK,CAACV,IAAI,GAAGoF,sBAAsB,CAACzE,GAAG,CAACD,KAAK,CAACV,IAAI,KAAK,CAAC;;MAItE,OAAO,KAAK;IACd;IAEA;;;IAGA,SAASqF,oBAAoBA,CAC3B5E,KAAqB,EACrBqE,QAAiC;MAEjC,MAAMD,MAAM,GAAGE,oBAAoB,CAACtE,KAAK,CAAC;MAE1C,OACE,CAAC,CAACoE,MAAM,IACRD,gBAAgB,CAACC,MAAM,EAAEC,QAAQ,CAAC,IAClCD,MAAM,CAAClE,GAAG,CAACC,GAAG,CAACZ,IAAI,GAAGS,KAAK,CAACE,GAAG,CAACC,GAAG,CAACZ,IAAI,KAAK,CAAC;IAElD;IAEA,SAASsF,yBAAyBA,CAAC7E,KAAuB;MACxD,OAAO0E,sBAAsB,CAAC1E,KAAK,EAAErB,OAAA,CAAAmG,cAAc,CAACC,eAAe,CAAC;IACtE;IAEA,SAASC,uBAAuBA,CAAChF,KAAuB;MACtD,OAAO4E,oBAAoB,CAAC5E,KAAK,EAAErB,OAAA,CAAAmG,cAAc,CAACC,eAAe,CAAC;IACpE;IAEA,SAASE,oBAAoBA,CAACjF,KAAuB;MACnD,OAAO0E,sBAAsB,CAAC1E,KAAK,EAAErB,OAAA,CAAAmG,cAAc,CAACI,aAAa,CAAC;IACpE;IAEA,SAASC,kBAAkBA,CAACnF,KAAuB;MACjD,OAAO4E,oBAAoB,CAAC5E,KAAK,EAAErB,OAAA,CAAAmG,cAAc,CAACI,aAAa,CAAC;IAClE;IAEA,SAASE,oBAAoBA,CAACpF,KAAuB;MACnD,OAAO0E,sBAAsB,CAAC1E,KAAK,EAAErB,OAAA,CAAAmG,cAAc,CAACO,iBAAiB,CAAC;IACxE;IAEA,SAASC,kBAAkBA,CAACtF,KAAuB;MACjD,OAAO4E,oBAAoB,CAAC5E,KAAK,EAAErB,OAAA,CAAAmG,cAAc,CAACO,iBAAiB,CAAC;IACtE;IAEA,SAASE,sBAAsBA,CAACvF,KAAuB;MACrD,OAAO0E,sBAAsB,CAAC1E,KAAK,EAAErB,OAAA,CAAAmG,cAAc,CAACU,aAAa,CAAC;IACpE;IAEA,SAASC,oBAAoBA,CAACzF,KAAuB;MACnD,OAAO4E,oBAAoB,CAAC5E,KAAK,EAAErB,OAAA,CAAAmG,cAAc,CAACU,aAAa,CAAC;IAClE;IAEA,SAASE,wBAAwBA,CAAC1F,KAAuB;MACvD,OACE6E,yBAAyB,CAAC7E,KAAK,CAAC,IAChCgF,uBAAuB,CAAChF,KAAK,CAAC,IAC9BiF,oBAAoB,CAACjF,KAAK,CAAC,IAC3BmF,kBAAkB,CAACnF,KAAK,CAAC,IACzBoF,oBAAoB,CAACpF,KAAK,CAAC,IAC3BsF,kBAAkB,CAACtF,KAAK,CAAC,IACzBuF,sBAAsB,CAACvF,KAAK,CAAC,IAC7ByF,oBAAoB,CAACzF,KAAK,CAAC;IAE/B;IAEA,SAAS2F,iBAAiBA,CACxB3F,KAAuB,EACvB;MAAE4F,MAAM;MAAEC;IAAK,CAAyC;MAExD;MACA,IAAI,CAACH,wBAAwB,CAAC1F,KAAK,CAAC,EAAE;QACpC;;MAGF,IACEgD,OAAO,CAACT,0BAA0B,KAAK,KAAK,IAC5CU,mBAAmB,CAAC6C,IAAI,CAAC9F,KAAK,CAAC+F,KAAK,CAAC,EACrC;QACA;;MAGF,IAAI/C,OAAO,CAACV,aAAa,IAAIY,kBAAkB,CAAC4C,IAAI,CAAC9F,KAAK,CAAC+F,KAAK,CAAC,EAAE;QACjE;;MAGF,MAAMC,WAAW,GAAGhG,KAAK,CAACE,GAAG,CAACD,KAAK,CAACV,IAAI,GAAG,CAAC;MAC5C,MAAM0G,WAAW,GAAGjG,KAAK,CAACE,GAAG,CAACC,GAAG,CAACZ,IAAI,GAAG,CAAC;MAE1C;MACA,IAAIqE,iBAAiB,CAAC5D,KAAK,CAAC,EAAE;QAC5B;;MAGF,MAAMkG,qBAAqB,GACzBC,OAAO,CAACnD,OAAO,CAAClB,mBAAmB,CAAC,IACpC+C,yBAAyB,CAAC7E,KAAK,CAAC;MAClC,MAAMoG,mBAAmB,GACvBD,OAAO,CAACnD,OAAO,CAACjB,iBAAiB,CAAC,IAAIiD,uBAAuB,CAAChF,KAAK,CAAC;MACtE,MAAMqG,gBAAgB,GACpBF,OAAO,CAACnD,OAAO,CAAChB,cAAc,CAAC,IAAIiD,oBAAoB,CAACjF,KAAK,CAAC;MAChE,MAAMsG,cAAc,GAClBH,OAAO,CAACnD,OAAO,CAACf,YAAY,CAAC,IAAIkD,kBAAkB,CAACnF,KAAK,CAAC;MAC5D,MAAMuG,gBAAgB,GACpBJ,OAAO,CAACnD,OAAO,CAACd,cAAc,CAAC,IAAIkD,oBAAoB,CAACpF,KAAK,CAAC;MAChE,MAAMwG,cAAc,GAClBL,OAAO,CAACnD,OAAO,CAACb,YAAY,CAAC,IAAImD,kBAAkB,CAACtF,KAAK,CAAC;MAC5D,MAAMyG,kBAAkB,GACtBN,OAAO,CAACnD,OAAO,CAACZ,gBAAgB,CAAC,IAAImD,sBAAsB,CAACvF,KAAK,CAAC;MACpE,MAAM0G,gBAAgB,GACpBP,OAAO,CAACnD,OAAO,CAACX,cAAc,CAAC,IAAIoD,oBAAoB,CAACzF,KAAK,CAAC;MAEhE,MAAM2G,qBAAqB,GACzBT,qBAAqB,IACrBG,gBAAgB,IAChBE,gBAAgB,IAChBE,kBAAkB;MACpB,MAAMG,mBAAmB,GACvBR,mBAAmB,IACnBE,cAAc,IACdE,cAAc,IACdE,gBAAgB;MAElB,MAAMG,sBAAsB,GAAGxD,UAAU,CAACS,cAAc,CAAC9D,KAAK,EAAE;QAC9D+D,eAAe,EAAE;OAClB,CAAC;MACF,MAAM+C,kBAAkB,GAAGzD,UAAU,CAACa,aAAa,CAAClE,KAAK,EAAE;QACzD+D,eAAe,EAAE;OAClB,CAAC;MAEF;MACA,IACE,CAAC4C,qBAAqB,IACtBf,MAAM,IACN,CAACnC,oBAAoB,CAACsD,GAAG,CAACf,WAAW,CAAC,IACtC,EACEnH,IAAI,CAACmF,cAAc,CAAC6C,sBAAuB,CAAC,IAC5ChI,IAAI,CAACoF,iBAAiB,CAAC4C,sBAAsB,EAAE7G,KAAK,CAAC,CACtD,EACD;QACA,MAAMgH,SAAS,GAAGhH,KAAK,CAACyE,KAAK,CAAC,CAAC,CAAC,GAAGzE,KAAK,CAACE,GAAG,CAACD,KAAK,CAACgH,MAAM;QACzD,MAAMxC,KAAK,GAAG,CAACuC,SAAS,EAAEA,SAAS,CAAU;QAE7ClE,OAAO,CAACoE,MAAM,CAAC;UACb3C,IAAI,EAAEvE,KAAK;UACXmH,SAAS,EAAE,QAAQ;UACnBC,GAAGA,CAACC,KAAK;YACP,OAAOA,KAAK,CAACC,qBAAqB,CAAC7C,KAAK,EAAE,IAAI,CAAC;UACjD;SACD,CAAC;;MAGJ;MACA,IACE,CAACmC,mBAAmB,IACpBf,KAAK,IACL,CAACpC,oBAAoB,CAACsD,GAAG,CAACd,WAAW,CAAC,IACtC,EACEpH,IAAI,CAACmF,cAAc,CAAC8C,kBAAmB,CAAC,IACxCjI,IAAI,CAACoF,iBAAiB,CAACjE,KAAK,EAAE8G,kBAAkB,CAAC,CAClD,EACD;QACAhE,OAAO,CAACoE,MAAM,CAAC;UACb3C,IAAI,EAAEvE,KAAK;UACXmH,SAAS,EAAE,OAAO;UAClBC,GAAGA,CAACC,KAAK;YACP,OAAOA,KAAK,CAACE,eAAe,CAACvH,KAAK,EAAE,IAAI,CAAC;UAC3C;SACD,CAAC;;IAEN;IAEA;;;;IAIA,MAAMwH,YAAY,GAA0BC,UAAU,IAAG;MACvD,IAAI,MAAM,IAAIA,UAAU,EAAE;QACxB,IACEA,UAAU,CAAClD,IAAI,CAAC7D,IAAI,KAAK/B,OAAA,CAAA+I,eAAe,CAACC,IAAI,IAC7CF,UAAU,CAAClD,IAAI,CAAC7D,IAAI,KAAK/B,OAAA,CAAA+I,eAAe,CAACE,KAAK,EAC9C;UACA,IAAIlC,wBAAwB,CAAC+B,UAAU,CAAClD,IAAI,CAAC,EAAE;YAC7C;;;;MAIN,OAAOzB,OAAO,CAACoE,MAAM,CAACO,UAAU,CAAC;IACnC,CAAC;IAED,MAAMI,aAAa,GAAG;MAAEX,MAAM,EAAEM;IAAY,CAAE;IAE9C;IACA;IACA;IACA,MAAMM,cAAc,GAAG,IAAIC,KAAK,CAC9BF,aAA+B,EAC/B;MACEG,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ;QACxB,IAAID,IAAI,KAAK,QAAQ,EAAE;UACrB,OAAOE,OAAO,CAACJ,GAAG,CAAClF,OAAO,EAAEoF,IAAI,EAAEC,QAAQ,CAAC;;QAE7C,OAAOC,OAAO,CAACJ,GAAG,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,CAAC;MAC5C;KACD,CACF;IAED,MAAME,KAAK,GAAGrJ,QAAQ,CAAC6D,MAAM,CAACiF,cAAc,CAAC;IAE7C,OAAO;MACLQ,OAAOA,CAAA;QACLD,KAAK,CAACC,OAAO,EAAE;QAEfxI,QAAQ,CAACC,OAAO,CAACC,KAAK,IAAG;UACvB,IAAIA,KAAK,CAACU,IAAI,KAAK/B,OAAA,CAAA+I,eAAe,CAACC,IAAI,EAAE;YACvC,IAAI3E,OAAO,CAAC5B,iBAAiB,IAAI4B,OAAO,CAAC3B,gBAAgB,EAAE;cACzDsE,iBAAiB,CAAC3F,KAAK,EAAE;gBACvB6F,KAAK,EAAE7C,OAAO,CAAC3B,gBAAgB;gBAC/BuE,MAAM,EAAE5C,OAAO,CAAC5B;eACjB,CAAC;;WAEL,MAAM,IAAIpB,KAAK,CAACU,IAAI,KAAK/B,OAAA,CAAA+I,eAAe,CAACE,KAAK,EAAE;YAC/C,IAAI5E,OAAO,CAAC9B,kBAAkB,IAAI8B,OAAO,CAAC7B,iBAAiB,EAAE;cAC3DwE,iBAAiB,CAAC3F,KAAK,EAAE;gBACvB6F,KAAK,EAAE7C,OAAO,CAAC7B,iBAAiB;gBAChCyE,MAAM,EAAE5C,OAAO,CAAC9B;eACjB,CAAC;;;QAGR,CAAC,CAAC;MACJ;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}