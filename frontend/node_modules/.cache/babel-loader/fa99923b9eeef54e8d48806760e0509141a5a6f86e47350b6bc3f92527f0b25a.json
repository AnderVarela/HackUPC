{"ast":null,"code":"/**\n * @fileoverview Define common types for input completion.\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\n/** @type {any} */\nexport default {};\n\n/** @typedef {boolean | \"off\" | \"readable\" | \"readonly\" | \"writable\" | \"writeable\"} GlobalConf */\n/** @typedef {0 | 1 | 2 | \"off\" | \"warn\" | \"error\"} SeverityConf */\n/** @typedef {SeverityConf | [SeverityConf, ...any[]]} RuleConf */\n\n/**\n * @typedef {Object} EcmaFeatures\n * @property {boolean} [globalReturn] Enabling `return` statements at the top-level.\n * @property {boolean} [jsx] Enabling JSX syntax.\n * @property {boolean} [impliedStrict] Enabling strict mode always.\n */\n\n/**\n * @typedef {Object} ParserOptions\n * @property {EcmaFeatures} [ecmaFeatures] The optional features.\n * @property {3|5|6|7|8|9|10|11|12|2015|2016|2017|2018|2019|2020|2021} [ecmaVersion] The ECMAScript version (or revision number).\n * @property {\"script\"|\"module\"} [sourceType] The source code type.\n */\n\n/**\n * @typedef {Object} ConfigData\n * @property {Record<string, boolean>} [env] The environment settings.\n * @property {string | string[]} [extends] The path to other config files or the package name of shareable configs.\n * @property {Record<string, GlobalConf>} [globals] The global variable settings.\n * @property {string | string[]} [ignorePatterns] The glob patterns that ignore to lint.\n * @property {boolean} [noInlineConfig] The flag that disables directive comments.\n * @property {OverrideConfigData[]} [overrides] The override settings per kind of files.\n * @property {string} [parser] The path to a parser or the package name of a parser.\n * @property {ParserOptions} [parserOptions] The parser options.\n * @property {string[]} [plugins] The plugin specifiers.\n * @property {string} [processor] The processor specifier.\n * @property {boolean} [reportUnusedDisableDirectives] The flag to report unused `eslint-disable` comments.\n * @property {boolean} [root] The root flag.\n * @property {Record<string, RuleConf>} [rules] The rule settings.\n * @property {Object} [settings] The shared settings.\n */\n\n/**\n * @typedef {Object} OverrideConfigData\n * @property {Record<string, boolean>} [env] The environment settings.\n * @property {string | string[]} [excludedFiles] The glob pattarns for excluded files.\n * @property {string | string[]} [extends] The path to other config files or the package name of shareable configs.\n * @property {string | string[]} files The glob patterns for target files.\n * @property {Record<string, GlobalConf>} [globals] The global variable settings.\n * @property {boolean} [noInlineConfig] The flag that disables directive comments.\n * @property {OverrideConfigData[]} [overrides] The override settings per kind of files.\n * @property {string} [parser] The path to a parser or the package name of a parser.\n * @property {ParserOptions} [parserOptions] The parser options.\n * @property {string[]} [plugins] The plugin specifiers.\n * @property {string} [processor] The processor specifier.\n * @property {boolean} [reportUnusedDisableDirectives] The flag to report unused `eslint-disable` comments.\n * @property {Record<string, RuleConf>} [rules] The rule settings.\n * @property {Object} [settings] The shared settings.\n */\n\n/**\n * @typedef {Object} ParseResult\n * @property {Object} ast The AST.\n * @property {ScopeManager} [scopeManager] The scope manager of the AST.\n * @property {Record<string, any>} [services] The services that the parser provides.\n * @property {Record<string, string[]>} [visitorKeys] The visitor keys of the AST.\n */\n\n/**\n * @typedef {Object} Parser\n * @property {(text:string, options:ParserOptions) => Object} parse The definition of global variables.\n * @property {(text:string, options:ParserOptions) => ParseResult} [parseForESLint] The parser options that will be enabled under this environment.\n */\n\n/**\n * @typedef {Object} Environment\n * @property {Record<string, GlobalConf>} [globals] The definition of global variables.\n * @property {ParserOptions} [parserOptions] The parser options that will be enabled under this environment.\n */\n\n/**\n * @typedef {Object} LintMessage\n * @property {number} column The 1-based column number.\n * @property {number} [endColumn] The 1-based column number of the end location.\n * @property {number} [endLine] The 1-based line number of the end location.\n * @property {boolean} fatal If `true` then this is a fatal error.\n * @property {{range:[number,number], text:string}} [fix] Information for autofix.\n * @property {number} line The 1-based line number.\n * @property {string} message The error message.\n * @property {string|null} ruleId The ID of the rule which makes this message.\n * @property {0|1|2} severity The severity of this message.\n * @property {Array<{desc?: string, messageId?: string, fix: {range: [number, number], text: string}}>} [suggestions] Information for suggestions.\n */\n\n/**\n * @typedef {Object} SuggestionResult\n * @property {string} desc A short description.\n * @property {string} [messageId] Id referencing a message for the description.\n * @property {{ text: string, range: number[] }} fix fix result info\n */\n\n/**\n * @typedef {Object} Processor\n * @property {(text:string, filename:string) => Array<string | { text:string, filename:string }>} [preprocess] The function to extract code blocks.\n * @property {(messagesList:LintMessage[][], filename:string) => LintMessage[]} [postprocess] The function to merge messages.\n * @property {boolean} [supportsAutofix] If `true` then it means the processor supports autofix.\n */\n\n/**\n * @typedef {Object} RuleMetaDocs\n * @property {string} category The category of the rule.\n * @property {string} description The description of the rule.\n * @property {boolean} recommended If `true` then the rule is included in `eslint:recommended` preset.\n * @property {string} url The URL of the rule documentation.\n */\n\n/**\n * @typedef {Object} RuleMeta\n * @property {boolean} [deprecated] If `true` then the rule has been deprecated.\n * @property {RuleMetaDocs} docs The document information of the rule.\n * @property {\"code\"|\"whitespace\"} [fixable] The autofix type.\n * @property {Record<string,string>} [messages] The messages the rule reports.\n * @property {string[]} [replacedBy] The IDs of the alternative rules.\n * @property {Array|Object} schema The option schema of the rule.\n * @property {\"problem\"|\"suggestion\"|\"layout\"} type The rule type.\n */\n\n/**\n * @typedef {Object} Rule\n * @property {Function} create The factory of the rule.\n * @property {RuleMeta} meta The meta data of the rule.\n */\n\n/**\n * @typedef {Object} Plugin\n * @property {Record<string, ConfigData>} [configs] The definition of plugin configs.\n * @property {Record<string, Environment>} [environments] The definition of plugin environments.\n * @property {Record<string, Processor>} [processors] The definition of plugin processors.\n * @property {Record<string, Function | Rule>} [rules] The definition of plugin rules.\n */\n\n/**\n * Information of deprecated rules.\n * @typedef {Object} DeprecatedRuleInfo\n * @property {string} ruleId The rule ID.\n * @property {string[]} replacedBy The rule IDs that replace this deprecated rule.\n */","map":{"version":3,"names":[],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@eslint/eslintrc/lib/shared/types.js"],"sourcesContent":["/**\n * @fileoverview Define common types for input completion.\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\n/** @type {any} */\nexport default {};\n\n/** @typedef {boolean | \"off\" | \"readable\" | \"readonly\" | \"writable\" | \"writeable\"} GlobalConf */\n/** @typedef {0 | 1 | 2 | \"off\" | \"warn\" | \"error\"} SeverityConf */\n/** @typedef {SeverityConf | [SeverityConf, ...any[]]} RuleConf */\n\n/**\n * @typedef {Object} EcmaFeatures\n * @property {boolean} [globalReturn] Enabling `return` statements at the top-level.\n * @property {boolean} [jsx] Enabling JSX syntax.\n * @property {boolean} [impliedStrict] Enabling strict mode always.\n */\n\n/**\n * @typedef {Object} ParserOptions\n * @property {EcmaFeatures} [ecmaFeatures] The optional features.\n * @property {3|5|6|7|8|9|10|11|12|2015|2016|2017|2018|2019|2020|2021} [ecmaVersion] The ECMAScript version (or revision number).\n * @property {\"script\"|\"module\"} [sourceType] The source code type.\n */\n\n/**\n * @typedef {Object} ConfigData\n * @property {Record<string, boolean>} [env] The environment settings.\n * @property {string | string[]} [extends] The path to other config files or the package name of shareable configs.\n * @property {Record<string, GlobalConf>} [globals] The global variable settings.\n * @property {string | string[]} [ignorePatterns] The glob patterns that ignore to lint.\n * @property {boolean} [noInlineConfig] The flag that disables directive comments.\n * @property {OverrideConfigData[]} [overrides] The override settings per kind of files.\n * @property {string} [parser] The path to a parser or the package name of a parser.\n * @property {ParserOptions} [parserOptions] The parser options.\n * @property {string[]} [plugins] The plugin specifiers.\n * @property {string} [processor] The processor specifier.\n * @property {boolean} [reportUnusedDisableDirectives] The flag to report unused `eslint-disable` comments.\n * @property {boolean} [root] The root flag.\n * @property {Record<string, RuleConf>} [rules] The rule settings.\n * @property {Object} [settings] The shared settings.\n */\n\n/**\n * @typedef {Object} OverrideConfigData\n * @property {Record<string, boolean>} [env] The environment settings.\n * @property {string | string[]} [excludedFiles] The glob pattarns for excluded files.\n * @property {string | string[]} [extends] The path to other config files or the package name of shareable configs.\n * @property {string | string[]} files The glob patterns for target files.\n * @property {Record<string, GlobalConf>} [globals] The global variable settings.\n * @property {boolean} [noInlineConfig] The flag that disables directive comments.\n * @property {OverrideConfigData[]} [overrides] The override settings per kind of files.\n * @property {string} [parser] The path to a parser or the package name of a parser.\n * @property {ParserOptions} [parserOptions] The parser options.\n * @property {string[]} [plugins] The plugin specifiers.\n * @property {string} [processor] The processor specifier.\n * @property {boolean} [reportUnusedDisableDirectives] The flag to report unused `eslint-disable` comments.\n * @property {Record<string, RuleConf>} [rules] The rule settings.\n * @property {Object} [settings] The shared settings.\n */\n\n/**\n * @typedef {Object} ParseResult\n * @property {Object} ast The AST.\n * @property {ScopeManager} [scopeManager] The scope manager of the AST.\n * @property {Record<string, any>} [services] The services that the parser provides.\n * @property {Record<string, string[]>} [visitorKeys] The visitor keys of the AST.\n */\n\n/**\n * @typedef {Object} Parser\n * @property {(text:string, options:ParserOptions) => Object} parse The definition of global variables.\n * @property {(text:string, options:ParserOptions) => ParseResult} [parseForESLint] The parser options that will be enabled under this environment.\n */\n\n/**\n * @typedef {Object} Environment\n * @property {Record<string, GlobalConf>} [globals] The definition of global variables.\n * @property {ParserOptions} [parserOptions] The parser options that will be enabled under this environment.\n */\n\n/**\n * @typedef {Object} LintMessage\n * @property {number} column The 1-based column number.\n * @property {number} [endColumn] The 1-based column number of the end location.\n * @property {number} [endLine] The 1-based line number of the end location.\n * @property {boolean} fatal If `true` then this is a fatal error.\n * @property {{range:[number,number], text:string}} [fix] Information for autofix.\n * @property {number} line The 1-based line number.\n * @property {string} message The error message.\n * @property {string|null} ruleId The ID of the rule which makes this message.\n * @property {0|1|2} severity The severity of this message.\n * @property {Array<{desc?: string, messageId?: string, fix: {range: [number, number], text: string}}>} [suggestions] Information for suggestions.\n */\n\n/**\n * @typedef {Object} SuggestionResult\n * @property {string} desc A short description.\n * @property {string} [messageId] Id referencing a message for the description.\n * @property {{ text: string, range: number[] }} fix fix result info\n */\n\n/**\n * @typedef {Object} Processor\n * @property {(text:string, filename:string) => Array<string | { text:string, filename:string }>} [preprocess] The function to extract code blocks.\n * @property {(messagesList:LintMessage[][], filename:string) => LintMessage[]} [postprocess] The function to merge messages.\n * @property {boolean} [supportsAutofix] If `true` then it means the processor supports autofix.\n */\n\n/**\n * @typedef {Object} RuleMetaDocs\n * @property {string} category The category of the rule.\n * @property {string} description The description of the rule.\n * @property {boolean} recommended If `true` then the rule is included in `eslint:recommended` preset.\n * @property {string} url The URL of the rule documentation.\n */\n\n/**\n * @typedef {Object} RuleMeta\n * @property {boolean} [deprecated] If `true` then the rule has been deprecated.\n * @property {RuleMetaDocs} docs The document information of the rule.\n * @property {\"code\"|\"whitespace\"} [fixable] The autofix type.\n * @property {Record<string,string>} [messages] The messages the rule reports.\n * @property {string[]} [replacedBy] The IDs of the alternative rules.\n * @property {Array|Object} schema The option schema of the rule.\n * @property {\"problem\"|\"suggestion\"|\"layout\"} type The rule type.\n */\n\n/**\n * @typedef {Object} Rule\n * @property {Function} create The factory of the rule.\n * @property {RuleMeta} meta The meta data of the rule.\n */\n\n/**\n * @typedef {Object} Plugin\n * @property {Record<string, ConfigData>} [configs] The definition of plugin configs.\n * @property {Record<string, Environment>} [environments] The definition of plugin environments.\n * @property {Record<string, Processor>} [processors] The definition of plugin processors.\n * @property {Record<string, Function | Rule>} [rules] The definition of plugin rules.\n */\n\n/**\n * Information of deprecated rules.\n * @typedef {Object} DeprecatedRuleInfo\n * @property {string} ruleId The rule ID.\n * @property {string[]} replacedBy The rule IDs that replace this deprecated rule.\n */\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,eAAe,CAAC,CAAC;;AAEjignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}