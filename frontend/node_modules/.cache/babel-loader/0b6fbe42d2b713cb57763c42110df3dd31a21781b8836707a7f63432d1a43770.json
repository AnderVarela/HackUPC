{"ast":null,"code":"/**\n * @fileoverview Compatibility class for flat config.\n * @author Nicholas C. Zakas\n */\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nimport createDebug from \"debug\";\nimport path from \"path\";\nimport environments from \"../conf/environments.js\";\nimport { ConfigArrayFactory } from \"./config-array-factory.js\";\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/** @typedef {import(\"../../shared/types\").Environment} Environment */\n/** @typedef {import(\"../../shared/types\").Processor} Processor */\n\nconst debug = createDebug(\"eslintrc:flat-compat\");\nconst cafactory = Symbol(\"cafactory\");\n\n/**\n * Translates an ESLintRC-style config object into a flag-config-style config\n * object.\n * @param {Object} eslintrcConfig An ESLintRC-style config object.\n * @param {Object} options Options to help translate the config.\n * @param {string} options.resolveConfigRelativeTo To the directory to resolve\n *      configs from.\n * @param {string} options.resolvePluginsRelativeTo The directory to resolve\n *      plugins from.\n * @param {ReadOnlyMap<string,Environment>} options.pluginEnvironments A map of plugin environment\n *      names to objects.\n * @param {ReadOnlyMap<string,Processor>} options.pluginProcessors A map of plugin processor\n *      names to objects.\n * @returns {Object} A flag-config-style config object.\n */\nfunction translateESLintRC(eslintrcConfig, {\n  resolveConfigRelativeTo,\n  resolvePluginsRelativeTo,\n  pluginEnvironments,\n  pluginProcessors\n}) {\n  const flatConfig = {};\n  const configs = [];\n  const languageOptions = {};\n  const linterOptions = {};\n  const keysToCopy = [\"settings\", \"rules\", \"processor\"];\n  const languageOptionsKeysToCopy = [\"globals\", \"parser\", \"parserOptions\"];\n  const linterOptionsKeysToCopy = [\"noInlineConfig\", \"reportUnusedDisableDirectives\"];\n\n  // copy over simple translations\n  for (const key of keysToCopy) {\n    if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n      flatConfig[key] = eslintrcConfig[key];\n    }\n  }\n\n  // copy over languageOptions\n  for (const key of languageOptionsKeysToCopy) {\n    if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n      // create the languageOptions key in the flat config\n      flatConfig.languageOptions = languageOptions;\n      if (key === \"parser\") {\n        debug(`Resolving parser '${languageOptions[key]}' relative to ${resolveConfigRelativeTo}`);\n        if (eslintrcConfig[key].error) {\n          throw eslintrcConfig[key].error;\n        }\n        languageOptions[key] = eslintrcConfig[key].definition;\n        continue;\n      }\n\n      // clone any object values that are in the eslintrc config\n      if (eslintrcConfig[key] && typeof eslintrcConfig[key] === \"object\") {\n        languageOptions[key] = {\n          ...eslintrcConfig[key]\n        };\n      } else {\n        languageOptions[key] = eslintrcConfig[key];\n      }\n    }\n  }\n\n  // copy over linterOptions\n  for (const key of linterOptionsKeysToCopy) {\n    if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n      flatConfig.linterOptions = linterOptions;\n      linterOptions[key] = eslintrcConfig[key];\n    }\n  }\n\n  // move ecmaVersion a level up\n  if (languageOptions.parserOptions) {\n    if (\"ecmaVersion\" in languageOptions.parserOptions) {\n      languageOptions.ecmaVersion = languageOptions.parserOptions.ecmaVersion;\n      delete languageOptions.parserOptions.ecmaVersion;\n    }\n    if (\"sourceType\" in languageOptions.parserOptions) {\n      languageOptions.sourceType = languageOptions.parserOptions.sourceType;\n      delete languageOptions.parserOptions.sourceType;\n    }\n\n    // check to see if we even need parserOptions anymore and remove it if not\n    if (Object.keys(languageOptions.parserOptions).length === 0) {\n      delete languageOptions.parserOptions;\n    }\n  }\n\n  // overrides\n  if (eslintrcConfig.criteria) {\n    flatConfig.files = [absoluteFilePath => eslintrcConfig.criteria.test(absoluteFilePath)];\n  }\n\n  // translate plugins\n  if (eslintrcConfig.plugins && typeof eslintrcConfig.plugins === \"object\") {\n    debug(`Translating plugins: ${eslintrcConfig.plugins}`);\n    flatConfig.plugins = {};\n    for (const pluginName of Object.keys(eslintrcConfig.plugins)) {\n      debug(`Translating plugin: ${pluginName}`);\n      debug(`Resolving plugin '${pluginName} relative to ${resolvePluginsRelativeTo}`);\n      const {\n        original: plugin,\n        error\n      } = eslintrcConfig.plugins[pluginName];\n      if (error) {\n        throw error;\n      }\n      flatConfig.plugins[pluginName] = plugin;\n\n      // create a config for any processors\n      if (plugin.processors) {\n        for (const processorName of Object.keys(plugin.processors)) {\n          if (processorName.startsWith(\".\")) {\n            debug(`Assigning processor: ${pluginName}/${processorName}`);\n            configs.unshift({\n              files: [`**/*${processorName}`],\n              processor: pluginProcessors.get(`${pluginName}/${processorName}`)\n            });\n          }\n        }\n      }\n    }\n  }\n\n  // translate env - must come after plugins\n  if (eslintrcConfig.env && typeof eslintrcConfig.env === \"object\") {\n    for (const envName of Object.keys(eslintrcConfig.env)) {\n      // only add environments that are true\n      if (eslintrcConfig.env[envName]) {\n        debug(`Translating environment: ${envName}`);\n        if (environments.has(envName)) {\n          // built-in environments should be defined first\n          configs.unshift(...translateESLintRC({\n            criteria: eslintrcConfig.criteria,\n            ...environments.get(envName)\n          }, {\n            resolveConfigRelativeTo,\n            resolvePluginsRelativeTo\n          }));\n        } else if (pluginEnvironments.has(envName)) {\n          // if the environment comes from a plugin, it should come after the plugin config\n          configs.push(...translateESLintRC({\n            criteria: eslintrcConfig.criteria,\n            ...pluginEnvironments.get(envName)\n          }, {\n            resolveConfigRelativeTo,\n            resolvePluginsRelativeTo\n          }));\n        }\n      }\n    }\n  }\n\n  // only add if there are actually keys in the config\n  if (Object.keys(flatConfig).length > 0) {\n    configs.push(flatConfig);\n  }\n  return configs;\n}\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * A compatibility class for working with configs.\n */\nclass FlatCompat {\n  constructor({\n    baseDirectory = process.cwd(),\n    resolvePluginsRelativeTo = baseDirectory,\n    recommendedConfig,\n    allConfig\n  } = {}) {\n    this.baseDirectory = baseDirectory;\n    this.resolvePluginsRelativeTo = resolvePluginsRelativeTo;\n    this[cafactory] = new ConfigArrayFactory({\n      cwd: baseDirectory,\n      resolvePluginsRelativeTo,\n      getEslintAllConfig: () => {\n        if (!allConfig) {\n          throw new TypeError(\"Missing parameter 'allConfig' in FlatCompat constructor.\");\n        }\n        return allConfig;\n      },\n      getEslintRecommendedConfig: () => {\n        if (!recommendedConfig) {\n          throw new TypeError(\"Missing parameter 'recommendedConfig' in FlatCompat constructor.\");\n        }\n        return recommendedConfig;\n      }\n    });\n  }\n\n  /**\n   * Translates an ESLintRC-style config into a flag-config-style config.\n   * @param {Object} eslintrcConfig The ESLintRC-style config object.\n   * @returns {Object} A flag-config-style config object.\n   */\n  config(eslintrcConfig) {\n    const eslintrcArray = this[cafactory].create(eslintrcConfig, {\n      basePath: this.baseDirectory\n    });\n    const flatArray = [];\n    let hasIgnorePatterns = false;\n    eslintrcArray.forEach(configData => {\n      if (configData.type === \"config\") {\n        hasIgnorePatterns = hasIgnorePatterns || configData.ignorePattern;\n        flatArray.push(...translateESLintRC(configData, {\n          resolveConfigRelativeTo: path.join(this.baseDirectory, \"__placeholder.js\"),\n          resolvePluginsRelativeTo: path.join(this.resolvePluginsRelativeTo, \"__placeholder.js\"),\n          pluginEnvironments: eslintrcArray.pluginEnvironments,\n          pluginProcessors: eslintrcArray.pluginProcessors\n        }));\n      }\n    });\n\n    // combine ignorePatterns to emulate ESLintRC behavior better\n    if (hasIgnorePatterns) {\n      flatArray.unshift({\n        ignores: [filePath => {\n          // Compute the final config for this file.\n          // This filters config array elements by `files`/`excludedFiles` then merges the elements.\n          const finalConfig = eslintrcArray.extractConfig(filePath);\n\n          // Test the `ignorePattern` properties of the final config.\n          return Boolean(finalConfig.ignores) && finalConfig.ignores(filePath);\n        }]\n      });\n    }\n    return flatArray;\n  }\n\n  /**\n   * Translates the `env` section of an ESLintRC-style config.\n   * @param {Object} envConfig The `env` section of an ESLintRC config.\n   * @returns {Object[]} An array of flag-config objects representing the environments.\n   */\n  env(envConfig) {\n    return this.config({\n      env: envConfig\n    });\n  }\n\n  /**\n   * Translates the `extends` section of an ESLintRC-style config.\n   * @param {...string} configsToExtend The names of the configs to load.\n   * @returns {Object[]} An array of flag-config objects representing the config.\n   */\n  extends(...configsToExtend) {\n    return this.config({\n      extends: configsToExtend\n    });\n  }\n\n  /**\n   * Translates the `plugins` section of an ESLintRC-style config.\n   * @param {...string} plugins The names of the plugins to load.\n   * @returns {Object[]} An array of flag-config objects representing the plugins.\n   */\n  plugins(...plugins) {\n    return this.config({\n      plugins\n    });\n  }\n}\nexport { FlatCompat };","map":{"version":3,"names":["createDebug","path","environments","ConfigArrayFactory","debug","cafactory","Symbol","translateESLintRC","eslintrcConfig","resolveConfigRelativeTo","resolvePluginsRelativeTo","pluginEnvironments","pluginProcessors","flatConfig","configs","languageOptions","linterOptions","keysToCopy","languageOptionsKeysToCopy","linterOptionsKeysToCopy","key","error","definition","parserOptions","ecmaVersion","sourceType","Object","keys","length","criteria","files","absoluteFilePath","test","plugins","pluginName","original","plugin","processors","processorName","startsWith","unshift","processor","get","env","envName","has","push","FlatCompat","constructor","baseDirectory","process","cwd","recommendedConfig","allConfig","getEslintAllConfig","TypeError","getEslintRecommendedConfig","config","eslintrcArray","create","basePath","flatArray","hasIgnorePatterns","forEach","configData","type","ignorePattern","join","ignores","filePath","finalConfig","extractConfig","Boolean","envConfig","extends","configsToExtend"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@eslint/eslintrc/lib/flat-compat.js"],"sourcesContent":["/**\n * @fileoverview Compatibility class for flat config.\n * @author Nicholas C. Zakas\n */\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nimport createDebug from \"debug\";\nimport path from \"path\";\n\nimport environments from \"../conf/environments.js\";\nimport { ConfigArrayFactory } from \"./config-array-factory.js\";\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/** @typedef {import(\"../../shared/types\").Environment} Environment */\n/** @typedef {import(\"../../shared/types\").Processor} Processor */\n\nconst debug = createDebug(\"eslintrc:flat-compat\");\nconst cafactory = Symbol(\"cafactory\");\n\n/**\n * Translates an ESLintRC-style config object into a flag-config-style config\n * object.\n * @param {Object} eslintrcConfig An ESLintRC-style config object.\n * @param {Object} options Options to help translate the config.\n * @param {string} options.resolveConfigRelativeTo To the directory to resolve\n *      configs from.\n * @param {string} options.resolvePluginsRelativeTo The directory to resolve\n *      plugins from.\n * @param {ReadOnlyMap<string,Environment>} options.pluginEnvironments A map of plugin environment\n *      names to objects.\n * @param {ReadOnlyMap<string,Processor>} options.pluginProcessors A map of plugin processor\n *      names to objects.\n * @returns {Object} A flag-config-style config object.\n */\nfunction translateESLintRC(eslintrcConfig, {\n    resolveConfigRelativeTo,\n    resolvePluginsRelativeTo,\n    pluginEnvironments,\n    pluginProcessors\n}) {\n\n    const flatConfig = {};\n    const configs = [];\n    const languageOptions = {};\n    const linterOptions = {};\n    const keysToCopy = [\"settings\", \"rules\", \"processor\"];\n    const languageOptionsKeysToCopy = [\"globals\", \"parser\", \"parserOptions\"];\n    const linterOptionsKeysToCopy = [\"noInlineConfig\", \"reportUnusedDisableDirectives\"];\n\n    // copy over simple translations\n    for (const key of keysToCopy) {\n        if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n            flatConfig[key] = eslintrcConfig[key];\n        }\n    }\n\n    // copy over languageOptions\n    for (const key of languageOptionsKeysToCopy) {\n        if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n\n            // create the languageOptions key in the flat config\n            flatConfig.languageOptions = languageOptions;\n\n            if (key === \"parser\") {\n                debug(`Resolving parser '${languageOptions[key]}' relative to ${resolveConfigRelativeTo}`);\n\n                if (eslintrcConfig[key].error) {\n                    throw eslintrcConfig[key].error;\n                }\n\n                languageOptions[key] = eslintrcConfig[key].definition;\n                continue;\n            }\n\n            // clone any object values that are in the eslintrc config\n            if (eslintrcConfig[key] && typeof eslintrcConfig[key] === \"object\") {\n                languageOptions[key] = {\n                    ...eslintrcConfig[key]\n                };\n            } else {\n                languageOptions[key] = eslintrcConfig[key];\n            }\n        }\n    }\n\n    // copy over linterOptions\n    for (const key of linterOptionsKeysToCopy) {\n        if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n            flatConfig.linterOptions = linterOptions;\n            linterOptions[key] = eslintrcConfig[key];\n        }\n    }\n\n    // move ecmaVersion a level up\n    if (languageOptions.parserOptions) {\n\n        if (\"ecmaVersion\" in languageOptions.parserOptions) {\n            languageOptions.ecmaVersion = languageOptions.parserOptions.ecmaVersion;\n            delete languageOptions.parserOptions.ecmaVersion;\n        }\n\n        if (\"sourceType\" in languageOptions.parserOptions) {\n            languageOptions.sourceType = languageOptions.parserOptions.sourceType;\n            delete languageOptions.parserOptions.sourceType;\n        }\n\n        // check to see if we even need parserOptions anymore and remove it if not\n        if (Object.keys(languageOptions.parserOptions).length === 0) {\n            delete languageOptions.parserOptions;\n        }\n    }\n\n    // overrides\n    if (eslintrcConfig.criteria) {\n        flatConfig.files = [absoluteFilePath => eslintrcConfig.criteria.test(absoluteFilePath)];\n    }\n\n    // translate plugins\n    if (eslintrcConfig.plugins && typeof eslintrcConfig.plugins === \"object\") {\n        debug(`Translating plugins: ${eslintrcConfig.plugins}`);\n\n        flatConfig.plugins = {};\n\n        for (const pluginName of Object.keys(eslintrcConfig.plugins)) {\n\n            debug(`Translating plugin: ${pluginName}`);\n            debug(`Resolving plugin '${pluginName} relative to ${resolvePluginsRelativeTo}`);\n\n            const { original: plugin, error } = eslintrcConfig.plugins[pluginName];\n\n            if (error) {\n                throw error;\n            }\n\n            flatConfig.plugins[pluginName] = plugin;\n\n            // create a config for any processors\n            if (plugin.processors) {\n                for (const processorName of Object.keys(plugin.processors)) {\n                    if (processorName.startsWith(\".\")) {\n                        debug(`Assigning processor: ${pluginName}/${processorName}`);\n\n                        configs.unshift({\n                            files: [`**/*${processorName}`],\n                            processor: pluginProcessors.get(`${pluginName}/${processorName}`)\n                        });\n                    }\n\n                }\n            }\n        }\n    }\n\n    // translate env - must come after plugins\n    if (eslintrcConfig.env && typeof eslintrcConfig.env === \"object\") {\n        for (const envName of Object.keys(eslintrcConfig.env)) {\n\n            // only add environments that are true\n            if (eslintrcConfig.env[envName]) {\n                debug(`Translating environment: ${envName}`);\n\n                if (environments.has(envName)) {\n\n                    // built-in environments should be defined first\n                    configs.unshift(...translateESLintRC({\n                        criteria: eslintrcConfig.criteria,\n                        ...environments.get(envName)\n                    }, {\n                        resolveConfigRelativeTo,\n                        resolvePluginsRelativeTo\n                    }));\n                } else if (pluginEnvironments.has(envName)) {\n\n                    // if the environment comes from a plugin, it should come after the plugin config\n                    configs.push(...translateESLintRC({\n                        criteria: eslintrcConfig.criteria,\n                        ...pluginEnvironments.get(envName)\n                    }, {\n                        resolveConfigRelativeTo,\n                        resolvePluginsRelativeTo\n                    }));\n                }\n            }\n        }\n    }\n\n    // only add if there are actually keys in the config\n    if (Object.keys(flatConfig).length > 0) {\n        configs.push(flatConfig);\n    }\n\n    return configs;\n}\n\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * A compatibility class for working with configs.\n */\nclass FlatCompat {\n\n    constructor({\n        baseDirectory = process.cwd(),\n        resolvePluginsRelativeTo = baseDirectory,\n        recommendedConfig,\n        allConfig\n    } = {}) {\n        this.baseDirectory = baseDirectory;\n        this.resolvePluginsRelativeTo = resolvePluginsRelativeTo;\n        this[cafactory] = new ConfigArrayFactory({\n            cwd: baseDirectory,\n            resolvePluginsRelativeTo,\n            getEslintAllConfig: () => {\n\n                if (!allConfig) {\n                    throw new TypeError(\"Missing parameter 'allConfig' in FlatCompat constructor.\");\n                }\n\n                return allConfig;\n            },\n            getEslintRecommendedConfig: () => {\n\n                if (!recommendedConfig) {\n                    throw new TypeError(\"Missing parameter 'recommendedConfig' in FlatCompat constructor.\");\n                }\n\n                return recommendedConfig;\n            }\n        });\n    }\n\n    /**\n     * Translates an ESLintRC-style config into a flag-config-style config.\n     * @param {Object} eslintrcConfig The ESLintRC-style config object.\n     * @returns {Object} A flag-config-style config object.\n     */\n    config(eslintrcConfig) {\n        const eslintrcArray = this[cafactory].create(eslintrcConfig, {\n            basePath: this.baseDirectory\n        });\n\n        const flatArray = [];\n        let hasIgnorePatterns = false;\n\n        eslintrcArray.forEach(configData => {\n            if (configData.type === \"config\") {\n                hasIgnorePatterns = hasIgnorePatterns || configData.ignorePattern;\n                flatArray.push(...translateESLintRC(configData, {\n                    resolveConfigRelativeTo: path.join(this.baseDirectory, \"__placeholder.js\"),\n                    resolvePluginsRelativeTo: path.join(this.resolvePluginsRelativeTo, \"__placeholder.js\"),\n                    pluginEnvironments: eslintrcArray.pluginEnvironments,\n                    pluginProcessors: eslintrcArray.pluginProcessors\n                }));\n            }\n        });\n\n        // combine ignorePatterns to emulate ESLintRC behavior better\n        if (hasIgnorePatterns) {\n            flatArray.unshift({\n                ignores: [filePath => {\n\n                    // Compute the final config for this file.\n                    // This filters config array elements by `files`/`excludedFiles` then merges the elements.\n                    const finalConfig = eslintrcArray.extractConfig(filePath);\n\n                    // Test the `ignorePattern` properties of the final config.\n                    return Boolean(finalConfig.ignores) && finalConfig.ignores(filePath);\n                }]\n            });\n        }\n\n        return flatArray;\n    }\n\n    /**\n     * Translates the `env` section of an ESLintRC-style config.\n     * @param {Object} envConfig The `env` section of an ESLintRC config.\n     * @returns {Object[]} An array of flag-config objects representing the environments.\n     */\n    env(envConfig) {\n        return this.config({\n            env: envConfig\n        });\n    }\n\n    /**\n     * Translates the `extends` section of an ESLintRC-style config.\n     * @param {...string} configsToExtend The names of the configs to load.\n     * @returns {Object[]} An array of flag-config objects representing the config.\n     */\n    extends(...configsToExtend) {\n        return this.config({\n            extends: configsToExtend\n        });\n    }\n\n    /**\n     * Translates the `plugins` section of an ESLintRC-style config.\n     * @param {...string} plugins The names of the plugins to load.\n     * @returns {Object[]} An array of flag-config objects representing the plugins.\n     */\n    plugins(...plugins) {\n        return this.config({\n            plugins\n        });\n    }\n}\n\nexport { FlatCompat };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}