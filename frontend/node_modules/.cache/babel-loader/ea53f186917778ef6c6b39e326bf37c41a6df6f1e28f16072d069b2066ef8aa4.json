{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\nvar _helperReplaceSupers = require(\"@babel/helper-replace-supers\");\nvar _core = require(\"@babel/core\");\nfunction replacePropertySuper(path, getObjectRef, file) {\n  const replaceSupers = new _helperReplaceSupers.default({\n    getObjectRef: getObjectRef,\n    methodPath: path,\n    file: file\n  });\n  replaceSupers.replace();\n}\nvar _default = exports.default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  const newLets = new Set();\n  return {\n    name: \"transform-object-super\",\n    visitor: {\n      Loop: {\n        exit(path) {\n          newLets.forEach(v => {\n            if (v.scopePath === path) {\n              path.scope.push({\n                id: v.id,\n                kind: \"let\"\n              });\n              path.scope.crawl();\n              path.requeue();\n              newLets.delete(v);\n            }\n          });\n        }\n      },\n      ObjectExpression(path, state) {\n        let objectRef;\n        const getObjectRef = () => objectRef = objectRef || path.scope.generateUidIdentifier(\"obj\");\n        path.get(\"properties\").forEach(propPath => {\n          if (!propPath.isMethod()) return;\n          replacePropertySuper(propPath, getObjectRef, state.file);\n        });\n        if (objectRef) {\n          const scopePath = path.findParent(p => p.isFunction() || p.isProgram() || p.isLoop());\n          const useLet = scopePath.isLoop();\n          if (useLet) {\n            newLets.add({\n              scopePath,\n              id: _core.types.cloneNode(objectRef)\n            });\n          } else {\n            path.scope.push({\n              id: _core.types.cloneNode(objectRef),\n              kind: \"var\"\n            });\n          }\n          path.replaceWith(_core.types.assignmentExpression(\"=\", _core.types.cloneNode(objectRef), path.node));\n        }\n      }\n    }\n  };\n});","map":{"version":3,"names":["_helperPluginUtils","require","_helperReplaceSupers","_core","replacePropertySuper","path","getObjectRef","file","replaceSupers","default","methodPath","replace","_default","exports","declare","api","assertVersion","newLets","Set","name","visitor","Loop","exit","forEach","v","scopePath","scope","push","id","kind","crawl","requeue","delete","ObjectExpression","state","objectRef","generateUidIdentifier","get","propPath","isMethod","findParent","p","isFunction","isProgram","isLoop","useLet","add","types","cloneNode","replaceWith","assignmentExpression","node"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\plugin-transform-object-super\\src\\index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport ReplaceSupers from \"@babel/helper-replace-supers\";\nimport { types as t, type File } from \"@babel/core\";\nimport type { NodePath } from \"@babel/traverse\";\n\nfunction replacePropertySuper(\n  path: NodePath<t.ObjectMethod>,\n  getObjectRef: () => t.Identifier,\n  file: File,\n) {\n  // @ts-expect-error todo(flow->ts):\n  const replaceSupers = new ReplaceSupers({\n    getObjectRef: getObjectRef,\n    methodPath: path,\n    file: file,\n  });\n\n  replaceSupers.replace();\n}\n\nexport default declare(api => {\n  api.assertVersion(REQUIRED_VERSION(7));\n  const newLets = new Set<{\n    scopePath: NodePath;\n    id: t.Identifier;\n  }>();\n\n  return {\n    name: \"transform-object-super\",\n\n    visitor: {\n      Loop: {\n        exit(path) {\n          newLets.forEach(v => {\n            if (v.scopePath === path) {\n              path.scope.push({\n                id: v.id,\n                kind: \"let\",\n              });\n              path.scope.crawl();\n              path.requeue();\n              newLets.delete(v);\n            }\n          });\n        },\n      },\n      ObjectExpression(path, state) {\n        let objectRef: t.Identifier;\n        const getObjectRef = () =>\n          (objectRef = objectRef || path.scope.generateUidIdentifier(\"obj\"));\n\n        path.get(\"properties\").forEach(propPath => {\n          if (!propPath.isMethod()) return;\n\n          replacePropertySuper(propPath, getObjectRef, state.file);\n        });\n\n        if (objectRef) {\n          const scopePath = path.findParent(\n            p => p.isFunction() || p.isProgram() || p.isLoop(),\n          );\n          const useLet = scopePath.isLoop();\n          // For transform-block-scoping\n          if (useLet) {\n            newLets.add({ scopePath, id: t.cloneNode(objectRef) });\n          } else {\n            path.scope.push({\n              id: t.cloneNode(objectRef),\n              kind: \"var\",\n            });\n          }\n\n          path.replaceWith(\n            t.assignmentExpression(\"=\", t.cloneNode(objectRef), path.node),\n          );\n        }\n      },\n    },\n  };\n});\n"],"mappings":";;;;;;AAAA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,oBAAA,GAAAD,OAAA;AACA,IAAAE,KAAA,GAAAF,OAAA;AAGA,SAASG,oBAAoBA,CAC3BC,IAA8B,EAC9BC,YAAgC,EAChCC,IAAU,EACV;EAEA,MAAMC,aAAa,GAAG,IAAIN,oBAAA,CAAAO,OAAa,CAAC;IACtCH,YAAY,EAAEA,YAAY;IAC1BI,UAAU,EAAEL,IAAI;IAChBE,IAAI,EAAEA;EACR,CAAC,CAAC;EAEFC,aAAa,CAACG,OAAO,CAAC,CAAC;AACzB;AAAC,IAAAC,QAAA,GAAAC,OAAA,CAAAJ,OAAA,GAEc,IAAAT,kBAAA,CAAAc,OAAO,EAACC,GAAG,IAAI;EAC5BA,GAAG,CAACC,aAAa,CAAkB,CAAE,CAAC;EACtC,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAGpB,CAAC;EAEJ,OAAO;IACLC,IAAI,EAAE,wBAAwB;IAE9BC,OAAO,EAAE;MACPC,IAAI,EAAE;QACJC,IAAIA,CAACjB,IAAI,EAAE;UACTY,OAAO,CAACM,OAAO,CAACC,CAAC,IAAI;YACnB,IAAIA,CAAC,CAACC,SAAS,KAAKpB,IAAI,EAAE;cACxBA,IAAI,CAACqB,KAAK,CAACC,IAAI,CAAC;gBACdC,EAAE,EAAEJ,CAAC,CAACI,EAAE;gBACRC,IAAI,EAAE;cACR,CAAC,CAAC;cACFxB,IAAI,CAACqB,KAAK,CAACI,KAAK,CAAC,CAAC;cAClBzB,IAAI,CAAC0B,OAAO,CAAC,CAAC;cACdd,OAAO,CAACe,MAAM,CAACR,CAAC,CAAC;YACnB;UACF,CAAC,CAAC;QACJ;MACF,CAAC;MACDS,gBAAgBA,CAAC5B,IAAI,EAAE6B,KAAK,EAAE;QAC5B,IAAIC,SAAuB;QAC3B,MAAM7B,YAAY,GAAGA,CAAA,KAClB6B,SAAS,GAAGA,SAAS,IAAI9B,IAAI,CAACqB,KAAK,CAACU,qBAAqB,CAAC,KAAK,CAAE;QAEpE/B,IAAI,CAACgC,GAAG,CAAC,YAAY,CAAC,CAACd,OAAO,CAACe,QAAQ,IAAI;UACzC,IAAI,CAACA,QAAQ,CAACC,QAAQ,CAAC,CAAC,EAAE;UAE1BnC,oBAAoB,CAACkC,QAAQ,EAAEhC,YAAY,EAAE4B,KAAK,CAAC3B,IAAI,CAAC;QAC1D,CAAC,CAAC;QAEF,IAAI4B,SAAS,EAAE;UACb,MAAMV,SAAS,GAAGpB,IAAI,CAACmC,UAAU,CAC/BC,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,IAAID,CAAC,CAACE,SAAS,CAAC,CAAC,IAAIF,CAAC,CAACG,MAAM,CAAC,CACnD,CAAC;UACD,MAAMC,MAAM,GAAGpB,SAAS,CAACmB,MAAM,CAAC,CAAC;UAEjC,IAAIC,MAAM,EAAE;YACV5B,OAAO,CAAC6B,GAAG,CAAC;cAAErB,SAAS;cAAEG,EAAE,EAAEzB,KAAA,CAAA4C,KAAC,CAACC,SAAS,CAACb,SAAS;YAAE,CAAC,CAAC;UACxD,CAAC,MAAM;YACL9B,IAAI,CAACqB,KAAK,CAACC,IAAI,CAAC;cACdC,EAAE,EAAEzB,KAAA,CAAA4C,KAAC,CAACC,SAAS,CAACb,SAAS,CAAC;cAC1BN,IAAI,EAAE;YACR,CAAC,CAAC;UACJ;UAEAxB,IAAI,CAAC4C,WAAW,CACd9C,KAAA,CAAA4C,KAAC,CAACG,oBAAoB,CAAC,GAAG,EAAE/C,KAAA,CAAA4C,KAAC,CAACC,SAAS,CAACb,SAAS,CAAC,EAAE9B,IAAI,CAAC8C,IAAI,CAC/D,CAAC;QACH;MACF;IACF;EACF,CAAC;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}