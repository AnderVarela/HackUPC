{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypeOfPropertyOfType = exports.getTypeOfPropertyOfName = void 0;\nfunction getTypeOfPropertyOfName(checker, type, name, escapedName) {\n  // Most names are directly usable in the checker and aren't different from escaped names\n  if (!escapedName || !isSymbol(escapedName)) {\n    return checker.getTypeOfPropertyOfType(type, name);\n  }\n  // Symbolic names may differ in their escaped name compared to their human-readable name\n  // https://github.com/typescript-eslint/typescript-eslint/issues/2143\n  const escapedProperty = type.getProperties().find(property => property.escapedName === escapedName);\n  return escapedProperty ? checker.getDeclaredTypeOfSymbol(escapedProperty) : undefined;\n}\nexports.getTypeOfPropertyOfName = getTypeOfPropertyOfName;\nfunction getTypeOfPropertyOfType(checker, type, property) {\n  return getTypeOfPropertyOfName(checker, type, property.getName(), property.getEscapedName());\n}\nexports.getTypeOfPropertyOfType = getTypeOfPropertyOfType;\n// Symbolic names need to be specially handled because TS api is not sufficient for these cases.\n// Source based on:\n// https://github.com/microsoft/TypeScript/blob/0043abe982aae0d35f8df59f9715be6ada758ff7/src/compiler/utilities.ts#L3388-L3402\nfunction isSymbol(escapedName) {\n  return isKnownSymbol(escapedName) || isPrivateIdentifierSymbol(escapedName);\n}\n// case for escapedName: \"__@foo@10\", name: \"__@foo@10\"\nfunction isKnownSymbol(escapedName) {\n  return escapedName.startsWith('__@');\n}\n// case for escapedName: \"__#1@#foo\", name: \"#foo\"\nfunction isPrivateIdentifierSymbol(escapedName) {\n  return escapedName.startsWith('__#');\n}","map":{"version":3,"names":["getTypeOfPropertyOfName","checker","type","name","escapedName","isSymbol","getTypeOfPropertyOfType","escapedProperty","getProperties","find","property","getDeclaredTypeOfSymbol","undefined","exports","getName","getEscapedName","isKnownSymbol","isPrivateIdentifierSymbol","startsWith"],"sources":["../src/propertyTypes.ts"],"sourcesContent":[null],"mappings":";;;;;;AAEA,SAAgBA,uBAAuBA,CACrCC,OAAuB,EACvBC,IAAa,EACbC,IAAY,EACZC,WAAyB;EAEzB;EACA,IAAI,CAACA,WAAW,IAAI,CAACC,QAAQ,CAACD,WAAW,CAAC,EAAE;IAC1C,OAAOH,OAAO,CAACK,uBAAuB,CAACJ,IAAI,EAAEC,IAAI,CAAC;;EAGpD;EACA;EACA,MAAMI,eAAe,GAAGL,IAAI,CACzBM,aAAa,EAAE,CACfC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACN,WAAW,KAAKA,WAAW,CAAC;EAEzD,OAAOG,eAAe,GAClBN,OAAO,CAACU,uBAAuB,CAACJ,eAAe,CAAC,GAChDK,SAAS;AACf;AApBAC,OAAA,CAAAb,uBAAA,GAAAA,uBAAA;AAsBA,SAAgBM,uBAAuBA,CACrCL,OAAuB,EACvBC,IAAa,EACbQ,QAAmB;EAEnB,OAAOV,uBAAuB,CAC5BC,OAAO,EACPC,IAAI,EACJQ,QAAQ,CAACI,OAAO,EAAE,EAClBJ,QAAQ,CAACK,cAAc,EAAE,CAC1B;AACH;AAXAF,OAAA,CAAAP,uBAAA,GAAAA,uBAAA;AAaA;AACA;AACA;AACA,SAASD,QAAQA,CAACD,WAAmB;EACnC,OAAOY,aAAa,CAACZ,WAAW,CAAC,IAAIa,yBAAyB,CAACb,WAAW,CAAC;AAC7E;AAEA;AACA,SAASY,aAAaA,CAACZ,WAAmB;EACxC,OAAOA,WAAW,CAACc,UAAU,CAAC,KAAK,CAAC;AACtC;AAEA;AACA,SAASD,yBAAyBA,CAACb,WAAmB;EACpD,OAAOA,WAAW,CAACc,UAAU,CAAC,KAAK,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}