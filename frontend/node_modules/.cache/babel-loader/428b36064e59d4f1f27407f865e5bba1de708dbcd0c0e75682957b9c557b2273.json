{"ast":null,"code":"let Declaration = require('../declaration');\nlet {\n  autoplaceGridItems,\n  getGridGap,\n  inheritGridGap,\n  prefixTrackProp,\n  prefixTrackValue\n} = require('./grid-utils');\nlet Processor = require('../processor');\nclass GridRowsColumns extends Declaration {\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes);\n    let {\n      parent,\n      prop,\n      value\n    } = decl;\n    let isRowProp = prop.includes('rows');\n    let isColumnProp = prop.includes('columns');\n    let hasGridTemplate = parent.some(i => i.prop === 'grid-template' || i.prop === 'grid-template-areas');\n\n    /**\n     * Not to prefix rows declaration if grid-template(-areas) is present\n     */\n    if (hasGridTemplate && isRowProp) {\n      return false;\n    }\n    let processor = new Processor({\n      options: {}\n    });\n    let status = processor.gridStatus(parent, result);\n    let gap = getGridGap(decl);\n    gap = inheritGridGap(decl, gap) || gap;\n    let gapValue = isRowProp ? gap.row : gap.column;\n    if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {\n      gapValue = null;\n    }\n    let prefixValue = prefixTrackValue({\n      gap: gapValue,\n      value\n    });\n\n    /**\n     * Insert prefixes\n     */\n    decl.cloneBefore({\n      prop: prefixTrackProp({\n        prefix,\n        prop\n      }),\n      value: prefixValue\n    });\n    let autoflow = parent.nodes.find(i => i.prop === 'grid-auto-flow');\n    let autoflowValue = 'row';\n    if (autoflow && !processor.disabled(autoflow, result)) {\n      autoflowValue = autoflow.value.trim();\n    }\n    if (status === 'autoplace') {\n      /**\n       * Show warning if grid-template-rows decl is not found\n       */\n      let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');\n      if (!rowDecl && hasGridTemplate) {\n        return undefined;\n      } else if (!rowDecl && !hasGridTemplate) {\n        decl.warn(result, 'Autoplacement does not work without grid-template-rows property');\n        return undefined;\n      }\n\n      /**\n       * Show warning if grid-template-columns decl is not found\n       */\n      let columnDecl = parent.nodes.find(i => {\n        return i.prop === 'grid-template-columns';\n      });\n      if (!columnDecl && !hasGridTemplate) {\n        decl.warn(result, 'Autoplacement does not work without grid-template-columns property');\n      }\n\n      /**\n       * Autoplace grid items\n       */\n      if (isColumnProp && !hasGridTemplate) {\n        autoplaceGridItems(decl, result, gap, autoflowValue);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Change IE property back\n   */\n  normalize(prop) {\n    return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1');\n  }\n\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    if (prefix === '-ms-') {\n      return prefixTrackProp({\n        prefix,\n        prop\n      });\n    }\n    return super.prefixed(prop, prefix);\n  }\n}\nGridRowsColumns.names = ['grid-template-rows', 'grid-template-columns', 'grid-rows', 'grid-columns'];\nmodule.exports = GridRowsColumns;","map":{"version":3,"names":["Declaration","require","autoplaceGridItems","getGridGap","inheritGridGap","prefixTrackProp","prefixTrackValue","Processor","GridRowsColumns","insert","decl","prefix","prefixes","result","parent","prop","value","isRowProp","includes","isColumnProp","hasGridTemplate","some","i","processor","options","status","gridStatus","gap","gapValue","row","column","prefixValue","cloneBefore","autoflow","nodes","find","autoflowValue","disabled","trim","rowDecl","undefined","warn","columnDecl","normalize","replace","prefixed","names","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/autoprefixer/lib/hacks/grid-rows-columns.js"],"sourcesContent":["let Declaration = require('../declaration')\nlet {\n  autoplaceGridItems,\n  getGridGap,\n  inheritGridGap,\n  prefixTrackProp,\n  prefixTrackValue\n} = require('./grid-utils')\nlet Processor = require('../processor')\n\nclass GridRowsColumns extends Declaration {\n  insert(decl, prefix, prefixes, result) {\n    if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)\n\n    let { parent, prop, value } = decl\n    let isRowProp = prop.includes('rows')\n    let isColumnProp = prop.includes('columns')\n\n    let hasGridTemplate = parent.some(\n      i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'\n    )\n\n    /**\n     * Not to prefix rows declaration if grid-template(-areas) is present\n     */\n    if (hasGridTemplate && isRowProp) {\n      return false\n    }\n\n    let processor = new Processor({ options: {} })\n    let status = processor.gridStatus(parent, result)\n    let gap = getGridGap(decl)\n    gap = inheritGridGap(decl, gap) || gap\n\n    let gapValue = isRowProp ? gap.row : gap.column\n\n    if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {\n      gapValue = null\n    }\n\n    let prefixValue = prefixTrackValue({\n      gap: gapValue,\n      value\n    })\n\n    /**\n     * Insert prefixes\n     */\n    decl.cloneBefore({\n      prop: prefixTrackProp({ prefix, prop }),\n      value: prefixValue\n    })\n\n    let autoflow = parent.nodes.find(i => i.prop === 'grid-auto-flow')\n    let autoflowValue = 'row'\n\n    if (autoflow && !processor.disabled(autoflow, result)) {\n      autoflowValue = autoflow.value.trim()\n    }\n    if (status === 'autoplace') {\n      /**\n       * Show warning if grid-template-rows decl is not found\n       */\n      let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows')\n\n      if (!rowDecl && hasGridTemplate) {\n        return undefined\n      } else if (!rowDecl && !hasGridTemplate) {\n        decl.warn(\n          result,\n          'Autoplacement does not work without grid-template-rows property'\n        )\n        return undefined\n      }\n\n      /**\n       * Show warning if grid-template-columns decl is not found\n       */\n      let columnDecl = parent.nodes.find(i => {\n        return i.prop === 'grid-template-columns'\n      })\n      if (!columnDecl && !hasGridTemplate) {\n        decl.warn(\n          result,\n          'Autoplacement does not work without grid-template-columns property'\n        )\n      }\n\n      /**\n       * Autoplace grid items\n       */\n      if (isColumnProp && !hasGridTemplate) {\n        autoplaceGridItems(decl, result, gap, autoflowValue)\n      }\n    }\n\n    return undefined\n  }\n\n  /**\n   * Change IE property back\n   */\n  normalize(prop) {\n    return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1')\n  }\n\n  /**\n   * Change property name for IE\n   */\n  prefixed(prop, prefix) {\n    if (prefix === '-ms-') {\n      return prefixTrackProp({ prefix, prop })\n    }\n    return super.prefixed(prop, prefix)\n  }\n}\n\nGridRowsColumns.names = [\n  'grid-template-rows',\n  'grid-template-columns',\n  'grid-rows',\n  'grid-columns'\n]\n\nmodule.exports = GridRowsColumns\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}