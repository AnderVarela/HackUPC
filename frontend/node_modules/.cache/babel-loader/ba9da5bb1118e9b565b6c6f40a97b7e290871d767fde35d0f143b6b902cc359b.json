{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'prefer-ts-expect-error',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Enforce using `@ts-expect-error` over `@ts-ignore`',\n      recommended: 'strict'\n    },\n    fixable: 'code',\n    messages: {\n      preferExpectErrorComment: 'Use \"@ts-expect-error\" to ensure an error is actually being suppressed.'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n  create(context) {\n    const tsIgnoreRegExpSingleLine = /^\\s*\\/?\\s*@ts-ignore/;\n    const tsIgnoreRegExpMultiLine = /^\\s*(?:\\/|\\*)*\\s*@ts-ignore/;\n    const sourceCode = context.getSourceCode();\n    function isLineComment(comment) {\n      return comment.type === utils_1.AST_TOKEN_TYPES.Line;\n    }\n    function getLastCommentLine(comment) {\n      if (isLineComment(comment)) {\n        return comment.value;\n      }\n      // For multiline comments - we look at only the last line.\n      const commentlines = comment.value.split('\\n');\n      return commentlines[commentlines.length - 1];\n    }\n    function isValidTsIgnorePresent(comment) {\n      const line = getLastCommentLine(comment);\n      return isLineComment(comment) ? tsIgnoreRegExpSingleLine.test(line) : tsIgnoreRegExpMultiLine.test(line);\n    }\n    return {\n      Program() {\n        const comments = sourceCode.getAllComments();\n        comments.forEach(comment => {\n          if (isValidTsIgnorePresent(comment)) {\n            const lineCommentRuleFixer = fixer => fixer.replaceText(comment, `//${comment.value.replace('@ts-ignore', '@ts-expect-error')}`);\n            const blockCommentRuleFixer = fixer => fixer.replaceText(comment, `/*${comment.value.replace('@ts-ignore', '@ts-expect-error')}*/`);\n            context.report({\n              node: comment,\n              messageId: 'preferExpectErrorComment',\n              fix: isLineComment(comment) ? lineCommentRuleFixer : blockCommentRuleFixer\n            });\n          }\n        });\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","exports","default","createRule","name","meta","type","docs","description","recommended","fixable","messages","preferExpectErrorComment","schema","defaultOptions","create","context","tsIgnoreRegExpSingleLine","tsIgnoreRegExpMultiLine","sourceCode","getSourceCode","isLineComment","comment","AST_TOKEN_TYPES","Line","getLastCommentLine","value","commentlines","split","length","isValidTsIgnorePresent","line","test","Program","comments","getAllComments","forEach","lineCommentRuleFixer","fixer","replaceText","replace","blockCommentRuleFixer","report","node","messageId","fix"],"sources":["../../src/rules/prefer-ts-expect-error.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAMA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AAIAG,OAAA,CAAAC,OAAA,GAAeH,IAAI,CAACI,UAAU,CAAiB;EAC7CC,IAAI,EAAE,wBAAwB;EAC9BC,IAAI,EAAE;IACJC,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE;MACJC,WAAW,EAAE,oDAAoD;MACjEC,WAAW,EAAE;KACd;IACDC,OAAO,EAAE,MAAM;IACfC,QAAQ,EAAE;MACRC,wBAAwB,EACtB;KACH;IACDC,MAAM,EAAE;GACT;EACDC,cAAc,EAAE,EAAE;EAClBC,MAAMA,CAACC,OAAO;IACZ,MAAMC,wBAAwB,GAAG,sBAAsB;IACvD,MAAMC,uBAAuB,GAAG,6BAA6B;IAC7D,MAAMC,UAAU,GAAGH,OAAO,CAACI,aAAa,EAAE;IAE1C,SAASC,aAAaA,CAACC,OAAyB;MAC9C,OAAOA,OAAO,CAAChB,IAAI,KAAKT,OAAA,CAAA0B,eAAe,CAACC,IAAI;IAC9C;IAEA,SAASC,kBAAkBA,CAACH,OAAyB;MACnD,IAAID,aAAa,CAACC,OAAO,CAAC,EAAE;QAC1B,OAAOA,OAAO,CAACI,KAAK;;MAGtB;MACA,MAAMC,YAAY,GAAGL,OAAO,CAACI,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC;MAC9C,OAAOD,YAAY,CAACA,YAAY,CAACE,MAAM,GAAG,CAAC,CAAC;IAC9C;IAEA,SAASC,sBAAsBA,CAACR,OAAyB;MACvD,MAAMS,IAAI,GAAGN,kBAAkB,CAACH,OAAO,CAAC;MACxC,OAAOD,aAAa,CAACC,OAAO,CAAC,GACzBL,wBAAwB,CAACe,IAAI,CAACD,IAAI,CAAC,GACnCb,uBAAuB,CAACc,IAAI,CAACD,IAAI,CAAC;IACxC;IAEA,OAAO;MACLE,OAAOA,CAAA;QACL,MAAMC,QAAQ,GAAGf,UAAU,CAACgB,cAAc,EAAE;QAC5CD,QAAQ,CAACE,OAAO,CAACd,OAAO,IAAG;UACzB,IAAIQ,sBAAsB,CAACR,OAAO,CAAC,EAAE;YACnC,MAAMe,oBAAoB,GAAIC,KAAgB,IAC5CA,KAAK,CAACC,WAAW,CACfjB,OAAO,EACP,KAAKA,OAAO,CAACI,KAAK,CAACc,OAAO,CAAC,YAAY,EAAE,kBAAkB,CAAC,EAAE,CAC/D;YAEH,MAAMC,qBAAqB,GAAIH,KAAgB,IAC7CA,KAAK,CAACC,WAAW,CACfjB,OAAO,EACP,KAAKA,OAAO,CAACI,KAAK,CAACc,OAAO,CACxB,YAAY,EACZ,kBAAkB,CACnB,IAAI,CACN;YAEHxB,OAAO,CAAC0B,MAAM,CAAC;cACbC,IAAI,EAAErB,OAAO;cACbsB,SAAS,EAAE,0BAA0B;cACrCC,GAAG,EAAExB,aAAa,CAACC,OAAO,CAAC,GACvBe,oBAAoB,GACpBI;aACL,CAAC;;QAEN,CAAC,CAAC;MACJ;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}