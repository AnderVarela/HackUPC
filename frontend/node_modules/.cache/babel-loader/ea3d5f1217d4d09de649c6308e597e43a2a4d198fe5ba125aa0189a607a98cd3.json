{"ast":null,"code":"const {\n  d,\n  n\n} = require('../../options');\n\n/**\n * Normalizes the options for the plugin.\n * @param {import('../types').ReactRefreshPluginOptions} options Non-normalized plugin options.\n * @returns {import('../types').NormalizedPluginOptions} Normalized plugin options.\n */\nconst normalizeOptions = options => {\n  d(options, 'exclude', /node_modules/i);\n  d(options, 'include', /\\.([cm]js|[jt]sx?|flow)$/i);\n  d(options, 'forceEnable');\n  d(options, 'library');\n  n(options, 'overlay', overlay => {\n    /** @type {import('../types').NormalizedErrorOverlayOptions} */\n    const defaults = {\n      entry: require.resolve('../../client/ErrorOverlayEntry'),\n      module: require.resolve('../../overlay'),\n      sockIntegration: 'wds'\n    };\n    if (overlay === false) {\n      return false;\n    }\n    if (typeof overlay === 'undefined' || overlay === true) {\n      return defaults;\n    }\n    d(overlay, 'entry', defaults.entry);\n    d(overlay, 'module', defaults.module);\n    d(overlay, 'sockIntegration', defaults.sockIntegration);\n    d(overlay, 'sockHost');\n    d(overlay, 'sockPath');\n    d(overlay, 'sockPort');\n    d(overlay, 'sockProtocol');\n    d(options, 'useURLPolyfill');\n    return overlay;\n  });\n  return options;\n};\nmodule.exports = normalizeOptions;","map":{"version":3,"names":["d","n","require","normalizeOptions","options","overlay","defaults","entry","resolve","module","sockIntegration","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/utils/normalizeOptions.js"],"sourcesContent":["const { d, n } = require('../../options');\n\n/**\n * Normalizes the options for the plugin.\n * @param {import('../types').ReactRefreshPluginOptions} options Non-normalized plugin options.\n * @returns {import('../types').NormalizedPluginOptions} Normalized plugin options.\n */\nconst normalizeOptions = (options) => {\n  d(options, 'exclude', /node_modules/i);\n  d(options, 'include', /\\.([cm]js|[jt]sx?|flow)$/i);\n  d(options, 'forceEnable');\n  d(options, 'library');\n\n  n(options, 'overlay', (overlay) => {\n    /** @type {import('../types').NormalizedErrorOverlayOptions} */\n    const defaults = {\n      entry: require.resolve('../../client/ErrorOverlayEntry'),\n      module: require.resolve('../../overlay'),\n      sockIntegration: 'wds',\n    };\n\n    if (overlay === false) {\n      return false;\n    }\n    if (typeof overlay === 'undefined' || overlay === true) {\n      return defaults;\n    }\n\n    d(overlay, 'entry', defaults.entry);\n    d(overlay, 'module', defaults.module);\n    d(overlay, 'sockIntegration', defaults.sockIntegration);\n    d(overlay, 'sockHost');\n    d(overlay, 'sockPath');\n    d(overlay, 'sockPort');\n    d(overlay, 'sockProtocol');\n    d(options, 'useURLPolyfill');\n\n    return overlay;\n  });\n\n  return options;\n};\n\nmodule.exports = normalizeOptions;\n"],"mappings":"AAAA,MAAM;EAAEA,CAAC;EAAEC;AAAE,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAIC,OAAO,IAAK;EACpCJ,CAAC,CAACI,OAAO,EAAE,SAAS,EAAE,eAAe,CAAC;EACtCJ,CAAC,CAACI,OAAO,EAAE,SAAS,EAAE,2BAA2B,CAAC;EAClDJ,CAAC,CAACI,OAAO,EAAE,aAAa,CAAC;EACzBJ,CAAC,CAACI,OAAO,EAAE,SAAS,CAAC;EAErBH,CAAC,CAACG,OAAO,EAAE,SAAS,EAAGC,OAAO,IAAK;IACjC;IACA,MAAMC,QAAQ,GAAG;MACfC,KAAK,EAAEL,OAAO,CAACM,OAAO,CAAC,gCAAgC,CAAC;MACxDC,MAAM,EAAEP,OAAO,CAACM,OAAO,CAAC,eAAe,CAAC;MACxCE,eAAe,EAAE;IACnB,CAAC;IAED,IAAIL,OAAO,KAAK,KAAK,EAAE;MACrB,OAAO,KAAK;IACd;IACA,IAAI,OAAOA,OAAO,KAAK,WAAW,IAAIA,OAAO,KAAK,IAAI,EAAE;MACtD,OAAOC,QAAQ;IACjB;IAEAN,CAAC,CAACK,OAAO,EAAE,OAAO,EAAEC,QAAQ,CAACC,KAAK,CAAC;IACnCP,CAAC,CAACK,OAAO,EAAE,QAAQ,EAAEC,QAAQ,CAACG,MAAM,CAAC;IACrCT,CAAC,CAACK,OAAO,EAAE,iBAAiB,EAAEC,QAAQ,CAACI,eAAe,CAAC;IACvDV,CAAC,CAACK,OAAO,EAAE,UAAU,CAAC;IACtBL,CAAC,CAACK,OAAO,EAAE,UAAU,CAAC;IACtBL,CAAC,CAACK,OAAO,EAAE,UAAU,CAAC;IACtBL,CAAC,CAACK,OAAO,EAAE,cAAc,CAAC;IAC1BL,CAAC,CAACI,OAAO,EAAE,gBAAgB,CAAC;IAE5B,OAAOC,OAAO;EAChB,CAAC,CAAC;EAEF,OAAOD,OAAO;AAChB,CAAC;AAEDK,MAAM,CAACE,OAAO,GAAGR,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}