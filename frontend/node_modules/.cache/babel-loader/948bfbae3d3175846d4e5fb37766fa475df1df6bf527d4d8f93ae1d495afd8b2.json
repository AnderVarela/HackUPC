{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar anObjectOrUndefined = require('../internals/an-object-or-undefined');\nvar anUint8Array = require('../internals/an-uint8-array');\nvar base64Map = require('../internals/base64-map');\nvar getAlphabetOption = require('../internals/get-alphabet-option');\nvar base64Alphabet = base64Map.i2c;\nvar base64UrlAlphabet = base64Map.i2cUrl;\nvar Uint8Array = global.Uint8Array;\nvar charAt = uncurryThis(''.charAt);\n\n// `Uint8Array.prototype.toBase64` method\n// https://github.com/tc39/proposal-arraybuffer-base64\nif (Uint8Array) $({\n  target: 'Uint8Array',\n  proto: true,\n  forced: true\n}, {\n  toBase64: function toBase64( /* options */\n  ) {\n    var array = anUint8Array(this);\n    var options = arguments.length ? anObjectOrUndefined(arguments[0]) : undefined;\n    var alphabet = getAlphabetOption(options) === 'base64' ? base64Alphabet : base64UrlAlphabet;\n    var result = '';\n    var i = 0;\n    var length = array.length;\n    var triplet;\n    var at = function (shift) {\n      return charAt(alphabet, triplet >> 6 * shift & 63);\n    };\n    for (; i + 2 < length; i += 3) {\n      triplet = (array[i] << 16) + (array[i + 1] << 8) + array[i + 2];\n      result += at(3) + at(2) + at(1) + at(0);\n    }\n    if (i + 2 === length) {\n      triplet = (array[i] << 16) + (array[i + 1] << 8);\n      result += at(3) + at(2) + at(1) + '=';\n    } else if (i + 1 === length) {\n      triplet = array[i] << 16;\n      result += at(3) + at(2) + '==';\n    }\n    return result;\n  }\n});","map":{"version":3,"names":["$","require","global","uncurryThis","anObjectOrUndefined","anUint8Array","base64Map","getAlphabetOption","base64Alphabet","i2c","base64UrlAlphabet","i2cUrl","Uint8Array","charAt","target","proto","forced","toBase64","array","options","arguments","length","undefined","alphabet","result","i","triplet","at","shift"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/core-js/modules/esnext.uint8-array.to-base64.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar anObjectOrUndefined = require('../internals/an-object-or-undefined');\nvar anUint8Array = require('../internals/an-uint8-array');\nvar base64Map = require('../internals/base64-map');\nvar getAlphabetOption = require('../internals/get-alphabet-option');\n\nvar base64Alphabet = base64Map.i2c;\nvar base64UrlAlphabet = base64Map.i2cUrl;\n\nvar Uint8Array = global.Uint8Array;\nvar charAt = uncurryThis(''.charAt);\n\n// `Uint8Array.prototype.toBase64` method\n// https://github.com/tc39/proposal-arraybuffer-base64\nif (Uint8Array) $({ target: 'Uint8Array', proto: true, forced: true }, {\n  toBase64: function toBase64(/* options */) {\n    var array = anUint8Array(this);\n    var options = arguments.length ? anObjectOrUndefined(arguments[0]) : undefined;\n    var alphabet = getAlphabetOption(options) === 'base64' ? base64Alphabet : base64UrlAlphabet;\n\n    var result = '';\n    var i = 0;\n    var length = array.length;\n    var triplet;\n\n    var at = function (shift) {\n      return charAt(alphabet, (triplet >> (6 * shift)) & 63);\n    };\n\n    for (; i + 2 < length; i += 3) {\n      triplet = (array[i] << 16) + (array[i + 1] << 8) + array[i + 2];\n      result += at(3) + at(2) + at(1) + at(0);\n    }\n    if (i + 2 === length) {\n      triplet = (array[i] << 16) + (array[i + 1] << 8);\n      result += at(3) + at(2) + at(1) + '=';\n    } else if (i + 1 === length) {\n      triplet = array[i] << 16;\n      result += at(3) + at(2) + '==';\n    }\n\n    return result;\n  }\n});\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtC,IAAIC,MAAM,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC3C,IAAIE,WAAW,GAAGF,OAAO,CAAC,oCAAoC,CAAC;AAC/D,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,qCAAqC,CAAC;AACxE,IAAII,YAAY,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;AACzD,IAAIK,SAAS,GAAGL,OAAO,CAAC,yBAAyB,CAAC;AAClD,IAAIM,iBAAiB,GAAGN,OAAO,CAAC,kCAAkC,CAAC;AAEnE,IAAIO,cAAc,GAAGF,SAAS,CAACG,GAAG;AAClC,IAAIC,iBAAiB,GAAGJ,SAAS,CAACK,MAAM;AAExC,IAAIC,UAAU,GAAGV,MAAM,CAACU,UAAU;AAClC,IAAIC,MAAM,GAAGV,WAAW,CAAC,EAAE,CAACU,MAAM,CAAC;;AAEnC;AACA;AACA,IAAID,UAAU,EAAEZ,CAAC,CAAC;EAAEc,MAAM,EAAE,YAAY;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAK,CAAC,EAAE;EACrEC,QAAQ,EAAE,SAASA,QAAQA,CAAA,CAAC;EAAA,EAAe;IACzC,IAAIC,KAAK,GAAGb,YAAY,CAAC,IAAI,CAAC;IAC9B,IAAIc,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAGjB,mBAAmB,CAACgB,SAAS,CAAC,CAAC,CAAC,CAAC,GAAGE,SAAS;IAC9E,IAAIC,QAAQ,GAAGhB,iBAAiB,CAACY,OAAO,CAAC,KAAK,QAAQ,GAAGX,cAAc,GAAGE,iBAAiB;IAE3F,IAAIc,MAAM,GAAG,EAAE;IACf,IAAIC,CAAC,GAAG,CAAC;IACT,IAAIJ,MAAM,GAAGH,KAAK,CAACG,MAAM;IACzB,IAAIK,OAAO;IAEX,IAAIC,EAAE,GAAG,SAAAA,CAAUC,KAAK,EAAE;MACxB,OAAOf,MAAM,CAACU,QAAQ,EAAGG,OAAO,IAAK,CAAC,GAAGE,KAAM,GAAI,EAAE,CAAC;IACxD,CAAC;IAED,OAAOH,CAAC,GAAG,CAAC,GAAGJ,MAAM,EAAEI,CAAC,IAAI,CAAC,EAAE;MAC7BC,OAAO,GAAG,CAACR,KAAK,CAACO,CAAC,CAAC,IAAI,EAAE,KAAKP,KAAK,CAACO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAGP,KAAK,CAACO,CAAC,GAAG,CAAC,CAAC;MAC/DD,MAAM,IAAIG,EAAE,CAAC,CAAC,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC;IACzC;IACA,IAAIF,CAAC,GAAG,CAAC,KAAKJ,MAAM,EAAE;MACpBK,OAAO,GAAG,CAACR,KAAK,CAACO,CAAC,CAAC,IAAI,EAAE,KAAKP,KAAK,CAACO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;MAChDD,MAAM,IAAIG,EAAE,CAAC,CAAC,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG;IACvC,CAAC,MAAM,IAAIF,CAAC,GAAG,CAAC,KAAKJ,MAAM,EAAE;MAC3BK,OAAO,GAAGR,KAAK,CAACO,CAAC,CAAC,IAAI,EAAE;MACxBD,MAAM,IAAIG,EAAE,CAAC,CAAC,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI;IAChC;IAEA,OAAOH,MAAM;EACf;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}