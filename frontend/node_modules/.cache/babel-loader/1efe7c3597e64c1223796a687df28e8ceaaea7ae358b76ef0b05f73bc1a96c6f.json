{"ast":null,"code":"'use strict';\n\nconst assert = require('chai').assert;\nconst spooks = require('spooks');\nconst modulePath = '../../src/jsonstream';\nsuite('jsonstream:', () => {\n  let log;\n  setup(() => {\n    log = {};\n  });\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath);\n    });\n  });\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath));\n  });\n  suite('require:', () => {\n    let Stream;\n    setup(() => {\n      Stream = require(modulePath);\n    });\n    test('Stream expects two arguments', () => {\n      assert.lengthOf(Stream, 2);\n    });\n    test('calling Stream with function argument doesNotThrow', () => {\n      assert.doesNotThrow(() => {\n        Stream(() => {});\n      });\n    });\n    test('calling Stream with object argument throws', () => {\n      assert.throws(() => {\n        Stream({\n          read: () => {}\n        });\n      });\n    });\n    test('calling Stream with new returns Stream instance', () => {\n      assert.instanceOf(new Stream(() => {}), Stream);\n    });\n    test('calling Stream with new returns Readable instance', () => {\n      assert.instanceOf(new Stream(() => {}), require('stream').Readable);\n    });\n    test('calling Stream without new returns Stream instance', () => {\n      assert.instanceOf(Stream(() => {}), Stream);\n    });\n    suite('instantiate:', () => {\n      let jsonstream;\n      setup(() => {\n        jsonstream = new Stream(spooks.fn({\n          name: 'read',\n          log: log\n        }));\n      });\n      test('jsonstream has _read method', () => {\n        assert.isFunction(jsonstream._read);\n      });\n      test('_read expects no arguments', () => {\n        assert.lengthOf(jsonstream._read, 0);\n      });\n      test('read was not called', () => {\n        assert.strictEqual(log.counts.read, 0);\n      });\n      suite('jsonstream._read:', () => {\n        setup(() => {\n          jsonstream._read();\n        });\n        test('read was called once', () => {\n          assert.strictEqual(log.counts.read, 1);\n          assert.isUndefined(log.these.read[0]);\n        });\n        test('read was called correctly', () => {\n          assert.lengthOf(log.args.read[0], 0);\n        });\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","spooks","modulePath","suite","log","setup","test","doesNotThrow","isFunction","Stream","lengthOf","throws","read","instanceOf","Readable","jsonstream","fn","name","_read","strictEqual","counts","isUndefined","these","args"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/bfj/test/unit/jsonstream.js"],"sourcesContent":["'use strict'\n\nconst assert = require('chai').assert\nconst spooks = require('spooks')\n\nconst modulePath = '../../src/jsonstream'\n\nsuite('jsonstream:', () => {\n  let log\n\n  setup(() => {\n    log = {}\n  })\n\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath)\n    })\n  })\n\n  test('require returns function', () => {\n    assert.isFunction(require(modulePath))\n  })\n\n  suite('require:', () => {\n    let Stream\n\n    setup(() => {\n      Stream = require(modulePath)\n    })\n\n    test('Stream expects two arguments', () => {\n      assert.lengthOf(Stream, 2)\n    })\n\n    test('calling Stream with function argument doesNotThrow', () => {\n      assert.doesNotThrow(() => {\n        Stream(() => {})\n      })\n    })\n\n    test('calling Stream with object argument throws', () => {\n      assert.throws(() => {\n        Stream({ read: () => {} })\n      })\n    })\n\n    test('calling Stream with new returns Stream instance', () => {\n      assert.instanceOf(new Stream(() => {}), Stream)\n    })\n\n    test('calling Stream with new returns Readable instance', () => {\n      assert.instanceOf(new Stream(() => {}), require('stream').Readable)\n    })\n\n    test('calling Stream without new returns Stream instance', () => {\n      assert.instanceOf(Stream(() => {}), Stream)\n    })\n\n    suite('instantiate:', () => {\n      let jsonstream\n\n      setup(() => {\n        jsonstream = new Stream(spooks.fn({ name: 'read', log: log }))\n      })\n\n      test('jsonstream has _read method', () => {\n        assert.isFunction(jsonstream._read)\n      })\n\n      test('_read expects no arguments', () => {\n        assert.lengthOf(jsonstream._read, 0)\n      })\n\n      test('read was not called', () => {\n        assert.strictEqual(log.counts.read, 0)\n      })\n\n      suite('jsonstream._read:', () => {\n        setup(() => {\n          jsonstream._read()\n        })\n\n        test('read was called once', () => {\n          assert.strictEqual(log.counts.read, 1)\n          assert.isUndefined(log.these.read[0])\n        })\n\n        test('read was called correctly', () => {\n          assert.lengthOf(log.args.read[0], 0)\n        })\n      })\n    })\n  })\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}