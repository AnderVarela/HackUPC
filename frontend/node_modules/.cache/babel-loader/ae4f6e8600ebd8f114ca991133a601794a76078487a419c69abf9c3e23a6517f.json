{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getConsoleOutput;\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n  _jestMessageUtil = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction getConsoleOutput(buffer, config, globalConfig) {\n  const TITLE_INDENT = globalConfig.verbose ? '  ' : '    ';\n  const CONSOLE_INDENT = TITLE_INDENT + '  ';\n  const logEntries = buffer.reduce((output, {\n    type,\n    message,\n    origin\n  }) => {\n    message = message.split(/\\n/).map(line => CONSOLE_INDENT + line).join('\\n');\n    let typeMessage = 'console.' + type;\n    let noStackTrace = true;\n    let noCodeFrame = true;\n    if (type === 'warn') {\n      var _globalConfig$noStack;\n      message = _chalk().default.yellow(message);\n      typeMessage = _chalk().default.yellow(typeMessage);\n      noStackTrace = (_globalConfig$noStack = globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.noStackTrace) !== null && _globalConfig$noStack !== void 0 ? _globalConfig$noStack : false;\n      noCodeFrame = false;\n    } else if (type === 'error') {\n      var _globalConfig$noStack2;\n      message = _chalk().default.red(message);\n      typeMessage = _chalk().default.red(typeMessage);\n      noStackTrace = (_globalConfig$noStack2 = globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.noStackTrace) !== null && _globalConfig$noStack2 !== void 0 ? _globalConfig$noStack2 : false;\n      noCodeFrame = false;\n    }\n    const options = {\n      noCodeFrame,\n      noStackTrace\n    };\n    const formattedStackTrace = (0, _jestMessageUtil().formatStackTrace)(origin, config, options);\n    return output + TITLE_INDENT + _chalk().default.dim(typeMessage) + '\\n' + message.trimRight() + '\\n' + _chalk().default.dim(formattedStackTrace.trimRight()) + '\\n\\n';\n  }, '');\n  return logEntries.trimRight() + '\\n';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","getConsoleOutput","_chalk","data","_interopRequireDefault","require","_jestMessageUtil","obj","__esModule","buffer","config","globalConfig","TITLE_INDENT","verbose","CONSOLE_INDENT","logEntries","reduce","output","type","message","origin","split","map","line","join","typeMessage","noStackTrace","noCodeFrame","_globalConfig$noStack","yellow","_globalConfig$noStack2","red","options","formattedStackTrace","formatStackTrace","dim","trimRight"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@jest/console/build/getConsoleOutput.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getConsoleOutput;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction getConsoleOutput(buffer, config, globalConfig) {\n  const TITLE_INDENT = globalConfig.verbose ? '  ' : '    ';\n  const CONSOLE_INDENT = TITLE_INDENT + '  ';\n  const logEntries = buffer.reduce((output, {type, message, origin}) => {\n    message = message\n      .split(/\\n/)\n      .map(line => CONSOLE_INDENT + line)\n      .join('\\n');\n    let typeMessage = 'console.' + type;\n    let noStackTrace = true;\n    let noCodeFrame = true;\n\n    if (type === 'warn') {\n      var _globalConfig$noStack;\n\n      message = _chalk().default.yellow(message);\n      typeMessage = _chalk().default.yellow(typeMessage);\n      noStackTrace =\n        (_globalConfig$noStack =\n          globalConfig === null || globalConfig === void 0\n            ? void 0\n            : globalConfig.noStackTrace) !== null &&\n        _globalConfig$noStack !== void 0\n          ? _globalConfig$noStack\n          : false;\n      noCodeFrame = false;\n    } else if (type === 'error') {\n      var _globalConfig$noStack2;\n\n      message = _chalk().default.red(message);\n      typeMessage = _chalk().default.red(typeMessage);\n      noStackTrace =\n        (_globalConfig$noStack2 =\n          globalConfig === null || globalConfig === void 0\n            ? void 0\n            : globalConfig.noStackTrace) !== null &&\n        _globalConfig$noStack2 !== void 0\n          ? _globalConfig$noStack2\n          : false;\n      noCodeFrame = false;\n    }\n\n    const options = {\n      noCodeFrame,\n      noStackTrace\n    };\n    const formattedStackTrace = (0, _jestMessageUtil().formatStackTrace)(\n      origin,\n      config,\n      options\n    );\n    return (\n      output +\n      TITLE_INDENT +\n      _chalk().default.dim(typeMessage) +\n      '\\n' +\n      message.trimRight() +\n      '\\n' +\n      _chalk().default.dim(formattedStackTrace.trimRight()) +\n      '\\n\\n'\n    );\n  }, '');\n  return logEntries.trimRight() + '\\n';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}