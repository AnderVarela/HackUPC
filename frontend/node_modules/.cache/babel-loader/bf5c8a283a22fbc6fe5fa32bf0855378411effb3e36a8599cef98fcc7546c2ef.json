{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst {\n  stringHints,\n  numberHints\n} = require('./util/hints');\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.dataPath ? error.dataPath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[/** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === 'anyOf' || children[i].keyword === 'oneOf') {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n  return schema.map(({\n    $ref\n  }) => $ref).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n  while (i > 0) {\n    const child = children[i];\n    if (child.keyword === 'anyOf' || child.keyword === 'oneOf') {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n    i -= 1;\n  }\n  if (i === 0) {\n    result.push(children[i]);\n  }\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\nfunction canApplyNot(schema) {\n  const typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === 'object' && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeNumber(schema) {\n  return schema.type === 'number' || typeof schema.minimum !== 'undefined' || typeof schema.exclusiveMinimum !== 'undefined' || typeof schema.maximum !== 'undefined' || typeof schema.exclusiveMaximum !== 'undefined' || typeof schema.multipleOf !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeInteger(schema) {\n  return schema.type === 'integer' || typeof schema.minimum !== 'undefined' || typeof schema.exclusiveMinimum !== 'undefined' || typeof schema.maximum !== 'undefined' || typeof schema.exclusiveMaximum !== 'undefined' || typeof schema.multipleOf !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeString(schema) {\n  return schema.type === 'string' || typeof schema.minLength !== 'undefined' || typeof schema.maxLength !== 'undefined' || typeof schema.pattern !== 'undefined' || typeof schema.format !== 'undefined' || typeof schema.formatMinimum !== 'undefined' || typeof schema.formatMaximum !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeBoolean(schema) {\n  return schema.type === 'boolean';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeArray(schema) {\n  return schema.type === 'array' || typeof schema.minItems === 'number' || typeof schema.maxItems === 'number' || typeof schema.uniqueItems !== 'undefined' || typeof schema.items !== 'undefined' || typeof schema.additionalItems !== 'undefined' || typeof schema.contains !== 'undefined';\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\nfunction likeObject(schema) {\n  return schema.type === 'object' || typeof schema.minProperties !== 'undefined' || typeof schema.maxProperties !== 'undefined' || typeof schema.required !== 'undefined' || typeof schema.properties !== 'undefined' || typeof schema.patternProperties !== 'undefined' || typeof schema.additionalProperties !== 'undefined' || typeof schema.dependencies !== 'undefined' || typeof schema.propertyNames !== 'undefined' || typeof schema.patternRequired !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\nfunction likeNull(schema) {\n  return schema.type === 'null';\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return 'an';\n  }\n  return 'a';\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return '';\n  }\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return ' | should be any non-number';\n    }\n    if (likeString(schema)) {\n      return ' | should be any non-string';\n    }\n    if (likeArray(schema)) {\n      return ' | should be any non-array';\n    }\n    if (likeObject(schema)) {\n      return ' | should be any non-object';\n    }\n  }\n  return '';\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(', ')})` : '';\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n  return [];\n}\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema, configuration = {}) {\n    super();\n    /** @type {string} */\n\n    this.name = 'ValidationError';\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n    this.headerName = configuration.name || headerNameFromSchema || 'Object';\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || 'configuration';\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n  getSchemaPart(path) {\n    const newPath = path.split('/');\n    let schemaPart = this.schema;\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[/** @type {keyof Schema} */\n      newPath[i]];\n      if (!inner) {\n        break;\n      }\n      schemaPart = inner;\n    }\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {boolean} logic\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n  formatSchema(schema, logic = true, prevSchemas = []) {\n    let newLogic = logic;\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, newLogic, prevSchemas);\n      }\n      if (prevSchemas.includes(innerSchema)) {\n        return '(recursive)';\n      }\n      return this.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n    };\n    if (hasNotInSchema(schema) && !likeObject(schema)) {\n      if (canApplyNot(schema.not)) {\n        newLogic = !logic;\n        return formatInnerSchema(schema.not);\n      }\n      const needApplyLogicHere = !schema.not.not;\n      const prefix = logic ? '' : 'non ';\n      newLogic = !logic;\n      return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n    }\n    if ( /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } = /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === 'Function' ? 'function' : item).join(' | ');\n    }\n    if (schema.enum) {\n      return /** @type {Array<any>} */(\n        schema.enum.map(item => JSON.stringify(item)).join(' | ')\n      );\n    }\n    if (typeof schema.const !== 'undefined') {\n      return JSON.stringify(schema.const);\n    }\n    if (schema.oneOf) {\n      return /** @type {Array<Schema>} */(\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(' | ')\n      );\n    }\n    if (schema.anyOf) {\n      return /** @type {Array<Schema>} */(\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(' | ')\n      );\n    }\n    if (schema.allOf) {\n      return /** @type {Array<Schema>} */(\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(' & ')\n      );\n    }\n    if ( /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } = /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : ''}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : ''}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : ''}`;\n    }\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : ''}`;\n      return logic ? str : hints.length > 0 ? `non-${type} | ${str}` : `non-${type}`;\n    }\n    if (likeString(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : ''}`;\n      return logic ? str : str === 'string' ? 'non-string' : `non-string | ${str}`;\n    }\n    if (likeBoolean(schema)) {\n      return `${logic ? '' : 'non-'}boolean`;\n    }\n    if (likeArray(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n      if (typeof schema.minItems === 'number') {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? 's' : ''}`);\n      }\n      if (typeof schema.maxItems === 'number') {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? 's' : ''}`);\n      }\n      if (schema.uniqueItems) {\n        hints.push('should not have duplicate items');\n      }\n      const hasAdditionalItems = typeof schema.additionalItems === 'undefined' || Boolean(schema.additionalItems);\n      let items = '';\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */schema.items.map(item => formatInnerSchema(item)).join(', ')}`;\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = 'any';\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = 'any';\n      }\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n      return `[${items}${hasAdditionalItems ? ', ...' : ''}]${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n    if (likeObject(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n      if (typeof schema.minProperties === 'number') {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? 'properties' : 'property'}`);\n      }\n      if (typeof schema.maxProperties === 'number') {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? 'properties' : 'property'}`);\n      }\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? 's' : ''} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(' | ')}`);\n      }\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set( /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? '' : '?'}`;\n      }).concat(typeof schema.additionalProperties === 'undefined' || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : ['…'] : []).join(', ');\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } = /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? 'properties' : 'property'} ${dependency.map(dep => `'${dep}'`).join(', ')} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n      return `object {${objectStructure ? ` ${objectStructure} ` : ''}}${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n    if (likeNull(schema)) {\n      return `${logic ? '' : 'non-'}null`;\n    }\n    if (Array.isArray(schema.type)) {\n      // not logic already applied in formatValidationError\n      return `${schema.type.join(' | ')}`;\n    } // Fallback for unknown keywords\n    // not logic already applied in formatValidationError\n\n    /* istanbul ignore next */\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @param {boolean=} logic\n   * @returns {string}\n   */\n\n  getSchemaPartText(schemaPart, additionalPath, needDot = false, logic = true) {\n    if (!schemaPart) {\n      return '';\n    }\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[/** @type {keyof Schema} */\n        additionalPath[i]];\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n    let schemaText = `${this.formatSchema(schemaPart, logic)}${needDot ? '.' : ''}`;\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return '';\n    }\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n    if (schemaPart.description) {\n      return `\\n-> ${schemaPart.description}`;\n    }\n    return '';\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      dataPath: errorDataPath\n    } = error;\n    const dataPath = `${this.baseDataPath}${errorDataPath}`;\n    switch (keyword) {\n      case 'type':\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch ( /** @type {import(\"ajv\").TypeParams} */\n          params.type) {\n            case 'number':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n            case 'integer':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n            case 'string':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n            case 'boolean':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n            case 'array':\n              return `${dataPath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n            case 'object':\n              return `${dataPath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n            case 'null':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n            default:\n              return `${dataPath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n      case 'instanceof':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n      case 'pattern':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } = /** @type {import(\"ajv\").PatternParams} */\n          params;\n          return `${dataPath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'format':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } = /** @type {import(\"ajv\").FormatParams} */\n          params;\n          return `${dataPath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'formatMinimum':\n      case 'formatMaximum':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } = /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          return `${dataPath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'minimum':\n      case 'maximum':\n      case 'exclusiveMinimum':\n      case 'exclusiveMaximum':\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } = /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          const [, ...hints] = getHints( /** @type {Schema} */\n          parentSchema, true);\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n          return `${dataPath} ${hints.join(' ')}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'multipleOf':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } = /** @type {import(\"ajv\").MultipleOfParams} */\n          params;\n          return `${dataPath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'patternRequired':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } = /** @type {import(\"ajv\").PatternRequiredParams} */\n          params;\n          return `${dataPath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'minLength':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = /** @type {import(\"ajv\").LimitParams} */\n          params;\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n          const length = limit - 1;\n          return `${dataPath} should be longer than ${length} character${length > 1 ? 's' : ''}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'minItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = /** @type {import(\"ajv\").LimitParams} */\n          params;\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n          return `${dataPath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'minProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = /** @type {import(\"ajv\").LimitParams} */\n          params;\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n          return `${dataPath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'maxLength':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = /** @type {import(\"ajv\").LimitParams} */\n          params;\n          const max = limit + 1;\n          return `${dataPath} should be shorter than ${max} character${max > 1 ? 's' : ''}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'maxItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'maxProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'uniqueItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } = /** @type {import(\"ajv\").UniqueItemsParams} */\n          params;\n          return `${dataPath} should not contain the item '${error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'additionalItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n      case 'contains':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should contains at least one ${this.getSchemaPartText(parentSchema, ['contains'])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n      case 'required':\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty = /** @type {import(\"ajv\").DependenciesParams} */\n          params.missingProperty.replace(/^\\./, '');\n          const hasProperty = parentSchema && Boolean( /** @type {Schema} */\n          parentSchema.properties && /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${dataPath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, ['properties', missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'additionalProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } = /** @type {import(\"ajv\").AdditionalPropertiesParams} */\n          params;\n          return `${dataPath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n      case 'dependencies':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } = /** @type {import(\"ajv\").DependenciesParams} */\n          params;\n          const dependencies = deps.split(',').map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(', ');\n          return `${dataPath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'propertyNames':\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } = /** @type {import(\"ajv\").PropertyNamesParams} */\n          params;\n          return `${dataPath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n      case 'enum':\n        {\n          const {\n            parentSchema\n          } = error;\n          if (parentSchema && /** @type {Schema} */\n          parentSchema.enum && /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${dataPath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n      case 'const':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n      case 'not':\n        {\n          const postfix = likeObject( /** @type {Schema} */\n          error.parentSchema) ? `\\n${this.getSchemaPartText(error.parentSchema)}` : '';\n          const schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n          if (canApplyNot(error.schema)) {\n            return `${dataPath} should be any ${schemaOutput}${postfix}.`;\n          }\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${dataPath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : ''}`;\n        }\n      case 'oneOf':\n      case 'anyOf':\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n            let filteredChildren = filterChildren(children);\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), '   ')}`).join('\\n')}`;\n          }\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n      case 'if':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } = /** @type {import(\"ajv\").IfParams} */\n          params;\n          return `${dataPath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n      case 'absolutePath':\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${dataPath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${dataPath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n      return ` - ${indent(formattedError, '   ')}`;\n    }).join('\\n');\n  }\n}\nvar _default = ValidationError;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","stringHints","numberHints","require","SPECIFICITY","type","not","oneOf","anyOf","if","enum","const","instanceof","required","pattern","patternRequired","format","formatMinimum","formatMaximum","minimum","exclusiveMinimum","maximum","exclusiveMaximum","multipleOf","uniqueItems","contains","minLength","maxLength","minItems","maxItems","minProperties","maxProperties","dependencies","propertyNames","additionalItems","additionalProperties","absolutePath","filterMax","array","fn","evaluatedMax","reduce","max","item","Math","filter","filterChildren","children","newChildren","error","dataPath","length","keyword","findAllChildren","schemaPaths","i","predicate","schemaPath","indexOf","every","refs","extractRefs","childrenStart","slice","concat","schema","Array","isArray","map","$ref","s","groupChildrenByFirstChild","result","child","push","assign","reverse","indent","str","prefix","replace","hasNotInSchema","findFirstTypedSchema","canApplyNot","typedSchema","likeNumber","likeInteger","likeString","likeNull","likeBoolean","isObject","maybeObj","likeArray","items","likeObject","properties","patternProperties","getArticle","test","getSchemaNonTypes","formatHints","hints","join","getHints","logic","ValidationError","Error","constructor","errors","configuration","name","headerNameFromSchema","baseDataPathFromSchema","title","baseDataPath","splittedTitleFromSchema","match","headerName","postFormatter","header","message","formatValidationErrors","captureStackTrace","getSchemaPart","path","newPath","split","schemaPart","inner","formatSchema","prevSchemas","newLogic","formatInnerSchema","innerSchema","addSelf","includes","needApplyLogicHere","values","JSON","stringify","allOf","ifValue","then","thenValue","else","elseValue","hasAdditionalItems","Boolean","keys","allProperties","Set","objectStructure","property","isRequired","forEach","dependencyName","dependency","dep","getSchemaPartText","additionalPath","needDot","schemaText","description","getSchemaPartDescription","formatValidationError","errorDataPath","parentSchema","params","comparison","limit","missingPattern","data","missingProperty","hasProperty","additionalProperty","deps","trim","propertyName","postfix","schemaOutput","lastChild","remainingChildren","filteredChildren","nestedError","failingKeyword","ErrorInJSON","formattedError","_default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/babel-loader/node_modules/schema-utils/dist/ValidationError.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nconst {\n  stringHints,\n  numberHints\n} = require('./util/hints');\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.dataPath ? error.dataPath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[\n  /** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === 'anyOf' || children[i].keyword === 'oneOf') {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(({\n    $ref\n  }) => $ref).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n\n  while (i > 0) {\n    const child = children[i];\n\n    if (child.keyword === 'anyOf' || child.keyword === 'oneOf') {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\n\nfunction canApplyNot(schema) {\n  const typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === 'object' && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === 'number' || typeof schema.minimum !== 'undefined' || typeof schema.exclusiveMinimum !== 'undefined' || typeof schema.maximum !== 'undefined' || typeof schema.exclusiveMaximum !== 'undefined' || typeof schema.multipleOf !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === 'integer' || typeof schema.minimum !== 'undefined' || typeof schema.exclusiveMinimum !== 'undefined' || typeof schema.maximum !== 'undefined' || typeof schema.exclusiveMaximum !== 'undefined' || typeof schema.multipleOf !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === 'string' || typeof schema.minLength !== 'undefined' || typeof schema.maxLength !== 'undefined' || typeof schema.pattern !== 'undefined' || typeof schema.format !== 'undefined' || typeof schema.formatMinimum !== 'undefined' || typeof schema.formatMaximum !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === 'boolean';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === 'array' || typeof schema.minItems === 'number' || typeof schema.maxItems === 'number' || typeof schema.uniqueItems !== 'undefined' || typeof schema.items !== 'undefined' || typeof schema.additionalItems !== 'undefined' || typeof schema.contains !== 'undefined';\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === 'object' || typeof schema.minProperties !== 'undefined' || typeof schema.maxProperties !== 'undefined' || typeof schema.required !== 'undefined' || typeof schema.properties !== 'undefined' || typeof schema.patternProperties !== 'undefined' || typeof schema.additionalProperties !== 'undefined' || typeof schema.dependencies !== 'undefined' || typeof schema.propertyNames !== 'undefined' || typeof schema.patternRequired !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === 'null';\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return 'an';\n  }\n\n  return 'a';\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return '';\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return ' | should be any non-number';\n    }\n\n    if (likeString(schema)) {\n      return ' | should be any non-string';\n    }\n\n    if (likeArray(schema)) {\n      return ' | should be any non-array';\n    }\n\n    if (likeObject(schema)) {\n      return ' | should be any non-object';\n    }\n  }\n\n  return '';\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(', ')})` : '';\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n\n  return [];\n}\n\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema, configuration = {}) {\n    super();\n    /** @type {string} */\n\n    this.name = 'ValidationError';\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    this.headerName = configuration.name || headerNameFromSchema || 'Object';\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || 'configuration';\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  getSchemaPart(path) {\n    const newPath = path.split('/');\n    let schemaPart = this.schema;\n\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[\n      /** @type {keyof Schema} */\n      newPath[i]];\n\n      if (!inner) {\n        break;\n      }\n\n      schemaPart = inner;\n    }\n\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {boolean} logic\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n\n  formatSchema(schema, logic = true, prevSchemas = []) {\n    let newLogic = logic;\n\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, newLogic, prevSchemas);\n      }\n\n      if (prevSchemas.includes(innerSchema)) {\n        return '(recursive)';\n      }\n\n      return this.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n    };\n\n    if (hasNotInSchema(schema) && !likeObject(schema)) {\n      if (canApplyNot(schema.not)) {\n        newLogic = !logic;\n        return formatInnerSchema(schema.not);\n      }\n\n      const needApplyLogicHere = !schema.not.not;\n      const prefix = logic ? '' : 'non ';\n      newLogic = !logic;\n      return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n    }\n\n    if (\n    /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } =\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === 'Function' ? 'function' : item).join(' | ');\n    }\n\n    if (schema.enum) {\n      return (\n        /** @type {Array<any>} */\n        schema.enum.map(item => JSON.stringify(item)).join(' | ')\n      );\n    }\n\n    if (typeof schema.const !== 'undefined') {\n      return JSON.stringify(schema.const);\n    }\n\n    if (schema.oneOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(' | ')\n      );\n    }\n\n    if (schema.anyOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(' | ')\n      );\n    }\n\n    if (schema.allOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(' & ')\n      );\n    }\n\n    if (\n    /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } =\n      /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : ''}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : ''}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : ''}`;\n    }\n\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : ''}`;\n      return logic ? str : hints.length > 0 ? `non-${type} | ${str}` : `non-${type}`;\n    }\n\n    if (likeString(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : ''}`;\n      return logic ? str : str === 'string' ? 'non-string' : `non-string | ${str}`;\n    }\n\n    if (likeBoolean(schema)) {\n      return `${logic ? '' : 'non-'}boolean`;\n    }\n\n    if (likeArray(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minItems === 'number') {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? 's' : ''}`);\n      }\n\n      if (typeof schema.maxItems === 'number') {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? 's' : ''}`);\n      }\n\n      if (schema.uniqueItems) {\n        hints.push('should not have duplicate items');\n      }\n\n      const hasAdditionalItems = typeof schema.additionalItems === 'undefined' || Boolean(schema.additionalItems);\n      let items = '';\n\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */\n          schema.items.map(item => formatInnerSchema(item)).join(', ')}`;\n\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = 'any';\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = 'any';\n      }\n\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n\n      return `[${items}${hasAdditionalItems ? ', ...' : ''}]${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n\n    if (likeObject(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minProperties === 'number') {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? 'properties' : 'property'}`);\n      }\n\n      if (typeof schema.maxProperties === 'number') {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? 'properties' : 'property'}`);\n      }\n\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? 's' : ''} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(' | ')}`);\n      }\n\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set(\n      /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? '' : '?'}`;\n      }).concat(typeof schema.additionalProperties === 'undefined' || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : ['…'] : []).join(', ');\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } =\n      /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? 'properties' : 'property'} ${dependency.map(dep => `'${dep}'`).join(', ')} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n\n      return `object {${objectStructure ? ` ${objectStructure} ` : ''}}${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n\n    if (likeNull(schema)) {\n      return `${logic ? '' : 'non-'}null`;\n    }\n\n    if (Array.isArray(schema.type)) {\n      // not logic already applied in formatValidationError\n      return `${schema.type.join(' | ')}`;\n    } // Fallback for unknown keywords\n    // not logic already applied in formatValidationError\n\n    /* istanbul ignore next */\n\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @param {boolean=} logic\n   * @returns {string}\n   */\n\n\n  getSchemaPartText(schemaPart, additionalPath, needDot = false, logic = true) {\n    if (!schemaPart) {\n      return '';\n    }\n\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[\n        /** @type {keyof Schema} */\n        additionalPath[i]];\n\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = `${this.formatSchema(schemaPart, logic)}${needDot ? '.' : ''}`;\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return '';\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    if (schemaPart.description) {\n      return `\\n-> ${schemaPart.description}`;\n    }\n\n    return '';\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      dataPath: errorDataPath\n    } = error;\n    const dataPath = `${this.baseDataPath}${errorDataPath}`;\n\n    switch (keyword) {\n      case 'type':\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch (\n          /** @type {import(\"ajv\").TypeParams} */\n          params.type) {\n            case 'number':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'integer':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'string':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'boolean':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'array':\n              return `${dataPath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case 'object':\n              return `${dataPath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case 'null':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            default:\n              return `${dataPath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n\n      case 'instanceof':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case 'pattern':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } =\n          /** @type {import(\"ajv\").PatternParams} */\n          params;\n          return `${dataPath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'format':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } =\n          /** @type {import(\"ajv\").FormatParams} */\n          params;\n          return `${dataPath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'formatMinimum':\n      case 'formatMaximum':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          return `${dataPath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minimum':\n      case 'maximum':\n      case 'exclusiveMinimum':\n      case 'exclusiveMaximum':\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          const [, ...hints] = getHints(\n          /** @type {Schema} */\n          parentSchema, true);\n\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n\n          return `${dataPath} ${hints.join(' ')}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'multipleOf':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } =\n          /** @type {import(\"ajv\").MultipleOfParams} */\n          params;\n          return `${dataPath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'patternRequired':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } =\n          /** @type {import(\"ajv\").PatternRequiredParams} */\n          params;\n          return `${dataPath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minLength':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          const length = limit - 1;\n          return `${dataPath} should be longer than ${length} character${length > 1 ? 's' : ''}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'maxLength':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          const max = limit + 1;\n          return `${dataPath} should be shorter than ${max} character${max > 1 ? 's' : ''}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'maxItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'maxProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'uniqueItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } =\n          /** @type {import(\"ajv\").UniqueItemsParams} */\n          params;\n          return `${dataPath} should not contain the item '${error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'additionalItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'contains':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should contains at least one ${this.getSchemaPartText(parentSchema, ['contains'])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n\n      case 'required':\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params.missingProperty.replace(/^\\./, '');\n          const hasProperty = parentSchema && Boolean(\n          /** @type {Schema} */\n          parentSchema.properties &&\n          /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${dataPath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, ['properties', missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'additionalProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } =\n          /** @type {import(\"ajv\").AdditionalPropertiesParams} */\n          params;\n          return `${dataPath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'dependencies':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params;\n          const dependencies = deps.split(',').map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(', ');\n          return `${dataPath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'propertyNames':\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } =\n          /** @type {import(\"ajv\").PropertyNamesParams} */\n          params;\n          return `${dataPath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'enum':\n        {\n          const {\n            parentSchema\n          } = error;\n\n          if (parentSchema &&\n          /** @type {Schema} */\n          parentSchema.enum &&\n          /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${dataPath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'const':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case 'not':\n        {\n          const postfix = likeObject(\n          /** @type {Schema} */\n          error.parentSchema) ? `\\n${this.getSchemaPartText(error.parentSchema)}` : '';\n          const schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n\n          if (canApplyNot(error.schema)) {\n            return `${dataPath} should be any ${schemaOutput}${postfix}.`;\n          }\n\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${dataPath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : ''}`;\n        }\n\n      case 'oneOf':\n      case 'anyOf':\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n\n            let filteredChildren = filterChildren(children);\n\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), '   ')}`).join('\\n')}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'if':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } =\n          /** @type {import(\"ajv\").IfParams} */\n          params;\n          return `${dataPath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n\n      case 'absolutePath':\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${dataPath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${dataPath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n\n      return ` - ${indent(formattedError, '   ')}`;\n    }).join('\\n');\n  }\n\n}\n\nvar _default = ValidationError;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}