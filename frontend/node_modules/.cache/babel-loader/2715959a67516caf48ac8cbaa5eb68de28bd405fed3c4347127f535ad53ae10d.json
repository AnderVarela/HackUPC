{"ast":null,"code":"/*!\n * regjsgen 0.5.2\n * Copyright 2014-2020 Benjamin Tan <https://ofcr.se/>\n * Available under the MIT license <https://github.com/bnjmnt4n/regjsgen/blob/master/LICENSE-MIT.txt>\n */\n;\n(function () {\n  'use strict';\n\n  // Used to determine if values are of the language type `Object`.\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  // Used as a reference to the global object.\n  var root = objectTypes[typeof window] && window || this;\n\n  // Detect free variable `exports`.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Detect free variable `module`.\n  var hasFreeModule = objectTypes[typeof module] && module && !module.nodeType;\n\n  // Detect free variable `global` from Node.js or Browserified code and use it as `root`.\n  var freeGlobal = freeExports && hasFreeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Used to check objects for own properties.\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a string based on the given code point.\n  // Based on https://mths.be/fromcodepoint by @mathias.\n  function fromCodePoint() {\n    var codePoint = Number(arguments[0]);\n    if (!isFinite(codePoint) ||\n    // `NaN`, `+Infinity`, or `-Infinity`\n    codePoint < 0 ||\n    // not a valid Unicode code point\n    codePoint > 0x10FFFF ||\n    // not a valid Unicode code point\n    Math.floor(codePoint) != codePoint // not an integer\n    ) {\n      throw RangeError('Invalid code point: ' + codePoint);\n    }\n    if (codePoint <= 0xFFFF) {\n      // BMP code point\n      return String.fromCharCode(codePoint);\n    } else {\n      // Astral code point; split in surrogate halves\n      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      codePoint -= 0x10000;\n      var highSurrogate = (codePoint >> 10) + 0xD800;\n      var lowSurrogate = codePoint % 0x400 + 0xDC00;\n      return String.fromCharCode(highSurrogate, lowSurrogate);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Ensures that nodes have the correct types.\n  var assertTypeRegexMap = {};\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n      throw Error('Invalid node type: ' + type + '; expected type: ' + expected);\n    }\n    expected = hasOwnProperty.call(assertTypeRegexMap, expected) ? assertTypeRegexMap[expected] : assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$');\n    if (expected.test(type)) {\n      return;\n    }\n    throw Error('Invalid node type: ' + type + '; expected types: ' + expected);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a regular expression string based on an AST.\n  function generate(node) {\n    var type = node.type;\n    if (hasOwnProperty.call(generators, type)) {\n      return generators[type](node);\n    }\n    throw Error('Invalid node type: ' + type);\n  }\n\n  // Constructs a string by concatentating the output of each term.\n  function generateSequence(generator, terms, /* optional */separator) {\n    var i = -1,\n      length = terms.length,\n      result = '',\n      term;\n    while (++i < length) {\n      term = terms[i];\n      if (separator && i > 0) result += separator;\n\n      // Ensure that `\\0` null escapes followed by number symbols are not\n      // treated as backreferences.\n      if (i + 1 < length && terms[i].type == 'value' && terms[i].kind == 'null' && terms[i + 1].type == 'value' && terms[i + 1].kind == 'symbol' && terms[i + 1].codePoint >= 48 && terms[i + 1].codePoint <= 57) {\n        result += '\\\\000';\n        continue;\n      }\n      result += generator(term);\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n    return generateSequence(generateTerm, node.body);\n  }\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n  var atomType = 'anchor|characterClass|characterClassEscape|dot|group|reference|unicodePropertyEscape|value';\n  function generateAtom(node) {\n    assertType(node.type, atomType);\n    return generate(node);\n  }\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n    var kind = node.kind;\n    var separator = kind === 'intersection' ? '&&' : kind === 'subtraction' ? '--' : '';\n    return '[' + (node.negative ? '^' : '') + generateSequence(generateClassAtom, node.body, separator) + ']';\n  }\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n    return '\\\\' + node.value;\n  }\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n    var min = node.min,\n      max = node.max;\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|characterClassRange|dot|value|unicodePropertyEscape|classStrings');\n    return generate(node);\n  }\n  function generateClassStrings(node) {\n    assertType(node.type, 'classStrings');\n    return '\\\\q{' + generateSequence(generateClassString, node.strings, '|') + '}';\n  }\n  function generateClassString(node) {\n    assertType(node.type, 'classString');\n    return generateSequence(generate, node.characters);\n  }\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n    return generateSequence(generate, node.body, '|');\n  }\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n    return '.';\n  }\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n    var result = '';\n    switch (node.behavior) {\n      case 'normal':\n        if (node.name) {\n          result += '?<' + generateIdentifier(node.name) + '>';\n        }\n        break;\n      case 'ignore':\n        if (node.modifierFlags) {\n          result += '?';\n          if (node.modifierFlags.enabling) result += node.modifierFlags.enabling;\n          if (node.modifierFlags.disabling) result += \"-\" + node.modifierFlags.disabling;\n          result += ':';\n        } else {\n          result += '?:';\n        }\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      case 'lookbehind':\n        result += '?<=';\n        break;\n      case 'negativeLookbehind':\n        result += '?<!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n    result += generateSequence(generate, node.body);\n    return '(' + result + ')';\n  }\n  function generateIdentifier(node) {\n    assertType(node.type, 'identifier');\n    return node.value;\n  }\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n    var quantifier = '',\n      min = node.min,\n      max = node.max;\n    if (max == null) {\n      if (min == 0) {\n        quantifier = '*';\n      } else if (min == 1) {\n        quantifier = '+';\n      } else {\n        quantifier = '{' + min + ',}';\n      }\n    } else if (min == max) {\n      quantifier = '{' + min + '}';\n    } else if (min == 0 && max == 1) {\n      quantifier = '?';\n    } else {\n      quantifier = '{' + min + ',' + max + '}';\n    }\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n    return generateAtom(node.body[0]) + quantifier;\n  }\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n    if (node.matchIndex) {\n      return '\\\\' + node.matchIndex;\n    }\n    if (node.name) {\n      return '\\\\k<' + generateIdentifier(node.name) + '>';\n    }\n    throw new Error('Unknown reference type');\n  }\n  function generateTerm(node) {\n    assertType(node.type, atomType + '|empty|quantifier');\n    return generate(node);\n  }\n  function generateUnicodePropertyEscape(node) {\n    assertType(node.type, 'unicodePropertyEscape');\n    return '\\\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';\n  }\n  function generateValue(node) {\n    assertType(node.type, 'value');\n    var kind = node.kind,\n      codePoint = node.codePoint;\n    if (typeof codePoint != 'number') {\n      throw new Error('Invalid code point: ' + codePoint);\n    }\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + ('000' + codePoint.toString(8)).slice(-3);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x0009:\n            return '\\\\t';\n          case 0x000A:\n            return '\\\\n';\n          case 0x000B:\n            return '\\\\v';\n          case 0x000C:\n            return '\\\\f';\n          case 0x000D:\n            return '\\\\r';\n          case 0x002D:\n            return '\\\\-';\n          default:\n            throw Error('Invalid code point: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Used to generate strings for each node type.\n  var generators = {\n    'alternative': generateAlternative,\n    'anchor': generateAnchor,\n    'characterClass': generateCharacterClass,\n    'characterClassEscape': generateCharacterClassEscape,\n    'characterClassRange': generateCharacterClassRange,\n    'classStrings': generateClassStrings,\n    'disjunction': generateDisjunction,\n    'dot': generateDot,\n    'group': generateGroup,\n    'quantifier': generateQuantifier,\n    'reference': generateReference,\n    'unicodePropertyEscape': generateUnicodePropertyEscape,\n    'value': generateValue\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export regjsgen.\n  var regjsgen = {\n    'generate': generate\n  };\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so it can be aliased through path mapping.\n    define(function () {\n      return regjsgen;\n    });\n    root.regjsgen = regjsgen;\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && hasFreeModule) {\n    // Export for CommonJS support.\n    freeExports.generate = generate;\n  } else {\n    // Export to the global object.\n    root.regjsgen = regjsgen;\n  }\n}).call(this);","map":{"version":3,"names":["objectTypes","root","window","freeExports","exports","nodeType","hasFreeModule","module","freeGlobal","global","self","hasOwnProperty","Object","prototype","fromCodePoint","codePoint","Number","arguments","isFinite","Math","floor","RangeError","String","fromCharCode","highSurrogate","lowSurrogate","assertTypeRegexMap","assertType","type","expected","indexOf","Error","call","RegExp","test","generate","node","generators","generateSequence","generator","terms","separator","i","length","result","term","kind","generateAlternative","generateTerm","body","generateAnchor","atomType","generateAtom","generateCharacterClass","negative","generateClassAtom","generateCharacterClassEscape","value","generateCharacterClassRange","min","max","generateClassStrings","generateClassString","strings","characters","generateDisjunction","generateDot","generateGroup","behavior","name","generateIdentifier","modifierFlags","enabling","disabling","behaviour","generateQuantifier","quantifier","greedy","generateReference","matchIndex","generateUnicodePropertyEscape","generateValue","toString","toUpperCase","slice","regjsgen","define","amd"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@babel/regjsgen/regjsgen.js"],"sourcesContent":["/*!\n * regjsgen 0.5.2\n * Copyright 2014-2020 Benjamin Tan <https://ofcr.se/>\n * Available under the MIT license <https://github.com/bnjmnt4n/regjsgen/blob/master/LICENSE-MIT.txt>\n */\n;(function() {\n  'use strict';\n\n  // Used to determine if values are of the language type `Object`.\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  // Used as a reference to the global object.\n  var root = (objectTypes[typeof window] && window) || this;\n\n  // Detect free variable `exports`.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Detect free variable `module`.\n  var hasFreeModule = objectTypes[typeof module] && module && !module.nodeType;\n\n  // Detect free variable `global` from Node.js or Browserified code and use it as `root`.\n  var freeGlobal = freeExports && hasFreeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Used to check objects for own properties.\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a string based on the given code point.\n  // Based on https://mths.be/fromcodepoint by @mathias.\n  function fromCodePoint() {\n    var codePoint = Number(arguments[0]);\n\n    if (\n      !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n      codePoint < 0 || // not a valid Unicode code point\n      codePoint > 0x10FFFF || // not a valid Unicode code point\n      Math.floor(codePoint) != codePoint // not an integer\n    ) {\n      throw RangeError('Invalid code point: ' + codePoint);\n    }\n\n    if (codePoint <= 0xFFFF) {\n      // BMP code point\n      return String.fromCharCode(codePoint);\n    } else {\n      // Astral code point; split in surrogate halves\n      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      codePoint -= 0x10000;\n      var highSurrogate = (codePoint >> 10) + 0xD800;\n      var lowSurrogate = (codePoint % 0x400) + 0xDC00;\n      return String.fromCharCode(highSurrogate, lowSurrogate);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Ensures that nodes have the correct types.\n  var assertTypeRegexMap = {};\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type + '; expected type: ' + expected);\n    }\n\n    expected = hasOwnProperty.call(assertTypeRegexMap, expected)\n      ? assertTypeRegexMap[expected]\n      : (assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$'));\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type + '; expected types: ' + expected);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a regular expression string based on an AST.\n  function generate(node) {\n    var type = node.type;\n\n    if (hasOwnProperty.call(generators, type)) {\n      return generators[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  // Constructs a string by concatentating the output of each term.\n  function generateSequence(generator, terms, /* optional */  separator) {\n    var i = -1,\n        length = terms.length,\n        result = '',\n        term;\n\n    while (++i < length) {\n      term = terms[i];\n\n      if (separator && i > 0) result += separator;\n\n      // Ensure that `\\0` null escapes followed by number symbols are not\n      // treated as backreferences.\n      if (\n        i + 1 < length &&\n        terms[i].type == 'value' &&\n        terms[i].kind == 'null' &&\n        terms[i + 1].type == 'value' &&\n        terms[i + 1].kind == 'symbol' &&\n        terms[i + 1].codePoint >= 48 &&\n        terms[i + 1].codePoint <= 57\n      ) {\n        result += '\\\\000';\n        continue;\n      }\n\n      result += generator(term);\n    }\n\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n\n    return generateSequence(generateTerm, node.body);\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  var atomType = 'anchor|characterClass|characterClassEscape|dot|group|reference|unicodePropertyEscape|value';\n\n  function generateAtom(node) {\n    assertType(node.type, atomType);\n\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n\n    var kind = node.kind;\n    var separator = kind === 'intersection' ? '&&' : kind === 'subtraction' ? '--' : '';\n\n    return '[' +\n      (node.negative ? '^' : '') +\n      generateSequence(generateClassAtom, node.body, separator) +\n    ']';\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|characterClassRange|dot|value|unicodePropertyEscape|classStrings');\n\n    return generate(node);\n  }\n\n  function generateClassStrings(node) {\n    assertType(node.type, 'classStrings');\n\n    return '\\\\q{' + generateSequence(generateClassString, node.strings, '|') + '}';\n  }\n\n  function generateClassString(node) {\n    assertType(node.type, 'classString');\n\n    return generateSequence(generate, node.characters);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n\n    return generateSequence(generate, node.body, '|');\n  }\n\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n\n    var result = '';\n\n    switch (node.behavior) {\n      case 'normal':\n        if (node.name) {\n          result += '?<' + generateIdentifier(node.name) + '>';\n        }\n        break;\n      case 'ignore':\n        if (node.modifierFlags) {\n          result += '?';\n          if(node.modifierFlags.enabling) result += node.modifierFlags.enabling;\n          if(node.modifierFlags.disabling) result += \"-\" + node.modifierFlags.disabling;\n          result += ':';\n        } else {\n          result += '?:';\n        }\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      case 'lookbehind':\n        result += '?<=';\n        break;\n      case 'negativeLookbehind':\n        result += '?<!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    result += generateSequence(generate, node.body);\n\n    return '(' + result + ')';\n  }\n\n  function generateIdentifier(node) {\n    assertType(node.type, 'identifier');\n\n    return node.value;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    if (max == null) {\n      if (min == 0) {\n        quantifier = '*';\n      } else if (min == 1) {\n        quantifier = '+';\n      } else {\n        quantifier = '{' + min + ',}';\n      }\n    } else if (min == max) {\n      quantifier = '{' + min + '}';\n    } else if (min == 0 && max == 1) {\n      quantifier = '?';\n    } else {\n      quantifier = '{' + min + ',' + max + '}';\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    if (node.matchIndex) {\n      return '\\\\' + node.matchIndex;\n    }\n    if (node.name) {\n      return '\\\\k<' + generateIdentifier(node.name) + '>';\n    }\n\n    throw new Error('Unknown reference type');\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, atomType + '|empty|quantifier');\n\n    return generate(node);\n  }\n\n  function generateUnicodePropertyEscape(node) {\n    assertType(node.type, 'unicodePropertyEscape');\n\n    return '\\\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    if (typeof codePoint != 'number') {\n      throw new Error('Invalid code point: ' + codePoint);\n    }\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + ('000' + codePoint.toString(8)).slice(-3);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x0009:\n            return '\\\\t';\n          case 0x000A:\n            return '\\\\n';\n          case 0x000B:\n            return '\\\\v';\n          case 0x000C:\n            return '\\\\f';\n          case 0x000D:\n            return '\\\\r';\n          case 0x002D:\n            return '\\\\-';\n          default:\n            throw Error('Invalid code point: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Used to generate strings for each node type.\n  var generators = {\n    'alternative': generateAlternative,\n    'anchor': generateAnchor,\n    'characterClass': generateCharacterClass,\n    'characterClassEscape': generateCharacterClassEscape,\n    'characterClassRange': generateCharacterClassRange,\n    'classStrings': generateClassStrings,\n    'disjunction': generateDisjunction,\n    'dot': generateDot,\n    'group': generateGroup,\n    'quantifier': generateQuantifier,\n    'reference': generateReference,\n    'unicodePropertyEscape': generateUnicodePropertyEscape,\n    'value': generateValue\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export regjsgen.\n  var regjsgen = {\n    'generate': generate\n  };\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so it can be aliased through path mapping.\n    define(function() {\n      return regjsgen;\n    });\n\n    root.regjsgen = regjsgen;\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && hasFreeModule) {\n    // Export for CommonJS support.\n    freeExports.generate = generate;\n  }\n  else {\n    // Export to the global object.\n    root.regjsgen = regjsgen;\n  }\n}.call(this));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAAE,aAAW;EACX,YAAY;;EAEZ;EACA,IAAIA,WAAW,GAAG;IAChB,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;EACZ,CAAC;;EAED;EACA,IAAIC,IAAI,GAAID,WAAW,CAAC,OAAOE,MAAM,CAAC,IAAIA,MAAM,IAAK,IAAI;;EAEzD;EACA,IAAIC,WAAW,GAAGH,WAAW,CAAC,OAAOI,OAAO,CAAC,IAAIA,OAAO,IAAI,CAACA,OAAO,CAACC,QAAQ,IAAID,OAAO;;EAExF;EACA,IAAIE,aAAa,GAAGN,WAAW,CAAC,OAAOO,MAAM,CAAC,IAAIA,MAAM,IAAI,CAACA,MAAM,CAACF,QAAQ;;EAE5E;EACA,IAAIG,UAAU,GAAGL,WAAW,IAAIG,aAAa,IAAI,OAAOG,MAAM,IAAI,QAAQ,IAAIA,MAAM;EACpF,IAAID,UAAU,KAAKA,UAAU,CAACC,MAAM,KAAKD,UAAU,IAAIA,UAAU,CAACN,MAAM,KAAKM,UAAU,IAAIA,UAAU,CAACE,IAAI,KAAKF,UAAU,CAAC,EAAE;IAC1HP,IAAI,GAAGO,UAAU;EACnB;;EAEA;EACA,IAAIG,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACF,cAAc;;EAEpD;;EAEA;EACA;EACA,SAASG,aAAaA,CAAA,EAAG;IACvB,IAAIC,SAAS,GAAGC,MAAM,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;IAEpC,IACE,CAACC,QAAQ,CAACH,SAAS,CAAC;IAAI;IACxBA,SAAS,GAAG,CAAC;IAAI;IACjBA,SAAS,GAAG,QAAQ;IAAI;IACxBI,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,IAAIA,SAAS,CAAC;IAAA,EACnC;MACA,MAAMM,UAAU,CAAC,sBAAsB,GAAGN,SAAS,CAAC;IACtD;IAEA,IAAIA,SAAS,IAAI,MAAM,EAAE;MACvB;MACA,OAAOO,MAAM,CAACC,YAAY,CAACR,SAAS,CAAC;IACvC,CAAC,MAAM;MACL;MACA;MACAA,SAAS,IAAI,OAAO;MACpB,IAAIS,aAAa,GAAG,CAACT,SAAS,IAAI,EAAE,IAAI,MAAM;MAC9C,IAAIU,YAAY,GAAIV,SAAS,GAAG,KAAK,GAAI,MAAM;MAC/C,OAAOO,MAAM,CAACC,YAAY,CAACC,aAAa,EAAEC,YAAY,CAAC;IACzD;EACF;;EAEA;;EAEA;EACA,IAAIC,kBAAkB,GAAG,CAAC,CAAC;EAC3B,SAASC,UAAUA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IAClC,IAAIA,QAAQ,CAACC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE;MAC/B,IAAIF,IAAI,IAAIC,QAAQ,EAAE;QACpB;MACF;MAEA,MAAME,KAAK,CAAC,qBAAqB,GAAGH,IAAI,GAAG,mBAAmB,GAAGC,QAAQ,CAAC;IAC5E;IAEAA,QAAQ,GAAGlB,cAAc,CAACqB,IAAI,CAACN,kBAAkB,EAAEG,QAAQ,CAAC,GACxDH,kBAAkB,CAACG,QAAQ,CAAC,GAC3BH,kBAAkB,CAACG,QAAQ,CAAC,GAAGI,MAAM,CAAC,MAAM,GAAGJ,QAAQ,GAAG,IAAI,CAAE;IAErE,IAAIA,QAAQ,CAACK,IAAI,CAACN,IAAI,CAAC,EAAE;MACvB;IACF;IAEA,MAAMG,KAAK,CAAC,qBAAqB,GAAGH,IAAI,GAAG,oBAAoB,GAAGC,QAAQ,CAAC;EAC7E;;EAEA;;EAEA;EACA,SAASM,QAAQA,CAACC,IAAI,EAAE;IACtB,IAAIR,IAAI,GAAGQ,IAAI,CAACR,IAAI;IAEpB,IAAIjB,cAAc,CAACqB,IAAI,CAACK,UAAU,EAAET,IAAI,CAAC,EAAE;MACzC,OAAOS,UAAU,CAACT,IAAI,CAAC,CAACQ,IAAI,CAAC;IAC/B;IAEA,MAAML,KAAK,CAAC,qBAAqB,GAAGH,IAAI,CAAC;EAC3C;;EAEA;EACA,SAASU,gBAAgBA,CAACC,SAAS,EAAEC,KAAK,EAAE,cAAgBC,SAAS,EAAE;IACrE,IAAIC,CAAC,GAAG,CAAC,CAAC;MACNC,MAAM,GAAGH,KAAK,CAACG,MAAM;MACrBC,MAAM,GAAG,EAAE;MACXC,IAAI;IAER,OAAO,EAAEH,CAAC,GAAGC,MAAM,EAAE;MACnBE,IAAI,GAAGL,KAAK,CAACE,CAAC,CAAC;MAEf,IAAID,SAAS,IAAIC,CAAC,GAAG,CAAC,EAAEE,MAAM,IAAIH,SAAS;;MAE3C;MACA;MACA,IACEC,CAAC,GAAG,CAAC,GAAGC,MAAM,IACdH,KAAK,CAACE,CAAC,CAAC,CAACd,IAAI,IAAI,OAAO,IACxBY,KAAK,CAACE,CAAC,CAAC,CAACI,IAAI,IAAI,MAAM,IACvBN,KAAK,CAACE,CAAC,GAAG,CAAC,CAAC,CAACd,IAAI,IAAI,OAAO,IAC5BY,KAAK,CAACE,CAAC,GAAG,CAAC,CAAC,CAACI,IAAI,IAAI,QAAQ,IAC7BN,KAAK,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC3B,SAAS,IAAI,EAAE,IAC5ByB,KAAK,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC3B,SAAS,IAAI,EAAE,EAC5B;QACA6B,MAAM,IAAI,OAAO;QACjB;MACF;MAEAA,MAAM,IAAIL,SAAS,CAACM,IAAI,CAAC;IAC3B;IAEA,OAAOD,MAAM;EACf;;EAEA;;EAEA,SAASG,mBAAmBA,CAACX,IAAI,EAAE;IACjCT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,aAAa,CAAC;IAEpC,OAAOU,gBAAgB,CAACU,YAAY,EAAEZ,IAAI,CAACa,IAAI,CAAC;EAClD;EAEA,SAASC,cAAcA,CAACd,IAAI,EAAE;IAC5BT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,QAAQ,CAAC;IAE/B,QAAQQ,IAAI,CAACU,IAAI;MACf,KAAK,OAAO;QACV,OAAO,GAAG;MACZ,KAAK,KAAK;QACR,OAAO,GAAG;MACZ,KAAK,UAAU;QACb,OAAO,KAAK;MACd,KAAK,cAAc;QACjB,OAAO,KAAK;MACd;QACE,MAAMf,KAAK,CAAC,mBAAmB,CAAC;IACpC;EACF;EAEA,IAAIoB,QAAQ,GAAG,4FAA4F;EAE3G,SAASC,YAAYA,CAAChB,IAAI,EAAE;IAC1BT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAEuB,QAAQ,CAAC;IAE/B,OAAOhB,QAAQ,CAACC,IAAI,CAAC;EACvB;EAEA,SAASiB,sBAAsBA,CAACjB,IAAI,EAAE;IACpCT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,gBAAgB,CAAC;IAEvC,IAAIkB,IAAI,GAAGV,IAAI,CAACU,IAAI;IACpB,IAAIL,SAAS,GAAGK,IAAI,KAAK,cAAc,GAAG,IAAI,GAAGA,IAAI,KAAK,aAAa,GAAG,IAAI,GAAG,EAAE;IAEnF,OAAO,GAAG,IACPV,IAAI,CAACkB,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC,GAC1BhB,gBAAgB,CAACiB,iBAAiB,EAAEnB,IAAI,CAACa,IAAI,EAAER,SAAS,CAAC,GAC3D,GAAG;EACL;EAEA,SAASe,4BAA4BA,CAACpB,IAAI,EAAE;IAC1CT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,sBAAsB,CAAC;IAE7C,OAAO,IAAI,GAAGQ,IAAI,CAACqB,KAAK;EAC1B;EAEA,SAASC,2BAA2BA,CAACtB,IAAI,EAAE;IACzCT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,qBAAqB,CAAC;IAE5C,IAAI+B,GAAG,GAAGvB,IAAI,CAACuB,GAAG;MACdC,GAAG,GAAGxB,IAAI,CAACwB,GAAG;IAElB,IAAID,GAAG,CAAC/B,IAAI,IAAI,qBAAqB,IAAIgC,GAAG,CAAChC,IAAI,IAAI,qBAAqB,EAAE;MAC1E,MAAMG,KAAK,CAAC,+BAA+B,CAAC;IAC9C;IAEA,OAAOwB,iBAAiB,CAACI,GAAG,CAAC,GAAG,GAAG,GAAGJ,iBAAiB,CAACK,GAAG,CAAC;EAC9D;EAEA,SAASL,iBAAiBA,CAACnB,IAAI,EAAE;IAC/BT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,6GAA6G,CAAC;IAEpI,OAAOO,QAAQ,CAACC,IAAI,CAAC;EACvB;EAEA,SAASyB,oBAAoBA,CAACzB,IAAI,EAAE;IAClCT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,cAAc,CAAC;IAErC,OAAO,MAAM,GAAGU,gBAAgB,CAACwB,mBAAmB,EAAE1B,IAAI,CAAC2B,OAAO,EAAE,GAAG,CAAC,GAAG,GAAG;EAChF;EAEA,SAASD,mBAAmBA,CAAC1B,IAAI,EAAE;IACjCT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,aAAa,CAAC;IAEpC,OAAOU,gBAAgB,CAACH,QAAQ,EAAEC,IAAI,CAAC4B,UAAU,CAAC;EACpD;EAEA,SAASC,mBAAmBA,CAAC7B,IAAI,EAAE;IACjCT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,aAAa,CAAC;IAEpC,OAAOU,gBAAgB,CAACH,QAAQ,EAAEC,IAAI,CAACa,IAAI,EAAE,GAAG,CAAC;EACnD;EAGA,SAASiB,WAAWA,CAAC9B,IAAI,EAAE;IACzBT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,KAAK,CAAC;IAE5B,OAAO,GAAG;EACZ;EAEA,SAASuC,aAAaA,CAAC/B,IAAI,EAAE;IAC3BT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,OAAO,CAAC;IAE9B,IAAIgB,MAAM,GAAG,EAAE;IAEf,QAAQR,IAAI,CAACgC,QAAQ;MACnB,KAAK,QAAQ;QACX,IAAIhC,IAAI,CAACiC,IAAI,EAAE;UACbzB,MAAM,IAAI,IAAI,GAAG0B,kBAAkB,CAAClC,IAAI,CAACiC,IAAI,CAAC,GAAG,GAAG;QACtD;QACA;MACF,KAAK,QAAQ;QACX,IAAIjC,IAAI,CAACmC,aAAa,EAAE;UACtB3B,MAAM,IAAI,GAAG;UACb,IAAGR,IAAI,CAACmC,aAAa,CAACC,QAAQ,EAAE5B,MAAM,IAAIR,IAAI,CAACmC,aAAa,CAACC,QAAQ;UACrE,IAAGpC,IAAI,CAACmC,aAAa,CAACE,SAAS,EAAE7B,MAAM,IAAI,GAAG,GAAGR,IAAI,CAACmC,aAAa,CAACE,SAAS;UAC7E7B,MAAM,IAAI,GAAG;QACf,CAAC,MAAM;UACLA,MAAM,IAAI,IAAI;QAChB;QACA;MACF,KAAK,WAAW;QACdA,MAAM,IAAI,IAAI;QACd;MACF,KAAK,mBAAmB;QACtBA,MAAM,IAAI,IAAI;QACd;MACF,KAAK,YAAY;QACfA,MAAM,IAAI,KAAK;QACf;MACF,KAAK,oBAAoB;QACvBA,MAAM,IAAI,KAAK;QACf;MACF;QACE,MAAMb,KAAK,CAAC,qBAAqB,GAAGK,IAAI,CAACsC,SAAS,CAAC;IACvD;IAEA9B,MAAM,IAAIN,gBAAgB,CAACH,QAAQ,EAAEC,IAAI,CAACa,IAAI,CAAC;IAE/C,OAAO,GAAG,GAAGL,MAAM,GAAG,GAAG;EAC3B;EAEA,SAAS0B,kBAAkBA,CAAClC,IAAI,EAAE;IAChCT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,YAAY,CAAC;IAEnC,OAAOQ,IAAI,CAACqB,KAAK;EACnB;EAEA,SAASkB,kBAAkBA,CAACvC,IAAI,EAAE;IAChCT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,YAAY,CAAC;IAEnC,IAAIgD,UAAU,GAAG,EAAE;MACfjB,GAAG,GAAGvB,IAAI,CAACuB,GAAG;MACdC,GAAG,GAAGxB,IAAI,CAACwB,GAAG;IAElB,IAAIA,GAAG,IAAI,IAAI,EAAE;MACf,IAAID,GAAG,IAAI,CAAC,EAAE;QACZiB,UAAU,GAAG,GAAG;MAClB,CAAC,MAAM,IAAIjB,GAAG,IAAI,CAAC,EAAE;QACnBiB,UAAU,GAAG,GAAG;MAClB,CAAC,MAAM;QACLA,UAAU,GAAG,GAAG,GAAGjB,GAAG,GAAG,IAAI;MAC/B;IACF,CAAC,MAAM,IAAIA,GAAG,IAAIC,GAAG,EAAE;MACrBgB,UAAU,GAAG,GAAG,GAAGjB,GAAG,GAAG,GAAG;IAC9B,CAAC,MAAM,IAAIA,GAAG,IAAI,CAAC,IAAIC,GAAG,IAAI,CAAC,EAAE;MAC/BgB,UAAU,GAAG,GAAG;IAClB,CAAC,MAAM;MACLA,UAAU,GAAG,GAAG,GAAGjB,GAAG,GAAG,GAAG,GAAGC,GAAG,GAAG,GAAG;IAC1C;IAEA,IAAI,CAACxB,IAAI,CAACyC,MAAM,EAAE;MAChBD,UAAU,IAAI,GAAG;IACnB;IAEA,OAAOxB,YAAY,CAAChB,IAAI,CAACa,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG2B,UAAU;EAChD;EAEA,SAASE,iBAAiBA,CAAC1C,IAAI,EAAE;IAC/BT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,WAAW,CAAC;IAElC,IAAIQ,IAAI,CAAC2C,UAAU,EAAE;MACnB,OAAO,IAAI,GAAG3C,IAAI,CAAC2C,UAAU;IAC/B;IACA,IAAI3C,IAAI,CAACiC,IAAI,EAAE;MACb,OAAO,MAAM,GAAGC,kBAAkB,CAAClC,IAAI,CAACiC,IAAI,CAAC,GAAG,GAAG;IACrD;IAEA,MAAM,IAAItC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEA,SAASiB,YAAYA,CAACZ,IAAI,EAAE;IAC1BT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAEuB,QAAQ,GAAG,mBAAmB,CAAC;IAErD,OAAOhB,QAAQ,CAACC,IAAI,CAAC;EACvB;EAEA,SAAS4C,6BAA6BA,CAAC5C,IAAI,EAAE;IAC3CT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,uBAAuB,CAAC;IAE9C,OAAO,IAAI,IAAIQ,IAAI,CAACkB,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAGlB,IAAI,CAACqB,KAAK,GAAG,GAAG;EACpE;EAEA,SAASwB,aAAaA,CAAC7C,IAAI,EAAE;IAC3BT,UAAU,CAACS,IAAI,CAACR,IAAI,EAAE,OAAO,CAAC;IAE9B,IAAIkB,IAAI,GAAGV,IAAI,CAACU,IAAI;MAChB/B,SAAS,GAAGqB,IAAI,CAACrB,SAAS;IAE9B,IAAI,OAAOA,SAAS,IAAI,QAAQ,EAAE;MAChC,MAAM,IAAIgB,KAAK,CAAC,sBAAsB,GAAGhB,SAAS,CAAC;IACrD;IAEA,QAAQ+B,IAAI;MACV,KAAK,eAAe;QAClB,OAAO,KAAK,GAAGhC,aAAa,CAACC,SAAS,GAAG,EAAE,CAAC;MAC9C,KAAK,mBAAmB;QACtB,OAAO,KAAK,GAAG,CAAC,IAAI,GAAGA,SAAS,CAACmE,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;MACxE,KAAK,YAAY;QACf,OAAO,IAAI,GAAGtE,aAAa,CAACC,SAAS,CAAC;MACxC,KAAK,MAAM;QACT,OAAO,IAAI,GAAGA,SAAS;MACzB,KAAK,OAAO;QACV,OAAO,IAAI,GAAG,CAAC,KAAK,GAAGA,SAAS,CAACmE,QAAQ,CAAC,CAAC,CAAC,EAAEE,KAAK,CAAC,CAAC,CAAC,CAAC;MACzD,KAAK,cAAc;QACjB,QAAQrE,SAAS;UACf,KAAK,MAAM;YACT,OAAO,KAAK;UACd,KAAK,MAAM;YACT,OAAO,KAAK;UACd,KAAK,MAAM;YACT,OAAO,KAAK;UACd,KAAK,MAAM;YACT,OAAO,KAAK;UACd,KAAK,MAAM;YACT,OAAO,KAAK;UACd,KAAK,MAAM;YACT,OAAO,KAAK;UACd,KAAK,MAAM;YACT,OAAO,KAAK;UACd;YACE,MAAMgB,KAAK,CAAC,sBAAsB,GAAGhB,SAAS,CAAC;QACnD;MACF,KAAK,QAAQ;QACX,OAAOD,aAAa,CAACC,SAAS,CAAC;MACjC,KAAK,eAAe;QAClB,OAAO,KAAK,GAAG,CAAC,MAAM,GAAGA,SAAS,CAACmE,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC1E,KAAK,wBAAwB;QAC3B,OAAO,MAAM,GAAGrE,SAAS,CAACmE,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,GAAG;MAC5D;QACE,MAAMpD,KAAK,CAAC,yBAAyB,GAAGe,IAAI,CAAC;IACjD;EACF;;EAEA;;EAEA;EACA,IAAIT,UAAU,GAAG;IACf,aAAa,EAAEU,mBAAmB;IAClC,QAAQ,EAAEG,cAAc;IACxB,gBAAgB,EAAEG,sBAAsB;IACxC,sBAAsB,EAAEG,4BAA4B;IACpD,qBAAqB,EAAEE,2BAA2B;IAClD,cAAc,EAAEG,oBAAoB;IACpC,aAAa,EAAEI,mBAAmB;IAClC,KAAK,EAAEC,WAAW;IAClB,OAAO,EAAEC,aAAa;IACtB,YAAY,EAAEQ,kBAAkB;IAChC,WAAW,EAAEG,iBAAiB;IAC9B,uBAAuB,EAAEE,6BAA6B;IACtD,OAAO,EAAEC;EACX,CAAC;;EAED;;EAEA;EACA,IAAII,QAAQ,GAAG;IACb,UAAU,EAAElD;EACd,CAAC;;EAED;EACA,IAAI,OAAOmD,MAAM,IAAI,UAAU,IAAI,OAAOA,MAAM,CAACC,GAAG,IAAI,QAAQ,IAAID,MAAM,CAACC,GAAG,EAAE;IAC9E;IACAD,MAAM,CAAC,YAAW;MAChB,OAAOD,QAAQ;IACjB,CAAC,CAAC;IAEFpF,IAAI,CAACoF,QAAQ,GAAGA,QAAQ;EAC1B;EACA;EAAA,KACK,IAAIlF,WAAW,IAAIG,aAAa,EAAE;IACrC;IACAH,WAAW,CAACgC,QAAQ,GAAGA,QAAQ;EACjC,CAAC,MACI;IACH;IACAlC,IAAI,CAACoF,QAAQ,GAAGA,QAAQ;EAC1B;AACF,CAAC,EAACrD,IAAI,CAAC,IAAI,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}