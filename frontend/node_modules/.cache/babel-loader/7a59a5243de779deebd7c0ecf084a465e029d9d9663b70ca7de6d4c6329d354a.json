{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\n/**\n * Check whatever node can be considered as simple\n * @param node the node to be evaluated.\n */\nfunction isSimpleType(node) {\n  switch (node.type) {\n    case utils_1.AST_NODE_TYPES.Identifier:\n    case utils_1.AST_NODE_TYPES.TSAnyKeyword:\n    case utils_1.AST_NODE_TYPES.TSBooleanKeyword:\n    case utils_1.AST_NODE_TYPES.TSNeverKeyword:\n    case utils_1.AST_NODE_TYPES.TSNumberKeyword:\n    case utils_1.AST_NODE_TYPES.TSBigIntKeyword:\n    case utils_1.AST_NODE_TYPES.TSObjectKeyword:\n    case utils_1.AST_NODE_TYPES.TSStringKeyword:\n    case utils_1.AST_NODE_TYPES.TSSymbolKeyword:\n    case utils_1.AST_NODE_TYPES.TSUnknownKeyword:\n    case utils_1.AST_NODE_TYPES.TSVoidKeyword:\n    case utils_1.AST_NODE_TYPES.TSNullKeyword:\n    case utils_1.AST_NODE_TYPES.TSArrayType:\n    case utils_1.AST_NODE_TYPES.TSUndefinedKeyword:\n    case utils_1.AST_NODE_TYPES.TSThisType:\n    case utils_1.AST_NODE_TYPES.TSQualifiedName:\n      return true;\n    case utils_1.AST_NODE_TYPES.TSTypeReference:\n      if (node.typeName && node.typeName.type === utils_1.AST_NODE_TYPES.Identifier && node.typeName.name === 'Array') {\n        if (!node.typeParameters) {\n          return true;\n        }\n        if (node.typeParameters.params.length === 1) {\n          return isSimpleType(node.typeParameters.params[0]);\n        }\n      } else {\n        if (node.typeParameters) {\n          return false;\n        }\n        return isSimpleType(node.typeName);\n      }\n      return false;\n    default:\n      return false;\n  }\n}\n/**\n * Check if node needs parentheses\n * @param node the node to be evaluated.\n */\nfunction typeNeedsParentheses(node) {\n  switch (node.type) {\n    case utils_1.AST_NODE_TYPES.TSTypeReference:\n      return typeNeedsParentheses(node.typeName);\n    case utils_1.AST_NODE_TYPES.TSUnionType:\n    case utils_1.AST_NODE_TYPES.TSFunctionType:\n    case utils_1.AST_NODE_TYPES.TSIntersectionType:\n    case utils_1.AST_NODE_TYPES.TSTypeOperator:\n    case utils_1.AST_NODE_TYPES.TSInferType:\n    case utils_1.AST_NODE_TYPES.TSConstructorType:\n      return true;\n    case utils_1.AST_NODE_TYPES.Identifier:\n      return node.name === 'ReadonlyArray';\n    default:\n      return false;\n  }\n}\nexports.default = util.createRule({\n  name: 'array-type',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require consistently using either `T[]` or `Array<T>` for arrays',\n      recommended: 'strict'\n    },\n    fixable: 'code',\n    messages: {\n      errorStringGeneric: \"Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.\",\n      errorStringArray: \"Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.\",\n      errorStringArraySimple: \"Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.\",\n      errorStringGenericSimple: \"Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead.\"\n    },\n    schema: {\n      $defs: {\n        arrayOption: {\n          enum: ['array', 'generic', 'array-simple']\n        }\n      },\n      prefixItems: [{\n        properties: {\n          default: {\n            $ref: '#/$defs/arrayOption',\n            description: 'The array type expected for mutable cases...'\n          },\n          readonly: {\n            $ref: '#/$defs/arrayOption',\n            description: 'The array type expected for readonly cases. If omitted, the value for `default` will be used.'\n          }\n        },\n        type: 'object'\n      }],\n      type: 'array'\n    }\n  },\n  defaultOptions: [{\n    default: 'array'\n  }],\n  create(context, [options]) {\n    var _a;\n    const sourceCode = context.getSourceCode();\n    const defaultOption = options.default;\n    const readonlyOption = (_a = options.readonly) !== null && _a !== void 0 ? _a : defaultOption;\n    /**\n     * @param node the node to be evaluated.\n     */\n    function getMessageType(node) {\n      if (node && isSimpleType(node)) {\n        return sourceCode.getText(node);\n      }\n      return 'T';\n    }\n    return {\n      TSArrayType(node) {\n        const isReadonly = node.parent && node.parent.type === utils_1.AST_NODE_TYPES.TSTypeOperator && node.parent.operator === 'readonly';\n        const currentOption = isReadonly ? readonlyOption : defaultOption;\n        if (currentOption === 'array' || currentOption === 'array-simple' && isSimpleType(node.elementType)) {\n          return;\n        }\n        const messageId = currentOption === 'generic' ? 'errorStringGeneric' : 'errorStringGenericSimple';\n        const errorNode = isReadonly ? node.parent : node;\n        context.report({\n          node: errorNode,\n          messageId,\n          data: {\n            className: isReadonly ? 'ReadonlyArray' : 'Array',\n            readonlyPrefix: isReadonly ? 'readonly ' : '',\n            type: getMessageType(node.elementType)\n          },\n          fix(fixer) {\n            const typeNode = node.elementType;\n            const arrayType = isReadonly ? 'ReadonlyArray' : 'Array';\n            return [fixer.replaceTextRange([errorNode.range[0], typeNode.range[0]], `${arrayType}<`), fixer.replaceTextRange([typeNode.range[1], errorNode.range[1]], '>')];\n          }\n        });\n      },\n      TSTypeReference(node) {\n        var _a, _b;\n        if (node.typeName.type !== utils_1.AST_NODE_TYPES.Identifier || !(node.typeName.name === 'Array' || node.typeName.name === 'ReadonlyArray')) {\n          return;\n        }\n        const isReadonlyArrayType = node.typeName.name === 'ReadonlyArray';\n        const currentOption = isReadonlyArrayType ? readonlyOption : defaultOption;\n        if (currentOption === 'generic') {\n          return;\n        }\n        const readonlyPrefix = isReadonlyArrayType ? 'readonly ' : '';\n        const typeParams = (_a = node.typeParameters) === null || _a === void 0 ? void 0 : _a.params;\n        const messageId = currentOption === 'array' ? 'errorStringArray' : 'errorStringArraySimple';\n        if (!typeParams || typeParams.length === 0) {\n          // Create an 'any' array\n          context.report({\n            node,\n            messageId,\n            data: {\n              className: isReadonlyArrayType ? 'ReadonlyArray' : 'Array',\n              readonlyPrefix,\n              type: 'any'\n            },\n            fix(fixer) {\n              return fixer.replaceText(node, `${readonlyPrefix}any[]`);\n            }\n          });\n          return;\n        }\n        if (typeParams.length !== 1 || currentOption === 'array-simple' && !isSimpleType(typeParams[0])) {\n          return;\n        }\n        const type = typeParams[0];\n        const typeParens = typeNeedsParentheses(type);\n        const parentParens = readonlyPrefix && ((_b = node.parent) === null || _b === void 0 ? void 0 : _b.type) === utils_1.AST_NODE_TYPES.TSArrayType && !util.isParenthesized(node.parent.elementType, sourceCode);\n        const start = `${parentParens ? '(' : ''}${readonlyPrefix}${typeParens ? '(' : ''}`;\n        const end = `${typeParens ? ')' : ''}[]${parentParens ? ')' : ''}`;\n        context.report({\n          node,\n          messageId,\n          data: {\n            className: isReadonlyArrayType ? 'ReadonlyArray' : 'Array',\n            readonlyPrefix,\n            type: getMessageType(type)\n          },\n          fix(fixer) {\n            return [fixer.replaceTextRange([node.range[0], type.range[0]], start), fixer.replaceTextRange([type.range[1], node.range[1]], end)];\n          }\n        });\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","isSimpleType","node","type","AST_NODE_TYPES","Identifier","TSAnyKeyword","TSBooleanKeyword","TSNeverKeyword","TSNumberKeyword","TSBigIntKeyword","TSObjectKeyword","TSStringKeyword","TSSymbolKeyword","TSUnknownKeyword","TSVoidKeyword","TSNullKeyword","TSArrayType","TSUndefinedKeyword","TSThisType","TSQualifiedName","TSTypeReference","typeName","name","typeParameters","params","length","typeNeedsParentheses","TSUnionType","TSFunctionType","TSIntersectionType","TSTypeOperator","TSInferType","TSConstructorType","exports","default","createRule","meta","docs","description","recommended","fixable","messages","errorStringGeneric","errorStringArray","errorStringArraySimple","errorStringGenericSimple","schema","$defs","arrayOption","enum","prefixItems","properties","$ref","readonly","defaultOptions","create","context","options","sourceCode","getSourceCode","defaultOption","readonlyOption","_a","getMessageType","getText","isReadonly","parent","operator","currentOption","elementType","messageId","errorNode","report","data","className","readonlyPrefix","fix","fixer","typeNode","arrayType","replaceTextRange","range","isReadonlyArrayType","typeParams","replaceText","typeParens","parentParens","_b","isParenthesized","start","end"],"sources":["../../src/rules/array-type.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}