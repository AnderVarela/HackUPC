{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst crypto = require('crypto');\nconst macroCheck = new RegExp('[./]macro');\nmodule.exports = function () {\n  return {\n    // This function transforms the Babel configuration on a per-file basis\n    config(config, {\n      source\n    }) {\n      // Babel Macros are notoriously hard to cache, so they shouldn't be\n      // https://github.com/babel/babel/issues/8497\n      // We naively detect macros using their package suffix and add a random token\n      // to the caller, a valid option accepted by Babel, to compose a one-time\n      // cacheIdentifier for the file. We cannot tune the loader options on a per\n      // file basis.\n      if (macroCheck.test(source)) {\n        return Object.assign({}, config.options, {\n          caller: Object.assign({}, config.options.caller, {\n            craInvalidationToken: crypto.randomBytes(32).toString('hex')\n          })\n        });\n      }\n      return config.options;\n    }\n  };\n};","map":{"version":3,"names":["crypto","require","macroCheck","RegExp","module","exports","config","source","test","Object","assign","options","caller","craInvalidationToken","randomBytes","toString"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/babel-preset-react-app/webpack-overrides.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst crypto = require('crypto');\n\nconst macroCheck = new RegExp('[./]macro');\n\nmodule.exports = function () {\n  return {\n    // This function transforms the Babel configuration on a per-file basis\n    config(config, { source }) {\n      // Babel Macros are notoriously hard to cache, so they shouldn't be\n      // https://github.com/babel/babel/issues/8497\n      // We naively detect macros using their package suffix and add a random token\n      // to the caller, a valid option accepted by Babel, to compose a one-time\n      // cacheIdentifier for the file. We cannot tune the loader options on a per\n      // file basis.\n      if (macroCheck.test(source)) {\n        return Object.assign({}, config.options, {\n          caller: Object.assign({}, config.options.caller, {\n            craInvalidationToken: crypto.randomBytes(32).toString('hex'),\n          }),\n        });\n      }\n      return config.options;\n    },\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAMC,UAAU,GAAG,IAAIC,MAAM,CAAC,WAAW,CAAC;AAE1CC,MAAM,CAACC,OAAO,GAAG,YAAY;EAC3B,OAAO;IACL;IACAC,MAAMA,CAACA,MAAM,EAAE;MAAEC;IAAO,CAAC,EAAE;MACzB;MACA;MACA;MACA;MACA;MACA;MACA,IAAIL,UAAU,CAACM,IAAI,CAACD,MAAM,CAAC,EAAE;QAC3B,OAAOE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAACK,OAAO,EAAE;UACvCC,MAAM,EAAEH,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAACK,OAAO,CAACC,MAAM,EAAE;YAC/CC,oBAAoB,EAAEb,MAAM,CAACc,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,KAAK;UAC7D,CAAC;QACH,CAAC,CAAC;MACJ;MACA,OAAOT,MAAM,CAACK,OAAO;IACvB;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}