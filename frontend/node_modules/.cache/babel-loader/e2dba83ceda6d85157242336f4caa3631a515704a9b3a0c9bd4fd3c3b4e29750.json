{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toString = require('../internals/to-string');\nvar padStart = require('../internals/string-pad').start;\nvar WHITESPACES = require('../internals/whitespaces');\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar replace = uncurryThis(''.replace);\nvar numberToString = uncurryThis(1.1.toString);\nvar NEED_ESCAPING = RegExp('[!\"#$%&\\'()*+,\\\\-./:;<=>?@[\\\\\\\\\\\\]^`{|}~' + WHITESPACES + ']', 'g');\n\n// `RegExp.escape` method\n// https://github.com/tc39/proposal-regex-escaping\n$({\n  target: 'RegExp',\n  stat: true,\n  forced: true\n}, {\n  escape: function escape(S) {\n    var str = toString(S);\n    var firstCode = charCodeAt(str, 0);\n    // escape first DecimalDigit\n    return (firstCode > 47 && firstCode < 58 ? '\\\\x3' : '') + replace(str, NEED_ESCAPING, function (match) {\n      var hex = numberToString(charCodeAt(match, 0), 16);\n      return hex.length < 3 ? '\\\\x' + padStart(hex, 2, '0') : '\\\\u' + padStart(hex, 4, '0');\n    });\n  }\n});","map":{"version":3,"names":["$","require","uncurryThis","toString","padStart","start","WHITESPACES","charCodeAt","replace","numberToString","NEED_ESCAPING","RegExp","target","stat","forced","escape","S","str","firstCode","match","hex","length"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/core-js-pure/modules/esnext.regexp.escape.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toString = require('../internals/to-string');\nvar padStart = require('../internals/string-pad').start;\nvar WHITESPACES = require('../internals/whitespaces');\n\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar replace = uncurryThis(''.replace);\nvar numberToString = uncurryThis(1.1.toString);\nvar NEED_ESCAPING = RegExp('[!\"#$%&\\'()*+,\\\\-./:;<=>?@[\\\\\\\\\\\\]^`{|}~' + WHITESPACES + ']', 'g');\n\n// `RegExp.escape` method\n// https://github.com/tc39/proposal-regex-escaping\n$({ target: 'RegExp', stat: true, forced: true }, {\n  escape: function escape(S) {\n    var str = toString(S);\n    var firstCode = charCodeAt(str, 0);\n    // escape first DecimalDigit\n    return (firstCode > 47 && firstCode < 58 ? '\\\\x3' : '') + replace(str, NEED_ESCAPING, function (match) {\n      var hex = numberToString(charCodeAt(match, 0), 16);\n      return hex.length < 3 ? '\\\\x' + padStart(hex, 2, '0') : '\\\\u' + padStart(hex, 4, '0');\n    });\n  }\n});\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtC,IAAIC,WAAW,GAAGD,OAAO,CAAC,oCAAoC,CAAC;AAC/D,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIG,QAAQ,GAAGH,OAAO,CAAC,yBAAyB,CAAC,CAACI,KAAK;AACvD,IAAIC,WAAW,GAAGL,OAAO,CAAC,0BAA0B,CAAC;AAErD,IAAIM,UAAU,GAAGL,WAAW,CAAC,EAAE,CAACK,UAAU,CAAC;AAC3C,IAAIC,OAAO,GAAGN,WAAW,CAAC,EAAE,CAACM,OAAO,CAAC;AACrC,IAAIC,cAAc,GAAGP,WAAW,CAAC,GAAG,CAACC,QAAQ,CAAC;AAC9C,IAAIO,aAAa,GAAGC,MAAM,CAAC,0CAA0C,GAAGL,WAAW,GAAG,GAAG,EAAE,GAAG,CAAC;;AAE/F;AACA;AACAN,CAAC,CAAC;EAAEY,MAAM,EAAE,QAAQ;EAAEC,IAAI,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAK,CAAC,EAAE;EAChDC,MAAM,EAAE,SAASA,MAAMA,CAACC,CAAC,EAAE;IACzB,IAAIC,GAAG,GAAGd,QAAQ,CAACa,CAAC,CAAC;IACrB,IAAIE,SAAS,GAAGX,UAAU,CAACU,GAAG,EAAE,CAAC,CAAC;IAClC;IACA,OAAO,CAACC,SAAS,GAAG,EAAE,IAAIA,SAAS,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE,IAAIV,OAAO,CAACS,GAAG,EAAEP,aAAa,EAAE,UAAUS,KAAK,EAAE;MACrG,IAAIC,GAAG,GAAGX,cAAc,CAACF,UAAU,CAACY,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;MAClD,OAAOC,GAAG,CAACC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAGjB,QAAQ,CAACgB,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,GAAGhB,QAAQ,CAACgB,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC;IACvF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}