{"ast":null,"code":"var Token = require('../../tokenizer/token');\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\nfunction removeDuplicates(tokens) {\n  var matched = {};\n  var moreThanOnce = [];\n  var id, token;\n  var body, bodies;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    if (token[0] != Token.RULE) {\n      continue;\n    }\n    id = serializeRules(token[1]);\n    if (matched[id] && matched[id].length == 1) {\n      moreThanOnce.push(id);\n    } else {\n      matched[id] = matched[id] || [];\n    }\n    matched[id].push(i);\n  }\n  for (i = 0, l = moreThanOnce.length; i < l; i++) {\n    id = moreThanOnce[i];\n    bodies = [];\n    for (var j = matched[id].length - 1; j >= 0; j--) {\n      token = tokens[matched[id][j]];\n      body = serializeBody(token[2]);\n      if (bodies.indexOf(body) > -1) {\n        token[2] = [];\n      } else {\n        bodies.push(body);\n      }\n    }\n  }\n}\nmodule.exports = removeDuplicates;","map":{"version":3,"names":["Token","require","serializeBody","body","serializeRules","rules","removeDuplicates","tokens","matched","moreThanOnce","id","token","bodies","i","l","length","RULE","push","j","indexOf","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/clean-css/lib/optimizer/level-2/remove-duplicates.js"],"sourcesContent":["var Token = require('../../tokenizer/token');\n\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\n\nfunction removeDuplicates(tokens) {\n  var matched = {};\n  var moreThanOnce = [];\n  var id, token;\n  var body, bodies;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    if (token[0] != Token.RULE) { continue; }\n\n    id = serializeRules(token[1]);\n\n    if (matched[id] && matched[id].length == 1) { moreThanOnce.push(id); } else { matched[id] = matched[id] || []; }\n\n    matched[id].push(i);\n  }\n\n  for (i = 0, l = moreThanOnce.length; i < l; i++) {\n    id = moreThanOnce[i];\n    bodies = [];\n\n    for (var j = matched[id].length - 1; j >= 0; j--) {\n      token = tokens[matched[id][j]];\n      body = serializeBody(token[2]);\n\n      if (bodies.indexOf(body) > -1) { token[2] = []; } else { bodies.push(body); }\n    }\n  }\n}\n\nmodule.exports = removeDuplicates;\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE5C,IAAIC,aAAa,GAAGD,OAAO,CAAC,uBAAuB,CAAC,CAACE,IAAI;AACzD,IAAIC,cAAc,GAAGH,OAAO,CAAC,uBAAuB,CAAC,CAACI,KAAK;AAE3D,SAASC,gBAAgBA,CAACC,MAAM,EAAE;EAChC,IAAIC,OAAO,GAAG,CAAC,CAAC;EAChB,IAAIC,YAAY,GAAG,EAAE;EACrB,IAAIC,EAAE,EAAEC,KAAK;EACb,IAAIR,IAAI,EAAES,MAAM;EAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGP,MAAM,CAACQ,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC7CF,KAAK,GAAGJ,MAAM,CAACM,CAAC,CAAC;IACjB,IAAIF,KAAK,CAAC,CAAC,CAAC,IAAIX,KAAK,CAACgB,IAAI,EAAE;MAAE;IAAU;IAExCN,EAAE,GAAGN,cAAc,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;IAE7B,IAAIH,OAAO,CAACE,EAAE,CAAC,IAAIF,OAAO,CAACE,EAAE,CAAC,CAACK,MAAM,IAAI,CAAC,EAAE;MAAEN,YAAY,CAACQ,IAAI,CAACP,EAAE,CAAC;IAAE,CAAC,MAAM;MAAEF,OAAO,CAACE,EAAE,CAAC,GAAGF,OAAO,CAACE,EAAE,CAAC,IAAI,EAAE;IAAE;IAE/GF,OAAO,CAACE,EAAE,CAAC,CAACO,IAAI,CAACJ,CAAC,CAAC;EACrB;EAEA,KAAKA,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGL,YAAY,CAACM,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC/CH,EAAE,GAAGD,YAAY,CAACI,CAAC,CAAC;IACpBD,MAAM,GAAG,EAAE;IAEX,KAAK,IAAIM,CAAC,GAAGV,OAAO,CAACE,EAAE,CAAC,CAACK,MAAM,GAAG,CAAC,EAAEG,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAChDP,KAAK,GAAGJ,MAAM,CAACC,OAAO,CAACE,EAAE,CAAC,CAACQ,CAAC,CAAC,CAAC;MAC9Bf,IAAI,GAAGD,aAAa,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;MAE9B,IAAIC,MAAM,CAACO,OAAO,CAAChB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;QAAEQ,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;MAAE,CAAC,MAAM;QAAEC,MAAM,CAACK,IAAI,CAACd,IAAI,CAAC;MAAE;IAC9E;EACF;AACF;AAEAiB,MAAM,CAACC,OAAO,GAAGf,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}