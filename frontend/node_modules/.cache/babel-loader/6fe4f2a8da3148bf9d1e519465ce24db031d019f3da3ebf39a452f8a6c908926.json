{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\nconst promise = require('./promise');\nconst streamify = require('./streamify');\nmodule.exports = write;\n\n/**\n * Public function `write`.\n *\n * Returns a promise and asynchronously serialises a data structure to a\n * JSON file on disk. Sanely handles promises, buffers, maps and other\n * iterables.\n *\n * @param path:           Path to the JSON file.\n *\n * @param data:           The data to transform.\n *\n * @option space:         Indentation string, or the number of spaces\n *                        to indent each nested level by.\n *\n * @option promises:      'resolve' or 'ignore', default is 'resolve'.\n *\n * @option buffers:       'toString' or 'ignore', default is 'toString'.\n *\n * @option maps:          'object' or 'ignore', default is 'object'.\n *\n * @option iterables:     'array' or 'ignore', default is 'array'.\n *\n * @option circular:      'error' or 'ignore', default is 'error'.\n *\n * @option yieldRate:     The number of data items to process per timeslice,\n *                        default is 16384.\n *\n * @option bufferLength:  The length of the buffer, default is 1024.\n *\n * @option highWaterMark: If set, will be passed to the readable stream constructor\n *                        as the value for the highWaterMark option.\n *\n * @option Promise:       The promise constructor to use, defaults to bluebird.\n **/\nfunction write(path, data, options) {\n  const Promise = promise(options);\n  return new Promise((resolve, reject) => {\n    streamify(data, options).pipe(fs.createWriteStream(path, options)).on('finish', () => {\n      resolve();\n    }).on('error', reject).on('dataError', reject);\n  });\n}","map":{"version":3,"names":["fs","require","promise","streamify","module","exports","write","path","data","options","Promise","resolve","reject","pipe","createWriteStream","on"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/bfj/src/write.js"],"sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst promise = require('./promise')\nconst streamify = require('./streamify')\n\nmodule.exports = write\n\n/**\n * Public function `write`.\n *\n * Returns a promise and asynchronously serialises a data structure to a\n * JSON file on disk. Sanely handles promises, buffers, maps and other\n * iterables.\n *\n * @param path:           Path to the JSON file.\n *\n * @param data:           The data to transform.\n *\n * @option space:         Indentation string, or the number of spaces\n *                        to indent each nested level by.\n *\n * @option promises:      'resolve' or 'ignore', default is 'resolve'.\n *\n * @option buffers:       'toString' or 'ignore', default is 'toString'.\n *\n * @option maps:          'object' or 'ignore', default is 'object'.\n *\n * @option iterables:     'array' or 'ignore', default is 'array'.\n *\n * @option circular:      'error' or 'ignore', default is 'error'.\n *\n * @option yieldRate:     The number of data items to process per timeslice,\n *                        default is 16384.\n *\n * @option bufferLength:  The length of the buffer, default is 1024.\n *\n * @option highWaterMark: If set, will be passed to the readable stream constructor\n *                        as the value for the highWaterMark option.\n *\n * @option Promise:       The promise constructor to use, defaults to bluebird.\n **/\nfunction write (path, data, options) {\n  const Promise = promise(options)\n\n  return new Promise((resolve, reject) => {\n    streamify(data, options)\n      .pipe(fs.createWriteStream(path, options))\n      .on('finish', () => {\n        resolve()\n      })\n      .on('error', reject)\n      .on('dataError', reject)\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAW,CAAC;AACpC,MAAME,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;AAExCG,MAAM,CAACC,OAAO,GAAGC,KAAK;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAKA,CAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACnC,MAAMC,OAAO,GAAGR,OAAO,CAACO,OAAO,CAAC;EAEhC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCT,SAAS,CAACK,IAAI,EAAEC,OAAO,CAAC,CACrBI,IAAI,CAACb,EAAE,CAACc,iBAAiB,CAACP,IAAI,EAAEE,OAAO,CAAC,CAAC,CACzCM,EAAE,CAAC,QAAQ,EAAE,MAAM;MAClBJ,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CACDI,EAAE,CAAC,OAAO,EAAEH,MAAM,CAAC,CACnBG,EAAE,CAAC,WAAW,EAAEH,MAAM,CAAC;EAC5B,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}