{"ast":null,"code":"/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only Tagged Templates-related bug in ES Modules-supporting browsers (Safari 10 & 11).\n * Use this plugin instead of `@babel/plugin-transform-template-literals` when targeting ES Modules.\n *\n * @example\n *   // Bug 1: Safari 10/11 doesn't reliably return the same Strings value.\n *   // The value changes depending on invocation and function optimization state.\n *   function f() { return Object`` }\n *   f() === new f()  // false, should be true.\n *\n * @example\n *   // Bug 2: Safari 10/11 use the same cached strings value when the string parts are the same.\n *   // This behavior comes from an earlier version of the spec, and can cause tricky bugs.\n *   Object``===Object``  // true, should be false.\n *\n * Benchmarks: https://jsperf.com/compiled-tagged-template-performance\n */\nexport default (({\n  types: t\n}) => ({\n  name: \"transform-tagged-template-caching\",\n  visitor: {\n    TaggedTemplateExpression(path, state) {\n      // tagged templates we've already dealt with\n      let processed = state.get(\"processed\");\n      if (!processed) {\n        processed = new WeakSet();\n        state.set(\"processed\", processed);\n      }\n      if (processed.has(path.node)) return path.skip();\n\n      // Grab the expressions from the original tag.\n      //   tag`a${'hello'}`  // ['hello']\n      const expressions = path.node.quasi.expressions;\n\n      // Create an identity function helper:\n      //   identity = t => t\n      let identity = state.get(\"identity\");\n      if (!identity) {\n        identity = path.scope.getProgramParent().generateDeclaredUidIdentifier(\"_\");\n        state.set(\"identity\", identity);\n        const binding = path.scope.getBinding(identity.name);\n        binding.path.get(\"init\").replaceWith(t.arrowFunctionExpression(\n        // re-use the helper identifier for compressability\n        [t.identifier(\"t\")], t.identifier(\"t\")));\n      }\n\n      // Use the identity function helper to get a reference to the template's Strings.\n      // We replace all expressions with `0` ensure Strings has the same shape.\n      //   identity`a${0}`\n      const template = t.taggedTemplateExpression(t.cloneNode(identity), t.templateLiteral(path.node.quasi.quasis, expressions.map(() => t.numericLiteral(0))));\n      processed.add(template);\n\n      // Install an inline cache at the callsite using the global variable:\n      //   _t || (_t = identity`a${0}`)\n      const ident = path.scope.getProgramParent().generateDeclaredUidIdentifier(\"t\");\n      path.scope.getBinding(ident.name).path.parent.kind = \"let\";\n      const inlineCache = t.logicalExpression(\"||\", ident, t.assignmentExpression(\"=\", t.cloneNode(ident), template));\n\n      // The original tag function becomes a plain function call.\n      // The expressions omitted from the cached Strings tag are directly applied as arguments.\n      //   tag(_t || (_t = Object`a${0}`), 'hello')\n      const node = t.callExpression(path.node.tag, [inlineCache, ...expressions]);\n      path.replaceWith(node);\n    }\n  }\n}));","map":{"version":3,"names":["types","t","name","visitor","TaggedTemplateExpression","path","state","processed","get","WeakSet","set","has","node","skip","expressions","quasi","identity","scope","getProgramParent","generateDeclaredUidIdentifier","binding","getBinding","replaceWith","arrowFunctionExpression","identifier","template","taggedTemplateExpression","cloneNode","templateLiteral","quasis","map","numericLiteral","add","ident","parent","kind","inlineCache","logicalExpression","assignmentExpression","callExpression","tag"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@babel/preset-modules/src/plugins/transform-tagged-template-caching/index.js"],"sourcesContent":["/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only Tagged Templates-related bug in ES Modules-supporting browsers (Safari 10 & 11).\n * Use this plugin instead of `@babel/plugin-transform-template-literals` when targeting ES Modules.\n *\n * @example\n *   // Bug 1: Safari 10/11 doesn't reliably return the same Strings value.\n *   // The value changes depending on invocation and function optimization state.\n *   function f() { return Object`` }\n *   f() === new f()  // false, should be true.\n *\n * @example\n *   // Bug 2: Safari 10/11 use the same cached strings value when the string parts are the same.\n *   // This behavior comes from an earlier version of the spec, and can cause tricky bugs.\n *   Object``===Object``  // true, should be false.\n *\n * Benchmarks: https://jsperf.com/compiled-tagged-template-performance\n */\nexport default ({ types: t }) => ({\n  name: \"transform-tagged-template-caching\",\n  visitor: {\n    TaggedTemplateExpression(path, state) {\n      // tagged templates we've already dealt with\n      let processed = state.get(\"processed\");\n      if (!processed) {\n        processed = new WeakSet();\n        state.set(\"processed\", processed);\n      }\n\n      if (processed.has(path.node)) return path.skip();\n\n      // Grab the expressions from the original tag.\n      //   tag`a${'hello'}`  // ['hello']\n      const expressions = path.node.quasi.expressions;\n\n      // Create an identity function helper:\n      //   identity = t => t\n      let identity = state.get(\"identity\");\n      if (!identity) {\n        identity = path.scope\n          .getProgramParent()\n          .generateDeclaredUidIdentifier(\"_\");\n        state.set(\"identity\", identity);\n        const binding = path.scope.getBinding(identity.name);\n        binding.path.get(\"init\").replaceWith(\n          t.arrowFunctionExpression(\n            // re-use the helper identifier for compressability\n            [t.identifier(\"t\")],\n            t.identifier(\"t\")\n          )\n        );\n      }\n\n      // Use the identity function helper to get a reference to the template's Strings.\n      // We replace all expressions with `0` ensure Strings has the same shape.\n      //   identity`a${0}`\n      const template = t.taggedTemplateExpression(\n        t.cloneNode(identity),\n        t.templateLiteral(\n          path.node.quasi.quasis,\n          expressions.map(() => t.numericLiteral(0))\n        )\n      );\n      processed.add(template);\n\n      // Install an inline cache at the callsite using the global variable:\n      //   _t || (_t = identity`a${0}`)\n      const ident = path.scope\n        .getProgramParent()\n        .generateDeclaredUidIdentifier(\"t\");\n      path.scope.getBinding(ident.name).path.parent.kind = \"let\";\n      const inlineCache = t.logicalExpression(\n        \"||\",\n        ident,\n        t.assignmentExpression(\"=\", t.cloneNode(ident), template)\n      );\n\n      // The original tag function becomes a plain function call.\n      // The expressions omitted from the cached Strings tag are directly applied as arguments.\n      //   tag(_t || (_t = Object`a${0}`), 'hello')\n      const node = t.callExpression(path.node.tag, [\n        inlineCache,\n        ...expressions,\n      ]);\n      path.replaceWith(node);\n    },\n  },\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,CAAC;EAAEA,KAAK,EAAEC;AAAE,CAAC,MAAM;EAChCC,IAAI,EAAE,mCAAmC;EACzCC,OAAO,EAAE;IACPC,wBAAwBA,CAACC,IAAI,EAAEC,KAAK,EAAE;MACpC;MACA,IAAIC,SAAS,GAAGD,KAAK,CAACE,GAAG,CAAC,WAAW,CAAC;MACtC,IAAI,CAACD,SAAS,EAAE;QACdA,SAAS,GAAG,IAAIE,OAAO,CAAC,CAAC;QACzBH,KAAK,CAACI,GAAG,CAAC,WAAW,EAAEH,SAAS,CAAC;MACnC;MAEA,IAAIA,SAAS,CAACI,GAAG,CAACN,IAAI,CAACO,IAAI,CAAC,EAAE,OAAOP,IAAI,CAACQ,IAAI,CAAC,CAAC;;MAEhD;MACA;MACA,MAAMC,WAAW,GAAGT,IAAI,CAACO,IAAI,CAACG,KAAK,CAACD,WAAW;;MAE/C;MACA;MACA,IAAIE,QAAQ,GAAGV,KAAK,CAACE,GAAG,CAAC,UAAU,CAAC;MACpC,IAAI,CAACQ,QAAQ,EAAE;QACbA,QAAQ,GAAGX,IAAI,CAACY,KAAK,CAClBC,gBAAgB,CAAC,CAAC,CAClBC,6BAA6B,CAAC,GAAG,CAAC;QACrCb,KAAK,CAACI,GAAG,CAAC,UAAU,EAAEM,QAAQ,CAAC;QAC/B,MAAMI,OAAO,GAAGf,IAAI,CAACY,KAAK,CAACI,UAAU,CAACL,QAAQ,CAACd,IAAI,CAAC;QACpDkB,OAAO,CAACf,IAAI,CAACG,GAAG,CAAC,MAAM,CAAC,CAACc,WAAW,CAClCrB,CAAC,CAACsB,uBAAuB;QACvB;QACA,CAACtB,CAAC,CAACuB,UAAU,CAAC,GAAG,CAAC,CAAC,EACnBvB,CAAC,CAACuB,UAAU,CAAC,GAAG,CAClB,CACF,CAAC;MACH;;MAEA;MACA;MACA;MACA,MAAMC,QAAQ,GAAGxB,CAAC,CAACyB,wBAAwB,CACzCzB,CAAC,CAAC0B,SAAS,CAACX,QAAQ,CAAC,EACrBf,CAAC,CAAC2B,eAAe,CACfvB,IAAI,CAACO,IAAI,CAACG,KAAK,CAACc,MAAM,EACtBf,WAAW,CAACgB,GAAG,CAAC,MAAM7B,CAAC,CAAC8B,cAAc,CAAC,CAAC,CAAC,CAC3C,CACF,CAAC;MACDxB,SAAS,CAACyB,GAAG,CAACP,QAAQ,CAAC;;MAEvB;MACA;MACA,MAAMQ,KAAK,GAAG5B,IAAI,CAACY,KAAK,CACrBC,gBAAgB,CAAC,CAAC,CAClBC,6BAA6B,CAAC,GAAG,CAAC;MACrCd,IAAI,CAACY,KAAK,CAACI,UAAU,CAACY,KAAK,CAAC/B,IAAI,CAAC,CAACG,IAAI,CAAC6B,MAAM,CAACC,IAAI,GAAG,KAAK;MAC1D,MAAMC,WAAW,GAAGnC,CAAC,CAACoC,iBAAiB,CACrC,IAAI,EACJJ,KAAK,EACLhC,CAAC,CAACqC,oBAAoB,CAAC,GAAG,EAAErC,CAAC,CAAC0B,SAAS,CAACM,KAAK,CAAC,EAAER,QAAQ,CAC1D,CAAC;;MAED;MACA;MACA;MACA,MAAMb,IAAI,GAAGX,CAAC,CAACsC,cAAc,CAAClC,IAAI,CAACO,IAAI,CAAC4B,GAAG,EAAE,CAC3CJ,WAAW,EACX,GAAGtB,WAAW,CACf,CAAC;MACFT,IAAI,CAACiB,WAAW,CAACV,IAAI,CAAC;IACxB;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}