{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\nvar pluginTransformOptionalChaining = require('@babel/plugin-transform-optional-chaining');\nvar helperSkipTransparentExpressionWrappers = require('@babel/helper-skip-transparent-expression-wrappers');\nvar core = require('@babel/core');\nfunction matchAffectedArguments(argumentNodes) {\n  const spreadIndex = argumentNodes.findIndex(node => core.types.isSpreadElement(node));\n  return spreadIndex >= 0 && spreadIndex !== argumentNodes.length - 1;\n}\nfunction shouldTransform(path) {\n  let optionalPath = path;\n  const chains = [];\n  for (;;) {\n    if (optionalPath.isOptionalMemberExpression()) {\n      chains.push(optionalPath.node);\n      optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get(\"object\"));\n    } else if (optionalPath.isOptionalCallExpression()) {\n      chains.push(optionalPath.node);\n      optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get(\"callee\"));\n    } else {\n      break;\n    }\n  }\n  for (let i = 0; i < chains.length; i++) {\n    const node = chains[i];\n    if (core.types.isOptionalCallExpression(node) && matchAffectedArguments(node.arguments)) {\n      if (node.optional) {\n        return true;\n      }\n      const callee = chains[i + 1];\n      if (core.types.isOptionalMemberExpression(callee, {\n        optional: true\n      })) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nvar index = helperPluginUtils.declare(api => {\n  var _api$assumption, _api$assumption2;\n  api.assertVersion(7);\n  const noDocumentAll = (_api$assumption = api.assumption(\"noDocumentAll\")) != null ? _api$assumption : false;\n  const pureGetters = (_api$assumption2 = api.assumption(\"pureGetters\")) != null ? _api$assumption2 : false;\n  return {\n    name: \"bugfix-v8-spread-parameters-in-optional-chaining\",\n    visitor: {\n      \"OptionalCallExpression|OptionalMemberExpression\"(path) {\n        if (shouldTransform(path)) {\n          pluginTransformOptionalChaining.transform(path, {\n            noDocumentAll,\n            pureGetters\n          });\n        }\n      }\n    }\n  };\n});\nexports.default = index;","map":{"version":3,"names":["matchAffectedArguments","argumentNodes","spreadIndex","findIndex","node","core","types","isSpreadElement","length","shouldTransform","path","optionalPath","chains","isOptionalMemberExpression","push","helperSkipTransparentExpressionWrappers","skipTransparentExprWrappers","get","isOptionalCallExpression","i","arguments","optional","callee","index","helperPluginUtils","declare","api","_api$assumption","_api$assumption2","assertVersion","noDocumentAll","assumption","pureGetters","name","visitor","OptionalCallExpression|OptionalMemberExpression","pluginTransformOptionalChaining","transform"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\plugin-bugfix-v8-spread-parameters-in-optional-chaining\\src\\util.ts","C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\plugin-bugfix-v8-spread-parameters-in-optional-chaining\\src\\index.ts"],"sourcesContent":["import { skipTransparentExprWrappers } from \"@babel/helper-skip-transparent-expression-wrappers\";\nimport type { NodePath } from \"@babel/traverse\";\nimport { types as t } from \"@babel/core\";\n// https://crbug.com/v8/11558\n\n// check if there is a spread element followed by another argument.\n// (...[], 0) or (...[], ...[])\n\nfunction matchAffectedArguments(argumentNodes: t.CallExpression[\"arguments\"]) {\n  const spreadIndex = argumentNodes.findIndex(node => t.isSpreadElement(node));\n  return spreadIndex >= 0 && spreadIndex !== argumentNodes.length - 1;\n}\n\n/**\n * Check whether the optional chain is affected by https://crbug.com/v8/11558.\n * This routine MUST not manipulate NodePath\n *\n * @export\n * @param {(NodePath<t.OptionalMemberExpression | t.OptionalCallExpression>)} path\n * @returns {boolean}\n */\nexport function shouldTransform(\n  path: NodePath<t.OptionalMemberExpression | t.OptionalCallExpression>,\n): boolean {\n  let optionalPath: NodePath<t.Expression> = path;\n  const chains: (t.OptionalCallExpression | t.OptionalMemberExpression)[] = [];\n  for (;;) {\n    if (optionalPath.isOptionalMemberExpression()) {\n      chains.push(optionalPath.node);\n      optionalPath = skipTransparentExprWrappers(optionalPath.get(\"object\"));\n    } else if (optionalPath.isOptionalCallExpression()) {\n      chains.push(optionalPath.node);\n      optionalPath = skipTransparentExprWrappers(optionalPath.get(\"callee\"));\n    } else {\n      break;\n    }\n  }\n  for (let i = 0; i < chains.length; i++) {\n    const node = chains[i];\n    if (\n      t.isOptionalCallExpression(node) &&\n      matchAffectedArguments(node.arguments)\n    ) {\n      // f?.(...[], 0)\n      if (node.optional) {\n        return true;\n      }\n      // o?.m(...[], 0)\n      // when node.optional is false, chains[i + 1] is always well defined\n      const callee = chains[i + 1];\n      if (t.isOptionalMemberExpression(callee, { optional: true })) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport { transform } from \"@babel/plugin-transform-optional-chaining\";\nimport { shouldTransform } from \"./util.ts\";\nimport type { NodePath } from \"@babel/traverse\";\nimport type * as t from \"@babel/types\";\n\nexport default declare(api => {\n  api.assertVersion(REQUIRED_VERSION(7));\n\n  const noDocumentAll = api.assumption(\"noDocumentAll\") ?? false;\n  const pureGetters = api.assumption(\"pureGetters\") ?? false;\n\n  return {\n    name: \"bugfix-v8-spread-parameters-in-optional-chaining\",\n\n    visitor: {\n      \"OptionalCallExpression|OptionalMemberExpression\"(\n        path: NodePath<t.OptionalCallExpression | t.OptionalMemberExpression>,\n      ) {\n        if (shouldTransform(path)) {\n          transform(path, { noDocumentAll, pureGetters });\n        }\n      },\n    },\n  };\n});\n"],"mappings":";;;;;;;;;AAQA,SAASA,sBAAsBA,CAACC,aAA4C,EAAE;EAC5E,MAAMC,WAAW,GAAGD,aAAa,CAACE,SAAS,CAACC,IAAI,IAAIC,IAAA,CAAAC,KAAC,CAACC,eAAe,CAACH,IAAI,CAAC,CAAC;EAC5E,OAAOF,WAAW,IAAI,CAAC,IAAIA,WAAW,KAAKD,aAAa,CAACO,MAAM,GAAG,CAAC;AACrE;AAUO,SAASC,eAAeA,CAC7BC,IAAqE,EAC5D;EACT,IAAIC,YAAoC,GAAGD,IAAI;EAC/C,MAAME,MAAiE,GAAG,EAAE;EAC5E,SAAS;IACP,IAAID,YAAY,CAACE,0BAA0B,EAAE,EAAE;MAC7CD,MAAM,CAACE,IAAI,CAACH,YAAY,CAACP,IAAI,CAAC;MAC9BO,YAAY,GAAGI,uCAAA,CAAAC,2BAA2B,CAACL,YAAY,CAACM,GAAG,CAAC,QAAQ,CAAC,CAAC;IACxE,CAAC,MAAM,IAAIN,YAAY,CAACO,wBAAwB,EAAE,EAAE;MAClDN,MAAM,CAACE,IAAI,CAACH,YAAY,CAACP,IAAI,CAAC;MAC9BO,YAAY,GAAGI,uCAAA,CAAAC,2BAA2B,CAACL,YAAY,CAACM,GAAG,CAAC,QAAQ,CAAC,CAAC;IACxE,CAAC,MAAM;MACL;IACF;EACF;EACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACJ,MAAM,EAAEW,CAAC,EAAE,EAAE;IACtC,MAAMf,IAAI,GAAGQ,MAAM,CAACO,CAAC,CAAC;IACtB,IACEd,IAAA,CAAAC,KAAC,CAACY,wBAAwB,CAACd,IAAI,CAAC,IAChCJ,sBAAsB,CAACI,IAAI,CAACgB,SAAS,CAAC,EACtC;MAEA,IAAIhB,IAAI,CAACiB,QAAQ,EAAE;QACjB,OAAO,IAAI;MACb;MAGA,MAAMC,MAAM,GAAGV,MAAM,CAACO,CAAC,GAAG,CAAC,CAAC;MAC5B,IAAId,IAAA,CAAAC,KAAC,CAACO,0BAA0B,CAACS,MAAM,EAAE;QAAED,QAAQ,EAAE;MAAK,CAAC,CAAC,EAAE;QAC5D,OAAO,IAAI;MACb;IACF;EACF;EACA,OAAO,KAAK;AACd;AClDA,IAAAE,KAAA,GAAeC,iBAAA,CAAAC,OAAO,CAACC,GAAG,IAAI;EAAA,IAAAC,eAAA,EAAAC,gBAAA;EAC5BF,GAAG,CAACG,aAAa,CAAkB,CAAE,CAAC;EAEtC,MAAMC,aAAa,IAAAH,eAAA,GAAGD,GAAG,CAACK,UAAU,CAAC,eAAe,CAAC,YAAAJ,eAAA,GAAI,KAAK;EAC9D,MAAMK,WAAW,IAAAJ,gBAAA,GAAGF,GAAG,CAACK,UAAU,CAAC,aAAa,CAAC,YAAAH,gBAAA,GAAI,KAAK;EAE1D,OAAO;IACLK,IAAI,EAAE,kDAAkD;IAExDC,OAAO,EAAE;MACP,iDAAiDC,CAC/CzB,IAAqE,EACrE;QACA,IAAID,eAAe,CAACC,IAAI,CAAC,EAAE;UACzB0B,+BAAA,CAAAC,SAAS,CAAC3B,IAAI,EAAE;YAAEoB,aAAa;YAAEE;UAAY,CAAC,CAAC;QACjD;MACF;IACF;GACD;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}