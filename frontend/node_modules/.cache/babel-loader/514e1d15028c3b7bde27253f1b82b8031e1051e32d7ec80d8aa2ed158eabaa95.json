{"ast":null,"code":"\"use strict\";\n\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/system\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeSystem = exports.TypeSystemDuplicateFormat = exports.TypeSystemDuplicateTypeKind = void 0;\nconst Types = require(\"../typebox\");\nclass TypeSystemDuplicateTypeKind extends Error {\n  constructor(kind) {\n    super(`Duplicate type kind '${kind}' detected`);\n  }\n}\nexports.TypeSystemDuplicateTypeKind = TypeSystemDuplicateTypeKind;\nclass TypeSystemDuplicateFormat extends Error {\n  constructor(kind) {\n    super(`Duplicate string format '${kind}' detected`);\n  }\n}\nexports.TypeSystemDuplicateFormat = TypeSystemDuplicateFormat;\n/** Creates user defined types and formats and provides overrides for value checking behaviours */\nvar TypeSystem;\n(function (TypeSystem) {\n  // ------------------------------------------------------------------------\n  // Assertion Policies\n  // ------------------------------------------------------------------------\n  /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n  TypeSystem.ExactOptionalPropertyTypes = false;\n  /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n  TypeSystem.AllowArrayObjects = false;\n  /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n  TypeSystem.AllowNaN = false;\n  /** Sets whether `null` should validate for void types. The default is `false` */\n  TypeSystem.AllowVoidNull = false;\n  // ------------------------------------------------------------------------\n  // String Formats and Types\n  // ------------------------------------------------------------------------\n  /** Creates a new type */\n  function Type(kind, check) {\n    if (Types.TypeRegistry.Has(kind)) throw new TypeSystemDuplicateTypeKind(kind);\n    Types.TypeRegistry.Set(kind, check);\n    return (options = {}) => Types.Type.Unsafe({\n      ...options,\n      [Types.Kind]: kind\n    });\n  }\n  TypeSystem.Type = Type;\n  /** Creates a new string format */\n  function Format(format, check) {\n    if (Types.FormatRegistry.Has(format)) throw new TypeSystemDuplicateFormat(format);\n    Types.FormatRegistry.Set(format, check);\n    return format;\n  }\n  TypeSystem.Format = Format;\n  // ------------------------------------------------------------------------\n  // Deprecated\n  // ------------------------------------------------------------------------\n  /** @deprecated Use `TypeSystem.Type()` instead. */\n  function CreateType(kind, check) {\n    return Type(kind, check);\n  }\n  TypeSystem.CreateType = CreateType;\n  /** @deprecated Use `TypeSystem.Format()` instead.  */\n  function CreateFormat(format, check) {\n    return Format(format, check);\n  }\n  TypeSystem.CreateFormat = CreateFormat;\n})(TypeSystem = exports.TypeSystem || (exports.TypeSystem = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","TypeSystem","TypeSystemDuplicateFormat","TypeSystemDuplicateTypeKind","Types","require","Error","constructor","kind","ExactOptionalPropertyTypes","AllowArrayObjects","AllowNaN","AllowVoidNull","Type","check","TypeRegistry","Has","Set","options","Unsafe","Kind","Format","format","FormatRegistry","CreateType","CreateFormat"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@sinclair/typebox/system/system.js"],"sourcesContent":["\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/system\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeSystem = exports.TypeSystemDuplicateFormat = exports.TypeSystemDuplicateTypeKind = void 0;\nconst Types = require(\"../typebox\");\nclass TypeSystemDuplicateTypeKind extends Error {\n    constructor(kind) {\n        super(`Duplicate type kind '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateTypeKind = TypeSystemDuplicateTypeKind;\nclass TypeSystemDuplicateFormat extends Error {\n    constructor(kind) {\n        super(`Duplicate string format '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateFormat = TypeSystemDuplicateFormat;\n/** Creates user defined types and formats and provides overrides for value checking behaviours */\nvar TypeSystem;\n(function (TypeSystem) {\n    // ------------------------------------------------------------------------\n    // Assertion Policies\n    // ------------------------------------------------------------------------\n    /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n    TypeSystem.ExactOptionalPropertyTypes = false;\n    /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n    TypeSystem.AllowArrayObjects = false;\n    /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n    TypeSystem.AllowNaN = false;\n    /** Sets whether `null` should validate for void types. The default is `false` */\n    TypeSystem.AllowVoidNull = false;\n    // ------------------------------------------------------------------------\n    // String Formats and Types\n    // ------------------------------------------------------------------------\n    /** Creates a new type */\n    function Type(kind, check) {\n        if (Types.TypeRegistry.Has(kind))\n            throw new TypeSystemDuplicateTypeKind(kind);\n        Types.TypeRegistry.Set(kind, check);\n        return (options = {}) => Types.Type.Unsafe({ ...options, [Types.Kind]: kind });\n    }\n    TypeSystem.Type = Type;\n    /** Creates a new string format */\n    function Format(format, check) {\n        if (Types.FormatRegistry.Has(format))\n            throw new TypeSystemDuplicateFormat(format);\n        Types.FormatRegistry.Set(format, check);\n        return format;\n    }\n    TypeSystem.Format = Format;\n    // ------------------------------------------------------------------------\n    // Deprecated\n    // ------------------------------------------------------------------------\n    /** @deprecated Use `TypeSystem.Type()` instead. */\n    function CreateType(kind, check) {\n        return Type(kind, check);\n    }\n    TypeSystem.CreateType = CreateType;\n    /** @deprecated Use `TypeSystem.Format()` instead.  */\n    function CreateFormat(format, check) {\n        return Format(format, check);\n    }\n    TypeSystem.CreateFormat = CreateFormat;\n})(TypeSystem = exports.TypeSystem || (exports.TypeSystem = {}));\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAGF,OAAO,CAACG,yBAAyB,GAAGH,OAAO,CAACI,2BAA2B,GAAG,KAAK,CAAC;AACrG,MAAMC,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;AACnC,MAAMF,2BAA2B,SAASG,KAAK,CAAC;EAC5CC,WAAWA,CAACC,IAAI,EAAE;IACd,KAAK,CAAE,wBAAuBA,IAAK,YAAW,CAAC;EACnD;AACJ;AACAT,OAAO,CAACI,2BAA2B,GAAGA,2BAA2B;AACjE,MAAMD,yBAAyB,SAASI,KAAK,CAAC;EAC1CC,WAAWA,CAACC,IAAI,EAAE;IACd,KAAK,CAAE,4BAA2BA,IAAK,YAAW,CAAC;EACvD;AACJ;AACAT,OAAO,CAACG,yBAAyB,GAAGA,yBAAyB;AAC7D;AACA,IAAID,UAAU;AACd,CAAC,UAAUA,UAAU,EAAE;EACnB;EACA;EACA;EACA;EACAA,UAAU,CAACQ,0BAA0B,GAAG,KAAK;EAC7C;EACAR,UAAU,CAACS,iBAAiB,GAAG,KAAK;EACpC;EACAT,UAAU,CAACU,QAAQ,GAAG,KAAK;EAC3B;EACAV,UAAU,CAACW,aAAa,GAAG,KAAK;EAChC;EACA;EACA;EACA;EACA,SAASC,IAAIA,CAACL,IAAI,EAAEM,KAAK,EAAE;IACvB,IAAIV,KAAK,CAACW,YAAY,CAACC,GAAG,CAACR,IAAI,CAAC,EAC5B,MAAM,IAAIL,2BAA2B,CAACK,IAAI,CAAC;IAC/CJ,KAAK,CAACW,YAAY,CAACE,GAAG,CAACT,IAAI,EAAEM,KAAK,CAAC;IACnC,OAAO,CAACI,OAAO,GAAG,CAAC,CAAC,KAAKd,KAAK,CAACS,IAAI,CAACM,MAAM,CAAC;MAAE,GAAGD,OAAO;MAAE,CAACd,KAAK,CAACgB,IAAI,GAAGZ;IAAK,CAAC,CAAC;EAClF;EACAP,UAAU,CAACY,IAAI,GAAGA,IAAI;EACtB;EACA,SAASQ,MAAMA,CAACC,MAAM,EAAER,KAAK,EAAE;IAC3B,IAAIV,KAAK,CAACmB,cAAc,CAACP,GAAG,CAACM,MAAM,CAAC,EAChC,MAAM,IAAIpB,yBAAyB,CAACoB,MAAM,CAAC;IAC/ClB,KAAK,CAACmB,cAAc,CAACN,GAAG,CAACK,MAAM,EAAER,KAAK,CAAC;IACvC,OAAOQ,MAAM;EACjB;EACArB,UAAU,CAACoB,MAAM,GAAGA,MAAM;EAC1B;EACA;EACA;EACA;EACA,SAASG,UAAUA,CAAChB,IAAI,EAAEM,KAAK,EAAE;IAC7B,OAAOD,IAAI,CAACL,IAAI,EAAEM,KAAK,CAAC;EAC5B;EACAb,UAAU,CAACuB,UAAU,GAAGA,UAAU;EAClC;EACA,SAASC,YAAYA,CAACH,MAAM,EAAER,KAAK,EAAE;IACjC,OAAOO,MAAM,CAACC,MAAM,EAAER,KAAK,CAAC;EAChC;EACAb,UAAU,CAACwB,YAAY,GAAGA,YAAY;AAC1C,CAAC,EAAExB,UAAU,GAAGF,OAAO,CAACE,UAAU,KAAKF,OAAO,CAACE,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}