{"ast":null,"code":"const {\n  getRefreshGlobalScope\n} = require('../globals');\nconst getRefreshGlobal = require('./getRefreshGlobal');\n\n/**\n * Makes a runtime module to intercept module execution for React Refresh.\n * @param {import('webpack')} webpack The Webpack exports.\n * @returns {ReactRefreshRuntimeModule} The runtime module class.\n */\nfunction makeRefreshRuntimeModule(webpack) {\n  return class ReactRefreshRuntimeModule extends webpack.RuntimeModule {\n    constructor() {\n      // Second argument is the `stage` for this runtime module -\n      // we'll use the same stage as Webpack's HMR runtime module for safety.\n      super('react refresh', webpack.RuntimeModule.STAGE_BASIC);\n    }\n\n    /**\n     * @returns {string} runtime code\n     */\n    generate() {\n      const {\n        runtimeTemplate\n      } = this.compilation;\n      const refreshGlobal = getRefreshGlobalScope(webpack.RuntimeGlobals);\n      return webpack.Template.asString([`${webpack.RuntimeGlobals.interceptModuleExecution}.push(${runtimeTemplate.basicFunction('options', [`${runtimeTemplate.supportsConst() ? 'const' : 'var'} originalFactory = options.factory;`, `options.factory = function (moduleObject, moduleExports, webpackRequire) {`, webpack.Template.indent([`${refreshGlobal}.setup(options.id);`, 'try {', webpack.Template.indent('originalFactory.call(this, moduleObject, moduleExports, webpackRequire);'), '} finally {', webpack.Template.indent([`if (typeof Promise !== 'undefined' && moduleObject.exports instanceof Promise) {`, webpack.Template.indent([\n      // The exports of the module are re-assigned -\n      // this ensures anything coming after us would wait for `cleanup` to fire.\n      // This is particularly important because `cleanup` restores the refresh global,\n      // maintaining consistency for mutable variables like `moduleId`.\n      // This `.then` clause is a ponyfill of the `Promise.finally` API -\n      // it is only part of the spec after ES2018,\n      // but Webpack's top level await implementation support engines down to ES2015.\n      'options.module.exports = options.module.exports.then(', webpack.Template.indent([`${runtimeTemplate.basicFunction('result', [`${refreshGlobal}.cleanup(options.id);`, 'return result;'])},`, runtimeTemplate.basicFunction('reason', [`${refreshGlobal}.cleanup(options.id);`, 'return Promise.reject(reason);'])]), `);`]), '} else {', webpack.Template.indent(`${refreshGlobal}.cleanup(options.id)`), '}']), '}']), `};`])})`, '', getRefreshGlobal(webpack.Template, webpack.RuntimeGlobals, runtimeTemplate)]);\n    }\n  };\n}\nmodule.exports = makeRefreshRuntimeModule;","map":{"version":3,"names":["getRefreshGlobalScope","require","getRefreshGlobal","makeRefreshRuntimeModule","webpack","ReactRefreshRuntimeModule","RuntimeModule","constructor","STAGE_BASIC","generate","runtimeTemplate","compilation","refreshGlobal","RuntimeGlobals","Template","asString","interceptModuleExecution","basicFunction","supportsConst","indent","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/utils/makeRefreshRuntimeModule.js"],"sourcesContent":["const { getRefreshGlobalScope } = require('../globals');\nconst getRefreshGlobal = require('./getRefreshGlobal');\n\n/**\n * Makes a runtime module to intercept module execution for React Refresh.\n * @param {import('webpack')} webpack The Webpack exports.\n * @returns {ReactRefreshRuntimeModule} The runtime module class.\n */\nfunction makeRefreshRuntimeModule(webpack) {\n  return class ReactRefreshRuntimeModule extends webpack.RuntimeModule {\n    constructor() {\n      // Second argument is the `stage` for this runtime module -\n      // we'll use the same stage as Webpack's HMR runtime module for safety.\n      super('react refresh', webpack.RuntimeModule.STAGE_BASIC);\n    }\n\n    /**\n     * @returns {string} runtime code\n     */\n    generate() {\n      const { runtimeTemplate } = this.compilation;\n      const refreshGlobal = getRefreshGlobalScope(webpack.RuntimeGlobals);\n      return webpack.Template.asString([\n        `${webpack.RuntimeGlobals.interceptModuleExecution}.push(${runtimeTemplate.basicFunction(\n          'options',\n          [\n            `${\n              runtimeTemplate.supportsConst() ? 'const' : 'var'\n            } originalFactory = options.factory;`,\n            `options.factory = function (moduleObject, moduleExports, webpackRequire) {`,\n            webpack.Template.indent([\n              `${refreshGlobal}.setup(options.id);`,\n              'try {',\n              webpack.Template.indent(\n                'originalFactory.call(this, moduleObject, moduleExports, webpackRequire);'\n              ),\n              '} finally {',\n              webpack.Template.indent([\n                `if (typeof Promise !== 'undefined' && moduleObject.exports instanceof Promise) {`,\n                webpack.Template.indent([\n                  // The exports of the module are re-assigned -\n                  // this ensures anything coming after us would wait for `cleanup` to fire.\n                  // This is particularly important because `cleanup` restores the refresh global,\n                  // maintaining consistency for mutable variables like `moduleId`.\n                  // This `.then` clause is a ponyfill of the `Promise.finally` API -\n                  // it is only part of the spec after ES2018,\n                  // but Webpack's top level await implementation support engines down to ES2015.\n                  'options.module.exports = options.module.exports.then(',\n                  webpack.Template.indent([\n                    `${runtimeTemplate.basicFunction('result', [\n                      `${refreshGlobal}.cleanup(options.id);`,\n                      'return result;',\n                    ])},`,\n                    runtimeTemplate.basicFunction('reason', [\n                      `${refreshGlobal}.cleanup(options.id);`,\n                      'return Promise.reject(reason);',\n                    ]),\n                  ]),\n                  `);`,\n                ]),\n                '} else {',\n                webpack.Template.indent(`${refreshGlobal}.cleanup(options.id)`),\n                '}',\n              ]),\n              '}',\n            ]),\n            `};`,\n          ]\n        )})`,\n        '',\n        getRefreshGlobal(webpack.Template, webpack.RuntimeGlobals, runtimeTemplate),\n      ]);\n    }\n  };\n}\n\nmodule.exports = makeRefreshRuntimeModule;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAsB,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AACvD,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA,SAASE,wBAAwBA,CAACC,OAAO,EAAE;EACzC,OAAO,MAAMC,yBAAyB,SAASD,OAAO,CAACE,aAAa,CAAC;IACnEC,WAAWA,CAAA,EAAG;MACZ;MACA;MACA,KAAK,CAAC,eAAe,EAAEH,OAAO,CAACE,aAAa,CAACE,WAAW,CAAC;IAC3D;;IAEA;AACJ;AACA;IACIC,QAAQA,CAAA,EAAG;MACT,MAAM;QAAEC;MAAgB,CAAC,GAAG,IAAI,CAACC,WAAW;MAC5C,MAAMC,aAAa,GAAGZ,qBAAqB,CAACI,OAAO,CAACS,cAAc,CAAC;MACnE,OAAOT,OAAO,CAACU,QAAQ,CAACC,QAAQ,CAAC,CAC9B,GAAEX,OAAO,CAACS,cAAc,CAACG,wBAAyB,SAAQN,eAAe,CAACO,aAAa,CACtF,SAAS,EACT,CACG,GACCP,eAAe,CAACQ,aAAa,CAAC,CAAC,GAAG,OAAO,GAAG,KAC7C,qCAAoC,EACpC,4EAA2E,EAC5Ed,OAAO,CAACU,QAAQ,CAACK,MAAM,CAAC,CACrB,GAAEP,aAAc,qBAAoB,EACrC,OAAO,EACPR,OAAO,CAACU,QAAQ,CAACK,MAAM,CACrB,0EACF,CAAC,EACD,aAAa,EACbf,OAAO,CAACU,QAAQ,CAACK,MAAM,CAAC,CACrB,kFAAiF,EAClFf,OAAO,CAACU,QAAQ,CAACK,MAAM,CAAC;MACtB;MACA;MACA;MACA;MACA;MACA;MACA;MACA,uDAAuD,EACvDf,OAAO,CAACU,QAAQ,CAACK,MAAM,CAAC,CACrB,GAAET,eAAe,CAACO,aAAa,CAAC,QAAQ,EAAE,CACxC,GAAEL,aAAc,uBAAsB,EACvC,gBAAgB,CACjB,CAAE,GAAE,EACLF,eAAe,CAACO,aAAa,CAAC,QAAQ,EAAE,CACrC,GAAEL,aAAc,uBAAsB,EACvC,gCAAgC,CACjC,CAAC,CACH,CAAC,EACD,IAAG,CACL,CAAC,EACF,UAAU,EACVR,OAAO,CAACU,QAAQ,CAACK,MAAM,CAAE,GAAEP,aAAc,sBAAqB,CAAC,EAC/D,GAAG,CACJ,CAAC,EACF,GAAG,CACJ,CAAC,EACD,IAAG,CAER,CAAE,GAAE,EACJ,EAAE,EACFV,gBAAgB,CAACE,OAAO,CAACU,QAAQ,EAAEV,OAAO,CAACS,cAAc,EAAEH,eAAe,CAAC,CAC5E,CAAC;IACJ;EACF,CAAC;AACH;AAEAU,MAAM,CAACC,OAAO,GAAGlB,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}