{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = jestHoist;\nfunction _template() {\n  const data = require('@babel/template');\n  _template = function () {\n    return data;\n  };\n  return data;\n}\nfunction _types() {\n  const data = require('@babel/types');\n  _types = function () {\n    return data;\n  };\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst JEST_GLOBAL_NAME = 'jest';\nconst JEST_GLOBALS_MODULE_NAME = '@jest/globals';\nconst JEST_GLOBALS_MODULE_JEST_EXPORT_NAME = 'jest';\nconst hoistedVariables = new WeakSet(); // We allow `jest`, `expect`, `require`, all default Node.js globals and all\n// ES2015 built-ins to be used inside of a `jest.mock` factory.\n// We also allow variables prefixed with `mock` as an escape-hatch.\n\nconst ALLOWED_IDENTIFIERS = new Set(['Array', 'ArrayBuffer', 'Boolean', 'BigInt', 'DataView', 'Date', 'Error', 'EvalError', 'Float32Array', 'Float64Array', 'Function', 'Generator', 'GeneratorFunction', 'Infinity', 'Int16Array', 'Int32Array', 'Int8Array', 'InternalError', 'Intl', 'JSON', 'Map', 'Math', 'NaN', 'Number', 'Object', 'Promise', 'Proxy', 'RangeError', 'ReferenceError', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'SyntaxError', 'TypeError', 'URIError', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray', 'WeakMap', 'WeakSet', 'arguments', 'console', 'expect', 'isNaN', 'jest', 'parseFloat', 'parseInt', 'exports', 'require', 'module', '__filename', '__dirname', 'undefined', ...Object.getOwnPropertyNames(global)].sort());\nconst IDVisitor = {\n  ReferencedIdentifier(path, {\n    ids\n  }) {\n    ids.add(path);\n  },\n  blacklist: ['TypeAnnotation', 'TSTypeAnnotation', 'TSTypeReference']\n};\nconst FUNCTIONS = Object.create(null);\nFUNCTIONS.mock = args => {\n  if (args.length === 1) {\n    return args[0].isStringLiteral() || args[0].isLiteral();\n  } else if (args.length === 2 || args.length === 3) {\n    const moduleFactory = args[1];\n    if (!moduleFactory.isFunction()) {\n      throw moduleFactory.buildCodeFrameError('The second argument of `jest.mock` must be an inline function.\\n', TypeError);\n    }\n    const ids = new Set();\n    const parentScope = moduleFactory.parentPath.scope; // @ts-expect-error: ReferencedIdentifier and blacklist are not known on visitors\n\n    moduleFactory.traverse(IDVisitor, {\n      ids\n    });\n    for (const id of ids) {\n      const {\n        name\n      } = id.node;\n      let found = false;\n      let scope = id.scope;\n      while (scope !== parentScope) {\n        if (scope.bindings[name]) {\n          found = true;\n          break;\n        }\n        scope = scope.parent;\n      }\n      if (!found) {\n        let isAllowedIdentifier = scope.hasGlobal(name) && ALLOWED_IDENTIFIERS.has(name) || /^mock/i.test(name) ||\n        // Allow istanbul's coverage variable to pass.\n        /^(?:__)?cov/.test(name);\n        if (!isAllowedIdentifier) {\n          const binding = scope.bindings[name];\n          if (binding !== null && binding !== void 0 && binding.path.isVariableDeclarator()) {\n            const {\n              node\n            } = binding.path;\n            const initNode = node.init;\n            if (initNode && binding.constant && scope.isPure(initNode, true)) {\n              hoistedVariables.add(node);\n              isAllowedIdentifier = true;\n            }\n          }\n        }\n        if (!isAllowedIdentifier) {\n          throw id.buildCodeFrameError('The module factory of `jest.mock()` is not allowed to ' + 'reference any out-of-scope variables.\\n' + 'Invalid variable access: ' + name + '\\n' + 'Allowed objects: ' + Array.from(ALLOWED_IDENTIFIERS).join(', ') + '.\\n' + 'Note: This is a precaution to guard against uninitialized mock ' + 'variables. If it is ensured that the mock is required lazily, ' + 'variable names prefixed with `mock` (case insensitive) are permitted.\\n', ReferenceError);\n        }\n      }\n    }\n    return true;\n  }\n  return false;\n};\nFUNCTIONS.unmock = args => args.length === 1 && args[0].isStringLiteral();\nFUNCTIONS.deepUnmock = args => args.length === 1 && args[0].isStringLiteral();\nFUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = args => args.length === 0;\nconst createJestObjectGetter = (0, _template().statement)`\nfunction GETTER_NAME() {\n  const { JEST_GLOBALS_MODULE_JEST_EXPORT_NAME } = require(\"JEST_GLOBALS_MODULE_NAME\");\n  GETTER_NAME = () => JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n  return JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n}\n`;\nconst isJestObject = expression => {\n  // global\n  if (expression.isIdentifier() && expression.node.name === JEST_GLOBAL_NAME && !expression.scope.hasBinding(JEST_GLOBAL_NAME)) {\n    return true;\n  } // import { jest } from '@jest/globals'\n\n  if (expression.referencesImport(JEST_GLOBALS_MODULE_NAME, JEST_GLOBALS_MODULE_JEST_EXPORT_NAME)) {\n    return true;\n  } // import * as JestGlobals from '@jest/globals'\n\n  if (expression.isMemberExpression() && !expression.node.computed && expression.get('object').referencesImport(JEST_GLOBALS_MODULE_NAME, '*') && expression.node.property.type === 'Identifier' && expression.node.property.name === JEST_GLOBALS_MODULE_JEST_EXPORT_NAME) {\n    return true;\n  }\n  return false;\n};\nconst extractJestObjExprIfHoistable = expr => {\n  var _FUNCTIONS$propertyNa;\n  if (!expr.isCallExpression()) {\n    return null;\n  }\n  const callee = expr.get('callee');\n  const args = expr.get('arguments');\n  if (!callee.isMemberExpression() || callee.node.computed) {\n    return null;\n  }\n  const object = callee.get('object');\n  const property = callee.get('property');\n  const propertyName = property.node.name;\n  const jestObjExpr = isJestObject(object) ? object // The Jest object could be returned from another call since the functions are all chainable.\n  : extractJestObjExprIfHoistable(object);\n  if (!jestObjExpr) {\n    return null;\n  } // Important: Call the function check last\n  // It might throw an error to display to the user,\n  // which should only happen if we're already sure it's a call on the Jest object.\n\n  const functionLooksHoistable = (_FUNCTIONS$propertyNa = FUNCTIONS[propertyName]) === null || _FUNCTIONS$propertyNa === void 0 ? void 0 : _FUNCTIONS$propertyNa.call(FUNCTIONS, args);\n  return functionLooksHoistable ? jestObjExpr : null;\n};\n/* eslint-disable sort-keys */\n\nfunction jestHoist() {\n  return {\n    pre({\n      path: program\n    }) {\n      this.declareJestObjGetterIdentifier = () => {\n        if (this.jestObjGetterIdentifier) {\n          return this.jestObjGetterIdentifier;\n        }\n        this.jestObjGetterIdentifier = program.scope.generateUidIdentifier('getJestObj');\n        program.unshiftContainer('body', [createJestObjectGetter({\n          GETTER_NAME: this.jestObjGetterIdentifier.name,\n          JEST_GLOBALS_MODULE_JEST_EXPORT_NAME,\n          JEST_GLOBALS_MODULE_NAME\n        })]);\n        return this.jestObjGetterIdentifier;\n      };\n    },\n    visitor: {\n      ExpressionStatement(exprStmt) {\n        const jestObjExpr = extractJestObjExprIfHoistable(exprStmt.get('expression'));\n        if (jestObjExpr) {\n          jestObjExpr.replaceWith((0, _types().callExpression)(this.declareJestObjGetterIdentifier(), []));\n        }\n      }\n    },\n    // in `post` to make sure we come after an import transform and can unshift above the `require`s\n    post({\n      path: program\n    }) {\n      const self = this;\n      visitBlock(program);\n      program.traverse({\n        BlockStatement: visitBlock\n      });\n      function visitBlock(block) {\n        // use a temporary empty statement instead of the real first statement, which may itself be hoisted\n        const [varsHoistPoint, callsHoistPoint] = block.unshiftContainer('body', [(0, _types().emptyStatement)(), (0, _types().emptyStatement)()]);\n        block.traverse({\n          CallExpression: visitCallExpr,\n          VariableDeclarator: visitVariableDeclarator,\n          // do not traverse into nested blocks, or we'll hoist calls in there out to this block\n          blacklist: ['BlockStatement']\n        });\n        callsHoistPoint.remove();\n        varsHoistPoint.remove();\n        function visitCallExpr(callExpr) {\n          var _self$jestObjGetterId;\n          const {\n            node: {\n              callee\n            }\n          } = callExpr;\n          if ((0, _types().isIdentifier)(callee) && callee.name === ((_self$jestObjGetterId = self.jestObjGetterIdentifier) === null || _self$jestObjGetterId === void 0 ? void 0 : _self$jestObjGetterId.name)) {\n            const mockStmt = callExpr.getStatementParent();\n            if (mockStmt) {\n              const mockStmtParent = mockStmt.parentPath;\n              if (mockStmtParent.isBlock()) {\n                const mockStmtNode = mockStmt.node;\n                mockStmt.remove();\n                callsHoistPoint.insertBefore(mockStmtNode);\n              }\n            }\n          }\n        }\n        function visitVariableDeclarator(varDecl) {\n          if (hoistedVariables.has(varDecl.node)) {\n            // should be assert function, but it's not. So let's cast below\n            varDecl.parentPath.assertVariableDeclaration();\n            const {\n              kind,\n              declarations\n            } = varDecl.parent;\n            if (declarations.length === 1) {\n              varDecl.parentPath.remove();\n            } else {\n              varDecl.remove();\n            }\n            varsHoistPoint.insertBefore((0, _types().variableDeclaration)(kind, [varDecl.node]));\n          }\n        }\n      }\n    }\n  };\n}\n/* eslint-enable */","map":{"version":3,"names":["Object","defineProperty","exports","value","default","jestHoist","_template","data","require","_types","JEST_GLOBAL_NAME","JEST_GLOBALS_MODULE_NAME","JEST_GLOBALS_MODULE_JEST_EXPORT_NAME","hoistedVariables","WeakSet","ALLOWED_IDENTIFIERS","Set","getOwnPropertyNames","global","sort","IDVisitor","ReferencedIdentifier","path","ids","add","blacklist","FUNCTIONS","create","mock","args","length","isStringLiteral","isLiteral","moduleFactory","isFunction","buildCodeFrameError","TypeError","parentScope","parentPath","scope","traverse","id","name","node","found","bindings","parent","isAllowedIdentifier","hasGlobal","has","test","binding","isVariableDeclarator","initNode","init","constant","isPure","Array","from","join","ReferenceError","unmock","deepUnmock","disableAutomock","enableAutomock","createJestObjectGetter","statement","isJestObject","expression","isIdentifier","hasBinding","referencesImport","isMemberExpression","computed","get","property","type","extractJestObjExprIfHoistable","expr","_FUNCTIONS$propertyNa","isCallExpression","callee","object","propertyName","jestObjExpr","functionLooksHoistable","call","pre","program","declareJestObjGetterIdentifier","jestObjGetterIdentifier","generateUidIdentifier","unshiftContainer","GETTER_NAME","visitor","ExpressionStatement","exprStmt","replaceWith","callExpression","post","self","visitBlock","BlockStatement","block","varsHoistPoint","callsHoistPoint","emptyStatement","CallExpression","visitCallExpr","VariableDeclarator","visitVariableDeclarator","remove","callExpr","_self$jestObjGetterId","mockStmt","getStatementParent","mockStmtParent","isBlock","mockStmtNode","insertBefore","varDecl","assertVariableDeclaration","kind","declarations","variableDeclaration"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/babel-plugin-jest-hoist/build/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = jestHoist;\n\nfunction _template() {\n  const data = require('@babel/template');\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = require('@babel/types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst JEST_GLOBAL_NAME = 'jest';\nconst JEST_GLOBALS_MODULE_NAME = '@jest/globals';\nconst JEST_GLOBALS_MODULE_JEST_EXPORT_NAME = 'jest';\nconst hoistedVariables = new WeakSet(); // We allow `jest`, `expect`, `require`, all default Node.js globals and all\n// ES2015 built-ins to be used inside of a `jest.mock` factory.\n// We also allow variables prefixed with `mock` as an escape-hatch.\n\nconst ALLOWED_IDENTIFIERS = new Set(\n  [\n    'Array',\n    'ArrayBuffer',\n    'Boolean',\n    'BigInt',\n    'DataView',\n    'Date',\n    'Error',\n    'EvalError',\n    'Float32Array',\n    'Float64Array',\n    'Function',\n    'Generator',\n    'GeneratorFunction',\n    'Infinity',\n    'Int16Array',\n    'Int32Array',\n    'Int8Array',\n    'InternalError',\n    'Intl',\n    'JSON',\n    'Map',\n    'Math',\n    'NaN',\n    'Number',\n    'Object',\n    'Promise',\n    'Proxy',\n    'RangeError',\n    'ReferenceError',\n    'Reflect',\n    'RegExp',\n    'Set',\n    'String',\n    'Symbol',\n    'SyntaxError',\n    'TypeError',\n    'URIError',\n    'Uint16Array',\n    'Uint32Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'WeakMap',\n    'WeakSet',\n    'arguments',\n    'console',\n    'expect',\n    'isNaN',\n    'jest',\n    'parseFloat',\n    'parseInt',\n    'exports',\n    'require',\n    'module',\n    '__filename',\n    '__dirname',\n    'undefined',\n    ...Object.getOwnPropertyNames(global)\n  ].sort()\n);\nconst IDVisitor = {\n  ReferencedIdentifier(path, {ids}) {\n    ids.add(path);\n  },\n\n  blacklist: ['TypeAnnotation', 'TSTypeAnnotation', 'TSTypeReference']\n};\nconst FUNCTIONS = Object.create(null);\n\nFUNCTIONS.mock = args => {\n  if (args.length === 1) {\n    return args[0].isStringLiteral() || args[0].isLiteral();\n  } else if (args.length === 2 || args.length === 3) {\n    const moduleFactory = args[1];\n\n    if (!moduleFactory.isFunction()) {\n      throw moduleFactory.buildCodeFrameError(\n        'The second argument of `jest.mock` must be an inline function.\\n',\n        TypeError\n      );\n    }\n\n    const ids = new Set();\n    const parentScope = moduleFactory.parentPath.scope; // @ts-expect-error: ReferencedIdentifier and blacklist are not known on visitors\n\n    moduleFactory.traverse(IDVisitor, {\n      ids\n    });\n\n    for (const id of ids) {\n      const {name} = id.node;\n      let found = false;\n      let scope = id.scope;\n\n      while (scope !== parentScope) {\n        if (scope.bindings[name]) {\n          found = true;\n          break;\n        }\n\n        scope = scope.parent;\n      }\n\n      if (!found) {\n        let isAllowedIdentifier =\n          (scope.hasGlobal(name) && ALLOWED_IDENTIFIERS.has(name)) ||\n          /^mock/i.test(name) || // Allow istanbul's coverage variable to pass.\n          /^(?:__)?cov/.test(name);\n\n        if (!isAllowedIdentifier) {\n          const binding = scope.bindings[name];\n\n          if (\n            binding !== null &&\n            binding !== void 0 &&\n            binding.path.isVariableDeclarator()\n          ) {\n            const {node} = binding.path;\n            const initNode = node.init;\n\n            if (initNode && binding.constant && scope.isPure(initNode, true)) {\n              hoistedVariables.add(node);\n              isAllowedIdentifier = true;\n            }\n          }\n        }\n\n        if (!isAllowedIdentifier) {\n          throw id.buildCodeFrameError(\n            'The module factory of `jest.mock()` is not allowed to ' +\n              'reference any out-of-scope variables.\\n' +\n              'Invalid variable access: ' +\n              name +\n              '\\n' +\n              'Allowed objects: ' +\n              Array.from(ALLOWED_IDENTIFIERS).join(', ') +\n              '.\\n' +\n              'Note: This is a precaution to guard against uninitialized mock ' +\n              'variables. If it is ensured that the mock is required lazily, ' +\n              'variable names prefixed with `mock` (case insensitive) are permitted.\\n',\n            ReferenceError\n          );\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nFUNCTIONS.unmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.deepUnmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = args =>\n  args.length === 0;\n\nconst createJestObjectGetter = (0, _template().statement)`\nfunction GETTER_NAME() {\n  const { JEST_GLOBALS_MODULE_JEST_EXPORT_NAME } = require(\"JEST_GLOBALS_MODULE_NAME\");\n  GETTER_NAME = () => JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n  return JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n}\n`;\n\nconst isJestObject = expression => {\n  // global\n  if (\n    expression.isIdentifier() &&\n    expression.node.name === JEST_GLOBAL_NAME &&\n    !expression.scope.hasBinding(JEST_GLOBAL_NAME)\n  ) {\n    return true;\n  } // import { jest } from '@jest/globals'\n\n  if (\n    expression.referencesImport(\n      JEST_GLOBALS_MODULE_NAME,\n      JEST_GLOBALS_MODULE_JEST_EXPORT_NAME\n    )\n  ) {\n    return true;\n  } // import * as JestGlobals from '@jest/globals'\n\n  if (\n    expression.isMemberExpression() &&\n    !expression.node.computed &&\n    expression.get('object').referencesImport(JEST_GLOBALS_MODULE_NAME, '*') &&\n    expression.node.property.type === 'Identifier' &&\n    expression.node.property.name === JEST_GLOBALS_MODULE_JEST_EXPORT_NAME\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nconst extractJestObjExprIfHoistable = expr => {\n  var _FUNCTIONS$propertyNa;\n\n  if (!expr.isCallExpression()) {\n    return null;\n  }\n\n  const callee = expr.get('callee');\n  const args = expr.get('arguments');\n\n  if (!callee.isMemberExpression() || callee.node.computed) {\n    return null;\n  }\n\n  const object = callee.get('object');\n  const property = callee.get('property');\n  const propertyName = property.node.name;\n  const jestObjExpr = isJestObject(object)\n    ? object // The Jest object could be returned from another call since the functions are all chainable.\n    : extractJestObjExprIfHoistable(object);\n\n  if (!jestObjExpr) {\n    return null;\n  } // Important: Call the function check last\n  // It might throw an error to display to the user,\n  // which should only happen if we're already sure it's a call on the Jest object.\n\n  const functionLooksHoistable =\n    (_FUNCTIONS$propertyNa = FUNCTIONS[propertyName]) === null ||\n    _FUNCTIONS$propertyNa === void 0\n      ? void 0\n      : _FUNCTIONS$propertyNa.call(FUNCTIONS, args);\n  return functionLooksHoistable ? jestObjExpr : null;\n};\n/* eslint-disable sort-keys */\n\nfunction jestHoist() {\n  return {\n    pre({path: program}) {\n      this.declareJestObjGetterIdentifier = () => {\n        if (this.jestObjGetterIdentifier) {\n          return this.jestObjGetterIdentifier;\n        }\n\n        this.jestObjGetterIdentifier =\n          program.scope.generateUidIdentifier('getJestObj');\n        program.unshiftContainer('body', [\n          createJestObjectGetter({\n            GETTER_NAME: this.jestObjGetterIdentifier.name,\n            JEST_GLOBALS_MODULE_JEST_EXPORT_NAME,\n            JEST_GLOBALS_MODULE_NAME\n          })\n        ]);\n        return this.jestObjGetterIdentifier;\n      };\n    },\n\n    visitor: {\n      ExpressionStatement(exprStmt) {\n        const jestObjExpr = extractJestObjExprIfHoistable(\n          exprStmt.get('expression')\n        );\n\n        if (jestObjExpr) {\n          jestObjExpr.replaceWith(\n            (0, _types().callExpression)(\n              this.declareJestObjGetterIdentifier(),\n              []\n            )\n          );\n        }\n      }\n    },\n\n    // in `post` to make sure we come after an import transform and can unshift above the `require`s\n    post({path: program}) {\n      const self = this;\n      visitBlock(program);\n      program.traverse({\n        BlockStatement: visitBlock\n      });\n\n      function visitBlock(block) {\n        // use a temporary empty statement instead of the real first statement, which may itself be hoisted\n        const [varsHoistPoint, callsHoistPoint] = block.unshiftContainer(\n          'body',\n          [(0, _types().emptyStatement)(), (0, _types().emptyStatement)()]\n        );\n        block.traverse({\n          CallExpression: visitCallExpr,\n          VariableDeclarator: visitVariableDeclarator,\n          // do not traverse into nested blocks, or we'll hoist calls in there out to this block\n          blacklist: ['BlockStatement']\n        });\n        callsHoistPoint.remove();\n        varsHoistPoint.remove();\n\n        function visitCallExpr(callExpr) {\n          var _self$jestObjGetterId;\n\n          const {\n            node: {callee}\n          } = callExpr;\n\n          if (\n            (0, _types().isIdentifier)(callee) &&\n            callee.name ===\n              ((_self$jestObjGetterId = self.jestObjGetterIdentifier) ===\n                null || _self$jestObjGetterId === void 0\n                ? void 0\n                : _self$jestObjGetterId.name)\n          ) {\n            const mockStmt = callExpr.getStatementParent();\n\n            if (mockStmt) {\n              const mockStmtParent = mockStmt.parentPath;\n\n              if (mockStmtParent.isBlock()) {\n                const mockStmtNode = mockStmt.node;\n                mockStmt.remove();\n                callsHoistPoint.insertBefore(mockStmtNode);\n              }\n            }\n          }\n        }\n\n        function visitVariableDeclarator(varDecl) {\n          if (hoistedVariables.has(varDecl.node)) {\n            // should be assert function, but it's not. So let's cast below\n            varDecl.parentPath.assertVariableDeclaration();\n            const {kind, declarations} = varDecl.parent;\n\n            if (declarations.length === 1) {\n              varDecl.parentPath.remove();\n            } else {\n              varDecl.remove();\n            }\n\n            varsHoistPoint.insertBefore(\n              (0, _types().variableDeclaration)(kind, [varDecl.node])\n            );\n          }\n        }\n      }\n    }\n  };\n}\n/* eslint-enable */\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,SAAS;AAE3B,SAASC,SAASA,CAAA,EAAG;EACnB,MAAMC,IAAI,GAAGC,OAAO,CAAC,iBAAiB,CAAC;EAEvCF,SAAS,GAAG,SAAAA,CAAA,EAAY;IACtB,OAAOC,IAAI;EACb,CAAC;EAED,OAAOA,IAAI;AACb;AAEA,SAASE,MAAMA,CAAA,EAAG;EAChB,MAAMF,IAAI,GAAGC,OAAO,CAAC,cAAc,CAAC;EAEpCC,MAAM,GAAG,SAAAA,CAAA,EAAY;IACnB,OAAOF,IAAI;EACb,CAAC;EAED,OAAOA,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,gBAAgB,GAAG,MAAM;AAC/B,MAAMC,wBAAwB,GAAG,eAAe;AAChD,MAAMC,oCAAoC,GAAG,MAAM;AACnD,MAAMC,gBAAgB,GAAG,IAAIC,OAAO,CAAC,CAAC,CAAC,CAAC;AACxC;AACA;;AAEA,MAAMC,mBAAmB,GAAG,IAAIC,GAAG,CACjC,CACE,OAAO,EACP,aAAa,EACb,SAAS,EACT,QAAQ,EACR,UAAU,EACV,MAAM,EACN,OAAO,EACP,WAAW,EACX,cAAc,EACd,cAAc,EACd,UAAU,EACV,WAAW,EACX,mBAAmB,EACnB,UAAU,EACV,YAAY,EACZ,YAAY,EACZ,WAAW,EACX,eAAe,EACf,MAAM,EACN,MAAM,EACN,KAAK,EACL,MAAM,EACN,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,OAAO,EACP,YAAY,EACZ,gBAAgB,EAChB,SAAS,EACT,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,aAAa,EACb,WAAW,EACX,UAAU,EACV,aAAa,EACb,aAAa,EACb,YAAY,EACZ,mBAAmB,EACnB,SAAS,EACT,SAAS,EACT,WAAW,EACX,SAAS,EACT,QAAQ,EACR,OAAO,EACP,MAAM,EACN,YAAY,EACZ,UAAU,EACV,SAAS,EACT,SAAS,EACT,QAAQ,EACR,YAAY,EACZ,WAAW,EACX,WAAW,EACX,GAAGhB,MAAM,CAACiB,mBAAmB,CAACC,MAAM,CAAC,CACtC,CAACC,IAAI,CAAC,CACT,CAAC;AACD,MAAMC,SAAS,GAAG;EAChBC,oBAAoBA,CAACC,IAAI,EAAE;IAACC;EAAG,CAAC,EAAE;IAChCA,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC;EACf,CAAC;EAEDG,SAAS,EAAE,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,iBAAiB;AACrE,CAAC;AACD,MAAMC,SAAS,GAAG1B,MAAM,CAAC2B,MAAM,CAAC,IAAI,CAAC;AAErCD,SAAS,CAACE,IAAI,GAAGC,IAAI,IAAI;EACvB,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IACrB,OAAOD,IAAI,CAAC,CAAC,CAAC,CAACE,eAAe,CAAC,CAAC,IAAIF,IAAI,CAAC,CAAC,CAAC,CAACG,SAAS,CAAC,CAAC;EACzD,CAAC,MAAM,IAAIH,IAAI,CAACC,MAAM,KAAK,CAAC,IAAID,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IACjD,MAAMG,aAAa,GAAGJ,IAAI,CAAC,CAAC,CAAC;IAE7B,IAAI,CAACI,aAAa,CAACC,UAAU,CAAC,CAAC,EAAE;MAC/B,MAAMD,aAAa,CAACE,mBAAmB,CACrC,kEAAkE,EAClEC,SACF,CAAC;IACH;IAEA,MAAMb,GAAG,GAAG,IAAIP,GAAG,CAAC,CAAC;IACrB,MAAMqB,WAAW,GAAGJ,aAAa,CAACK,UAAU,CAACC,KAAK,CAAC,CAAC;;IAEpDN,aAAa,CAACO,QAAQ,CAACpB,SAAS,EAAE;MAChCG;IACF,CAAC,CAAC;IAEF,KAAK,MAAMkB,EAAE,IAAIlB,GAAG,EAAE;MACpB,MAAM;QAACmB;MAAI,CAAC,GAAGD,EAAE,CAACE,IAAI;MACtB,IAAIC,KAAK,GAAG,KAAK;MACjB,IAAIL,KAAK,GAAGE,EAAE,CAACF,KAAK;MAEpB,OAAOA,KAAK,KAAKF,WAAW,EAAE;QAC5B,IAAIE,KAAK,CAACM,QAAQ,CAACH,IAAI,CAAC,EAAE;UACxBE,KAAK,GAAG,IAAI;UACZ;QACF;QAEAL,KAAK,GAAGA,KAAK,CAACO,MAAM;MACtB;MAEA,IAAI,CAACF,KAAK,EAAE;QACV,IAAIG,mBAAmB,GACpBR,KAAK,CAACS,SAAS,CAACN,IAAI,CAAC,IAAI3B,mBAAmB,CAACkC,GAAG,CAACP,IAAI,CAAC,IACvD,QAAQ,CAACQ,IAAI,CAACR,IAAI,CAAC;QAAI;QACvB,aAAa,CAACQ,IAAI,CAACR,IAAI,CAAC;QAE1B,IAAI,CAACK,mBAAmB,EAAE;UACxB,MAAMI,OAAO,GAAGZ,KAAK,CAACM,QAAQ,CAACH,IAAI,CAAC;UAEpC,IACES,OAAO,KAAK,IAAI,IAChBA,OAAO,KAAK,KAAK,CAAC,IAClBA,OAAO,CAAC7B,IAAI,CAAC8B,oBAAoB,CAAC,CAAC,EACnC;YACA,MAAM;cAACT;YAAI,CAAC,GAAGQ,OAAO,CAAC7B,IAAI;YAC3B,MAAM+B,QAAQ,GAAGV,IAAI,CAACW,IAAI;YAE1B,IAAID,QAAQ,IAAIF,OAAO,CAACI,QAAQ,IAAIhB,KAAK,CAACiB,MAAM,CAACH,QAAQ,EAAE,IAAI,CAAC,EAAE;cAChExC,gBAAgB,CAACW,GAAG,CAACmB,IAAI,CAAC;cAC1BI,mBAAmB,GAAG,IAAI;YAC5B;UACF;QACF;QAEA,IAAI,CAACA,mBAAmB,EAAE;UACxB,MAAMN,EAAE,CAACN,mBAAmB,CAC1B,wDAAwD,GACtD,yCAAyC,GACzC,2BAA2B,GAC3BO,IAAI,GACJ,IAAI,GACJ,mBAAmB,GACnBe,KAAK,CAACC,IAAI,CAAC3C,mBAAmB,CAAC,CAAC4C,IAAI,CAAC,IAAI,CAAC,GAC1C,KAAK,GACL,iEAAiE,GACjE,gEAAgE,GAChE,yEAAyE,EAC3EC,cACF,CAAC;QACH;MACF;IACF;IAEA,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd,CAAC;AAEDlC,SAAS,CAACmC,MAAM,GAAGhC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,CAACE,eAAe,CAAC,CAAC;AAEzEL,SAAS,CAACoC,UAAU,GAAGjC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,CAACE,eAAe,CAAC,CAAC;AAE7EL,SAAS,CAACqC,eAAe,GAAGrC,SAAS,CAACsC,cAAc,GAAGnC,IAAI,IACzDA,IAAI,CAACC,MAAM,KAAK,CAAC;AAEnB,MAAMmC,sBAAsB,GAAG,CAAC,CAAC,EAAE3D,SAAS,CAAC,CAAC,CAAC4D,SAAS,CAAE;AAC1D;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,YAAY,GAAGC,UAAU,IAAI;EACjC;EACA,IACEA,UAAU,CAACC,YAAY,CAAC,CAAC,IACzBD,UAAU,CAACzB,IAAI,CAACD,IAAI,KAAKhC,gBAAgB,IACzC,CAAC0D,UAAU,CAAC7B,KAAK,CAAC+B,UAAU,CAAC5D,gBAAgB,CAAC,EAC9C;IACA,OAAO,IAAI;EACb,CAAC,CAAC;;EAEF,IACE0D,UAAU,CAACG,gBAAgB,CACzB5D,wBAAwB,EACxBC,oCACF,CAAC,EACD;IACA,OAAO,IAAI;EACb,CAAC,CAAC;;EAEF,IACEwD,UAAU,CAACI,kBAAkB,CAAC,CAAC,IAC/B,CAACJ,UAAU,CAACzB,IAAI,CAAC8B,QAAQ,IACzBL,UAAU,CAACM,GAAG,CAAC,QAAQ,CAAC,CAACH,gBAAgB,CAAC5D,wBAAwB,EAAE,GAAG,CAAC,IACxEyD,UAAU,CAACzB,IAAI,CAACgC,QAAQ,CAACC,IAAI,KAAK,YAAY,IAC9CR,UAAU,CAACzB,IAAI,CAACgC,QAAQ,CAACjC,IAAI,KAAK9B,oCAAoC,EACtE;IACA,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd,CAAC;AAED,MAAMiE,6BAA6B,GAAGC,IAAI,IAAI;EAC5C,IAAIC,qBAAqB;EAEzB,IAAI,CAACD,IAAI,CAACE,gBAAgB,CAAC,CAAC,EAAE;IAC5B,OAAO,IAAI;EACb;EAEA,MAAMC,MAAM,GAAGH,IAAI,CAACJ,GAAG,CAAC,QAAQ,CAAC;EACjC,MAAM7C,IAAI,GAAGiD,IAAI,CAACJ,GAAG,CAAC,WAAW,CAAC;EAElC,IAAI,CAACO,MAAM,CAACT,kBAAkB,CAAC,CAAC,IAAIS,MAAM,CAACtC,IAAI,CAAC8B,QAAQ,EAAE;IACxD,OAAO,IAAI;EACb;EAEA,MAAMS,MAAM,GAAGD,MAAM,CAACP,GAAG,CAAC,QAAQ,CAAC;EACnC,MAAMC,QAAQ,GAAGM,MAAM,CAACP,GAAG,CAAC,UAAU,CAAC;EACvC,MAAMS,YAAY,GAAGR,QAAQ,CAAChC,IAAI,CAACD,IAAI;EACvC,MAAM0C,WAAW,GAAGjB,YAAY,CAACe,MAAM,CAAC,GACpCA,MAAM,CAAC;EAAA,EACPL,6BAA6B,CAACK,MAAM,CAAC;EAEzC,IAAI,CAACE,WAAW,EAAE;IAChB,OAAO,IAAI;EACb,CAAC,CAAC;EACF;EACA;;EAEA,MAAMC,sBAAsB,GAC1B,CAACN,qBAAqB,GAAGrD,SAAS,CAACyD,YAAY,CAAC,MAAM,IAAI,IAC1DJ,qBAAqB,KAAK,KAAK,CAAC,GAC5B,KAAK,CAAC,GACNA,qBAAqB,CAACO,IAAI,CAAC5D,SAAS,EAAEG,IAAI,CAAC;EACjD,OAAOwD,sBAAsB,GAAGD,WAAW,GAAG,IAAI;AACpD,CAAC;AACD;;AAEA,SAAS/E,SAASA,CAAA,EAAG;EACnB,OAAO;IACLkF,GAAGA,CAAC;MAACjE,IAAI,EAAEkE;IAAO,CAAC,EAAE;MACnB,IAAI,CAACC,8BAA8B,GAAG,MAAM;QAC1C,IAAI,IAAI,CAACC,uBAAuB,EAAE;UAChC,OAAO,IAAI,CAACA,uBAAuB;QACrC;QAEA,IAAI,CAACA,uBAAuB,GAC1BF,OAAO,CAACjD,KAAK,CAACoD,qBAAqB,CAAC,YAAY,CAAC;QACnDH,OAAO,CAACI,gBAAgB,CAAC,MAAM,EAAE,CAC/B3B,sBAAsB,CAAC;UACrB4B,WAAW,EAAE,IAAI,CAACH,uBAAuB,CAAChD,IAAI;UAC9C9B,oCAAoC;UACpCD;QACF,CAAC,CAAC,CACH,CAAC;QACF,OAAO,IAAI,CAAC+E,uBAAuB;MACrC,CAAC;IACH,CAAC;IAEDI,OAAO,EAAE;MACPC,mBAAmBA,CAACC,QAAQ,EAAE;QAC5B,MAAMZ,WAAW,GAAGP,6BAA6B,CAC/CmB,QAAQ,CAACtB,GAAG,CAAC,YAAY,CAC3B,CAAC;QAED,IAAIU,WAAW,EAAE;UACfA,WAAW,CAACa,WAAW,CACrB,CAAC,CAAC,EAAExF,MAAM,CAAC,CAAC,CAACyF,cAAc,EACzB,IAAI,CAACT,8BAA8B,CAAC,CAAC,EACrC,EACF,CACF,CAAC;QACH;MACF;IACF,CAAC;IAED;IACAU,IAAIA,CAAC;MAAC7E,IAAI,EAAEkE;IAAO,CAAC,EAAE;MACpB,MAAMY,IAAI,GAAG,IAAI;MACjBC,UAAU,CAACb,OAAO,CAAC;MACnBA,OAAO,CAAChD,QAAQ,CAAC;QACf8D,cAAc,EAAED;MAClB,CAAC,CAAC;MAEF,SAASA,UAAUA,CAACE,KAAK,EAAE;QACzB;QACA,MAAM,CAACC,cAAc,EAAEC,eAAe,CAAC,GAAGF,KAAK,CAACX,gBAAgB,CAC9D,MAAM,EACN,CAAC,CAAC,CAAC,EAAEnF,MAAM,CAAC,CAAC,CAACiG,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEjG,MAAM,CAAC,CAAC,CAACiG,cAAc,EAAE,CAAC,CACjE,CAAC;QACDH,KAAK,CAAC/D,QAAQ,CAAC;UACbmE,cAAc,EAAEC,aAAa;UAC7BC,kBAAkB,EAAEC,uBAAuB;UAC3C;UACArF,SAAS,EAAE,CAAC,gBAAgB;QAC9B,CAAC,CAAC;QACFgF,eAAe,CAACM,MAAM,CAAC,CAAC;QACxBP,cAAc,CAACO,MAAM,CAAC,CAAC;QAEvB,SAASH,aAAaA,CAACI,QAAQ,EAAE;UAC/B,IAAIC,qBAAqB;UAEzB,MAAM;YACJtE,IAAI,EAAE;cAACsC;YAAM;UACf,CAAC,GAAG+B,QAAQ;UAEZ,IACE,CAAC,CAAC,EAAEvG,MAAM,CAAC,CAAC,CAAC4D,YAAY,EAAEY,MAAM,CAAC,IAClCA,MAAM,CAACvC,IAAI,MACR,CAACuE,qBAAqB,GAAGb,IAAI,CAACV,uBAAuB,MACpD,IAAI,IAAIuB,qBAAqB,KAAK,KAAK,CAAC,GACtC,KAAK,CAAC,GACNA,qBAAqB,CAACvE,IAAI,CAAC,EACjC;YACA,MAAMwE,QAAQ,GAAGF,QAAQ,CAACG,kBAAkB,CAAC,CAAC;YAE9C,IAAID,QAAQ,EAAE;cACZ,MAAME,cAAc,GAAGF,QAAQ,CAAC5E,UAAU;cAE1C,IAAI8E,cAAc,CAACC,OAAO,CAAC,CAAC,EAAE;gBAC5B,MAAMC,YAAY,GAAGJ,QAAQ,CAACvE,IAAI;gBAClCuE,QAAQ,CAACH,MAAM,CAAC,CAAC;gBACjBN,eAAe,CAACc,YAAY,CAACD,YAAY,CAAC;cAC5C;YACF;UACF;QACF;QAEA,SAASR,uBAAuBA,CAACU,OAAO,EAAE;UACxC,IAAI3G,gBAAgB,CAACoC,GAAG,CAACuE,OAAO,CAAC7E,IAAI,CAAC,EAAE;YACtC;YACA6E,OAAO,CAAClF,UAAU,CAACmF,yBAAyB,CAAC,CAAC;YAC9C,MAAM;cAACC,IAAI;cAAEC;YAAY,CAAC,GAAGH,OAAO,CAAC1E,MAAM;YAE3C,IAAI6E,YAAY,CAAC7F,MAAM,KAAK,CAAC,EAAE;cAC7B0F,OAAO,CAAClF,UAAU,CAACyE,MAAM,CAAC,CAAC;YAC7B,CAAC,MAAM;cACLS,OAAO,CAACT,MAAM,CAAC,CAAC;YAClB;YAEAP,cAAc,CAACe,YAAY,CACzB,CAAC,CAAC,EAAE9G,MAAM,CAAC,CAAC,CAACmH,mBAAmB,EAAEF,IAAI,EAAE,CAACF,OAAO,CAAC7E,IAAI,CAAC,CACxD,CAAC;UACH;QACF;MACF;IACF;EACF,CAAC;AACH;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}