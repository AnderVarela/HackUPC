{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('brace-style');\nexports.default = (0, util_1.createRule)({\n  name: 'brace-style',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Enforce consistent brace style for blocks',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    messages: baseRule.meta.messages,\n    fixable: baseRule.meta.fixable,\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema\n  },\n  defaultOptions: ['1tbs'],\n  create(context) {\n    const [style, {\n      allowSingleLine\n    } = {\n      allowSingleLine: false\n    }] =\n    // eslint-disable-next-line no-restricted-syntax -- Use raw options for extended rules.\n    context.options;\n    const isAllmanStyle = style === 'allman';\n    const sourceCode = context.getSourceCode();\n    const rules = baseRule.create(context);\n    /**\n     * Checks a pair of curly brackets based on the user's config\n     */\n    function validateCurlyPair(openingCurlyToken, closingCurlyToken) {\n      if (allowSingleLine && (0, util_1.isTokenOnSameLine)(openingCurlyToken, closingCurlyToken)) {\n        return;\n      }\n      const tokenBeforeOpeningCurly = sourceCode.getTokenBefore(openingCurlyToken);\n      const tokenBeforeClosingCurly = sourceCode.getTokenBefore(closingCurlyToken);\n      const tokenAfterOpeningCurly = sourceCode.getTokenAfter(openingCurlyToken);\n      if (!isAllmanStyle && !(0, util_1.isTokenOnSameLine)(tokenBeforeOpeningCurly, openingCurlyToken)) {\n        context.report({\n          node: openingCurlyToken,\n          messageId: 'nextLineOpen',\n          fix: fixer => {\n            const textRange = [tokenBeforeOpeningCurly.range[1], openingCurlyToken.range[0]];\n            const textBetween = sourceCode.text.slice(textRange[0], textRange[1]);\n            if (textBetween.trim()) {\n              return null;\n            }\n            return fixer.replaceTextRange(textRange, ' ');\n          }\n        });\n      }\n      if (isAllmanStyle && (0, util_1.isTokenOnSameLine)(tokenBeforeOpeningCurly, openingCurlyToken)) {\n        context.report({\n          node: openingCurlyToken,\n          messageId: 'sameLineOpen',\n          fix: fixer => fixer.insertTextBefore(openingCurlyToken, '\\n')\n        });\n      }\n      if ((0, util_1.isTokenOnSameLine)(openingCurlyToken, tokenAfterOpeningCurly) && tokenAfterOpeningCurly !== closingCurlyToken) {\n        context.report({\n          node: openingCurlyToken,\n          messageId: 'blockSameLine',\n          fix: fixer => fixer.insertTextAfter(openingCurlyToken, '\\n')\n        });\n      }\n      if ((0, util_1.isTokenOnSameLine)(tokenBeforeClosingCurly, closingCurlyToken) && tokenBeforeClosingCurly !== openingCurlyToken) {\n        context.report({\n          node: closingCurlyToken,\n          messageId: 'singleLineClose',\n          fix: fixer => fixer.insertTextBefore(closingCurlyToken, '\\n')\n        });\n      }\n    }\n    return Object.assign(Object.assign({}, rules), {\n      'TSInterfaceBody, TSModuleBlock'(node) {\n        const openingCurly = sourceCode.getFirstToken(node);\n        const closingCurly = sourceCode.getLastToken(node);\n        validateCurlyPair(openingCurly, closingCurly);\n      },\n      TSEnumDeclaration(node) {\n        const closingCurly = sourceCode.getLastToken(node);\n        const openingCurly = sourceCode.getTokenBefore(node.members.length ? node.members[0] : closingCurly);\n        validateCurlyPair(openingCurly, closingCurly);\n      }\n    });\n  }\n});","map":{"version":3,"names":["util_1","require","getESLintCoreRule_1","baseRule","getESLintCoreRule","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","messages","fixable","hasSuggestions","schema","defaultOptions","create","context","style","allowSingleLine","options","isAllmanStyle","sourceCode","getSourceCode","rules","validateCurlyPair","openingCurlyToken","closingCurlyToken","isTokenOnSameLine","tokenBeforeOpeningCurly","getTokenBefore","tokenBeforeClosingCurly","tokenAfterOpeningCurly","getTokenAfter","report","node","messageId","fix","fixer","textRange","range","textBetween","text","slice","trim","replaceTextRange","insertTextBefore","insertTextAfter","Object","assign","TSInterfaceBody, TSModuleBlock","openingCurly","getFirstToken","closingCurly","getLastToken","TSEnumDeclaration","members","length"],"sources":["../../src/rules/brace-style.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}