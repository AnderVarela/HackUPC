{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst check = require('check-types');\nconst bfj = require('../src');\nconst inPath = getDataPath('.json');\nlet time = process.hrtime();\nif (process.argv.length === 4) {\n  const stuff = [];\n  const stream = bfj.match(fs.createReadStream(inPath), process.argv[3]);\n  stream.on('data', thing => stuff.push(thing));\n  stream.on('end', () => {\n    reportTime();\n    console.log('hooray!', stuff.length);\n    fs.writeFileSync(getDataPath('-result.ndjson'), stuff.map(s => JSON.stringify(s)).join('\\n'), {\n      encoding: 'utf8'\n    });\n    process.exit(0);\n  });\n  stream.on('error', error => {\n    console.error('error!', error.stack);\n    process.exit(1);\n  });\n  stream.on('dataError', error => {\n    console.error('dataError!', error.stack);\n    process.exit(2);\n  });\n} else {\n  console.log('reading json');\n  bfj.read(inPath).then(data => {\n    reportTime();\n    console.log('writing json');\n    return bfj.write(getDataPath('-result.json'), data);\n  }).then(() => done('succeeded')).catch(error => done(error.stack, 1));\n}\nfunction getDataPath(suffix) {\n  return path.resolve(__dirname, process.argv[2] + suffix);\n}\nfunction reportTime() {\n  let interimTime = process.hrtime(time);\n  console.log('%d seconds and %d nanoseconds', interimTime[0], interimTime[1]);\n  time = process.hrtime();\n}\nfunction done(message, code) {\n  reportTime();\n  console.log(message);\n  process.exit(code);\n}","map":{"version":3,"names":["fs","require","path","check","bfj","inPath","getDataPath","time","process","hrtime","argv","length","stuff","stream","match","createReadStream","on","thing","push","reportTime","console","log","writeFileSync","map","s","JSON","stringify","join","encoding","exit","error","stack","read","then","data","write","done","catch","suffix","resolve","__dirname","interimTime","message","code"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/bfj/test/performance.js"],"sourcesContent":["#!/usr/bin/env node\n\n'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\nconst check = require('check-types')\nconst bfj = require('../src')\n\nconst inPath = getDataPath('.json');\n\nlet time = process.hrtime()\n\nif (process.argv.length === 4) {\n  const stuff = []\n  const stream = bfj.match(fs.createReadStream(inPath), process.argv[3])\n  stream.on('data', thing => stuff.push(thing))\n  stream.on('end', () => {\n    reportTime()\n    console.log('hooray!', stuff.length)\n    fs.writeFileSync(getDataPath('-result.ndjson'), stuff.map(s => JSON.stringify(s)).join('\\n'), {\n      encoding: 'utf8',\n    })\n    process.exit(0)\n  })\n  stream.on('error', error => {\n    console.error('error!', error.stack)\n    process.exit(1)\n  })\n  stream.on('dataError', error => {\n    console.error('dataError!', error.stack)\n    process.exit(2)\n  })\n} else {\n  console.log('reading json')\n  bfj.read(inPath)\n    .then(data => {\n      reportTime()\n      console.log('writing json')\n      return bfj.write(getDataPath('-result.json'), data)\n    })\n    .then(() => done('succeeded'))\n    .catch(error => done(error.stack, 1))\n}\n\nfunction getDataPath (suffix) {\n  return path.resolve(__dirname, process.argv[2] + suffix)\n}\n\nfunction reportTime () {\n  let interimTime = process.hrtime(time)\n  console.log('%d seconds and %d nanoseconds', interimTime[0], interimTime[1])\n  time = process.hrtime()\n}\n\nfunction done (message, code) {\n  reportTime()\n  console.log(message)\n  process.exit(code)\n}\n\n"],"mappings":"AAAA;AAEA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,KAAK,GAAGF,OAAO,CAAC,aAAa,CAAC;AACpC,MAAMG,GAAG,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAE7B,MAAMI,MAAM,GAAGC,WAAW,CAAC,OAAO,CAAC;AAEnC,IAAIC,IAAI,GAAGC,OAAO,CAACC,MAAM,CAAC,CAAC;AAE3B,IAAID,OAAO,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;EAC7B,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,MAAM,GAAGT,GAAG,CAACU,KAAK,CAACd,EAAE,CAACe,gBAAgB,CAACV,MAAM,CAAC,EAAEG,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;EACtEG,MAAM,CAACG,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAIL,KAAK,CAACM,IAAI,CAACD,KAAK,CAAC,CAAC;EAC7CJ,MAAM,CAACG,EAAE,CAAC,KAAK,EAAE,MAAM;IACrBG,UAAU,CAAC,CAAC;IACZC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAET,KAAK,CAACD,MAAM,CAAC;IACpCX,EAAE,CAACsB,aAAa,CAAChB,WAAW,CAAC,gBAAgB,CAAC,EAAEM,KAAK,CAACW,GAAG,CAACC,CAAC,IAAIC,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,EAAE;MAC5FC,QAAQ,EAAE;IACZ,CAAC,CAAC;IACFpB,OAAO,CAACqB,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;EACFhB,MAAM,CAACG,EAAE,CAAC,OAAO,EAAEc,KAAK,IAAI;IAC1BV,OAAO,CAACU,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACC,KAAK,CAAC;IACpCvB,OAAO,CAACqB,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;EACFhB,MAAM,CAACG,EAAE,CAAC,WAAW,EAAEc,KAAK,IAAI;IAC9BV,OAAO,CAACU,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACC,KAAK,CAAC;IACxCvB,OAAO,CAACqB,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;AACJ,CAAC,MAAM;EACLT,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC3BjB,GAAG,CAAC4B,IAAI,CAAC3B,MAAM,CAAC,CACb4B,IAAI,CAACC,IAAI,IAAI;IACZf,UAAU,CAAC,CAAC;IACZC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B,OAAOjB,GAAG,CAAC+B,KAAK,CAAC7B,WAAW,CAAC,cAAc,CAAC,EAAE4B,IAAI,CAAC;EACrD,CAAC,CAAC,CACDD,IAAI,CAAC,MAAMG,IAAI,CAAC,WAAW,CAAC,CAAC,CAC7BC,KAAK,CAACP,KAAK,IAAIM,IAAI,CAACN,KAAK,CAACC,KAAK,EAAE,CAAC,CAAC,CAAC;AACzC;AAEA,SAASzB,WAAWA,CAAEgC,MAAM,EAAE;EAC5B,OAAOpC,IAAI,CAACqC,OAAO,CAACC,SAAS,EAAEhC,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC,GAAG4B,MAAM,CAAC;AAC1D;AAEA,SAASnB,UAAUA,CAAA,EAAI;EACrB,IAAIsB,WAAW,GAAGjC,OAAO,CAACC,MAAM,CAACF,IAAI,CAAC;EACtCa,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEoB,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,CAAC;EAC5ElC,IAAI,GAAGC,OAAO,CAACC,MAAM,CAAC,CAAC;AACzB;AAEA,SAAS2B,IAAIA,CAAEM,OAAO,EAAEC,IAAI,EAAE;EAC5BxB,UAAU,CAAC,CAAC;EACZC,OAAO,CAACC,GAAG,CAACqB,OAAO,CAAC;EACpBlC,OAAO,CAACqB,IAAI,CAACc,IAAI,CAAC;AACpB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}