{"ast":null,"code":"/*:nodoc:*\n * class ActionStore\n *\n * This action just stores the argument’s value. This is the default action.\n *\n * This class inherited from [[Action]]\n *\n **/\n'use strict';\n\nvar util = require('util');\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n/*:nodoc:*\n * new ActionStore(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nvar ActionStore = module.exports = function ActionStore(options) {\n  options = options || {};\n  if (this.nargs <= 0) {\n    throw new Error('nargs for store actions must be > 0; if you ' + 'have nothing to store, actions such as store ' + 'true or store const may be more appropriate');\n  }\n  if (typeof this.constant !== 'undefined' && this.nargs !== c.OPTIONAL) {\n    throw new Error('nargs must be OPTIONAL to supply const');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionStore, Action);\n\n/*:nodoc:*\n * ActionStore#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionStore.prototype.call = function (parser, namespace, values) {\n  namespace.set(this.dest, values);\n};","map":{"version":3,"names":["util","require","Action","c","ActionStore","module","exports","options","nargs","Error","constant","OPTIONAL","call","inherits","prototype","parser","namespace","values","set","dest"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/argparse/lib/action/store.js"],"sourcesContent":["/*:nodoc:*\n * class ActionStore\n *\n * This action just stores the argument’s value. This is the default action.\n *\n * This class inherited from [[Action]]\n *\n **/\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n\n/*:nodoc:*\n * new ActionStore(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nvar ActionStore = module.exports = function ActionStore(options) {\n  options = options || {};\n  if (this.nargs <= 0) {\n    throw new Error('nargs for store actions must be > 0; if you ' +\n        'have nothing to store, actions such as store ' +\n        'true or store const may be more appropriate');\n\n  }\n  if (typeof this.constant !== 'undefined' && this.nargs !== c.OPTIONAL) {\n    throw new Error('nargs must be OPTIONAL to supply const');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionStore, Action);\n\n/*:nodoc:*\n * ActionStore#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionStore.prototype.call = function (parser, namespace, values) {\n  namespace.set(this.dest, values);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;;AAEjC;AACA,IAAIE,CAAC,GAAGF,OAAO,CAAC,UAAU,CAAC;;AAG3B;AACA;AACA;AACA;AACA;AACA,IAAIG,WAAW,GAAGC,MAAM,CAACC,OAAO,GAAG,SAASF,WAAWA,CAACG,OAAO,EAAE;EAC/DA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAI,IAAI,CAACC,KAAK,IAAI,CAAC,EAAE;IACnB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,GAC1D,+CAA+C,GAC/C,6CAA6C,CAAC;EAEpD;EACA,IAAI,OAAO,IAAI,CAACC,QAAQ,KAAK,WAAW,IAAI,IAAI,CAACF,KAAK,KAAKL,CAAC,CAACQ,QAAQ,EAAE;IACrE,MAAM,IAAIF,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EACAP,MAAM,CAACU,IAAI,CAAC,IAAI,EAAEL,OAAO,CAAC;AAC5B,CAAC;AACDP,IAAI,CAACa,QAAQ,CAACT,WAAW,EAAEF,MAAM,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,WAAW,CAACU,SAAS,CAACF,IAAI,GAAG,UAAUG,MAAM,EAAEC,SAAS,EAAEC,MAAM,EAAE;EAChED,SAAS,CAACE,GAAG,CAAC,IAAI,CAACC,IAAI,EAAEF,MAAM,CAAC;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}