{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'prefer-namespace-keyword',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules',\n      recommended: 'error'\n    },\n    fixable: 'code',\n    messages: {\n      useNamespace: \"Use 'namespace' instead of 'module' to declare custom TypeScript modules.\"\n    },\n    schema: []\n  },\n  defaultOptions: [],\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      TSModuleDeclaration(node) {\n        // Do nothing if the name is a string.\n        if (!node.id || node.id.type === utils_1.AST_NODE_TYPES.Literal) {\n          return;\n        }\n        // Get tokens of the declaration header.\n        const moduleType = sourceCode.getTokenBefore(node.id);\n        if (moduleType && moduleType.type === utils_1.AST_TOKEN_TYPES.Identifier && moduleType.value === 'module') {\n          context.report({\n            node,\n            messageId: 'useNamespace',\n            fix(fixer) {\n              return fixer.replaceText(moduleType, 'namespace');\n            }\n          });\n        }\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","exports","default","createRule","name","meta","type","docs","description","recommended","fixable","messages","useNamespace","schema","defaultOptions","create","context","sourceCode","getSourceCode","TSModuleDeclaration","node","id","AST_NODE_TYPES","Literal","moduleType","getTokenBefore","AST_TOKEN_TYPES","Identifier","value","report","messageId","fix","fixer","replaceText"],"sources":["../../src/rules/prefer-namespace-keyword.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AAEAG,OAAA,CAAAC,OAAA,GAAeH,IAAI,CAACI,UAAU,CAAC;EAC7BC,IAAI,EAAE,0BAA0B;EAChCC,IAAI,EAAE;IACJC,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE;MACJC,WAAW,EACT,8FAA8F;MAChGC,WAAW,EAAE;KACd;IACDC,OAAO,EAAE,MAAM;IACfC,QAAQ,EAAE;MACRC,YAAY,EACV;KACH;IACDC,MAAM,EAAE;GACT;EACDC,cAAc,EAAE,EAAE;EAClBC,MAAMA,CAACC,OAAO;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,EAAE;IAE1C,OAAO;MACLC,mBAAmBA,CAACC,IAAI;QACtB;QACA,IAAI,CAACA,IAAI,CAACC,EAAE,IAAID,IAAI,CAACC,EAAE,CAACf,IAAI,KAAKT,OAAA,CAAAyB,cAAc,CAACC,OAAO,EAAE;UACvD;;QAEF;QACA,MAAMC,UAAU,GAAGP,UAAU,CAACQ,cAAc,CAACL,IAAI,CAACC,EAAE,CAAC;QAErD,IACEG,UAAU,IACVA,UAAU,CAAClB,IAAI,KAAKT,OAAA,CAAA6B,eAAe,CAACC,UAAU,IAC9CH,UAAU,CAACI,KAAK,KAAK,QAAQ,EAC7B;UACAZ,OAAO,CAACa,MAAM,CAAC;YACbT,IAAI;YACJU,SAAS,EAAE,cAAc;YACzBC,GAAGA,CAACC,KAAK;cACP,OAAOA,KAAK,CAACC,WAAW,CAACT,UAAU,EAAE,WAAW,CAAC;YACnD;WACD,CAAC;;MAEN;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}