{"ast":null,"code":"/** internal\n * class ActionSubparsers\n *\n * Support the creation of such sub-commands with the addSubparsers()\n *\n * This class inherited from [[Action]]\n **/\n'use strict';\n\nvar util = require('util');\nvar format = require('util').format;\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n// Errors\nvar argumentErrorHelper = require('../argument/error');\n\n/*:nodoc:*\n * new ChoicesPseudoAction(name, help)\n *\n * Create pseudo action for correct help text\n *\n **/\nfunction ChoicesPseudoAction(name, help) {\n  var options = {\n    optionStrings: [],\n    dest: name,\n    help: help\n  };\n  Action.call(this, options);\n}\nutil.inherits(ChoicesPseudoAction, Action);\n\n/**\n * new ActionSubparsers(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nfunction ActionSubparsers(options) {\n  options = options || {};\n  options.dest = options.dest || c.SUPPRESS;\n  options.nargs = c.PARSER;\n  this.debug = options.debug === true;\n  this._progPrefix = options.prog;\n  this._parserClass = options.parserClass;\n  this._nameParserMap = {};\n  this._choicesActions = [];\n  options.choices = this._nameParserMap;\n  Action.call(this, options);\n}\nutil.inherits(ActionSubparsers, Action);\n\n/*:nodoc:*\n * ActionSubparsers#addParser(name, options) -> ArgumentParser\n * - name (string): sub-command name\n * - options (object): see [[ArgumentParser.new]]\n *\n *  Note:\n *  addParser supports an additional aliases option,\n *  which allows multiple strings to refer to the same subparser.\n *  This example, like svn, aliases co as a shorthand for checkout\n *\n **/\nActionSubparsers.prototype.addParser = function (name, options) {\n  var parser;\n  var self = this;\n  options = options || {};\n  options.debug = this.debug === true;\n\n  // set program from the existing prefix\n  if (!options.prog) {\n    options.prog = this._progPrefix + ' ' + name;\n  }\n  var aliases = options.aliases || [];\n\n  // create a pseudo-action to hold the choice help\n  if (!!options.help || typeof options.help === 'string') {\n    var help = options.help;\n    delete options.help;\n    var choiceAction = new ChoicesPseudoAction(name, help);\n    this._choicesActions.push(choiceAction);\n  }\n\n  // create the parser and add it to the map\n  parser = new this._parserClass(options);\n  this._nameParserMap[name] = parser;\n\n  // make parser available under aliases also\n  aliases.forEach(function (alias) {\n    self._nameParserMap[alias] = parser;\n  });\n  return parser;\n};\nActionSubparsers.prototype._getSubactions = function () {\n  return this._choicesActions;\n};\n\n/*:nodoc:*\n * ActionSubparsers#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Parse input aguments\n **/\nActionSubparsers.prototype.call = function (parser, namespace, values) {\n  var parserName = values[0];\n  var argStrings = values.slice(1);\n\n  // set the parser name if requested\n  if (this.dest !== c.SUPPRESS) {\n    namespace[this.dest] = parserName;\n  }\n\n  // select the parser\n  if (this._nameParserMap[parserName]) {\n    parser = this._nameParserMap[parserName];\n  } else {\n    throw argumentErrorHelper(format('Unknown parser \"%s\" (choices: [%s]).', parserName, Object.keys(this._nameParserMap).join(', ')));\n  }\n\n  // parse all the remaining options into the namespace\n  parser.parseArgs(argStrings, namespace);\n};\nmodule.exports = ActionSubparsers;","map":{"version":3,"names":["util","require","format","Action","c","argumentErrorHelper","ChoicesPseudoAction","name","help","options","optionStrings","dest","call","inherits","ActionSubparsers","SUPPRESS","nargs","PARSER","debug","_progPrefix","prog","_parserClass","parserClass","_nameParserMap","_choicesActions","choices","prototype","addParser","parser","self","aliases","choiceAction","push","forEach","alias","_getSubactions","namespace","values","parserName","argStrings","slice","Object","keys","join","parseArgs","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/argparse/lib/action/subparsers.js"],"sourcesContent":["/** internal\n * class ActionSubparsers\n *\n * Support the creation of such sub-commands with the addSubparsers()\n *\n * This class inherited from [[Action]]\n **/\n'use strict';\n\nvar util    = require('util');\nvar format  = require('util').format;\n\n\nvar Action = require('../action');\n\n// Constants\nvar c = require('../const');\n\n// Errors\nvar argumentErrorHelper = require('../argument/error');\n\n\n/*:nodoc:*\n * new ChoicesPseudoAction(name, help)\n *\n * Create pseudo action for correct help text\n *\n **/\nfunction ChoicesPseudoAction(name, help) {\n  var options = {\n    optionStrings: [],\n    dest: name,\n    help: help\n  };\n\n  Action.call(this, options);\n}\n\nutil.inherits(ChoicesPseudoAction, Action);\n\n/**\n * new ActionSubparsers(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nfunction ActionSubparsers(options) {\n  options = options || {};\n  options.dest = options.dest || c.SUPPRESS;\n  options.nargs = c.PARSER;\n\n  this.debug = (options.debug === true);\n\n  this._progPrefix = options.prog;\n  this._parserClass = options.parserClass;\n  this._nameParserMap = {};\n  this._choicesActions = [];\n\n  options.choices = this._nameParserMap;\n  Action.call(this, options);\n}\n\nutil.inherits(ActionSubparsers, Action);\n\n/*:nodoc:*\n * ActionSubparsers#addParser(name, options) -> ArgumentParser\n * - name (string): sub-command name\n * - options (object): see [[ArgumentParser.new]]\n *\n *  Note:\n *  addParser supports an additional aliases option,\n *  which allows multiple strings to refer to the same subparser.\n *  This example, like svn, aliases co as a shorthand for checkout\n *\n **/\nActionSubparsers.prototype.addParser = function (name, options) {\n  var parser;\n\n  var self = this;\n\n  options = options || {};\n\n  options.debug = (this.debug === true);\n\n  // set program from the existing prefix\n  if (!options.prog) {\n    options.prog = this._progPrefix + ' ' + name;\n  }\n\n  var aliases = options.aliases || [];\n\n  // create a pseudo-action to hold the choice help\n  if (!!options.help || typeof options.help === 'string') {\n    var help = options.help;\n    delete options.help;\n\n    var choiceAction = new ChoicesPseudoAction(name, help);\n    this._choicesActions.push(choiceAction);\n  }\n\n  // create the parser and add it to the map\n  parser = new this._parserClass(options);\n  this._nameParserMap[name] = parser;\n\n  // make parser available under aliases also\n  aliases.forEach(function (alias) {\n    self._nameParserMap[alias] = parser;\n  });\n\n  return parser;\n};\n\nActionSubparsers.prototype._getSubactions = function () {\n  return this._choicesActions;\n};\n\n/*:nodoc:*\n * ActionSubparsers#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Parse input aguments\n **/\nActionSubparsers.prototype.call = function (parser, namespace, values) {\n  var parserName = values[0];\n  var argStrings = values.slice(1);\n\n  // set the parser name if requested\n  if (this.dest !== c.SUPPRESS) {\n    namespace[this.dest] = parserName;\n  }\n\n  // select the parser\n  if (this._nameParserMap[parserName]) {\n    parser = this._nameParserMap[parserName];\n  } else {\n    throw argumentErrorHelper(format(\n      'Unknown parser \"%s\" (choices: [%s]).',\n        parserName,\n        Object.keys(this._nameParserMap).join(', ')\n    ));\n  }\n\n  // parse all the remaining options into the namespace\n  parser.parseArgs(argStrings, namespace);\n};\n\nmodule.exports = ActionSubparsers;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}