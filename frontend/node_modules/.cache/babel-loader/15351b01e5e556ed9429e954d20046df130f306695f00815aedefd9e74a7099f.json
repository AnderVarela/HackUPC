{"ast":null,"code":"const querystring = require('querystring');\n\n/**\n * @typedef {Object} AdditionalEntries\n * @property {string[]} prependEntries\n * @property {string[]} overlayEntries\n */\n\n/**\n * Creates an object that contains two entry arrays: the prependEntries and overlayEntries\n * @param {Object} optionsContainer This is the container for the options to this function\n * @param {import('../types').NormalizedPluginOptions} optionsContainer.options Configuration options for this plugin.\n * @param {import('webpack').Compiler[\"options\"][\"devServer\"]} [optionsContainer.devServer] The webpack devServer config\n * @returns {AdditionalEntries} An object that contains the Webpack entries for prepending and the overlay feature\n */\nfunction getAdditionalEntries({\n  devServer,\n  options\n}) {\n  /** @type {Record<string, string | number>} */\n  let resourceQuery = {};\n  if (devServer) {\n    const {\n      client,\n      https,\n      http2,\n      sockHost,\n      sockPath,\n      sockPort\n    } = devServer;\n    let {\n      host,\n      path,\n      port\n    } = devServer;\n    let protocol = https || http2 ? 'https' : 'http';\n    if (sockHost) host = sockHost;\n    if (sockPath) path = sockPath;\n    if (sockPort) port = sockPort;\n    if (client && client.webSocketURL != null) {\n      let parsedUrl = client.webSocketURL;\n      if (typeof parsedUrl === 'string') parsedUrl = new URL(parsedUrl);\n      let auth;\n      if (parsedUrl.username) {\n        auth = parsedUrl.username;\n        if (parsedUrl.password) {\n          auth += ':' + parsedUrl.password;\n        }\n      }\n      if (parsedUrl.hostname != null) {\n        host = [auth != null && auth, parsedUrl.hostname].filter(Boolean).join('@');\n      }\n      if (parsedUrl.pathname != null) {\n        path = parsedUrl.pathname;\n      }\n      if (parsedUrl.port != null) {\n        port = !['0', 'auto'].includes(String(parsedUrl.port)) ? parsedUrl.port : undefined;\n      }\n      if (parsedUrl.protocol != null) {\n        protocol = parsedUrl.protocol !== 'auto' ? parsedUrl.protocol.replace(':', '') : 'ws';\n      }\n    }\n    if (host) resourceQuery.sockHost = host;\n    if (path) resourceQuery.sockPath = path;\n    if (port) resourceQuery.sockPort = port;\n    resourceQuery.sockProtocol = protocol;\n  }\n  if (options.overlay) {\n    const {\n      sockHost,\n      sockPath,\n      sockPort,\n      sockProtocol\n    } = options.overlay;\n    if (sockHost) resourceQuery.sockHost = sockHost;\n    if (sockPath) resourceQuery.sockPath = sockPath;\n    if (sockPort) resourceQuery.sockPort = sockPort;\n    if (sockProtocol) resourceQuery.sockProtocol = sockProtocol;\n  }\n\n  // We don't need to URI encode the resourceQuery as it will be parsed by Webpack\n  const queryString = querystring.stringify(resourceQuery, undefined, undefined, {\n    /**\n     * @param {string} string\n     * @returns {string}\n     */\n    encodeURIComponent(string) {\n      return string;\n    }\n  });\n  const prependEntries = [\n  // React-refresh runtime\n  require.resolve('../../client/ReactRefreshEntry')];\n  const overlayEntries = [\n  // Error overlay runtime\n  options.overlay && options.overlay.entry && `${require.resolve(options.overlay.entry)}${queryString ? `?${queryString}` : ''}`].filter(Boolean);\n  return {\n    prependEntries,\n    overlayEntries\n  };\n}\nmodule.exports = getAdditionalEntries;","map":{"version":3,"names":["querystring","require","getAdditionalEntries","devServer","options","resourceQuery","client","https","http2","sockHost","sockPath","sockPort","host","path","port","protocol","webSocketURL","parsedUrl","URL","auth","username","password","hostname","filter","Boolean","join","pathname","includes","String","undefined","replace","sockProtocol","overlay","queryString","stringify","encodeURIComponent","string","prependEntries","resolve","overlayEntries","entry","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/utils/getAdditionalEntries.js"],"sourcesContent":["const querystring = require('querystring');\n\n/**\n * @typedef {Object} AdditionalEntries\n * @property {string[]} prependEntries\n * @property {string[]} overlayEntries\n */\n\n/**\n * Creates an object that contains two entry arrays: the prependEntries and overlayEntries\n * @param {Object} optionsContainer This is the container for the options to this function\n * @param {import('../types').NormalizedPluginOptions} optionsContainer.options Configuration options for this plugin.\n * @param {import('webpack').Compiler[\"options\"][\"devServer\"]} [optionsContainer.devServer] The webpack devServer config\n * @returns {AdditionalEntries} An object that contains the Webpack entries for prepending and the overlay feature\n */\nfunction getAdditionalEntries({ devServer, options }) {\n  /** @type {Record<string, string | number>} */\n  let resourceQuery = {};\n\n  if (devServer) {\n    const { client, https, http2, sockHost, sockPath, sockPort } = devServer;\n    let { host, path, port } = devServer;\n\n    let protocol = https || http2 ? 'https' : 'http';\n    if (sockHost) host = sockHost;\n    if (sockPath) path = sockPath;\n    if (sockPort) port = sockPort;\n\n    if (client && client.webSocketURL != null) {\n      let parsedUrl = client.webSocketURL;\n      if (typeof parsedUrl === 'string') parsedUrl = new URL(parsedUrl);\n\n      let auth;\n      if (parsedUrl.username) {\n        auth = parsedUrl.username;\n        if (parsedUrl.password) {\n          auth += ':' + parsedUrl.password;\n        }\n      }\n\n      if (parsedUrl.hostname != null) {\n        host = [auth != null && auth, parsedUrl.hostname].filter(Boolean).join('@');\n      }\n      if (parsedUrl.pathname != null) {\n        path = parsedUrl.pathname;\n      }\n      if (parsedUrl.port != null) {\n        port = !['0', 'auto'].includes(String(parsedUrl.port)) ? parsedUrl.port : undefined;\n      }\n      if (parsedUrl.protocol != null) {\n        protocol = parsedUrl.protocol !== 'auto' ? parsedUrl.protocol.replace(':', '') : 'ws';\n      }\n    }\n\n    if (host) resourceQuery.sockHost = host;\n    if (path) resourceQuery.sockPath = path;\n    if (port) resourceQuery.sockPort = port;\n    resourceQuery.sockProtocol = protocol;\n  }\n\n  if (options.overlay) {\n    const { sockHost, sockPath, sockPort, sockProtocol } = options.overlay;\n    if (sockHost) resourceQuery.sockHost = sockHost;\n    if (sockPath) resourceQuery.sockPath = sockPath;\n    if (sockPort) resourceQuery.sockPort = sockPort;\n    if (sockProtocol) resourceQuery.sockProtocol = sockProtocol;\n  }\n\n  // We don't need to URI encode the resourceQuery as it will be parsed by Webpack\n  const queryString = querystring.stringify(resourceQuery, undefined, undefined, {\n    /**\n     * @param {string} string\n     * @returns {string}\n     */\n    encodeURIComponent(string) {\n      return string;\n    },\n  });\n\n  const prependEntries = [\n    // React-refresh runtime\n    require.resolve('../../client/ReactRefreshEntry'),\n  ];\n\n  const overlayEntries = [\n    // Error overlay runtime\n    options.overlay &&\n      options.overlay.entry &&\n      `${require.resolve(options.overlay.entry)}${queryString ? `?${queryString}` : ''}`,\n  ].filter(Boolean);\n\n  return { prependEntries, overlayEntries };\n}\n\nmodule.exports = getAdditionalEntries;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}