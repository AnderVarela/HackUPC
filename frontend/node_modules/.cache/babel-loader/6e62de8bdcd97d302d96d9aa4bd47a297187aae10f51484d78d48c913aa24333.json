{"ast":null,"code":"import { parse32F, parse64F, parse32I, parse64I, parseU32, isNanLiteral, isInfLiteral } from \"@webassemblyjs/helper-numbers\";\nimport { longNumberLiteral, floatLiteral, numberLiteral, instr } from \"./nodes\";\nexport function numberLiteralFromRaw(rawValue) {\n  var instructionType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"i32\";\n  var original = rawValue; // Remove numeric separators _\n\n  if (typeof rawValue === \"string\") {\n    rawValue = rawValue.replace(/_/g, \"\");\n  }\n  if (typeof rawValue === \"number\") {\n    return numberLiteral(rawValue, String(original));\n  } else {\n    switch (instructionType) {\n      case \"i32\":\n        {\n          return numberLiteral(parse32I(rawValue), String(original));\n        }\n      case \"u32\":\n        {\n          return numberLiteral(parseU32(rawValue), String(original));\n        }\n      case \"i64\":\n        {\n          return longNumberLiteral(parse64I(rawValue), String(original));\n        }\n      case \"f32\":\n        {\n          return floatLiteral(parse32F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n      // f64\n\n      default:\n        {\n          return floatLiteral(parse64F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n    }\n  }\n}\nexport function instruction(id) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var namedArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return instr(id, undefined, args, namedArgs);\n}\nexport function objectInstruction(id, object) {\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var namedArgs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return instr(id, object, args, namedArgs);\n}\n/**\n * Decorators\n */\n\nexport function withLoc(n, end, start) {\n  var loc = {\n    start: start,\n    end: end\n  };\n  n.loc = loc;\n  return n;\n}\nexport function withRaw(n, raw) {\n  n.raw = raw;\n  return n;\n}\nexport function funcParam(valtype, id) {\n  return {\n    id: id,\n    valtype: valtype\n  };\n}\nexport function indexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}\nexport function memIndexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}","map":{"version":3,"names":["parse32F","parse64F","parse32I","parse64I","parseU32","isNanLiteral","isInfLiteral","longNumberLiteral","floatLiteral","numberLiteral","instr","numberLiteralFromRaw","rawValue","instructionType","arguments","length","undefined","original","replace","String","instruction","id","args","namedArgs","objectInstruction","object","withLoc","n","end","start","loc","withRaw","raw","funcParam","valtype","indexLiteral","value","x","memIndexLiteral"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@webassemblyjs/ast/esm/node-helpers.js"],"sourcesContent":["import { parse32F, parse64F, parse32I, parse64I, parseU32, isNanLiteral, isInfLiteral } from \"@webassemblyjs/helper-numbers\";\nimport { longNumberLiteral, floatLiteral, numberLiteral, instr } from \"./nodes\";\nexport function numberLiteralFromRaw(rawValue) {\n  var instructionType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"i32\";\n  var original = rawValue; // Remove numeric separators _\n\n  if (typeof rawValue === \"string\") {\n    rawValue = rawValue.replace(/_/g, \"\");\n  }\n\n  if (typeof rawValue === \"number\") {\n    return numberLiteral(rawValue, String(original));\n  } else {\n    switch (instructionType) {\n      case \"i32\":\n        {\n          return numberLiteral(parse32I(rawValue), String(original));\n        }\n\n      case \"u32\":\n        {\n          return numberLiteral(parseU32(rawValue), String(original));\n        }\n\n      case \"i64\":\n        {\n          return longNumberLiteral(parse64I(rawValue), String(original));\n        }\n\n      case \"f32\":\n        {\n          return floatLiteral(parse32F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n      // f64\n\n      default:\n        {\n          return floatLiteral(parse64F(rawValue), isNanLiteral(rawValue), isInfLiteral(rawValue), String(original));\n        }\n    }\n  }\n}\nexport function instruction(id) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var namedArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return instr(id, undefined, args, namedArgs);\n}\nexport function objectInstruction(id, object) {\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var namedArgs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return instr(id, object, args, namedArgs);\n}\n/**\n * Decorators\n */\n\nexport function withLoc(n, end, start) {\n  var loc = {\n    start: start,\n    end: end\n  };\n  n.loc = loc;\n  return n;\n}\nexport function withRaw(n, raw) {\n  n.raw = raw;\n  return n;\n}\nexport function funcParam(valtype, id) {\n  return {\n    id: id,\n    valtype: valtype\n  };\n}\nexport function indexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}\nexport function memIndexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}