{"ast":null,"code":"\"use strict\";\n\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {import(\"source-map\").SourceMapGenerator} SourceMapGenerator */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/** @typedef {import(\"postcss\").ProcessOptions} ProcessOptions */\n\n/** @typedef {import(\"postcss\").Postcss} Postcss */\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve(result);\n        return;\n      }\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n      task().then(onFulfilled, reject);\n    };\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\nasync function cssnanoMinify(input, sourceMap, minimizerOptions = {\n  preset: \"default\"\n}) {\n  /**\n   * @template T\n   * @param {string} module\n   * @returns {Promise<T>}\n   */\n  const load = async module => {\n    let exports;\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      exports = require(module);\n      return exports;\n    } catch (requireError) {\n      let importESM;\n      try {\n        // eslint-disable-next-line no-new-func\n        importESM = new Function(\"id\", \"return import(id);\");\n      } catch (e) {\n        importESM = null;\n      }\n      if ( /** @type {Error & {code: string}} */\n      requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n        exports = await importESM(module);\n        return exports.default;\n      }\n      throw requireError;\n    }\n  };\n  const [[name, code]] = Object.entries(input);\n  /** @type {ProcessOptions} */\n\n  const postcssOptions = {\n    from: name,\n    ...minimizerOptions.processorOptions\n  };\n  if (typeof postcssOptions.parser === \"string\") {\n    try {\n      postcssOptions.parser = await load(postcssOptions.parser);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.parser}\" parser failed: ${\n      /** @type {Error} */error.message}\\n\\n(@${name})`);\n    }\n  }\n  if (typeof postcssOptions.stringifier === \"string\") {\n    try {\n      postcssOptions.stringifier = await load(postcssOptions.stringifier);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.stringifier}\" stringifier failed: ${\n      /** @type {Error} */error.message}\\n\\n(@${name})`);\n    }\n  }\n  if (typeof postcssOptions.syntax === \"string\") {\n    try {\n      postcssOptions.syntax = await load(postcssOptions.syntax);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.syntax}\" syntax failed: ${\n      /** @type {Error} */error.message}\\n\\n(@${name})`);\n    }\n  }\n  if (sourceMap) {\n    postcssOptions.map = {\n      annotation: false\n    };\n  }\n  /** @type {Postcss} */\n  // eslint-disable-next-line global-require\n\n  const postcss = require(\"postcss\").default; // @ts-ignore\n  // eslint-disable-next-line global-require\n\n  const cssnano = require(\"cssnano\"); // @ts-ignore\n  // Types are broken\n\n  const result = await postcss([cssnano(minimizerOptions)]).process(code, postcssOptions);\n  return {\n    code: result.css,\n    map: result.map ? result.map.toJSON() :\n    // eslint-disable-next-line no-undefined\n    undefined,\n    warnings: result.warnings().map(String)\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\nasync function cssoMinify(input, sourceMap, minimizerOptions) {\n  // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n  const csso = require(\"csso\");\n  const [[filename, code]] = Object.entries(input);\n  const result = csso.minify(code, {\n    filename,\n    sourceMap: Boolean(sourceMap),\n    ...minimizerOptions\n  });\n  return {\n    code: result.css,\n    map: result.map ? /** @type {SourceMapGenerator & { toJSON(): RawSourceMap }} */\n    result.map.toJSON() :\n    // eslint-disable-next-line no-undefined\n    undefined\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\nasync function cleanCssMinify(input, sourceMap, minimizerOptions) {\n  // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n  const CleanCSS = require(\"clean-css\");\n  const [[name, code]] = Object.entries(input);\n  const result = await new CleanCSS({\n    sourceMap: Boolean(sourceMap),\n    ...minimizerOptions,\n    returnPromise: true\n  }).minify({\n    [name]: {\n      styles: code\n    }\n  });\n  const generatedSourceMap = result.sourceMap && /** @type {SourceMapGenerator & { toJSON(): RawSourceMap }} */\n  result.sourceMap.toJSON(); // workaround for source maps on windows\n\n  if (generatedSourceMap) {\n    // eslint-disable-next-line global-require\n    const isWindowsPathSep = require(\"path\").sep === \"\\\\\";\n    generatedSourceMap.sources = generatedSourceMap.sources.map(\n    /**\n     * @param {string} item\n     * @returns {string}\n     */\n    item => isWindowsPathSep ? item.replace(/\\\\/g, \"/\") : item);\n  }\n  return {\n    code: result.styles,\n    map: generatedSourceMap,\n    warnings: result.warnings\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = (esbuildOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      loader: \"css\",\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n  const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      return {\n        source: item.location && item.location.file,\n        // eslint-disable-next-line no-undefined\n        line: item.location && item.location.line ? item.location.line : undefined,\n        // eslint-disable-next-line no-undefined\n        column: item.location && item.location.column ? item.location.column : undefined,\n        plugin: item.pluginName,\n        message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n      };\n    }) : []\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\nasync function parcelCssMinify(input, sourceMap, minimizerOptions) {\n  const [[filename, code]] = Object.entries(input);\n  /**\n   * @param {Partial<import(\"@parcel/css\").TransformOptions>} [parcelCssOptions={}]\n   * @returns {import(\"@parcel/css\").TransformOptions}\n   */\n\n  const buildParcelCssOptions = (parcelCssOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      minify: true,\n      ...parcelCssOptions,\n      sourceMap: false,\n      filename,\n      code: Buffer.from(code)\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n  const parcelCss = require(\"@parcel/css\"); // Copy `esbuild` options\n\n  const parcelCssOptions = buildParcelCssOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    parcelCssOptions.sourceMap = true;\n  }\n  const result = await parcelCss.transform(parcelCssOptions);\n  return {\n    code: result.code.toString(),\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map.toString()) : undefined\n  };\n}\nmodule.exports = {\n  throttleAll,\n  cssnanoMinify,\n  cssoMinify,\n  cleanCssMinify,\n  esbuildMinify,\n  parcelCssMinify\n};","map":{"version":3,"names":["notSettled","Symbol","throttleAll","limit","tasks","Number","isInteger","TypeError","Array","isArray","every","task","Promise","resolve","reject","result","length","fill","entries","next","done","value","isLast","includes","index","onFulfilled","x","then","forEach","cssnanoMinify","input","sourceMap","minimizerOptions","preset","load","module","exports","require","requireError","importESM","Function","e","code","default","name","Object","postcssOptions","from","processorOptions","parser","error","Error","message","stringifier","syntax","map","annotation","postcss","cssnano","process","css","toJSON","undefined","warnings","String","cssoMinify","csso","filename","minify","Boolean","cleanCssMinify","CleanCSS","returnPromise","styles","generatedSourceMap","isWindowsPathSep","sep","sources","item","replace","esbuildMinify","buildEsbuildOptions","esbuildOptions","loader","legalComments","sourcemap","esbuild","sourcesContent","sourcefile","transform","JSON","parse","source","location","file","line","column","plugin","pluginName","text","detail","notes","note","suggestion","lineText","join","parcelCssMinify","buildParcelCssOptions","parcelCssOptions","Buffer","parcelCss","toString"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/css-minimizer-webpack-plugin/dist/utils.js"],"sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {import(\"source-map\").SourceMapGenerator} SourceMapGenerator */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/** @typedef {import(\"postcss\").ProcessOptions} ProcessOptions */\n\n/** @typedef {import(\"postcss\").Postcss} Postcss */\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve(result);\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function cssnanoMinify(input, sourceMap, minimizerOptions = {\n  preset: \"default\"\n}) {\n  /**\n   * @template T\n   * @param {string} module\n   * @returns {Promise<T>}\n   */\n  const load = async module => {\n    let exports;\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      exports = require(module);\n      return exports;\n    } catch (requireError) {\n      let importESM;\n\n      try {\n        // eslint-disable-next-line no-new-func\n        importESM = new Function(\"id\", \"return import(id);\");\n      } catch (e) {\n        importESM = null;\n      }\n\n      if (\n      /** @type {Error & {code: string}} */\n      requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n        exports = await importESM(module);\n        return exports.default;\n      }\n\n      throw requireError;\n    }\n  };\n\n  const [[name, code]] = Object.entries(input);\n  /** @type {ProcessOptions} */\n\n  const postcssOptions = {\n    from: name,\n    ...minimizerOptions.processorOptions\n  };\n\n  if (typeof postcssOptions.parser === \"string\") {\n    try {\n      postcssOptions.parser = await load(postcssOptions.parser);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.parser}\" parser failed: ${\n      /** @type {Error} */\n      error.message}\\n\\n(@${name})`);\n    }\n  }\n\n  if (typeof postcssOptions.stringifier === \"string\") {\n    try {\n      postcssOptions.stringifier = await load(postcssOptions.stringifier);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.stringifier}\" stringifier failed: ${\n      /** @type {Error} */\n      error.message}\\n\\n(@${name})`);\n    }\n  }\n\n  if (typeof postcssOptions.syntax === \"string\") {\n    try {\n      postcssOptions.syntax = await load(postcssOptions.syntax);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.syntax}\" syntax failed: ${\n      /** @type {Error} */\n      error.message}\\n\\n(@${name})`);\n    }\n  }\n\n  if (sourceMap) {\n    postcssOptions.map = {\n      annotation: false\n    };\n  }\n  /** @type {Postcss} */\n  // eslint-disable-next-line global-require\n\n\n  const postcss = require(\"postcss\").default; // @ts-ignore\n  // eslint-disable-next-line global-require\n\n\n  const cssnano = require(\"cssnano\"); // @ts-ignore\n  // Types are broken\n\n\n  const result = await postcss([cssnano(minimizerOptions)]).process(code, postcssOptions);\n  return {\n    code: result.css,\n    map: result.map ? result.map.toJSON() : // eslint-disable-next-line no-undefined\n    undefined,\n    warnings: result.warnings().map(String)\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function cssoMinify(input, sourceMap, minimizerOptions) {\n  // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n  const csso = require(\"csso\");\n\n  const [[filename, code]] = Object.entries(input);\n  const result = csso.minify(code, {\n    filename,\n    sourceMap: Boolean(sourceMap),\n    ...minimizerOptions\n  });\n  return {\n    code: result.css,\n    map: result.map ?\n    /** @type {SourceMapGenerator & { toJSON(): RawSourceMap }} */\n    result.map.toJSON() : // eslint-disable-next-line no-undefined\n    undefined\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function cleanCssMinify(input, sourceMap, minimizerOptions) {\n  // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n  const CleanCSS = require(\"clean-css\");\n\n  const [[name, code]] = Object.entries(input);\n  const result = await new CleanCSS({\n    sourceMap: Boolean(sourceMap),\n    ...minimizerOptions,\n    returnPromise: true\n  }).minify({\n    [name]: {\n      styles: code\n    }\n  });\n  const generatedSourceMap = result.sourceMap &&\n  /** @type {SourceMapGenerator & { toJSON(): RawSourceMap }} */\n  result.sourceMap.toJSON(); // workaround for source maps on windows\n\n  if (generatedSourceMap) {\n    // eslint-disable-next-line global-require\n    const isWindowsPathSep = require(\"path\").sep === \"\\\\\";\n    generatedSourceMap.sources = generatedSourceMap.sources.map(\n    /**\n     * @param {string} item\n     * @returns {string}\n     */\n    item => isWindowsPathSep ? item.replace(/\\\\/g, \"/\") : item);\n  }\n\n  return {\n    code: result.styles,\n    map: generatedSourceMap,\n    warnings: result.warnings\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = (esbuildOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      loader: \"css\",\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      return {\n        source: item.location && item.location.file,\n        // eslint-disable-next-line no-undefined\n        line: item.location && item.location.line ? item.location.line : undefined,\n        // eslint-disable-next-line no-undefined\n        column: item.location && item.location.column ? item.location.column : undefined,\n        plugin: item.pluginName,\n        message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n      };\n    }) : []\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function parcelCssMinify(input, sourceMap, minimizerOptions) {\n  const [[filename, code]] = Object.entries(input);\n  /**\n   * @param {Partial<import(\"@parcel/css\").TransformOptions>} [parcelCssOptions={}]\n   * @returns {import(\"@parcel/css\").TransformOptions}\n   */\n\n  const buildParcelCssOptions = (parcelCssOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      minify: true,\n      ...parcelCssOptions,\n      sourceMap: false,\n      filename,\n      code: Buffer.from(code)\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const parcelCss = require(\"@parcel/css\"); // Copy `esbuild` options\n\n\n  const parcelCssOptions = buildParcelCssOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    parcelCssOptions.sourceMap = true;\n  }\n\n  const result = await parcelCss.transform(parcelCssOptions);\n  return {\n    code: result.code.toString(),\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map.toString()) : undefined\n  };\n}\n\nmodule.exports = {\n  throttleAll,\n  cssnanoMinify,\n  cssoMinify,\n  cleanCssMinify,\n  esbuildMinify,\n  parcelCssMinify\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}