{"ast":null,"code":"const {\n  getRefreshGlobalScope\n} = require('../globals');\n\n/**\n * @typedef {Object} RuntimeTemplate\n * @property {function(string, string[]): string} basicFunction\n * @property {function(): boolean} supportsConst\n * @property {function(string, string=): string} returningFunction\n */\n\n/**\n * Generates the refresh global runtime template.\n * @param {import('webpack').Template} Template The template helpers.\n * @param {Record<string, string>} [RuntimeGlobals] The runtime globals.\n * @param {RuntimeTemplate} [RuntimeTemplate] The runtime template helpers.\n * @returns {string} The refresh global runtime template.\n */\nfunction getRefreshGlobal(Template, RuntimeGlobals = {}, RuntimeTemplate = {\n  basicFunction(args, body) {\n    return `function(${args}) {\\n${Template.indent(body)}\\n}`;\n  },\n  supportsConst() {\n    return false;\n  },\n  returningFunction(returnValue, args = '') {\n    return `function(${args}) { return ${returnValue}; }`;\n  }\n}) {\n  const declaration = RuntimeTemplate.supportsConst() ? 'const' : 'var';\n  const refreshGlobal = getRefreshGlobalScope(RuntimeGlobals);\n  return Template.asString([`${refreshGlobal} = {`, Template.indent([\n  // Lifecycle methods - They should be specific per module and restored after module execution.\n  // These stubs ensure unwanted calls (e.g. unsupported patterns, broken transform) would not error out.\n  // If the current module is processed by our loader,\n  // they will be swapped in place during module initialisation by the `setup` method below.\n  `register: ${RuntimeTemplate.returningFunction('undefined')},`, `signature: ${RuntimeTemplate.returningFunction(RuntimeTemplate.returningFunction('type', 'type'))},`,\n  // Runtime - This should be a singleton and persist throughout the lifetime of the app.\n  // This stub ensures calls to `runtime` would not error out.\n  // If any module within the bundle is processed by our loader,\n  // it will be swapped in place via an injected import.\n  'runtime: {', Template.indent([`createSignatureFunctionForTransform: ${RuntimeTemplate.returningFunction(RuntimeTemplate.returningFunction('type', 'type'))},`, `register: ${RuntimeTemplate.returningFunction('undefined')}`]), '},',\n  // Setup - This handles initialisation of the global runtime.\n  // It should never be touched throughout the lifetime of the app.\n  `setup: ${RuntimeTemplate.basicFunction('currentModuleId', [\n  // Store all previous values for fields on `refreshGlobal` -\n  // this allows proper restoration in the `cleanup` phase.\n  `${declaration} prevModuleId = ${refreshGlobal}.moduleId;`, `${declaration} prevRegister = ${refreshGlobal}.register;`, `${declaration} prevSignature = ${refreshGlobal}.signature;`, `${declaration} prevCleanup = ${refreshGlobal}.cleanup;`, '', `${refreshGlobal}.moduleId = currentModuleId;`, '', `${refreshGlobal}.register = ${RuntimeTemplate.basicFunction('type, id', [`${declaration} typeId = currentModuleId + \" \" + id;`, `${refreshGlobal}.runtime.register(type, typeId);`])}`, '', `${refreshGlobal}.signature = ${RuntimeTemplate.returningFunction(`${refreshGlobal}.runtime.createSignatureFunctionForTransform()`)};`, '', `${refreshGlobal}.cleanup = ${RuntimeTemplate.basicFunction('cleanupModuleId', [\n  // Only cleanup if the module IDs match.\n  // In rare cases, it might get called in another module's `cleanup` phase.\n  'if (currentModuleId === cleanupModuleId) {', Template.indent([`${refreshGlobal}.moduleId = prevModuleId;`, `${refreshGlobal}.register = prevRegister;`, `${refreshGlobal}.signature = prevSignature;`, `${refreshGlobal}.cleanup = prevCleanup;`]), '}'])}`])}`]), '};']);\n}\nmodule.exports = getRefreshGlobal;","map":{"version":3,"names":["getRefreshGlobalScope","require","getRefreshGlobal","Template","RuntimeGlobals","RuntimeTemplate","basicFunction","args","body","indent","supportsConst","returningFunction","returnValue","declaration","refreshGlobal","asString","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/utils/getRefreshGlobal.js"],"sourcesContent":["const { getRefreshGlobalScope } = require('../globals');\n\n/**\n * @typedef {Object} RuntimeTemplate\n * @property {function(string, string[]): string} basicFunction\n * @property {function(): boolean} supportsConst\n * @property {function(string, string=): string} returningFunction\n */\n\n/**\n * Generates the refresh global runtime template.\n * @param {import('webpack').Template} Template The template helpers.\n * @param {Record<string, string>} [RuntimeGlobals] The runtime globals.\n * @param {RuntimeTemplate} [RuntimeTemplate] The runtime template helpers.\n * @returns {string} The refresh global runtime template.\n */\nfunction getRefreshGlobal(\n  Template,\n  RuntimeGlobals = {},\n  RuntimeTemplate = {\n    basicFunction(args, body) {\n      return `function(${args}) {\\n${Template.indent(body)}\\n}`;\n    },\n    supportsConst() {\n      return false;\n    },\n    returningFunction(returnValue, args = '') {\n      return `function(${args}) { return ${returnValue}; }`;\n    },\n  }\n) {\n  const declaration = RuntimeTemplate.supportsConst() ? 'const' : 'var';\n  const refreshGlobal = getRefreshGlobalScope(RuntimeGlobals);\n  return Template.asString([\n    `${refreshGlobal} = {`,\n    Template.indent([\n      // Lifecycle methods - They should be specific per module and restored after module execution.\n      // These stubs ensure unwanted calls (e.g. unsupported patterns, broken transform) would not error out.\n      // If the current module is processed by our loader,\n      // they will be swapped in place during module initialisation by the `setup` method below.\n      `register: ${RuntimeTemplate.returningFunction('undefined')},`,\n      `signature: ${RuntimeTemplate.returningFunction(\n        RuntimeTemplate.returningFunction('type', 'type')\n      )},`,\n      // Runtime - This should be a singleton and persist throughout the lifetime of the app.\n      // This stub ensures calls to `runtime` would not error out.\n      // If any module within the bundle is processed by our loader,\n      // it will be swapped in place via an injected import.\n      'runtime: {',\n      Template.indent([\n        `createSignatureFunctionForTransform: ${RuntimeTemplate.returningFunction(\n          RuntimeTemplate.returningFunction('type', 'type')\n        )},`,\n        `register: ${RuntimeTemplate.returningFunction('undefined')}`,\n      ]),\n      '},',\n      // Setup - This handles initialisation of the global runtime.\n      // It should never be touched throughout the lifetime of the app.\n      `setup: ${RuntimeTemplate.basicFunction('currentModuleId', [\n        // Store all previous values for fields on `refreshGlobal` -\n        // this allows proper restoration in the `cleanup` phase.\n        `${declaration} prevModuleId = ${refreshGlobal}.moduleId;`,\n        `${declaration} prevRegister = ${refreshGlobal}.register;`,\n        `${declaration} prevSignature = ${refreshGlobal}.signature;`,\n        `${declaration} prevCleanup = ${refreshGlobal}.cleanup;`,\n        '',\n        `${refreshGlobal}.moduleId = currentModuleId;`,\n        '',\n        `${refreshGlobal}.register = ${RuntimeTemplate.basicFunction('type, id', [\n          `${declaration} typeId = currentModuleId + \" \" + id;`,\n          `${refreshGlobal}.runtime.register(type, typeId);`,\n        ])}`,\n        '',\n        `${refreshGlobal}.signature = ${RuntimeTemplate.returningFunction(\n          `${refreshGlobal}.runtime.createSignatureFunctionForTransform()`\n        )};`,\n        '',\n        `${refreshGlobal}.cleanup = ${RuntimeTemplate.basicFunction('cleanupModuleId', [\n          // Only cleanup if the module IDs match.\n          // In rare cases, it might get called in another module's `cleanup` phase.\n          'if (currentModuleId === cleanupModuleId) {',\n          Template.indent([\n            `${refreshGlobal}.moduleId = prevModuleId;`,\n            `${refreshGlobal}.register = prevRegister;`,\n            `${refreshGlobal}.signature = prevSignature;`,\n            `${refreshGlobal}.cleanup = prevCleanup;`,\n          ]),\n          '}',\n        ])}`,\n      ])}`,\n    ]),\n    '};',\n  ]);\n}\n\nmodule.exports = getRefreshGlobal;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAsB,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CACvBC,QAAQ,EACRC,cAAc,GAAG,CAAC,CAAC,EACnBC,eAAe,GAAG;EAChBC,aAAaA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACxB,OAAQ,YAAWD,IAAK,QAAOJ,QAAQ,CAACM,MAAM,CAACD,IAAI,CAAE,KAAI;EAC3D,CAAC;EACDE,aAAaA,CAAA,EAAG;IACd,OAAO,KAAK;EACd,CAAC;EACDC,iBAAiBA,CAACC,WAAW,EAAEL,IAAI,GAAG,EAAE,EAAE;IACxC,OAAQ,YAAWA,IAAK,cAAaK,WAAY,KAAI;EACvD;AACF,CAAC,EACD;EACA,MAAMC,WAAW,GAAGR,eAAe,CAACK,aAAa,CAAC,CAAC,GAAG,OAAO,GAAG,KAAK;EACrE,MAAMI,aAAa,GAAGd,qBAAqB,CAACI,cAAc,CAAC;EAC3D,OAAOD,QAAQ,CAACY,QAAQ,CAAC,CACtB,GAAED,aAAc,MAAK,EACtBX,QAAQ,CAACM,MAAM,CAAC;EACd;EACA;EACA;EACA;EACC,aAAYJ,eAAe,CAACM,iBAAiB,CAAC,WAAW,CAAE,GAAE,EAC7D,cAAaN,eAAe,CAACM,iBAAiB,CAC7CN,eAAe,CAACM,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAClD,CAAE,GAAE;EACJ;EACA;EACA;EACA;EACA,YAAY,EACZR,QAAQ,CAACM,MAAM,CAAC,CACb,wCAAuCJ,eAAe,CAACM,iBAAiB,CACvEN,eAAe,CAACM,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAClD,CAAE,GAAE,EACH,aAAYN,eAAe,CAACM,iBAAiB,CAAC,WAAW,CAAE,EAAC,CAC9D,CAAC,EACF,IAAI;EACJ;EACA;EACC,UAASN,eAAe,CAACC,aAAa,CAAC,iBAAiB,EAAE;EACzD;EACA;EACC,GAAEO,WAAY,mBAAkBC,aAAc,YAAW,EACzD,GAAED,WAAY,mBAAkBC,aAAc,YAAW,EACzD,GAAED,WAAY,oBAAmBC,aAAc,aAAY,EAC3D,GAAED,WAAY,kBAAiBC,aAAc,WAAU,EACxD,EAAE,EACD,GAAEA,aAAc,8BAA6B,EAC9C,EAAE,EACD,GAAEA,aAAc,eAAcT,eAAe,CAACC,aAAa,CAAC,UAAU,EAAE,CACtE,GAAEO,WAAY,uCAAsC,EACpD,GAAEC,aAAc,kCAAiC,CACnD,CAAE,EAAC,EACJ,EAAE,EACD,GAAEA,aAAc,gBAAeT,eAAe,CAACM,iBAAiB,CAC9D,GAAEG,aAAc,gDACnB,CAAE,GAAE,EACJ,EAAE,EACD,GAAEA,aAAc,cAAaT,eAAe,CAACC,aAAa,CAAC,iBAAiB,EAAE;EAC7E;EACA;EACA,4CAA4C,EAC5CH,QAAQ,CAACM,MAAM,CAAC,CACb,GAAEK,aAAc,2BAA0B,EAC1C,GAAEA,aAAc,2BAA0B,EAC1C,GAAEA,aAAc,6BAA4B,EAC5C,GAAEA,aAAc,yBAAwB,CAC1C,CAAC,EACF,GAAG,CACJ,CAAE,EAAC,CACL,CAAE,EAAC,CACL,CAAC,EACF,IAAI,CACL,CAAC;AACJ;AAEAE,MAAM,CAACC,OAAO,GAAGf,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}