{"ast":null,"code":"'use strict';\n\n// This is an example of using tokens to add a custom behaviour.\n//\n// Throw an error if an option is used more than once.\n\n// 1. const { parseArgs } = require('node:util'); // from node\n// 2. const { parseArgs } = require('@pkgjs/parseargs'); // from package\nconst {\n  parseArgs\n} = require('..'); // in repo\n\nconst options = {\n  ding: {\n    type: 'boolean',\n    short: 'd'\n  },\n  beep: {\n    type: 'boolean',\n    short: 'b'\n  }\n};\nconst {\n  values,\n  tokens\n} = parseArgs({\n  options,\n  tokens: true\n});\nconst seenBefore = new Set();\ntokens.forEach(token => {\n  if (token.kind !== 'option') return;\n  if (seenBefore.has(token.name)) {\n    throw new Error(`option '${token.name}' used multiple times`);\n  }\n  seenBefore.add(token.name);\n});\nconsole.log(values);\n\n// Try the following:\n//    node no-repeated-options --ding --beep\n//    node no-repeated-options --beep -b\n//    node no-repeated-options -ddd","map":{"version":3,"names":["parseArgs","require","options","ding","type","short","beep","values","tokens","seenBefore","Set","forEach","token","kind","has","name","Error","add","console","log"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pkgjs/parseargs/examples/no-repeated-options.js"],"sourcesContent":["'use strict';\n\n// This is an example of using tokens to add a custom behaviour.\n//\n// Throw an error if an option is used more than once.\n\n// 1. const { parseArgs } = require('node:util'); // from node\n// 2. const { parseArgs } = require('@pkgjs/parseargs'); // from package\nconst { parseArgs } = require('..'); // in repo\n\nconst options = {\n  ding: { type: 'boolean', short: 'd' },\n  beep: { type: 'boolean', short: 'b' }\n};\nconst { values, tokens } = parseArgs({ options, tokens: true });\n\nconst seenBefore = new Set();\ntokens.forEach((token) => {\n  if (token.kind !== 'option') return;\n  if (seenBefore.has(token.name)) {\n    throw new Error(`option '${token.name}' used multiple times`);\n  }\n  seenBefore.add(token.name);\n});\n\nconsole.log(values);\n\n// Try the following:\n//    node no-repeated-options --ding --beep\n//    node no-repeated-options --beep -b\n//    node no-repeated-options -ddd\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;AAErC,MAAMC,OAAO,GAAG;EACdC,IAAI,EAAE;IAAEC,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAI,CAAC;EACrCC,IAAI,EAAE;IAAEF,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAI;AACtC,CAAC;AACD,MAAM;EAAEE,MAAM;EAAEC;AAAO,CAAC,GAAGR,SAAS,CAAC;EAAEE,OAAO;EAAEM,MAAM,EAAE;AAAK,CAAC,CAAC;AAE/D,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC5BF,MAAM,CAACG,OAAO,CAAEC,KAAK,IAAK;EACxB,IAAIA,KAAK,CAACC,IAAI,KAAK,QAAQ,EAAE;EAC7B,IAAIJ,UAAU,CAACK,GAAG,CAACF,KAAK,CAACG,IAAI,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAE,WAAUJ,KAAK,CAACG,IAAK,uBAAsB,CAAC;EAC/D;EACAN,UAAU,CAACQ,GAAG,CAACL,KAAK,CAACG,IAAI,CAAC;AAC5B,CAAC,CAAC;AAEFG,OAAO,CAACC,GAAG,CAACZ,MAAM,CAAC;;AAEnB;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}