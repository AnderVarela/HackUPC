{"ast":null,"code":"var async = require('./async.js'),\n  abort = require('./abort.js');\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback) {\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n  state.jobs[key] = runJob(iterator, key, list[key], function (error, output) {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs)) {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n    if (error) {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    } else {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback) {\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2) {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else {\n    aborter = iterator(item, key, async(callback));\n  }\n  return aborter;\n}","map":{"version":3,"names":["async","require","abort","module","exports","iterate","list","iterator","state","callback","key","index","jobs","runJob","error","output","results","item","aborter","length"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/asynckit/lib/iterate.js"],"sourcesContent":["var async = require('./async.js')\n  , abort = require('./abort.js')\n  ;\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback)\n{\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n  {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs))\n    {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n\n    if (error)\n    {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    }\n    else\n    {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback)\n{\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2)\n  {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else\n  {\n    aborter = iterator(item, key, async(callback));\n  }\n\n  return aborter;\n}\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;EAC7BC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAGjC;AACAE,MAAM,CAACC,OAAO,GAAGC,OAAO;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAOA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAChD;EACE;EACA,IAAIC,GAAG,GAAGF,KAAK,CAAC,WAAW,CAAC,GAAGA,KAAK,CAAC,WAAW,CAAC,CAACA,KAAK,CAACG,KAAK,CAAC,GAAGH,KAAK,CAACG,KAAK;EAE5EH,KAAK,CAACI,IAAI,CAACF,GAAG,CAAC,GAAGG,MAAM,CAACN,QAAQ,EAAEG,GAAG,EAAEJ,IAAI,CAACI,GAAG,CAAC,EAAE,UAASI,KAAK,EAAEC,MAAM,EACzE;IACE;IACA;IACA,IAAI,EAAEL,GAAG,IAAIF,KAAK,CAACI,IAAI,CAAC,EACxB;MACE;IACF;;IAEA;IACA,OAAOJ,KAAK,CAACI,IAAI,CAACF,GAAG,CAAC;IAEtB,IAAII,KAAK,EACT;MACE;MACA;MACA;MACAZ,KAAK,CAACM,KAAK,CAAC;IACd,CAAC,MAED;MACEA,KAAK,CAACQ,OAAO,CAACN,GAAG,CAAC,GAAGK,MAAM;IAC7B;;IAEA;IACAN,QAAQ,CAACK,KAAK,EAAEN,KAAK,CAACQ,OAAO,CAAC;EAChC,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,MAAMA,CAACN,QAAQ,EAAEG,GAAG,EAAEO,IAAI,EAAER,QAAQ,EAC7C;EACE,IAAIS,OAAO;;EAEX;EACA,IAAIX,QAAQ,CAACY,MAAM,IAAI,CAAC,EACxB;IACED,OAAO,GAAGX,QAAQ,CAACU,IAAI,EAAEjB,KAAK,CAACS,QAAQ,CAAC,CAAC;EAC3C;EACA;EAAA,KAEA;IACES,OAAO,GAAGX,QAAQ,CAACU,IAAI,EAAEP,GAAG,EAAEV,KAAK,CAACS,QAAQ,CAAC,CAAC;EAChD;EAEA,OAAOS,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}