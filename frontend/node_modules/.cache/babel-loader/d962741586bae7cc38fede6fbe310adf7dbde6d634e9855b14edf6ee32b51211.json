{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeSuppression = exports.deleteBulkSuppressionsFileInEslintrcFolder = exports.writeSuppressionsJsonToFile = exports.getAllBulkSuppressionsConfigsByEslintrcFolderPath = exports.getSuppressionsConfigForEslintrcFolderPath = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst constants_1 = require(\"./constants\");\nconst IS_RUNNING_IN_VSCODE = process.env[constants_1.VSCODE_PID_ENV_VAR_NAME] !== undefined;\nconst TEN_SECONDS_MS = 10 * 1000;\nconst SUPPRESSIONS_JSON_FILENAME = '.eslint-bulk-suppressions.json';\nfunction throwIfAnythingOtherThanNotExistError(e) {\n  if ((e === null || e === void 0 ? void 0 : e.code) !== 'ENOENT') {\n    // Throw an error if any other error than file not found\n    throw e;\n  }\n}\nconst suppressionsJsonByFolderPath = new Map();\nfunction getSuppressionsConfigForEslintrcFolderPath(eslintrcFolderPath) {\n  const cachedSuppressionsConfig = suppressionsJsonByFolderPath.get(eslintrcFolderPath);\n  let shouldLoad;\n  let suppressionsConfig;\n  if (cachedSuppressionsConfig) {\n    shouldLoad = IS_RUNNING_IN_VSCODE && cachedSuppressionsConfig.readTime < Date.now() - TEN_SECONDS_MS;\n    suppressionsConfig = cachedSuppressionsConfig.suppressionsConfig;\n  } else {\n    shouldLoad = true;\n  }\n  if (shouldLoad) {\n    const suppressionsPath = `${eslintrcFolderPath}/${SUPPRESSIONS_JSON_FILENAME}`;\n    let rawJsonFile;\n    try {\n      rawJsonFile = fs_1.default.readFileSync(suppressionsPath).toString();\n    } catch (e) {\n      throwIfAnythingOtherThanNotExistError(e);\n    }\n    if (!rawJsonFile) {\n      suppressionsConfig = {\n        serializedSuppressions: new Set(),\n        jsonObject: {\n          suppressions: []\n        },\n        newSerializedSuppressions: new Set(),\n        newJsonObject: {\n          suppressions: []\n        }\n      };\n    } else {\n      const jsonObject = JSON.parse(rawJsonFile);\n      validateSuppressionsJson(jsonObject);\n      const serializedSuppressions = new Set();\n      for (const suppression of jsonObject.suppressions) {\n        serializedSuppressions.add(serializeSuppression(suppression));\n      }\n      suppressionsConfig = {\n        serializedSuppressions,\n        jsonObject,\n        newSerializedSuppressions: new Set(),\n        newJsonObject: {\n          suppressions: []\n        }\n      };\n    }\n    suppressionsJsonByFolderPath.set(eslintrcFolderPath, {\n      readTime: Date.now(),\n      suppressionsConfig\n    });\n  }\n  return suppressionsConfig;\n}\nexports.getSuppressionsConfigForEslintrcFolderPath = getSuppressionsConfigForEslintrcFolderPath;\nfunction getAllBulkSuppressionsConfigsByEslintrcFolderPath() {\n  const result = [];\n  for (const [eslintrcFolderPath, {\n    suppressionsConfig\n  }] of suppressionsJsonByFolderPath) {\n    result.push([eslintrcFolderPath, suppressionsConfig]);\n  }\n  return result;\n}\nexports.getAllBulkSuppressionsConfigsByEslintrcFolderPath = getAllBulkSuppressionsConfigsByEslintrcFolderPath;\nfunction writeSuppressionsJsonToFile(eslintrcFolderPath, suppressionsConfig) {\n  suppressionsJsonByFolderPath.set(eslintrcFolderPath, {\n    readTime: Date.now(),\n    suppressionsConfig\n  });\n  const suppressionsPath = `${eslintrcFolderPath}/${SUPPRESSIONS_JSON_FILENAME}`;\n  if (suppressionsConfig.jsonObject.suppressions.length === 0) {\n    deleteFile(suppressionsPath);\n  } else {\n    suppressionsConfig.jsonObject.suppressions.sort(compareSuppressions);\n    fs_1.default.writeFileSync(suppressionsPath, JSON.stringify(suppressionsConfig.jsonObject, undefined, 2));\n  }\n}\nexports.writeSuppressionsJsonToFile = writeSuppressionsJsonToFile;\nfunction deleteBulkSuppressionsFileInEslintrcFolder(eslintrcFolderPath) {\n  const suppressionsPath = `${eslintrcFolderPath}/${SUPPRESSIONS_JSON_FILENAME}`;\n  deleteFile(suppressionsPath);\n}\nexports.deleteBulkSuppressionsFileInEslintrcFolder = deleteBulkSuppressionsFileInEslintrcFolder;\nfunction deleteFile(filePath) {\n  try {\n    fs_1.default.unlinkSync(filePath);\n  } catch (e) {\n    throwIfAnythingOtherThanNotExistError(e);\n  }\n}\nfunction serializeSuppression({\n  file,\n  scopeId,\n  rule\n}) {\n  return `${file}|${scopeId}|${rule}`;\n}\nexports.serializeSuppression = serializeSuppression;\nfunction compareSuppressions(a, b) {\n  if (a.file < b.file) {\n    return -1;\n  } else if (a.file > b.file) {\n    return 1;\n  } else if (a.scopeId < b.scopeId) {\n    return -1;\n  } else if (a.scopeId > b.scopeId) {\n    return 1;\n  } else if (a.rule < b.rule) {\n    return -1;\n  } else if (a.rule > b.rule) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\nfunction validateSuppressionsJson(json) {\n  if (typeof json !== 'object') {\n    throw new Error(`Invalid JSON object: ${JSON.stringify(json, null, 2)}`);\n  }\n  if (!json) {\n    throw new Error('JSON object is null.');\n  }\n  const EXPECTED_ROOT_PROPERTY_NAMES = new Set(['suppressions']);\n  for (const propertyName of Object.getOwnPropertyNames(json)) {\n    if (!EXPECTED_ROOT_PROPERTY_NAMES.has(propertyName)) {\n      throw new Error(`Unexpected property name: ${propertyName}`);\n    }\n  }\n  const {\n    suppressions\n  } = json;\n  if (!suppressions) {\n    throw new Error('Missing \"suppressions\" property.');\n  }\n  if (!Array.isArray(suppressions)) {\n    throw new Error('\"suppressions\" property is not an array.');\n  }\n  const EXPECTED_SUPPRESSION_PROPERTY_NAMES = new Set(['file', 'scopeId', 'rule']);\n  for (const suppression of suppressions) {\n    if (typeof suppression !== 'object') {\n      throw new Error(`Invalid suppression: ${JSON.stringify(suppression, null, 2)}`);\n    }\n    if (!suppression) {\n      throw new Error(`Suppression is null: ${JSON.stringify(suppression, null, 2)}`);\n    }\n    for (const propertyName of Object.getOwnPropertyNames(suppression)) {\n      if (!EXPECTED_SUPPRESSION_PROPERTY_NAMES.has(propertyName)) {\n        throw new Error(`Unexpected property name: ${propertyName}`);\n      }\n    }\n    for (const propertyName of EXPECTED_SUPPRESSION_PROPERTY_NAMES) {\n      if (!suppression.hasOwnProperty(propertyName)) {\n        throw new Error(`Missing \"${propertyName}\" property in suppression: ${JSON.stringify(suppression, null, 2)}`);\n      } else if (typeof suppression[propertyName] !== 'string') {\n        throw new Error(`\"${propertyName}\" property in suppression is not a string: ${JSON.stringify(suppression, null, 2)}`);\n      }\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["fs_1","__importDefault","require","constants_1","IS_RUNNING_IN_VSCODE","process","env","VSCODE_PID_ENV_VAR_NAME","undefined","TEN_SECONDS_MS","SUPPRESSIONS_JSON_FILENAME","throwIfAnythingOtherThanNotExistError","e","code","suppressionsJsonByFolderPath","Map","getSuppressionsConfigForEslintrcFolderPath","eslintrcFolderPath","cachedSuppressionsConfig","get","shouldLoad","suppressionsConfig","readTime","Date","now","suppressionsPath","rawJsonFile","default","readFileSync","toString","serializedSuppressions","Set","jsonObject","suppressions","newSerializedSuppressions","newJsonObject","JSON","parse","validateSuppressionsJson","suppression","add","serializeSuppression","set","exports","getAllBulkSuppressionsConfigsByEslintrcFolderPath","result","push","writeSuppressionsJsonToFile","length","deleteFile","sort","compareSuppressions","writeFileSync","stringify","deleteBulkSuppressionsFileInEslintrcFolder","filePath","unlinkSync","file","scopeId","rule","a","b","json","Error","EXPECTED_ROOT_PROPERTY_NAMES","propertyName","Object","getOwnPropertyNames","has","Array","isArray","EXPECTED_SUPPRESSION_PROPERTY_NAMES","hasOwnProperty"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@rushstack\\eslint-patch\\src\\eslint-bulk-suppressions\\bulk-suppressions-file.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport fs from 'fs';\nimport { VSCODE_PID_ENV_VAR_NAME } from './constants';\n\nexport interface ISuppression {\n  file: string;\n  scopeId: string;\n  rule: string;\n}\n\nexport interface IBulkSuppressionsConfig {\n  serializedSuppressions: Set<string>;\n  jsonObject: IBulkSuppressionsJson;\n  newSerializedSuppressions: Set<string>;\n  newJsonObject: IBulkSuppressionsJson;\n}\n\nexport interface IBulkSuppressionsJson {\n  suppressions: ISuppression[];\n}\n\nconst IS_RUNNING_IN_VSCODE: boolean = process.env[VSCODE_PID_ENV_VAR_NAME] !== undefined;\nconst TEN_SECONDS_MS: number = 10 * 1000;\nconst SUPPRESSIONS_JSON_FILENAME: string = '.eslint-bulk-suppressions.json';\n\nfunction throwIfAnythingOtherThanNotExistError(e: NodeJS.ErrnoException): void | never {\n  if (e?.code !== 'ENOENT') {\n    // Throw an error if any other error than file not found\n    throw e;\n  }\n}\n\ninterface ICachedBulkSuppressionsConfig {\n  readTime: number;\n  suppressionsConfig: IBulkSuppressionsConfig;\n}\nconst suppressionsJsonByFolderPath: Map<string, ICachedBulkSuppressionsConfig> = new Map();\nexport function getSuppressionsConfigForEslintrcFolderPath(\n  eslintrcFolderPath: string\n): IBulkSuppressionsConfig {\n  const cachedSuppressionsConfig: ICachedBulkSuppressionsConfig | undefined =\n    suppressionsJsonByFolderPath.get(eslintrcFolderPath);\n\n  let shouldLoad: boolean;\n  let suppressionsConfig: IBulkSuppressionsConfig;\n  if (cachedSuppressionsConfig) {\n    shouldLoad = IS_RUNNING_IN_VSCODE && cachedSuppressionsConfig.readTime < Date.now() - TEN_SECONDS_MS;\n    suppressionsConfig = cachedSuppressionsConfig.suppressionsConfig;\n  } else {\n    shouldLoad = true;\n  }\n\n  if (shouldLoad) {\n    const suppressionsPath: string = `${eslintrcFolderPath}/${SUPPRESSIONS_JSON_FILENAME}`;\n    let rawJsonFile: string | undefined;\n    try {\n      rawJsonFile = fs.readFileSync(suppressionsPath).toString();\n    } catch (e) {\n      throwIfAnythingOtherThanNotExistError(e);\n    }\n\n    if (!rawJsonFile) {\n      suppressionsConfig = {\n        serializedSuppressions: new Set(),\n        jsonObject: { suppressions: [] },\n        newSerializedSuppressions: new Set(),\n        newJsonObject: { suppressions: [] }\n      };\n    } else {\n      const jsonObject: IBulkSuppressionsJson = JSON.parse(rawJsonFile);\n      validateSuppressionsJson(jsonObject);\n\n      const serializedSuppressions: Set<string> = new Set();\n      for (const suppression of jsonObject.suppressions) {\n        serializedSuppressions.add(serializeSuppression(suppression));\n      }\n\n      suppressionsConfig = {\n        serializedSuppressions,\n        jsonObject,\n        newSerializedSuppressions: new Set(),\n        newJsonObject: { suppressions: [] }\n      };\n    }\n\n    suppressionsJsonByFolderPath.set(eslintrcFolderPath, { readTime: Date.now(), suppressionsConfig });\n  }\n\n  return suppressionsConfig!;\n}\n\nexport function getAllBulkSuppressionsConfigsByEslintrcFolderPath(): [string, IBulkSuppressionsConfig][] {\n  const result: [string, IBulkSuppressionsConfig][] = [];\n  for (const [eslintrcFolderPath, { suppressionsConfig }] of suppressionsJsonByFolderPath) {\n    result.push([eslintrcFolderPath, suppressionsConfig]);\n  }\n\n  return result;\n}\n\nexport function writeSuppressionsJsonToFile(\n  eslintrcFolderPath: string,\n  suppressionsConfig: IBulkSuppressionsConfig\n): void {\n  suppressionsJsonByFolderPath.set(eslintrcFolderPath, { readTime: Date.now(), suppressionsConfig });\n  const suppressionsPath: string = `${eslintrcFolderPath}/${SUPPRESSIONS_JSON_FILENAME}`;\n  if (suppressionsConfig.jsonObject.suppressions.length === 0) {\n    deleteFile(suppressionsPath);\n  } else {\n    suppressionsConfig.jsonObject.suppressions.sort(compareSuppressions);\n    fs.writeFileSync(suppressionsPath, JSON.stringify(suppressionsConfig.jsonObject, undefined, 2));\n  }\n}\n\nexport function deleteBulkSuppressionsFileInEslintrcFolder(eslintrcFolderPath: string): void {\n  const suppressionsPath: string = `${eslintrcFolderPath}/${SUPPRESSIONS_JSON_FILENAME}`;\n  deleteFile(suppressionsPath);\n}\n\nfunction deleteFile(filePath: string): void {\n  try {\n    fs.unlinkSync(filePath);\n  } catch (e) {\n    throwIfAnythingOtherThanNotExistError(e);\n  }\n}\n\nexport function serializeSuppression({ file, scopeId, rule }: ISuppression): string {\n  return `${file}|${scopeId}|${rule}`;\n}\n\nfunction compareSuppressions(a: ISuppression, b: ISuppression): -1 | 0 | 1 {\n  if (a.file < b.file) {\n    return -1;\n  } else if (a.file > b.file) {\n    return 1;\n  } else if (a.scopeId < b.scopeId) {\n    return -1;\n  } else if (a.scopeId > b.scopeId) {\n    return 1;\n  } else if (a.rule < b.rule) {\n    return -1;\n  } else if (a.rule > b.rule) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nfunction validateSuppressionsJson(json: IBulkSuppressionsJson): json is IBulkSuppressionsJson {\n  if (typeof json !== 'object') {\n    throw new Error(`Invalid JSON object: ${JSON.stringify(json, null, 2)}`);\n  }\n\n  if (!json) {\n    throw new Error('JSON object is null.');\n  }\n\n  const EXPECTED_ROOT_PROPERTY_NAMES: Set<keyof IBulkSuppressionsJson> = new Set(['suppressions']);\n\n  for (const propertyName of Object.getOwnPropertyNames(json)) {\n    if (!EXPECTED_ROOT_PROPERTY_NAMES.has(propertyName as keyof IBulkSuppressionsJson)) {\n      throw new Error(`Unexpected property name: ${propertyName}`);\n    }\n  }\n\n  const { suppressions } = json;\n  if (!suppressions) {\n    throw new Error('Missing \"suppressions\" property.');\n  }\n\n  if (!Array.isArray(suppressions)) {\n    throw new Error('\"suppressions\" property is not an array.');\n  }\n\n  const EXPECTED_SUPPRESSION_PROPERTY_NAMES: Set<keyof ISuppression> = new Set(['file', 'scopeId', 'rule']);\n  for (const suppression of suppressions) {\n    if (typeof suppression !== 'object') {\n      throw new Error(`Invalid suppression: ${JSON.stringify(suppression, null, 2)}`);\n    }\n\n    if (!suppression) {\n      throw new Error(`Suppression is null: ${JSON.stringify(suppression, null, 2)}`);\n    }\n\n    for (const propertyName of Object.getOwnPropertyNames(suppression)) {\n      if (!EXPECTED_SUPPRESSION_PROPERTY_NAMES.has(propertyName as keyof ISuppression)) {\n        throw new Error(`Unexpected property name: ${propertyName}`);\n      }\n    }\n\n    for (const propertyName of EXPECTED_SUPPRESSION_PROPERTY_NAMES) {\n      if (!suppression.hasOwnProperty(propertyName)) {\n        throw new Error(\n          `Missing \"${propertyName}\" property in suppression: ${JSON.stringify(suppression, null, 2)}`\n        );\n      } else if (typeof suppression[propertyName] !== 'string') {\n        throw new Error(\n          `\"${propertyName}\" property in suppression is not a string: ${JSON.stringify(suppression, null, 2)}`\n        );\n      }\n    }\n  }\n\n  return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}