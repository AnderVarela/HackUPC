{"ast":null,"code":"'use strict';\n\n// based on Shewchuk's algorithm for exactly floating point addition\n// adapted from https://github.com/tc39/proposal-math-sum/blob/3513d58323a1ae25560e8700aa5294500c6c9287/polyfill/polyfill.mjs\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar iterate = require('../internals/iterate');\nvar $RangeError = RangeError;\nvar $TypeError = TypeError;\nvar $Infinity = Infinity;\nvar $NaN = NaN;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar push = uncurryThis([].push);\nvar POW_2_1023 = pow(2, 1023);\nvar MAX_SAFE_INTEGER = pow(2, 53) - 1; // 2 ** 53 - 1 === 9007199254740992\nvar MAX_DOUBLE = Number.MAX_VALUE; // 2 ** 1024 - 2 ** (1023 - 52) === 1.79769313486231570815e+308\nvar MAX_ULP = pow(2, 971); // 2 ** (1023 - 52) === 1.99584030953471981166e+292\n\nvar NOT_A_NUMBER = {};\nvar MINUS_INFINITY = {};\nvar PLUS_INFINITY = {};\nvar MINUS_ZERO = {};\nvar FINITE = {};\n\n// prerequisite: abs(x) >= abs(y)\nvar twosum = function (x, y) {\n  var hi = x + y;\n  var lo = y - (hi - x);\n  return {\n    hi: hi,\n    lo: lo\n  };\n};\n\n// `Math.sumPrecise` method\n// https://github.com/tc39/proposal-math-sum\n$({\n  target: 'Math',\n  stat: true,\n  forced: true\n}, {\n  // eslint-disable-next-line max-statements -- ok\n  sumPrecise: function sumPrecise(items) {\n    var numbers = [];\n    var count = 0;\n    var state = MINUS_ZERO;\n    iterate(items, function (n) {\n      if (++count >= MAX_SAFE_INTEGER) throw new $RangeError('Maximum allowed index exceeded');\n      if (typeof n != 'number') throw new $TypeError('Value is not a number');\n      if (state !== NOT_A_NUMBER) {\n        // eslint-disable-next-line no-self-compare -- NaN check\n        if (n !== n) state = NOT_A_NUMBER;else if (n === $Infinity) state = state === MINUS_INFINITY ? NOT_A_NUMBER : PLUS_INFINITY;else if (n === -$Infinity) state = state === PLUS_INFINITY ? NOT_A_NUMBER : MINUS_INFINITY;else if ((n !== 0 || 1 / n === $Infinity) && (state === MINUS_ZERO || state === FINITE)) {\n          state = FINITE;\n          push(numbers, n);\n        }\n      }\n    });\n    switch (state) {\n      case NOT_A_NUMBER:\n        return $NaN;\n      case MINUS_INFINITY:\n        return -$Infinity;\n      case PLUS_INFINITY:\n        return $Infinity;\n      case MINUS_ZERO:\n        return -0;\n    }\n    var partials = [];\n    var overflow = 0; // conceptually 2 ** 1024 times this value; the final partial is biased by this amount\n    var x, y, sum, hi, lo, tmp;\n    for (var i = 0; i < numbers.length; i++) {\n      x = numbers[i];\n      var actuallyUsedPartials = 0;\n      for (var j = 0; j < partials.length; j++) {\n        y = partials[j];\n        if (abs(x) < abs(y)) {\n          tmp = x;\n          x = y;\n          y = tmp;\n        }\n        sum = twosum(x, y);\n        hi = sum.hi;\n        lo = sum.lo;\n        if (abs(hi) === $Infinity) {\n          var sign = hi === $Infinity ? 1 : -1;\n          overflow += sign;\n          x = x - sign * POW_2_1023 - sign * POW_2_1023;\n          if (abs(x) < abs(y)) {\n            tmp = x;\n            x = y;\n            y = tmp;\n          }\n          sum = twosum(x, y);\n          hi = sum.hi;\n          lo = sum.lo;\n        }\n        if (lo !== 0) partials[actuallyUsedPartials++] = lo;\n        x = hi;\n      }\n      partials.length = actuallyUsedPartials;\n      if (x !== 0) push(partials, x);\n    }\n\n    // compute the exact sum of partials, stopping once we lose precision\n    var n = partials.length - 1;\n    hi = 0;\n    lo = 0;\n    if (overflow !== 0) {\n      var next = n >= 0 ? partials[n] : 0;\n      n--;\n      if (abs(overflow) > 1 || overflow > 0 && next > 0 || overflow < 0 && next < 0) {\n        return overflow > 0 ? $Infinity : -$Infinity;\n      }\n      // here we actually have to do the arithmetic\n      // drop a factor of 2 so we can do it without overflow\n      // assert(abs(overflow) === 1)\n      sum = twosum(overflow * POW_2_1023, next / 2);\n      hi = sum.hi;\n      lo = sum.lo;\n      lo *= 2;\n      if (abs(2 * hi) === $Infinity) {\n        // rounding to the maximum value\n        if (hi > 0) {\n          return hi === POW_2_1023 && lo === -(MAX_ULP / 2) && n >= 0 && partials[n] < 0 ? MAX_DOUBLE : $Infinity;\n        }\n        return hi === -POW_2_1023 && lo === MAX_ULP / 2 && n >= 0 && partials[n] > 0 ? -MAX_DOUBLE : -$Infinity;\n      }\n      if (lo !== 0) {\n        partials[++n] = lo;\n        lo = 0;\n      }\n      hi *= 2;\n    }\n    while (n >= 0) {\n      sum = twosum(hi, partials[n--]);\n      hi = sum.hi;\n      lo = sum.lo;\n      if (lo !== 0) break;\n    }\n    if (n >= 0 && (lo < 0 && partials[n] < 0 || lo > 0 && partials[n] > 0)) {\n      y = lo * 2;\n      x = hi + y;\n      if (y === x - hi) hi = x;\n    }\n    return hi;\n  }\n});","map":{"version":3,"names":["$","require","uncurryThis","iterate","$RangeError","RangeError","$TypeError","TypeError","$Infinity","Infinity","$NaN","NaN","abs","Math","pow","push","POW_2_1023","MAX_SAFE_INTEGER","MAX_DOUBLE","Number","MAX_VALUE","MAX_ULP","NOT_A_NUMBER","MINUS_INFINITY","PLUS_INFINITY","MINUS_ZERO","FINITE","twosum","x","y","hi","lo","target","stat","forced","sumPrecise","items","numbers","count","state","n","partials","overflow","sum","tmp","i","length","actuallyUsedPartials","j","sign","next"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/core-js-pure/modules/esnext.math.sum-precise.js"],"sourcesContent":["'use strict';\n// based on Shewchuk's algorithm for exactly floating point addition\n// adapted from https://github.com/tc39/proposal-math-sum/blob/3513d58323a1ae25560e8700aa5294500c6c9287/polyfill/polyfill.mjs\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar iterate = require('../internals/iterate');\n\nvar $RangeError = RangeError;\nvar $TypeError = TypeError;\nvar $Infinity = Infinity;\nvar $NaN = NaN;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar push = uncurryThis([].push);\n\nvar POW_2_1023 = pow(2, 1023);\nvar MAX_SAFE_INTEGER = pow(2, 53) - 1; // 2 ** 53 - 1 === 9007199254740992\nvar MAX_DOUBLE = Number.MAX_VALUE; // 2 ** 1024 - 2 ** (1023 - 52) === 1.79769313486231570815e+308\nvar MAX_ULP = pow(2, 971); // 2 ** (1023 - 52) === 1.99584030953471981166e+292\n\nvar NOT_A_NUMBER = {};\nvar MINUS_INFINITY = {};\nvar PLUS_INFINITY = {};\nvar MINUS_ZERO = {};\nvar FINITE = {};\n\n// prerequisite: abs(x) >= abs(y)\nvar twosum = function (x, y) {\n  var hi = x + y;\n  var lo = y - (hi - x);\n  return { hi: hi, lo: lo };\n};\n\n// `Math.sumPrecise` method\n// https://github.com/tc39/proposal-math-sum\n$({ target: 'Math', stat: true, forced: true }, {\n  // eslint-disable-next-line max-statements -- ok\n  sumPrecise: function sumPrecise(items) {\n    var numbers = [];\n    var count = 0;\n    var state = MINUS_ZERO;\n\n    iterate(items, function (n) {\n      if (++count >= MAX_SAFE_INTEGER) throw new $RangeError('Maximum allowed index exceeded');\n      if (typeof n != 'number') throw new $TypeError('Value is not a number');\n      if (state !== NOT_A_NUMBER) {\n        // eslint-disable-next-line no-self-compare -- NaN check\n        if (n !== n) state = NOT_A_NUMBER;\n        else if (n === $Infinity) state = state === MINUS_INFINITY ? NOT_A_NUMBER : PLUS_INFINITY;\n        else if (n === -$Infinity) state = state === PLUS_INFINITY ? NOT_A_NUMBER : MINUS_INFINITY;\n        else if ((n !== 0 || (1 / n) === $Infinity) && (state === MINUS_ZERO || state === FINITE)) {\n          state = FINITE;\n          push(numbers, n);\n        }\n      }\n    });\n\n    switch (state) {\n      case NOT_A_NUMBER: return $NaN;\n      case MINUS_INFINITY: return -$Infinity;\n      case PLUS_INFINITY: return $Infinity;\n      case MINUS_ZERO: return -0;\n    }\n\n    var partials = [];\n    var overflow = 0; // conceptually 2 ** 1024 times this value; the final partial is biased by this amount\n    var x, y, sum, hi, lo, tmp;\n\n    for (var i = 0; i < numbers.length; i++) {\n      x = numbers[i];\n      var actuallyUsedPartials = 0;\n      for (var j = 0; j < partials.length; j++) {\n        y = partials[j];\n        if (abs(x) < abs(y)) {\n          tmp = x;\n          x = y;\n          y = tmp;\n        }\n        sum = twosum(x, y);\n        hi = sum.hi;\n        lo = sum.lo;\n        if (abs(hi) === $Infinity) {\n          var sign = hi === $Infinity ? 1 : -1;\n          overflow += sign;\n\n          x = (x - (sign * POW_2_1023)) - (sign * POW_2_1023);\n          if (abs(x) < abs(y)) {\n            tmp = x;\n            x = y;\n            y = tmp;\n          }\n          sum = twosum(x, y);\n          hi = sum.hi;\n          lo = sum.lo;\n        }\n        if (lo !== 0) partials[actuallyUsedPartials++] = lo;\n        x = hi;\n      }\n      partials.length = actuallyUsedPartials;\n      if (x !== 0) push(partials, x);\n    }\n\n    // compute the exact sum of partials, stopping once we lose precision\n    var n = partials.length - 1;\n    hi = 0;\n    lo = 0;\n\n    if (overflow !== 0) {\n      var next = n >= 0 ? partials[n] : 0;\n      n--;\n      if (abs(overflow) > 1 || (overflow > 0 && next > 0) || (overflow < 0 && next < 0)) {\n        return overflow > 0 ? $Infinity : -$Infinity;\n      }\n      // here we actually have to do the arithmetic\n      // drop a factor of 2 so we can do it without overflow\n      // assert(abs(overflow) === 1)\n      sum = twosum(overflow * POW_2_1023, next / 2);\n      hi = sum.hi;\n      lo = sum.lo;\n      lo *= 2;\n      if (abs(2 * hi) === $Infinity) {\n        // rounding to the maximum value\n        if (hi > 0) {\n          return (hi === POW_2_1023 && lo === -(MAX_ULP / 2) && n >= 0 && partials[n] < 0) ? MAX_DOUBLE : $Infinity;\n        } return (hi === -POW_2_1023 && lo === (MAX_ULP / 2) && n >= 0 && partials[n] > 0) ? -MAX_DOUBLE : -$Infinity;\n      }\n\n      if (lo !== 0) {\n        partials[++n] = lo;\n        lo = 0;\n      }\n\n      hi *= 2;\n    }\n\n    while (n >= 0) {\n      sum = twosum(hi, partials[n--]);\n      hi = sum.hi;\n      lo = sum.lo;\n      if (lo !== 0) break;\n    }\n\n    if (n >= 0 && ((lo < 0 && partials[n] < 0) || (lo > 0 && partials[n] > 0))) {\n      y = lo * 2;\n      x = hi + y;\n      if (y === x - hi) hi = x;\n    }\n\n    return hi;\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}