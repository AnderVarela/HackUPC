{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\nconst CoaObject = require('./coaobject');\n\n/**\n * COA Parameter\n *\n * Base class for options and arguments\n *\n * --------|-----|-----|-----\n *         | Cmd | Opt | Arg\n * --------|-----|-----|-----\n *  arr    |     | ✓   | ✓\n *  req    |     | ✓   | ✓\n *  val    |     | ✓   | ✓\n *  def    |     | ✓   | ✓\n *  input  |     | ✓   | ✓\n *  output |     | ✓   | ✓\n *\n * @class CoaParam\n * @extends CoaObject\n */\nmodule.exports = class CoaParam extends CoaObject {\n  constructor(cmd) {\n    super(cmd);\n    this._arr = false;\n    this._req = false;\n    this._val = undefined;\n    this._def = undefined;\n  }\n\n  /**\n   * Makes a param accepts multiple values.\n   * Otherwise, the value will be used by the latter passed.\n   *\n   * @returns {COA.CoaParam} - this instance (for chainability)\n   */\n  arr() {\n    this._arr = true;\n    return this;\n  }\n\n  /**\n   * Makes a param required.\n   *\n   * @returns {COA.CoaParam} - this instance (for chainability)\n   */\n  req() {\n    this._req = true;\n    return this;\n  }\n\n  /**\n   * Set a validation (or value) function for param.\n   * Value from command line passes through before becoming available from API.\n   * Using for validation and convertion simple types to any values.\n   *\n   * @param {Function} val - validating function,\n   *         invoked in the context of option instance\n   *         and has one parameter with value from command line.\n   * @returns {COA.CoaParam} - this instance (for chainability)\n   */\n  val(val) {\n    this._val = val;\n    return this;\n  }\n\n  /**\n   * Set a default value for param.\n   * Default value passed through validation function as ordinary value.\n   *\n   * @param {*} def - default value of function generator\n   * @returns {COA.CoaParam} - this instance (for chainability)\n   */\n  def(def) {\n    this._def = def;\n    return this;\n  }\n\n  /**\n   * Make option value inputting stream.\n   * It's add useful validation and shortcut for STDIN.\n   *\n   * @returns {COA.CoaParam} - this instance (for chainability)\n   */\n  input() {\n    process.stdin.pause();\n    return this.def(process.stdin).val(function (v) {\n      if (typeof v !== 'string') return v;\n      if (v === '-') return process.stdin;\n      const s = fs.createReadStream(v, {\n        encoding: 'utf8'\n      });\n      s.pause();\n      return s;\n    });\n  }\n\n  /**\n   * Make option value outputing stream.\n   * It's add useful validation and shortcut for STDOUT.\n   *\n   * @returns {COA.CoaParam} - this instance (for chainability)\n   */\n  output() {\n    return this.def(process.stdout).val(function (v) {\n      if (typeof v !== 'string') return v;\n      if (v === '-') return process.stdout;\n      return fs.createWriteStream(v, {\n        encoding: 'utf8'\n      });\n    });\n  }\n};","map":{"version":3,"names":["fs","require","CoaObject","module","exports","CoaParam","constructor","cmd","_arr","_req","_val","undefined","_def","arr","req","val","def","input","process","stdin","pause","v","s","createReadStream","encoding","output","stdout","createWriteStream"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/coa/lib/coaparam.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\n\nconst CoaObject = require('./coaobject');\n\n/**\n * COA Parameter\n *\n * Base class for options and arguments\n *\n * --------|-----|-----|-----\n *         | Cmd | Opt | Arg\n * --------|-----|-----|-----\n *  arr    |     | ✓   | ✓\n *  req    |     | ✓   | ✓\n *  val    |     | ✓   | ✓\n *  def    |     | ✓   | ✓\n *  input  |     | ✓   | ✓\n *  output |     | ✓   | ✓\n *\n * @class CoaParam\n * @extends CoaObject\n */\nmodule.exports = class CoaParam extends CoaObject {\n    constructor(cmd) {\n        super(cmd);\n\n        this._arr = false;\n        this._req = false;\n        this._val = undefined;\n        this._def = undefined;\n    }\n\n    /**\n     * Makes a param accepts multiple values.\n     * Otherwise, the value will be used by the latter passed.\n     *\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n    arr() {\n        this._arr = true;\n        return this;\n    }\n\n    /**\n     * Makes a param required.\n     *\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n    req() {\n        this._req = true;\n        return this;\n    }\n\n    /**\n     * Set a validation (or value) function for param.\n     * Value from command line passes through before becoming available from API.\n     * Using for validation and convertion simple types to any values.\n     *\n     * @param {Function} val - validating function,\n     *         invoked in the context of option instance\n     *         and has one parameter with value from command line.\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n    val(val) {\n        this._val = val;\n        return this;\n    }\n\n    /**\n     * Set a default value for param.\n     * Default value passed through validation function as ordinary value.\n     *\n     * @param {*} def - default value of function generator\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n    def(def) {\n        this._def = def;\n        return this;\n    }\n\n    /**\n     * Make option value inputting stream.\n     * It's add useful validation and shortcut for STDIN.\n     *\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n    input() {\n        process.stdin.pause();\n        return this\n            .def(process.stdin)\n            .val(function(v) {\n                if(typeof v !== 'string')\n                    return v;\n\n                if(v === '-')\n                    return process.stdin;\n\n                const s = fs.createReadStream(v, { encoding : 'utf8' });\n                s.pause();\n                return s;\n            });\n    }\n\n    /**\n     * Make option value outputing stream.\n     * It's add useful validation and shortcut for STDOUT.\n     *\n     * @returns {COA.CoaParam} - this instance (for chainability)\n     */\n    output() {\n        return this\n            .def(process.stdout)\n            .val(function(v) {\n                if(typeof v !== 'string')\n                    return v;\n\n                if(v === '-')\n                    return process.stdout;\n\n                return fs.createWriteStream(v, { encoding : 'utf8' });\n            });\n    }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AAExB,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,MAAMC,QAAQ,SAASH,SAAS,CAAC;EAC9CI,WAAWA,CAACC,GAAG,EAAE;IACb,KAAK,CAACA,GAAG,CAAC;IAEV,IAAI,CAACC,IAAI,GAAG,KAAK;IACjB,IAAI,CAACC,IAAI,GAAG,KAAK;IACjB,IAAI,CAACC,IAAI,GAAGC,SAAS;IACrB,IAAI,CAACC,IAAI,GAAGD,SAAS;EACzB;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIE,GAAGA,CAAA,EAAG;IACF,IAAI,CAACL,IAAI,GAAG,IAAI;IAChB,OAAO,IAAI;EACf;;EAEA;AACJ;AACA;AACA;AACA;EACIM,GAAGA,CAAA,EAAG;IACF,IAAI,CAACL,IAAI,GAAG,IAAI;IAChB,OAAO,IAAI;EACf;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,GAAGA,CAACA,GAAG,EAAE;IACL,IAAI,CAACL,IAAI,GAAGK,GAAG;IACf,OAAO,IAAI;EACf;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,GAAGA,CAACA,GAAG,EAAE;IACL,IAAI,CAACJ,IAAI,GAAGI,GAAG;IACf,OAAO,IAAI;EACf;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,KAAKA,CAAA,EAAG;IACJC,OAAO,CAACC,KAAK,CAACC,KAAK,CAAC,CAAC;IACrB,OAAO,IAAI,CACNJ,GAAG,CAACE,OAAO,CAACC,KAAK,CAAC,CAClBJ,GAAG,CAAC,UAASM,CAAC,EAAE;MACb,IAAG,OAAOA,CAAC,KAAK,QAAQ,EACpB,OAAOA,CAAC;MAEZ,IAAGA,CAAC,KAAK,GAAG,EACR,OAAOH,OAAO,CAACC,KAAK;MAExB,MAAMG,CAAC,GAAGtB,EAAE,CAACuB,gBAAgB,CAACF,CAAC,EAAE;QAAEG,QAAQ,EAAG;MAAO,CAAC,CAAC;MACvDF,CAAC,CAACF,KAAK,CAAC,CAAC;MACT,OAAOE,CAAC;IACZ,CAAC,CAAC;EACV;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIG,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CACNT,GAAG,CAACE,OAAO,CAACQ,MAAM,CAAC,CACnBX,GAAG,CAAC,UAASM,CAAC,EAAE;MACb,IAAG,OAAOA,CAAC,KAAK,QAAQ,EACpB,OAAOA,CAAC;MAEZ,IAAGA,CAAC,KAAK,GAAG,EACR,OAAOH,OAAO,CAACQ,MAAM;MAEzB,OAAO1B,EAAE,CAAC2B,iBAAiB,CAACN,CAAC,EAAE;QAAEG,QAAQ,EAAG;MAAO,CAAC,CAAC;IACzD,CAAC,CAAC;EACV;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}