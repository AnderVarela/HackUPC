{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEslintPath = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst constants_1 = require(\"../../constants\");\n// When this list is updated, update the `eslint-bulk-suppressions-newest-test`\n// and/or the `eslint-bulk-suppressions-newest-test` projects' eslint dependencies.\nconst TESTED_VERSIONS = new Set(['8.6.0', '8.7.0', '8.21.0', '8.22.0', '8.23.0', '8.23.1', '8.57.0']);\nfunction getEslintPath(packagePath) {\n  // Try to find a local ESLint installation, the one that should be listed as a dev dependency in package.json\n  // and installed in node_modules\n  try {\n    const localEslintApiPath = require.resolve(constants_1.BULK_SUPPRESSIONS_CLI_ESLINT_PACKAGE_NAME, {\n      paths: [packagePath]\n    });\n    const localEslintPath = path_1.default.dirname(path_1.default.dirname(localEslintApiPath));\n    const {\n      version: localEslintVersion\n    } = require(`${localEslintPath}/package.json`);\n    if (!TESTED_VERSIONS.has(localEslintVersion)) {\n      console.warn('@rushstack/eslint-bulk: Be careful, the installed ESLint version has not been tested with eslint-bulk.');\n    }\n    return localEslintApiPath;\n  } catch (e) {\n    try {\n      const {\n        dependencies,\n        devDependencies\n      } = require(`${packagePath}/package.json`);\n      if (devDependencies === null || devDependencies === void 0 ? void 0 : devDependencies.eslint) {\n        throw new Error('@rushstack/eslint-bulk: eslint is specified as a dev dependency in package.json, ' + 'but eslint-bulk cannot find it in node_modules.');\n      } else if (dependencies === null || dependencies === void 0 ? void 0 : dependencies.eslint) {\n        throw new Error('@rushstack/eslint-bulk: eslint is specified as a dependency in package.json, ' + 'but eslint-bulk cannot find it in node_modules.');\n      } else {\n        throw new Error('@rushstack/eslint-bulk: eslint is not specified as a dependency in package.json.');\n      }\n    } catch (e) {\n      throw new Error(\"@rushstack/eslint-bulk: This command must be run in the same folder as a project's package.json file.\");\n    }\n  }\n}\nexports.getEslintPath = getEslintPath;","map":{"version":3,"names":["path_1","__importDefault","require","constants_1","TESTED_VERSIONS","Set","getEslintPath","packagePath","localEslintApiPath","resolve","BULK_SUPPRESSIONS_CLI_ESLINT_PACKAGE_NAME","paths","localEslintPath","default","dirname","version","localEslintVersion","has","console","warn","e","dependencies","devDependencies","eslint","Error","exports"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@rushstack\\eslint-patch\\src\\eslint-bulk-suppressions\\cli\\utils\\get-eslint-cli.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport path from 'path';\nimport { BULK_SUPPRESSIONS_CLI_ESLINT_PACKAGE_NAME } from '../../constants';\n\n// When this list is updated, update the `eslint-bulk-suppressions-newest-test`\n// and/or the `eslint-bulk-suppressions-newest-test` projects' eslint dependencies.\nconst TESTED_VERSIONS: Set<string> = new Set([\n  '8.6.0',\n  '8.7.0',\n  '8.21.0',\n  '8.22.0',\n  '8.23.0',\n  '8.23.1',\n  '8.57.0'\n]);\n\nexport function getEslintPath(packagePath: string): string {\n  // Try to find a local ESLint installation, the one that should be listed as a dev dependency in package.json\n  // and installed in node_modules\n  try {\n    const localEslintApiPath: string = require.resolve(BULK_SUPPRESSIONS_CLI_ESLINT_PACKAGE_NAME, {\n      paths: [packagePath]\n    });\n    const localEslintPath: string = path.dirname(path.dirname(localEslintApiPath));\n    const { version: localEslintVersion } = require(`${localEslintPath}/package.json`);\n\n    if (!TESTED_VERSIONS.has(localEslintVersion)) {\n      console.warn(\n        '@rushstack/eslint-bulk: Be careful, the installed ESLint version has not been tested with eslint-bulk.'\n      );\n    }\n\n    return localEslintApiPath;\n  } catch (e) {\n    try {\n      const {\n        dependencies,\n        devDependencies\n      }: {\n        dependencies: Record<string, string> | undefined;\n        devDependencies: Record<string, string> | undefined;\n      } = require(`${packagePath}/package.json`);\n\n      if (devDependencies?.eslint) {\n        throw new Error(\n          '@rushstack/eslint-bulk: eslint is specified as a dev dependency in package.json, ' +\n            'but eslint-bulk cannot find it in node_modules.'\n        );\n      } else if (dependencies?.eslint) {\n        throw new Error(\n          '@rushstack/eslint-bulk: eslint is specified as a dependency in package.json, ' +\n            'but eslint-bulk cannot find it in node_modules.'\n        );\n      } else {\n        throw new Error('@rushstack/eslint-bulk: eslint is not specified as a dependency in package.json.');\n      }\n    } catch (e) {\n      throw new Error(\n        \"@rushstack/eslint-bulk: This command must be run in the same folder as a project's package.json file.\"\n      );\n    }\n  }\n}\n"],"mappings":";;AAAA;AACA;;;;;;;;;;AAEA,MAAAA,MAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAEA;AACA;AACA,MAAME,eAAe,GAAgB,IAAIC,GAAG,CAAC,CAC3C,OAAO,EACP,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CACT,CAAC;AAEF,SAAgBC,aAAaA,CAACC,WAAmB;EAC/C;EACA;EACA,IAAI;IACF,MAAMC,kBAAkB,GAAWN,OAAO,CAACO,OAAO,CAACN,WAAA,CAAAO,yCAAyC,EAAE;MAC5FC,KAAK,EAAE,CAACJ,WAAW;KACpB,CAAC;IACF,MAAMK,eAAe,GAAWZ,MAAA,CAAAa,OAAI,CAACC,OAAO,CAACd,MAAA,CAAAa,OAAI,CAACC,OAAO,CAACN,kBAAkB,CAAC,CAAC;IAC9E,MAAM;MAAEO,OAAO,EAAEC;IAAkB,CAAE,GAAGd,OAAO,CAAC,GAAGU,eAAe,eAAe,CAAC;IAElF,IAAI,CAACR,eAAe,CAACa,GAAG,CAACD,kBAAkB,CAAC,EAAE;MAC5CE,OAAO,CAACC,IAAI,CACV,wGAAwG,CACzG;IACH;IAEA,OAAOX,kBAAkB;EAC3B,CAAC,CAAC,OAAOY,CAAC,EAAE;IACV,IAAI;MACF,MAAM;QACJC,YAAY;QACZC;MAAe,CAChB,GAGGpB,OAAO,CAAC,GAAGK,WAAW,eAAe,CAAC;MAE1C,IAAIe,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEC,MAAM,EAAE;QAC3B,MAAM,IAAIC,KAAK,CACb,mFAAmF,GACjF,iDAAiD,CACpD;MACH,CAAC,MAAM,IAAIH,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEE,MAAM,EAAE;QAC/B,MAAM,IAAIC,KAAK,CACb,+EAA+E,GAC7E,iDAAiD,CACpD;MACH,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAC,kFAAkF,CAAC;MACrG;IACF,CAAC,CAAC,OAAOJ,CAAC,EAAE;MACV,MAAM,IAAII,KAAK,CACb,uGAAuG,CACxG;IACH;EACF;AACF;AA9CAC,OAAA,CAAAnB,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}