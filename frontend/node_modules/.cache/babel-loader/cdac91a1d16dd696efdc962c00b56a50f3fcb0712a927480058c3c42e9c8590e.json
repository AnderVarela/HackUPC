{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.module = _module;\nexports.moduleMetadata = moduleMetadata;\nexports.moduleNameMetadata = moduleNameMetadata;\nexports.functionNameMetadata = functionNameMetadata;\nexports.localNameMetadata = localNameMetadata;\nexports.binaryModule = binaryModule;\nexports.quoteModule = quoteModule;\nexports.sectionMetadata = sectionMetadata;\nexports.producersSectionMetadata = producersSectionMetadata;\nexports.producerMetadata = producerMetadata;\nexports.producerMetadataVersionedName = producerMetadataVersionedName;\nexports.loopInstruction = loopInstruction;\nexports.instr = instr;\nexports.ifInstruction = ifInstruction;\nexports.stringLiteral = stringLiteral;\nexports.numberLiteral = numberLiteral;\nexports.longNumberLiteral = longNumberLiteral;\nexports.floatLiteral = floatLiteral;\nexports.elem = elem;\nexports.indexInFuncSection = indexInFuncSection;\nexports.valtypeLiteral = valtypeLiteral;\nexports.typeInstruction = typeInstruction;\nexports.start = start;\nexports.globalType = globalType;\nexports.leadingComment = leadingComment;\nexports.blockComment = blockComment;\nexports.data = data;\nexports.global = global;\nexports.table = table;\nexports.memory = memory;\nexports.funcImportDescr = funcImportDescr;\nexports.moduleImport = moduleImport;\nexports.moduleExportDescr = moduleExportDescr;\nexports.moduleExport = moduleExport;\nexports.limit = limit;\nexports.signature = signature;\nexports.program = program;\nexports.identifier = identifier;\nexports.blockInstruction = blockInstruction;\nexports.callInstruction = callInstruction;\nexports.callIndirectInstruction = callIndirectInstruction;\nexports.byteArray = byteArray;\nexports.func = func;\nexports.internalBrUnless = internalBrUnless;\nexports.internalGoto = internalGoto;\nexports.internalCallExtern = internalCallExtern;\nexports.internalEndAndReturn = internalEndAndReturn;\nexports.assertInternalCallExtern = exports.assertInternalGoto = exports.assertInternalBrUnless = exports.assertFunc = exports.assertByteArray = exports.assertCallIndirectInstruction = exports.assertCallInstruction = exports.assertBlockInstruction = exports.assertIdentifier = exports.assertProgram = exports.assertSignature = exports.assertLimit = exports.assertModuleExport = exports.assertModuleExportDescr = exports.assertModuleImport = exports.assertFuncImportDescr = exports.assertMemory = exports.assertTable = exports.assertGlobal = exports.assertData = exports.assertBlockComment = exports.assertLeadingComment = exports.assertGlobalType = exports.assertStart = exports.assertTypeInstruction = exports.assertValtypeLiteral = exports.assertIndexInFuncSection = exports.assertElem = exports.assertFloatLiteral = exports.assertLongNumberLiteral = exports.assertNumberLiteral = exports.assertStringLiteral = exports.assertIfInstruction = exports.assertInstr = exports.assertLoopInstruction = exports.assertProducerMetadataVersionedName = exports.assertProducerMetadata = exports.assertProducersSectionMetadata = exports.assertSectionMetadata = exports.assertQuoteModule = exports.assertBinaryModule = exports.assertLocalNameMetadata = exports.assertFunctionNameMetadata = exports.assertModuleNameMetadata = exports.assertModuleMetadata = exports.assertModule = exports.isIntrinsic = exports.isImportDescr = exports.isNumericLiteral = exports.isExpression = exports.isInstruction = exports.isBlock = exports.isNode = exports.isInternalEndAndReturn = exports.isInternalCallExtern = exports.isInternalGoto = exports.isInternalBrUnless = exports.isFunc = exports.isByteArray = exports.isCallIndirectInstruction = exports.isCallInstruction = exports.isBlockInstruction = exports.isIdentifier = exports.isProgram = exports.isSignature = exports.isLimit = exports.isModuleExport = exports.isModuleExportDescr = exports.isModuleImport = exports.isFuncImportDescr = exports.isMemory = exports.isTable = exports.isGlobal = exports.isData = exports.isBlockComment = exports.isLeadingComment = exports.isGlobalType = exports.isStart = exports.isTypeInstruction = exports.isValtypeLiteral = exports.isIndexInFuncSection = exports.isElem = exports.isFloatLiteral = exports.isLongNumberLiteral = exports.isNumberLiteral = exports.isStringLiteral = exports.isIfInstruction = exports.isInstr = exports.isLoopInstruction = exports.isProducerMetadataVersionedName = exports.isProducerMetadata = exports.isProducersSectionMetadata = exports.isSectionMetadata = exports.isQuoteModule = exports.isBinaryModule = exports.isLocalNameMetadata = exports.isFunctionNameMetadata = exports.isModuleNameMetadata = exports.isModuleMetadata = exports.isModule = void 0;\nexports.nodeAndUnionTypes = exports.unionTypesMap = exports.assertInternalEndAndReturn = void 0;\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\n\n// THIS FILE IS AUTOGENERATED\n// see scripts/generateNodeUtils.js\nfunction isTypeOf(t) {\n  return function (n) {\n    return n.type === t;\n  };\n}\nfunction assertTypeOf(t) {\n  return function (n) {\n    return function () {\n      if (!(n.type === t)) {\n        throw new Error('n.type === t' + \" error: \" + (undefined || \"unknown\"));\n      }\n    }();\n  };\n}\nfunction _module(id, fields, metadata) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n  if (!(_typeof(fields) === \"object\" && typeof fields.length !== \"undefined\")) {\n    throw new Error('typeof fields === \"object\" && typeof fields.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"Module\",\n    id: id,\n    fields: fields\n  };\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n  return node;\n}\nfunction moduleMetadata(sections, functionNames, localNames, producers) {\n  if (!(_typeof(sections) === \"object\" && typeof sections.length !== \"undefined\")) {\n    throw new Error('typeof sections === \"object\" && typeof sections.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  if (functionNames !== null && functionNames !== undefined) {\n    if (!(_typeof(functionNames) === \"object\" && typeof functionNames.length !== \"undefined\")) {\n      throw new Error('typeof functionNames === \"object\" && typeof functionNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n  if (localNames !== null && localNames !== undefined) {\n    if (!(_typeof(localNames) === \"object\" && typeof localNames.length !== \"undefined\")) {\n      throw new Error('typeof localNames === \"object\" && typeof localNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n  if (producers !== null && producers !== undefined) {\n    if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n      throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n  var node = {\n    type: \"ModuleMetadata\",\n    sections: sections\n  };\n  if (typeof functionNames !== \"undefined\" && functionNames.length > 0) {\n    node.functionNames = functionNames;\n  }\n  if (typeof localNames !== \"undefined\" && localNames.length > 0) {\n    node.localNames = localNames;\n  }\n  if (typeof producers !== \"undefined\" && producers.length > 0) {\n    node.producers = producers;\n  }\n  return node;\n}\nfunction moduleNameMetadata(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n  var node = {\n    type: \"ModuleNameMetadata\",\n    value: value\n  };\n  return node;\n}\nfunction functionNameMetadata(value, index) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n  if (!(typeof index === \"number\")) {\n    throw new Error('typeof index === \"number\"' + \" error: \" + (\"Argument index must be of type number, given: \" + _typeof(index) || \"unknown\"));\n  }\n  var node = {\n    type: \"FunctionNameMetadata\",\n    value: value,\n    index: index\n  };\n  return node;\n}\nfunction localNameMetadata(value, localIndex, functionIndex) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n  if (!(typeof localIndex === \"number\")) {\n    throw new Error('typeof localIndex === \"number\"' + \" error: \" + (\"Argument localIndex must be of type number, given: \" + _typeof(localIndex) || \"unknown\"));\n  }\n  if (!(typeof functionIndex === \"number\")) {\n    throw new Error('typeof functionIndex === \"number\"' + \" error: \" + (\"Argument functionIndex must be of type number, given: \" + _typeof(functionIndex) || \"unknown\"));\n  }\n  var node = {\n    type: \"LocalNameMetadata\",\n    value: value,\n    localIndex: localIndex,\n    functionIndex: functionIndex\n  };\n  return node;\n}\nfunction binaryModule(id, blob) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n  if (!(_typeof(blob) === \"object\" && typeof blob.length !== \"undefined\")) {\n    throw new Error('typeof blob === \"object\" && typeof blob.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"BinaryModule\",\n    id: id,\n    blob: blob\n  };\n  return node;\n}\nfunction quoteModule(id, string) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n  if (!(_typeof(string) === \"object\" && typeof string.length !== \"undefined\")) {\n    throw new Error('typeof string === \"object\" && typeof string.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"QuoteModule\",\n    id: id,\n    string: string\n  };\n  return node;\n}\nfunction sectionMetadata(section, startOffset, size, vectorOfSize) {\n  if (!(typeof startOffset === \"number\")) {\n    throw new Error('typeof startOffset === \"number\"' + \" error: \" + (\"Argument startOffset must be of type number, given: \" + _typeof(startOffset) || \"unknown\"));\n  }\n  var node = {\n    type: \"SectionMetadata\",\n    section: section,\n    startOffset: startOffset,\n    size: size,\n    vectorOfSize: vectorOfSize\n  };\n  return node;\n}\nfunction producersSectionMetadata(producers) {\n  if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n    throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"ProducersSectionMetadata\",\n    producers: producers\n  };\n  return node;\n}\nfunction producerMetadata(language, processedBy, sdk) {\n  if (!(_typeof(language) === \"object\" && typeof language.length !== \"undefined\")) {\n    throw new Error('typeof language === \"object\" && typeof language.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  if (!(_typeof(processedBy) === \"object\" && typeof processedBy.length !== \"undefined\")) {\n    throw new Error('typeof processedBy === \"object\" && typeof processedBy.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  if (!(_typeof(sdk) === \"object\" && typeof sdk.length !== \"undefined\")) {\n    throw new Error('typeof sdk === \"object\" && typeof sdk.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"ProducerMetadata\",\n    language: language,\n    processedBy: processedBy,\n    sdk: sdk\n  };\n  return node;\n}\nfunction producerMetadataVersionedName(name, version) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n  if (!(typeof version === \"string\")) {\n    throw new Error('typeof version === \"string\"' + \" error: \" + (\"Argument version must be of type string, given: \" + _typeof(version) || \"unknown\"));\n  }\n  var node = {\n    type: \"ProducerMetadataVersionedName\",\n    name: name,\n    version: version\n  };\n  return node;\n}\nfunction loopInstruction(label, resulttype, instr) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"LoopInstruction\",\n    id: \"loop\",\n    label: label,\n    resulttype: resulttype,\n    instr: instr\n  };\n  return node;\n}\nfunction instr(id, object, args, namedArgs) {\n  if (!(typeof id === \"string\")) {\n    throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n  }\n  if (!(_typeof(args) === \"object\" && typeof args.length !== \"undefined\")) {\n    throw new Error('typeof args === \"object\" && typeof args.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"Instr\",\n    id: id,\n    args: args\n  };\n  if (typeof object !== \"undefined\") {\n    node.object = object;\n  }\n  if (typeof namedArgs !== \"undefined\" && Object.keys(namedArgs).length !== 0) {\n    node.namedArgs = namedArgs;\n  }\n  return node;\n}\nfunction ifInstruction(testLabel, test, result, consequent, alternate) {\n  if (!(_typeof(test) === \"object\" && typeof test.length !== \"undefined\")) {\n    throw new Error('typeof test === \"object\" && typeof test.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  if (!(_typeof(consequent) === \"object\" && typeof consequent.length !== \"undefined\")) {\n    throw new Error('typeof consequent === \"object\" && typeof consequent.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  if (!(_typeof(alternate) === \"object\" && typeof alternate.length !== \"undefined\")) {\n    throw new Error('typeof alternate === \"object\" && typeof alternate.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"IfInstruction\",\n    id: \"if\",\n    testLabel: testLabel,\n    test: test,\n    result: result,\n    consequent: consequent,\n    alternate: alternate\n  };\n  return node;\n}\nfunction stringLiteral(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n  var node = {\n    type: \"StringLiteral\",\n    value: value\n  };\n  return node;\n}\nfunction numberLiteral(value, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n  var node = {\n    type: \"NumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\nfunction longNumberLiteral(value, raw) {\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n  var node = {\n    type: \"LongNumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\nfunction floatLiteral(value, nan, inf, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n  if (nan !== null && nan !== undefined) {\n    if (!(typeof nan === \"boolean\")) {\n      throw new Error('typeof nan === \"boolean\"' + \" error: \" + (\"Argument nan must be of type boolean, given: \" + _typeof(nan) || \"unknown\"));\n    }\n  }\n  if (inf !== null && inf !== undefined) {\n    if (!(typeof inf === \"boolean\")) {\n      throw new Error('typeof inf === \"boolean\"' + \" error: \" + (\"Argument inf must be of type boolean, given: \" + _typeof(inf) || \"unknown\"));\n    }\n  }\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n  var node = {\n    type: \"FloatLiteral\",\n    value: value,\n    raw: raw\n  };\n  if (nan === true) {\n    node.nan = true;\n  }\n  if (inf === true) {\n    node.inf = true;\n  }\n  return node;\n}\nfunction elem(table, offset, funcs) {\n  if (!(_typeof(offset) === \"object\" && typeof offset.length !== \"undefined\")) {\n    throw new Error('typeof offset === \"object\" && typeof offset.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  if (!(_typeof(funcs) === \"object\" && typeof funcs.length !== \"undefined\")) {\n    throw new Error('typeof funcs === \"object\" && typeof funcs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"Elem\",\n    table: table,\n    offset: offset,\n    funcs: funcs\n  };\n  return node;\n}\nfunction indexInFuncSection(index) {\n  var node = {\n    type: \"IndexInFuncSection\",\n    index: index\n  };\n  return node;\n}\nfunction valtypeLiteral(name) {\n  var node = {\n    type: \"ValtypeLiteral\",\n    name: name\n  };\n  return node;\n}\nfunction typeInstruction(id, functype) {\n  var node = {\n    type: \"TypeInstruction\",\n    id: id,\n    functype: functype\n  };\n  return node;\n}\nfunction start(index) {\n  var node = {\n    type: \"Start\",\n    index: index\n  };\n  return node;\n}\nfunction globalType(valtype, mutability) {\n  var node = {\n    type: \"GlobalType\",\n    valtype: valtype,\n    mutability: mutability\n  };\n  return node;\n}\nfunction leadingComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n  var node = {\n    type: \"LeadingComment\",\n    value: value\n  };\n  return node;\n}\nfunction blockComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n  var node = {\n    type: \"BlockComment\",\n    value: value\n  };\n  return node;\n}\nfunction data(memoryIndex, offset, init) {\n  var node = {\n    type: \"Data\",\n    memoryIndex: memoryIndex,\n    offset: offset,\n    init: init\n  };\n  return node;\n}\nfunction global(globalType, init, name) {\n  if (!(_typeof(init) === \"object\" && typeof init.length !== \"undefined\")) {\n    throw new Error('typeof init === \"object\" && typeof init.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"Global\",\n    globalType: globalType,\n    init: init,\n    name: name\n  };\n  return node;\n}\nfunction table(elementType, limits, name, elements) {\n  if (!(limits.type === \"Limit\")) {\n    throw new Error('limits.type === \"Limit\"' + \" error: \" + (\"Argument limits must be of type Limit, given: \" + limits.type || \"unknown\"));\n  }\n  if (elements !== null && elements !== undefined) {\n    if (!(_typeof(elements) === \"object\" && typeof elements.length !== \"undefined\")) {\n      throw new Error('typeof elements === \"object\" && typeof elements.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n  var node = {\n    type: \"Table\",\n    elementType: elementType,\n    limits: limits,\n    name: name\n  };\n  if (typeof elements !== \"undefined\" && elements.length > 0) {\n    node.elements = elements;\n  }\n  return node;\n}\nfunction memory(limits, id) {\n  var node = {\n    type: \"Memory\",\n    limits: limits,\n    id: id\n  };\n  return node;\n}\nfunction funcImportDescr(id, signature) {\n  var node = {\n    type: \"FuncImportDescr\",\n    id: id,\n    signature: signature\n  };\n  return node;\n}\nfunction moduleImport(module, name, descr) {\n  if (!(typeof module === \"string\")) {\n    throw new Error('typeof module === \"string\"' + \" error: \" + (\"Argument module must be of type string, given: \" + _typeof(module) || \"unknown\"));\n  }\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n  var node = {\n    type: \"ModuleImport\",\n    module: module,\n    name: name,\n    descr: descr\n  };\n  return node;\n}\nfunction moduleExportDescr(exportType, id) {\n  var node = {\n    type: \"ModuleExportDescr\",\n    exportType: exportType,\n    id: id\n  };\n  return node;\n}\nfunction moduleExport(name, descr) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n  var node = {\n    type: \"ModuleExport\",\n    name: name,\n    descr: descr\n  };\n  return node;\n}\nfunction limit(min, max, shared) {\n  if (!(typeof min === \"number\")) {\n    throw new Error('typeof min === \"number\"' + \" error: \" + (\"Argument min must be of type number, given: \" + _typeof(min) || \"unknown\"));\n  }\n  if (max !== null && max !== undefined) {\n    if (!(typeof max === \"number\")) {\n      throw new Error('typeof max === \"number\"' + \" error: \" + (\"Argument max must be of type number, given: \" + _typeof(max) || \"unknown\"));\n    }\n  }\n  if (shared !== null && shared !== undefined) {\n    if (!(typeof shared === \"boolean\")) {\n      throw new Error('typeof shared === \"boolean\"' + \" error: \" + (\"Argument shared must be of type boolean, given: \" + _typeof(shared) || \"unknown\"));\n    }\n  }\n  var node = {\n    type: \"Limit\",\n    min: min\n  };\n  if (typeof max !== \"undefined\") {\n    node.max = max;\n  }\n  if (shared === true) {\n    node.shared = true;\n  }\n  return node;\n}\nfunction signature(params, results) {\n  if (!(_typeof(params) === \"object\" && typeof params.length !== \"undefined\")) {\n    throw new Error('typeof params === \"object\" && typeof params.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  if (!(_typeof(results) === \"object\" && typeof results.length !== \"undefined\")) {\n    throw new Error('typeof results === \"object\" && typeof results.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"Signature\",\n    params: params,\n    results: results\n  };\n  return node;\n}\nfunction program(body) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"Program\",\n    body: body\n  };\n  return node;\n}\nfunction identifier(value, raw) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n  if (raw !== null && raw !== undefined) {\n    if (!(typeof raw === \"string\")) {\n      throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n    }\n  }\n  var node = {\n    type: \"Identifier\",\n    value: value\n  };\n  if (typeof raw !== \"undefined\") {\n    node.raw = raw;\n  }\n  return node;\n}\nfunction blockInstruction(label, instr, result) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"BlockInstruction\",\n    id: \"block\",\n    label: label,\n    instr: instr,\n    result: result\n  };\n  return node;\n}\nfunction callInstruction(index, instrArgs, numeric) {\n  if (instrArgs !== null && instrArgs !== undefined) {\n    if (!(_typeof(instrArgs) === \"object\" && typeof instrArgs.length !== \"undefined\")) {\n      throw new Error('typeof instrArgs === \"object\" && typeof instrArgs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n  var node = {\n    type: \"CallInstruction\",\n    id: \"call\",\n    index: index\n  };\n  if (typeof instrArgs !== \"undefined\" && instrArgs.length > 0) {\n    node.instrArgs = instrArgs;\n  }\n  if (typeof numeric !== \"undefined\") {\n    node.numeric = numeric;\n  }\n  return node;\n}\nfunction callIndirectInstruction(signature, intrs) {\n  if (intrs !== null && intrs !== undefined) {\n    if (!(_typeof(intrs) === \"object\" && typeof intrs.length !== \"undefined\")) {\n      throw new Error('typeof intrs === \"object\" && typeof intrs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n  var node = {\n    type: \"CallIndirectInstruction\",\n    id: \"call_indirect\",\n    signature: signature\n  };\n  if (typeof intrs !== \"undefined\" && intrs.length > 0) {\n    node.intrs = intrs;\n  }\n  return node;\n}\nfunction byteArray(values) {\n  if (!(_typeof(values) === \"object\" && typeof values.length !== \"undefined\")) {\n    throw new Error('typeof values === \"object\" && typeof values.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  var node = {\n    type: \"ByteArray\",\n    values: values\n  };\n  return node;\n}\nfunction func(name, signature, body, isExternal, metadata) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n  if (isExternal !== null && isExternal !== undefined) {\n    if (!(typeof isExternal === \"boolean\")) {\n      throw new Error('typeof isExternal === \"boolean\"' + \" error: \" + (\"Argument isExternal must be of type boolean, given: \" + _typeof(isExternal) || \"unknown\"));\n    }\n  }\n  var node = {\n    type: \"Func\",\n    name: name,\n    signature: signature,\n    body: body\n  };\n  if (isExternal === true) {\n    node.isExternal = true;\n  }\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n  return node;\n}\nfunction internalBrUnless(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n  var node = {\n    type: \"InternalBrUnless\",\n    target: target\n  };\n  return node;\n}\nfunction internalGoto(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n  var node = {\n    type: \"InternalGoto\",\n    target: target\n  };\n  return node;\n}\nfunction internalCallExtern(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n  var node = {\n    type: \"InternalCallExtern\",\n    target: target\n  };\n  return node;\n}\nfunction internalEndAndReturn() {\n  var node = {\n    type: \"InternalEndAndReturn\"\n  };\n  return node;\n}\nvar isModule = isTypeOf(\"Module\");\nexports.isModule = isModule;\nvar isModuleMetadata = isTypeOf(\"ModuleMetadata\");\nexports.isModuleMetadata = isModuleMetadata;\nvar isModuleNameMetadata = isTypeOf(\"ModuleNameMetadata\");\nexports.isModuleNameMetadata = isModuleNameMetadata;\nvar isFunctionNameMetadata = isTypeOf(\"FunctionNameMetadata\");\nexports.isFunctionNameMetadata = isFunctionNameMetadata;\nvar isLocalNameMetadata = isTypeOf(\"LocalNameMetadata\");\nexports.isLocalNameMetadata = isLocalNameMetadata;\nvar isBinaryModule = isTypeOf(\"BinaryModule\");\nexports.isBinaryModule = isBinaryModule;\nvar isQuoteModule = isTypeOf(\"QuoteModule\");\nexports.isQuoteModule = isQuoteModule;\nvar isSectionMetadata = isTypeOf(\"SectionMetadata\");\nexports.isSectionMetadata = isSectionMetadata;\nvar isProducersSectionMetadata = isTypeOf(\"ProducersSectionMetadata\");\nexports.isProducersSectionMetadata = isProducersSectionMetadata;\nvar isProducerMetadata = isTypeOf(\"ProducerMetadata\");\nexports.isProducerMetadata = isProducerMetadata;\nvar isProducerMetadataVersionedName = isTypeOf(\"ProducerMetadataVersionedName\");\nexports.isProducerMetadataVersionedName = isProducerMetadataVersionedName;\nvar isLoopInstruction = isTypeOf(\"LoopInstruction\");\nexports.isLoopInstruction = isLoopInstruction;\nvar isInstr = isTypeOf(\"Instr\");\nexports.isInstr = isInstr;\nvar isIfInstruction = isTypeOf(\"IfInstruction\");\nexports.isIfInstruction = isIfInstruction;\nvar isStringLiteral = isTypeOf(\"StringLiteral\");\nexports.isStringLiteral = isStringLiteral;\nvar isNumberLiteral = isTypeOf(\"NumberLiteral\");\nexports.isNumberLiteral = isNumberLiteral;\nvar isLongNumberLiteral = isTypeOf(\"LongNumberLiteral\");\nexports.isLongNumberLiteral = isLongNumberLiteral;\nvar isFloatLiteral = isTypeOf(\"FloatLiteral\");\nexports.isFloatLiteral = isFloatLiteral;\nvar isElem = isTypeOf(\"Elem\");\nexports.isElem = isElem;\nvar isIndexInFuncSection = isTypeOf(\"IndexInFuncSection\");\nexports.isIndexInFuncSection = isIndexInFuncSection;\nvar isValtypeLiteral = isTypeOf(\"ValtypeLiteral\");\nexports.isValtypeLiteral = isValtypeLiteral;\nvar isTypeInstruction = isTypeOf(\"TypeInstruction\");\nexports.isTypeInstruction = isTypeInstruction;\nvar isStart = isTypeOf(\"Start\");\nexports.isStart = isStart;\nvar isGlobalType = isTypeOf(\"GlobalType\");\nexports.isGlobalType = isGlobalType;\nvar isLeadingComment = isTypeOf(\"LeadingComment\");\nexports.isLeadingComment = isLeadingComment;\nvar isBlockComment = isTypeOf(\"BlockComment\");\nexports.isBlockComment = isBlockComment;\nvar isData = isTypeOf(\"Data\");\nexports.isData = isData;\nvar isGlobal = isTypeOf(\"Global\");\nexports.isGlobal = isGlobal;\nvar isTable = isTypeOf(\"Table\");\nexports.isTable = isTable;\nvar isMemory = isTypeOf(\"Memory\");\nexports.isMemory = isMemory;\nvar isFuncImportDescr = isTypeOf(\"FuncImportDescr\");\nexports.isFuncImportDescr = isFuncImportDescr;\nvar isModuleImport = isTypeOf(\"ModuleImport\");\nexports.isModuleImport = isModuleImport;\nvar isModuleExportDescr = isTypeOf(\"ModuleExportDescr\");\nexports.isModuleExportDescr = isModuleExportDescr;\nvar isModuleExport = isTypeOf(\"ModuleExport\");\nexports.isModuleExport = isModuleExport;\nvar isLimit = isTypeOf(\"Limit\");\nexports.isLimit = isLimit;\nvar isSignature = isTypeOf(\"Signature\");\nexports.isSignature = isSignature;\nvar isProgram = isTypeOf(\"Program\");\nexports.isProgram = isProgram;\nvar isIdentifier = isTypeOf(\"Identifier\");\nexports.isIdentifier = isIdentifier;\nvar isBlockInstruction = isTypeOf(\"BlockInstruction\");\nexports.isBlockInstruction = isBlockInstruction;\nvar isCallInstruction = isTypeOf(\"CallInstruction\");\nexports.isCallInstruction = isCallInstruction;\nvar isCallIndirectInstruction = isTypeOf(\"CallIndirectInstruction\");\nexports.isCallIndirectInstruction = isCallIndirectInstruction;\nvar isByteArray = isTypeOf(\"ByteArray\");\nexports.isByteArray = isByteArray;\nvar isFunc = isTypeOf(\"Func\");\nexports.isFunc = isFunc;\nvar isInternalBrUnless = isTypeOf(\"InternalBrUnless\");\nexports.isInternalBrUnless = isInternalBrUnless;\nvar isInternalGoto = isTypeOf(\"InternalGoto\");\nexports.isInternalGoto = isInternalGoto;\nvar isInternalCallExtern = isTypeOf(\"InternalCallExtern\");\nexports.isInternalCallExtern = isInternalCallExtern;\nvar isInternalEndAndReturn = isTypeOf(\"InternalEndAndReturn\");\nexports.isInternalEndAndReturn = isInternalEndAndReturn;\nvar isNode = function isNode(node) {\n  return isModule(node) || isModuleMetadata(node) || isModuleNameMetadata(node) || isFunctionNameMetadata(node) || isLocalNameMetadata(node) || isBinaryModule(node) || isQuoteModule(node) || isSectionMetadata(node) || isProducersSectionMetadata(node) || isProducerMetadata(node) || isProducerMetadataVersionedName(node) || isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isElem(node) || isIndexInFuncSection(node) || isValtypeLiteral(node) || isTypeInstruction(node) || isStart(node) || isGlobalType(node) || isLeadingComment(node) || isBlockComment(node) || isData(node) || isGlobal(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node) || isModuleImport(node) || isModuleExportDescr(node) || isModuleExport(node) || isLimit(node) || isSignature(node) || isProgram(node) || isIdentifier(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node) || isByteArray(node) || isFunc(node) || isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\nexports.isNode = isNode;\nvar isBlock = function isBlock(node) {\n  return isLoopInstruction(node) || isBlockInstruction(node) || isFunc(node);\n};\nexports.isBlock = isBlock;\nvar isInstruction = function isInstruction(node) {\n  return isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isTypeInstruction(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node);\n};\nexports.isInstruction = isInstruction;\nvar isExpression = function isExpression(node) {\n  return isInstr(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isValtypeLiteral(node) || isIdentifier(node);\n};\nexports.isExpression = isExpression;\nvar isNumericLiteral = function isNumericLiteral(node) {\n  return isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node);\n};\nexports.isNumericLiteral = isNumericLiteral;\nvar isImportDescr = function isImportDescr(node) {\n  return isGlobalType(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node);\n};\nexports.isImportDescr = isImportDescr;\nvar isIntrinsic = function isIntrinsic(node) {\n  return isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\nexports.isIntrinsic = isIntrinsic;\nvar assertModule = assertTypeOf(\"Module\");\nexports.assertModule = assertModule;\nvar assertModuleMetadata = assertTypeOf(\"ModuleMetadata\");\nexports.assertModuleMetadata = assertModuleMetadata;\nvar assertModuleNameMetadata = assertTypeOf(\"ModuleNameMetadata\");\nexports.assertModuleNameMetadata = assertModuleNameMetadata;\nvar assertFunctionNameMetadata = assertTypeOf(\"FunctionNameMetadata\");\nexports.assertFunctionNameMetadata = assertFunctionNameMetadata;\nvar assertLocalNameMetadata = assertTypeOf(\"LocalNameMetadata\");\nexports.assertLocalNameMetadata = assertLocalNameMetadata;\nvar assertBinaryModule = assertTypeOf(\"BinaryModule\");\nexports.assertBinaryModule = assertBinaryModule;\nvar assertQuoteModule = assertTypeOf(\"QuoteModule\");\nexports.assertQuoteModule = assertQuoteModule;\nvar assertSectionMetadata = assertTypeOf(\"SectionMetadata\");\nexports.assertSectionMetadata = assertSectionMetadata;\nvar assertProducersSectionMetadata = assertTypeOf(\"ProducersSectionMetadata\");\nexports.assertProducersSectionMetadata = assertProducersSectionMetadata;\nvar assertProducerMetadata = assertTypeOf(\"ProducerMetadata\");\nexports.assertProducerMetadata = assertProducerMetadata;\nvar assertProducerMetadataVersionedName = assertTypeOf(\"ProducerMetadataVersionedName\");\nexports.assertProducerMetadataVersionedName = assertProducerMetadataVersionedName;\nvar assertLoopInstruction = assertTypeOf(\"LoopInstruction\");\nexports.assertLoopInstruction = assertLoopInstruction;\nvar assertInstr = assertTypeOf(\"Instr\");\nexports.assertInstr = assertInstr;\nvar assertIfInstruction = assertTypeOf(\"IfInstruction\");\nexports.assertIfInstruction = assertIfInstruction;\nvar assertStringLiteral = assertTypeOf(\"StringLiteral\");\nexports.assertStringLiteral = assertStringLiteral;\nvar assertNumberLiteral = assertTypeOf(\"NumberLiteral\");\nexports.assertNumberLiteral = assertNumberLiteral;\nvar assertLongNumberLiteral = assertTypeOf(\"LongNumberLiteral\");\nexports.assertLongNumberLiteral = assertLongNumberLiteral;\nvar assertFloatLiteral = assertTypeOf(\"FloatLiteral\");\nexports.assertFloatLiteral = assertFloatLiteral;\nvar assertElem = assertTypeOf(\"Elem\");\nexports.assertElem = assertElem;\nvar assertIndexInFuncSection = assertTypeOf(\"IndexInFuncSection\");\nexports.assertIndexInFuncSection = assertIndexInFuncSection;\nvar assertValtypeLiteral = assertTypeOf(\"ValtypeLiteral\");\nexports.assertValtypeLiteral = assertValtypeLiteral;\nvar assertTypeInstruction = assertTypeOf(\"TypeInstruction\");\nexports.assertTypeInstruction = assertTypeInstruction;\nvar assertStart = assertTypeOf(\"Start\");\nexports.assertStart = assertStart;\nvar assertGlobalType = assertTypeOf(\"GlobalType\");\nexports.assertGlobalType = assertGlobalType;\nvar assertLeadingComment = assertTypeOf(\"LeadingComment\");\nexports.assertLeadingComment = assertLeadingComment;\nvar assertBlockComment = assertTypeOf(\"BlockComment\");\nexports.assertBlockComment = assertBlockComment;\nvar assertData = assertTypeOf(\"Data\");\nexports.assertData = assertData;\nvar assertGlobal = assertTypeOf(\"Global\");\nexports.assertGlobal = assertGlobal;\nvar assertTable = assertTypeOf(\"Table\");\nexports.assertTable = assertTable;\nvar assertMemory = assertTypeOf(\"Memory\");\nexports.assertMemory = assertMemory;\nvar assertFuncImportDescr = assertTypeOf(\"FuncImportDescr\");\nexports.assertFuncImportDescr = assertFuncImportDescr;\nvar assertModuleImport = assertTypeOf(\"ModuleImport\");\nexports.assertModuleImport = assertModuleImport;\nvar assertModuleExportDescr = assertTypeOf(\"ModuleExportDescr\");\nexports.assertModuleExportDescr = assertModuleExportDescr;\nvar assertModuleExport = assertTypeOf(\"ModuleExport\");\nexports.assertModuleExport = assertModuleExport;\nvar assertLimit = assertTypeOf(\"Limit\");\nexports.assertLimit = assertLimit;\nvar assertSignature = assertTypeOf(\"Signature\");\nexports.assertSignature = assertSignature;\nvar assertProgram = assertTypeOf(\"Program\");\nexports.assertProgram = assertProgram;\nvar assertIdentifier = assertTypeOf(\"Identifier\");\nexports.assertIdentifier = assertIdentifier;\nvar assertBlockInstruction = assertTypeOf(\"BlockInstruction\");\nexports.assertBlockInstruction = assertBlockInstruction;\nvar assertCallInstruction = assertTypeOf(\"CallInstruction\");\nexports.assertCallInstruction = assertCallInstruction;\nvar assertCallIndirectInstruction = assertTypeOf(\"CallIndirectInstruction\");\nexports.assertCallIndirectInstruction = assertCallIndirectInstruction;\nvar assertByteArray = assertTypeOf(\"ByteArray\");\nexports.assertByteArray = assertByteArray;\nvar assertFunc = assertTypeOf(\"Func\");\nexports.assertFunc = assertFunc;\nvar assertInternalBrUnless = assertTypeOf(\"InternalBrUnless\");\nexports.assertInternalBrUnless = assertInternalBrUnless;\nvar assertInternalGoto = assertTypeOf(\"InternalGoto\");\nexports.assertInternalGoto = assertInternalGoto;\nvar assertInternalCallExtern = assertTypeOf(\"InternalCallExtern\");\nexports.assertInternalCallExtern = assertInternalCallExtern;\nvar assertInternalEndAndReturn = assertTypeOf(\"InternalEndAndReturn\");\nexports.assertInternalEndAndReturn = assertInternalEndAndReturn;\nvar unionTypesMap = {\n  Module: [\"Node\"],\n  ModuleMetadata: [\"Node\"],\n  ModuleNameMetadata: [\"Node\"],\n  FunctionNameMetadata: [\"Node\"],\n  LocalNameMetadata: [\"Node\"],\n  BinaryModule: [\"Node\"],\n  QuoteModule: [\"Node\"],\n  SectionMetadata: [\"Node\"],\n  ProducersSectionMetadata: [\"Node\"],\n  ProducerMetadata: [\"Node\"],\n  ProducerMetadataVersionedName: [\"Node\"],\n  LoopInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  Instr: [\"Node\", \"Expression\", \"Instruction\"],\n  IfInstruction: [\"Node\", \"Instruction\"],\n  StringLiteral: [\"Node\", \"Expression\"],\n  NumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  LongNumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  FloatLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  Elem: [\"Node\"],\n  IndexInFuncSection: [\"Node\"],\n  ValtypeLiteral: [\"Node\", \"Expression\"],\n  TypeInstruction: [\"Node\", \"Instruction\"],\n  Start: [\"Node\"],\n  GlobalType: [\"Node\", \"ImportDescr\"],\n  LeadingComment: [\"Node\"],\n  BlockComment: [\"Node\"],\n  Data: [\"Node\"],\n  Global: [\"Node\"],\n  Table: [\"Node\", \"ImportDescr\"],\n  Memory: [\"Node\", \"ImportDescr\"],\n  FuncImportDescr: [\"Node\", \"ImportDescr\"],\n  ModuleImport: [\"Node\"],\n  ModuleExportDescr: [\"Node\"],\n  ModuleExport: [\"Node\"],\n  Limit: [\"Node\"],\n  Signature: [\"Node\"],\n  Program: [\"Node\"],\n  Identifier: [\"Node\", \"Expression\"],\n  BlockInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  CallInstruction: [\"Node\", \"Instruction\"],\n  CallIndirectInstruction: [\"Node\", \"Instruction\"],\n  ByteArray: [\"Node\"],\n  Func: [\"Node\", \"Block\"],\n  InternalBrUnless: [\"Node\", \"Intrinsic\"],\n  InternalGoto: [\"Node\", \"Intrinsic\"],\n  InternalCallExtern: [\"Node\", \"Intrinsic\"],\n  InternalEndAndReturn: [\"Node\", \"Intrinsic\"]\n};\nexports.unionTypesMap = unionTypesMap;\nvar nodeAndUnionTypes = [\"Module\", \"ModuleMetadata\", \"ModuleNameMetadata\", \"FunctionNameMetadata\", \"LocalNameMetadata\", \"BinaryModule\", \"QuoteModule\", \"SectionMetadata\", \"ProducersSectionMetadata\", \"ProducerMetadata\", \"ProducerMetadataVersionedName\", \"LoopInstruction\", \"Instr\", \"IfInstruction\", \"StringLiteral\", \"NumberLiteral\", \"LongNumberLiteral\", \"FloatLiteral\", \"Elem\", \"IndexInFuncSection\", \"ValtypeLiteral\", \"TypeInstruction\", \"Start\", \"GlobalType\", \"LeadingComment\", \"BlockComment\", \"Data\", \"Global\", \"Table\", \"Memory\", \"FuncImportDescr\", \"ModuleImport\", \"ModuleExportDescr\", \"ModuleExport\", \"Limit\", \"Signature\", \"Program\", \"Identifier\", \"BlockInstruction\", \"CallInstruction\", \"CallIndirectInstruction\", \"ByteArray\", \"Func\", \"InternalBrUnless\", \"InternalGoto\", \"InternalCallExtern\", \"InternalEndAndReturn\", \"Node\", \"Block\", \"Instruction\", \"Expression\", \"NumericLiteral\", \"ImportDescr\", \"Intrinsic\"];\nexports.nodeAndUnionTypes = nodeAndUnionTypes;","map":{"version":3,"names":["Object","defineProperty","exports","value","module","_module","moduleMetadata","moduleNameMetadata","functionNameMetadata","localNameMetadata","binaryModule","quoteModule","sectionMetadata","producersSectionMetadata","producerMetadata","producerMetadataVersionedName","loopInstruction","instr","ifInstruction","stringLiteral","numberLiteral","longNumberLiteral","floatLiteral","elem","indexInFuncSection","valtypeLiteral","typeInstruction","start","globalType","leadingComment","blockComment","data","global","table","memory","funcImportDescr","moduleImport","moduleExportDescr","moduleExport","limit","signature","program","identifier","blockInstruction","callInstruction","callIndirectInstruction","byteArray","func","internalBrUnless","internalGoto","internalCallExtern","internalEndAndReturn","assertInternalCallExtern","assertInternalGoto","assertInternalBrUnless","assertFunc","assertByteArray","assertCallIndirectInstruction","assertCallInstruction","assertBlockInstruction","assertIdentifier","assertProgram","assertSignature","assertLimit","assertModuleExport","assertModuleExportDescr","assertModuleImport","assertFuncImportDescr","assertMemory","assertTable","assertGlobal","assertData","assertBlockComment","assertLeadingComment","assertGlobalType","assertStart","assertTypeInstruction","assertValtypeLiteral","assertIndexInFuncSection","assertElem","assertFloatLiteral","assertLongNumberLiteral","assertNumberLiteral","assertStringLiteral","assertIfInstruction","assertInstr","assertLoopInstruction","assertProducerMetadataVersionedName","assertProducerMetadata","assertProducersSectionMetadata","assertSectionMetadata","assertQuoteModule","assertBinaryModule","assertLocalNameMetadata","assertFunctionNameMetadata","assertModuleNameMetadata","assertModuleMetadata","assertModule","isIntrinsic","isImportDescr","isNumericLiteral","isExpression","isInstruction","isBlock","isNode","isInternalEndAndReturn","isInternalCallExtern","isInternalGoto","isInternalBrUnless","isFunc","isByteArray","isCallIndirectInstruction","isCallInstruction","isBlockInstruction","isIdentifier","isProgram","isSignature","isLimit","isModuleExport","isModuleExportDescr","isModuleImport","isFuncImportDescr","isMemory","isTable","isGlobal","isData","isBlockComment","isLeadingComment","isGlobalType","isStart","isTypeInstruction","isValtypeLiteral","isIndexInFuncSection","isElem","isFloatLiteral","isLongNumberLiteral","isNumberLiteral","isStringLiteral","isIfInstruction","isInstr","isLoopInstruction","isProducerMetadataVersionedName","isProducerMetadata","isProducersSectionMetadata","isSectionMetadata","isQuoteModule","isBinaryModule","isLocalNameMetadata","isFunctionNameMetadata","isModuleNameMetadata","isModuleMetadata","isModule","nodeAndUnionTypes","unionTypesMap","assertInternalEndAndReturn","_typeof","obj","Symbol","iterator","constructor","prototype","isTypeOf","t","n","type","assertTypeOf","Error","undefined","id","fields","metadata","length","node","sections","functionNames","localNames","producers","index","localIndex","functionIndex","blob","string","section","startOffset","size","vectorOfSize","language","processedBy","sdk","name","version","label","resulttype","object","args","namedArgs","keys","testLabel","test","result","consequent","alternate","raw","nan","inf","offset","funcs","functype","valtype","mutability","memoryIndex","init","elementType","limits","elements","descr","exportType","min","max","shared","params","results","body","instrArgs","numeric","intrs","values","isExternal","target","Module","ModuleMetadata","ModuleNameMetadata","FunctionNameMetadata","LocalNameMetadata","BinaryModule","QuoteModule","SectionMetadata","ProducersSectionMetadata","ProducerMetadata","ProducerMetadataVersionedName","LoopInstruction","Instr","IfInstruction","StringLiteral","NumberLiteral","LongNumberLiteral","FloatLiteral","Elem","IndexInFuncSection","ValtypeLiteral","TypeInstruction","Start","GlobalType","LeadingComment","BlockComment","Data","Global","Table","Memory","FuncImportDescr","ModuleImport","ModuleExportDescr","ModuleExport","Limit","Signature","Program","Identifier","BlockInstruction","CallInstruction","CallIndirectInstruction","ByteArray","Func","InternalBrUnless","InternalGoto","InternalCallExtern","InternalEndAndReturn"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@webassemblyjs/ast/lib/nodes.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.module = _module;\nexports.moduleMetadata = moduleMetadata;\nexports.moduleNameMetadata = moduleNameMetadata;\nexports.functionNameMetadata = functionNameMetadata;\nexports.localNameMetadata = localNameMetadata;\nexports.binaryModule = binaryModule;\nexports.quoteModule = quoteModule;\nexports.sectionMetadata = sectionMetadata;\nexports.producersSectionMetadata = producersSectionMetadata;\nexports.producerMetadata = producerMetadata;\nexports.producerMetadataVersionedName = producerMetadataVersionedName;\nexports.loopInstruction = loopInstruction;\nexports.instr = instr;\nexports.ifInstruction = ifInstruction;\nexports.stringLiteral = stringLiteral;\nexports.numberLiteral = numberLiteral;\nexports.longNumberLiteral = longNumberLiteral;\nexports.floatLiteral = floatLiteral;\nexports.elem = elem;\nexports.indexInFuncSection = indexInFuncSection;\nexports.valtypeLiteral = valtypeLiteral;\nexports.typeInstruction = typeInstruction;\nexports.start = start;\nexports.globalType = globalType;\nexports.leadingComment = leadingComment;\nexports.blockComment = blockComment;\nexports.data = data;\nexports.global = global;\nexports.table = table;\nexports.memory = memory;\nexports.funcImportDescr = funcImportDescr;\nexports.moduleImport = moduleImport;\nexports.moduleExportDescr = moduleExportDescr;\nexports.moduleExport = moduleExport;\nexports.limit = limit;\nexports.signature = signature;\nexports.program = program;\nexports.identifier = identifier;\nexports.blockInstruction = blockInstruction;\nexports.callInstruction = callInstruction;\nexports.callIndirectInstruction = callIndirectInstruction;\nexports.byteArray = byteArray;\nexports.func = func;\nexports.internalBrUnless = internalBrUnless;\nexports.internalGoto = internalGoto;\nexports.internalCallExtern = internalCallExtern;\nexports.internalEndAndReturn = internalEndAndReturn;\nexports.assertInternalCallExtern = exports.assertInternalGoto = exports.assertInternalBrUnless = exports.assertFunc = exports.assertByteArray = exports.assertCallIndirectInstruction = exports.assertCallInstruction = exports.assertBlockInstruction = exports.assertIdentifier = exports.assertProgram = exports.assertSignature = exports.assertLimit = exports.assertModuleExport = exports.assertModuleExportDescr = exports.assertModuleImport = exports.assertFuncImportDescr = exports.assertMemory = exports.assertTable = exports.assertGlobal = exports.assertData = exports.assertBlockComment = exports.assertLeadingComment = exports.assertGlobalType = exports.assertStart = exports.assertTypeInstruction = exports.assertValtypeLiteral = exports.assertIndexInFuncSection = exports.assertElem = exports.assertFloatLiteral = exports.assertLongNumberLiteral = exports.assertNumberLiteral = exports.assertStringLiteral = exports.assertIfInstruction = exports.assertInstr = exports.assertLoopInstruction = exports.assertProducerMetadataVersionedName = exports.assertProducerMetadata = exports.assertProducersSectionMetadata = exports.assertSectionMetadata = exports.assertQuoteModule = exports.assertBinaryModule = exports.assertLocalNameMetadata = exports.assertFunctionNameMetadata = exports.assertModuleNameMetadata = exports.assertModuleMetadata = exports.assertModule = exports.isIntrinsic = exports.isImportDescr = exports.isNumericLiteral = exports.isExpression = exports.isInstruction = exports.isBlock = exports.isNode = exports.isInternalEndAndReturn = exports.isInternalCallExtern = exports.isInternalGoto = exports.isInternalBrUnless = exports.isFunc = exports.isByteArray = exports.isCallIndirectInstruction = exports.isCallInstruction = exports.isBlockInstruction = exports.isIdentifier = exports.isProgram = exports.isSignature = exports.isLimit = exports.isModuleExport = exports.isModuleExportDescr = exports.isModuleImport = exports.isFuncImportDescr = exports.isMemory = exports.isTable = exports.isGlobal = exports.isData = exports.isBlockComment = exports.isLeadingComment = exports.isGlobalType = exports.isStart = exports.isTypeInstruction = exports.isValtypeLiteral = exports.isIndexInFuncSection = exports.isElem = exports.isFloatLiteral = exports.isLongNumberLiteral = exports.isNumberLiteral = exports.isStringLiteral = exports.isIfInstruction = exports.isInstr = exports.isLoopInstruction = exports.isProducerMetadataVersionedName = exports.isProducerMetadata = exports.isProducersSectionMetadata = exports.isSectionMetadata = exports.isQuoteModule = exports.isBinaryModule = exports.isLocalNameMetadata = exports.isFunctionNameMetadata = exports.isModuleNameMetadata = exports.isModuleMetadata = exports.isModule = void 0;\nexports.nodeAndUnionTypes = exports.unionTypesMap = exports.assertInternalEndAndReturn = void 0;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// THIS FILE IS AUTOGENERATED\n// see scripts/generateNodeUtils.js\nfunction isTypeOf(t) {\n  return function (n) {\n    return n.type === t;\n  };\n}\n\nfunction assertTypeOf(t) {\n  return function (n) {\n    return function () {\n      if (!(n.type === t)) {\n        throw new Error('n.type === t' + \" error: \" + (undefined || \"unknown\"));\n      }\n    }();\n  };\n}\n\nfunction _module(id, fields, metadata) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(fields) === \"object\" && typeof fields.length !== \"undefined\")) {\n    throw new Error('typeof fields === \"object\" && typeof fields.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Module\",\n    id: id,\n    fields: fields\n  };\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction moduleMetadata(sections, functionNames, localNames, producers) {\n  if (!(_typeof(sections) === \"object\" && typeof sections.length !== \"undefined\")) {\n    throw new Error('typeof sections === \"object\" && typeof sections.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (functionNames !== null && functionNames !== undefined) {\n    if (!(_typeof(functionNames) === \"object\" && typeof functionNames.length !== \"undefined\")) {\n      throw new Error('typeof functionNames === \"object\" && typeof functionNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (localNames !== null && localNames !== undefined) {\n    if (!(_typeof(localNames) === \"object\" && typeof localNames.length !== \"undefined\")) {\n      throw new Error('typeof localNames === \"object\" && typeof localNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (producers !== null && producers !== undefined) {\n    if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n      throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"ModuleMetadata\",\n    sections: sections\n  };\n\n  if (typeof functionNames !== \"undefined\" && functionNames.length > 0) {\n    node.functionNames = functionNames;\n  }\n\n  if (typeof localNames !== \"undefined\" && localNames.length > 0) {\n    node.localNames = localNames;\n  }\n\n  if (typeof producers !== \"undefined\" && producers.length > 0) {\n    node.producers = producers;\n  }\n\n  return node;\n}\n\nfunction moduleNameMetadata(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleNameMetadata\",\n    value: value\n  };\n  return node;\n}\n\nfunction functionNameMetadata(value, index) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof index === \"number\")) {\n    throw new Error('typeof index === \"number\"' + \" error: \" + (\"Argument index must be of type number, given: \" + _typeof(index) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FunctionNameMetadata\",\n    value: value,\n    index: index\n  };\n  return node;\n}\n\nfunction localNameMetadata(value, localIndex, functionIndex) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof localIndex === \"number\")) {\n    throw new Error('typeof localIndex === \"number\"' + \" error: \" + (\"Argument localIndex must be of type number, given: \" + _typeof(localIndex) || \"unknown\"));\n  }\n\n  if (!(typeof functionIndex === \"number\")) {\n    throw new Error('typeof functionIndex === \"number\"' + \" error: \" + (\"Argument functionIndex must be of type number, given: \" + _typeof(functionIndex) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LocalNameMetadata\",\n    value: value,\n    localIndex: localIndex,\n    functionIndex: functionIndex\n  };\n  return node;\n}\n\nfunction binaryModule(id, blob) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(blob) === \"object\" && typeof blob.length !== \"undefined\")) {\n    throw new Error('typeof blob === \"object\" && typeof blob.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BinaryModule\",\n    id: id,\n    blob: blob\n  };\n  return node;\n}\n\nfunction quoteModule(id, string) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(string) === \"object\" && typeof string.length !== \"undefined\")) {\n    throw new Error('typeof string === \"object\" && typeof string.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"QuoteModule\",\n    id: id,\n    string: string\n  };\n  return node;\n}\n\nfunction sectionMetadata(section, startOffset, size, vectorOfSize) {\n  if (!(typeof startOffset === \"number\")) {\n    throw new Error('typeof startOffset === \"number\"' + \" error: \" + (\"Argument startOffset must be of type number, given: \" + _typeof(startOffset) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"SectionMetadata\",\n    section: section,\n    startOffset: startOffset,\n    size: size,\n    vectorOfSize: vectorOfSize\n  };\n  return node;\n}\n\nfunction producersSectionMetadata(producers) {\n  if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n    throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducersSectionMetadata\",\n    producers: producers\n  };\n  return node;\n}\n\nfunction producerMetadata(language, processedBy, sdk) {\n  if (!(_typeof(language) === \"object\" && typeof language.length !== \"undefined\")) {\n    throw new Error('typeof language === \"object\" && typeof language.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(processedBy) === \"object\" && typeof processedBy.length !== \"undefined\")) {\n    throw new Error('typeof processedBy === \"object\" && typeof processedBy.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(sdk) === \"object\" && typeof sdk.length !== \"undefined\")) {\n    throw new Error('typeof sdk === \"object\" && typeof sdk.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadata\",\n    language: language,\n    processedBy: processedBy,\n    sdk: sdk\n  };\n  return node;\n}\n\nfunction producerMetadataVersionedName(name, version) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  if (!(typeof version === \"string\")) {\n    throw new Error('typeof version === \"string\"' + \" error: \" + (\"Argument version must be of type string, given: \" + _typeof(version) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadataVersionedName\",\n    name: name,\n    version: version\n  };\n  return node;\n}\n\nfunction loopInstruction(label, resulttype, instr) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LoopInstruction\",\n    id: \"loop\",\n    label: label,\n    resulttype: resulttype,\n    instr: instr\n  };\n  return node;\n}\n\nfunction instr(id, object, args, namedArgs) {\n  if (!(typeof id === \"string\")) {\n    throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n  }\n\n  if (!(_typeof(args) === \"object\" && typeof args.length !== \"undefined\")) {\n    throw new Error('typeof args === \"object\" && typeof args.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Instr\",\n    id: id,\n    args: args\n  };\n\n  if (typeof object !== \"undefined\") {\n    node.object = object;\n  }\n\n  if (typeof namedArgs !== \"undefined\" && Object.keys(namedArgs).length !== 0) {\n    node.namedArgs = namedArgs;\n  }\n\n  return node;\n}\n\nfunction ifInstruction(testLabel, test, result, consequent, alternate) {\n  if (!(_typeof(test) === \"object\" && typeof test.length !== \"undefined\")) {\n    throw new Error('typeof test === \"object\" && typeof test.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(consequent) === \"object\" && typeof consequent.length !== \"undefined\")) {\n    throw new Error('typeof consequent === \"object\" && typeof consequent.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(alternate) === \"object\" && typeof alternate.length !== \"undefined\")) {\n    throw new Error('typeof alternate === \"object\" && typeof alternate.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"IfInstruction\",\n    id: \"if\",\n    testLabel: testLabel,\n    test: test,\n    result: result,\n    consequent: consequent,\n    alternate: alternate\n  };\n  return node;\n}\n\nfunction stringLiteral(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"StringLiteral\",\n    value: value\n  };\n  return node;\n}\n\nfunction numberLiteral(value, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"NumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction longNumberLiteral(value, raw) {\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LongNumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction floatLiteral(value, nan, inf, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (nan !== null && nan !== undefined) {\n    if (!(typeof nan === \"boolean\")) {\n      throw new Error('typeof nan === \"boolean\"' + \" error: \" + (\"Argument nan must be of type boolean, given: \" + _typeof(nan) || \"unknown\"));\n    }\n  }\n\n  if (inf !== null && inf !== undefined) {\n    if (!(typeof inf === \"boolean\")) {\n      throw new Error('typeof inf === \"boolean\"' + \" error: \" + (\"Argument inf must be of type boolean, given: \" + _typeof(inf) || \"unknown\"));\n    }\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FloatLiteral\",\n    value: value,\n    raw: raw\n  };\n\n  if (nan === true) {\n    node.nan = true;\n  }\n\n  if (inf === true) {\n    node.inf = true;\n  }\n\n  return node;\n}\n\nfunction elem(table, offset, funcs) {\n  if (!(_typeof(offset) === \"object\" && typeof offset.length !== \"undefined\")) {\n    throw new Error('typeof offset === \"object\" && typeof offset.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(funcs) === \"object\" && typeof funcs.length !== \"undefined\")) {\n    throw new Error('typeof funcs === \"object\" && typeof funcs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Elem\",\n    table: table,\n    offset: offset,\n    funcs: funcs\n  };\n  return node;\n}\n\nfunction indexInFuncSection(index) {\n  var node = {\n    type: \"IndexInFuncSection\",\n    index: index\n  };\n  return node;\n}\n\nfunction valtypeLiteral(name) {\n  var node = {\n    type: \"ValtypeLiteral\",\n    name: name\n  };\n  return node;\n}\n\nfunction typeInstruction(id, functype) {\n  var node = {\n    type: \"TypeInstruction\",\n    id: id,\n    functype: functype\n  };\n  return node;\n}\n\nfunction start(index) {\n  var node = {\n    type: \"Start\",\n    index: index\n  };\n  return node;\n}\n\nfunction globalType(valtype, mutability) {\n  var node = {\n    type: \"GlobalType\",\n    valtype: valtype,\n    mutability: mutability\n  };\n  return node;\n}\n\nfunction leadingComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LeadingComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction blockComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction data(memoryIndex, offset, init) {\n  var node = {\n    type: \"Data\",\n    memoryIndex: memoryIndex,\n    offset: offset,\n    init: init\n  };\n  return node;\n}\n\nfunction global(globalType, init, name) {\n  if (!(_typeof(init) === \"object\" && typeof init.length !== \"undefined\")) {\n    throw new Error('typeof init === \"object\" && typeof init.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Global\",\n    globalType: globalType,\n    init: init,\n    name: name\n  };\n  return node;\n}\n\nfunction table(elementType, limits, name, elements) {\n  if (!(limits.type === \"Limit\")) {\n    throw new Error('limits.type === \"Limit\"' + \" error: \" + (\"Argument limits must be of type Limit, given: \" + limits.type || \"unknown\"));\n  }\n\n  if (elements !== null && elements !== undefined) {\n    if (!(_typeof(elements) === \"object\" && typeof elements.length !== \"undefined\")) {\n      throw new Error('typeof elements === \"object\" && typeof elements.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Table\",\n    elementType: elementType,\n    limits: limits,\n    name: name\n  };\n\n  if (typeof elements !== \"undefined\" && elements.length > 0) {\n    node.elements = elements;\n  }\n\n  return node;\n}\n\nfunction memory(limits, id) {\n  var node = {\n    type: \"Memory\",\n    limits: limits,\n    id: id\n  };\n  return node;\n}\n\nfunction funcImportDescr(id, signature) {\n  var node = {\n    type: \"FuncImportDescr\",\n    id: id,\n    signature: signature\n  };\n  return node;\n}\n\nfunction moduleImport(module, name, descr) {\n  if (!(typeof module === \"string\")) {\n    throw new Error('typeof module === \"string\"' + \" error: \" + (\"Argument module must be of type string, given: \" + _typeof(module) || \"unknown\"));\n  }\n\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleImport\",\n    module: module,\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction moduleExportDescr(exportType, id) {\n  var node = {\n    type: \"ModuleExportDescr\",\n    exportType: exportType,\n    id: id\n  };\n  return node;\n}\n\nfunction moduleExport(name, descr) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleExport\",\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction limit(min, max, shared) {\n  if (!(typeof min === \"number\")) {\n    throw new Error('typeof min === \"number\"' + \" error: \" + (\"Argument min must be of type number, given: \" + _typeof(min) || \"unknown\"));\n  }\n\n  if (max !== null && max !== undefined) {\n    if (!(typeof max === \"number\")) {\n      throw new Error('typeof max === \"number\"' + \" error: \" + (\"Argument max must be of type number, given: \" + _typeof(max) || \"unknown\"));\n    }\n  }\n\n  if (shared !== null && shared !== undefined) {\n    if (!(typeof shared === \"boolean\")) {\n      throw new Error('typeof shared === \"boolean\"' + \" error: \" + (\"Argument shared must be of type boolean, given: \" + _typeof(shared) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Limit\",\n    min: min\n  };\n\n  if (typeof max !== \"undefined\") {\n    node.max = max;\n  }\n\n  if (shared === true) {\n    node.shared = true;\n  }\n\n  return node;\n}\n\nfunction signature(params, results) {\n  if (!(_typeof(params) === \"object\" && typeof params.length !== \"undefined\")) {\n    throw new Error('typeof params === \"object\" && typeof params.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(results) === \"object\" && typeof results.length !== \"undefined\")) {\n    throw new Error('typeof results === \"object\" && typeof results.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Signature\",\n    params: params,\n    results: results\n  };\n  return node;\n}\n\nfunction program(body) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Program\",\n    body: body\n  };\n  return node;\n}\n\nfunction identifier(value, raw) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (raw !== null && raw !== undefined) {\n    if (!(typeof raw === \"string\")) {\n      throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Identifier\",\n    value: value\n  };\n\n  if (typeof raw !== \"undefined\") {\n    node.raw = raw;\n  }\n\n  return node;\n}\n\nfunction blockInstruction(label, instr, result) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockInstruction\",\n    id: \"block\",\n    label: label,\n    instr: instr,\n    result: result\n  };\n  return node;\n}\n\nfunction callInstruction(index, instrArgs, numeric) {\n  if (instrArgs !== null && instrArgs !== undefined) {\n    if (!(_typeof(instrArgs) === \"object\" && typeof instrArgs.length !== \"undefined\")) {\n      throw new Error('typeof instrArgs === \"object\" && typeof instrArgs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallInstruction\",\n    id: \"call\",\n    index: index\n  };\n\n  if (typeof instrArgs !== \"undefined\" && instrArgs.length > 0) {\n    node.instrArgs = instrArgs;\n  }\n\n  if (typeof numeric !== \"undefined\") {\n    node.numeric = numeric;\n  }\n\n  return node;\n}\n\nfunction callIndirectInstruction(signature, intrs) {\n  if (intrs !== null && intrs !== undefined) {\n    if (!(_typeof(intrs) === \"object\" && typeof intrs.length !== \"undefined\")) {\n      throw new Error('typeof intrs === \"object\" && typeof intrs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallIndirectInstruction\",\n    id: \"call_indirect\",\n    signature: signature\n  };\n\n  if (typeof intrs !== \"undefined\" && intrs.length > 0) {\n    node.intrs = intrs;\n  }\n\n  return node;\n}\n\nfunction byteArray(values) {\n  if (!(_typeof(values) === \"object\" && typeof values.length !== \"undefined\")) {\n    throw new Error('typeof values === \"object\" && typeof values.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ByteArray\",\n    values: values\n  };\n  return node;\n}\n\nfunction func(name, signature, body, isExternal, metadata) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (isExternal !== null && isExternal !== undefined) {\n    if (!(typeof isExternal === \"boolean\")) {\n      throw new Error('typeof isExternal === \"boolean\"' + \" error: \" + (\"Argument isExternal must be of type boolean, given: \" + _typeof(isExternal) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Func\",\n    name: name,\n    signature: signature,\n    body: body\n  };\n\n  if (isExternal === true) {\n    node.isExternal = true;\n  }\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction internalBrUnless(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalBrUnless\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalGoto(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalGoto\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalCallExtern(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalCallExtern\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalEndAndReturn() {\n  var node = {\n    type: \"InternalEndAndReturn\"\n  };\n  return node;\n}\n\nvar isModule = isTypeOf(\"Module\");\nexports.isModule = isModule;\nvar isModuleMetadata = isTypeOf(\"ModuleMetadata\");\nexports.isModuleMetadata = isModuleMetadata;\nvar isModuleNameMetadata = isTypeOf(\"ModuleNameMetadata\");\nexports.isModuleNameMetadata = isModuleNameMetadata;\nvar isFunctionNameMetadata = isTypeOf(\"FunctionNameMetadata\");\nexports.isFunctionNameMetadata = isFunctionNameMetadata;\nvar isLocalNameMetadata = isTypeOf(\"LocalNameMetadata\");\nexports.isLocalNameMetadata = isLocalNameMetadata;\nvar isBinaryModule = isTypeOf(\"BinaryModule\");\nexports.isBinaryModule = isBinaryModule;\nvar isQuoteModule = isTypeOf(\"QuoteModule\");\nexports.isQuoteModule = isQuoteModule;\nvar isSectionMetadata = isTypeOf(\"SectionMetadata\");\nexports.isSectionMetadata = isSectionMetadata;\nvar isProducersSectionMetadata = isTypeOf(\"ProducersSectionMetadata\");\nexports.isProducersSectionMetadata = isProducersSectionMetadata;\nvar isProducerMetadata = isTypeOf(\"ProducerMetadata\");\nexports.isProducerMetadata = isProducerMetadata;\nvar isProducerMetadataVersionedName = isTypeOf(\"ProducerMetadataVersionedName\");\nexports.isProducerMetadataVersionedName = isProducerMetadataVersionedName;\nvar isLoopInstruction = isTypeOf(\"LoopInstruction\");\nexports.isLoopInstruction = isLoopInstruction;\nvar isInstr = isTypeOf(\"Instr\");\nexports.isInstr = isInstr;\nvar isIfInstruction = isTypeOf(\"IfInstruction\");\nexports.isIfInstruction = isIfInstruction;\nvar isStringLiteral = isTypeOf(\"StringLiteral\");\nexports.isStringLiteral = isStringLiteral;\nvar isNumberLiteral = isTypeOf(\"NumberLiteral\");\nexports.isNumberLiteral = isNumberLiteral;\nvar isLongNumberLiteral = isTypeOf(\"LongNumberLiteral\");\nexports.isLongNumberLiteral = isLongNumberLiteral;\nvar isFloatLiteral = isTypeOf(\"FloatLiteral\");\nexports.isFloatLiteral = isFloatLiteral;\nvar isElem = isTypeOf(\"Elem\");\nexports.isElem = isElem;\nvar isIndexInFuncSection = isTypeOf(\"IndexInFuncSection\");\nexports.isIndexInFuncSection = isIndexInFuncSection;\nvar isValtypeLiteral = isTypeOf(\"ValtypeLiteral\");\nexports.isValtypeLiteral = isValtypeLiteral;\nvar isTypeInstruction = isTypeOf(\"TypeInstruction\");\nexports.isTypeInstruction = isTypeInstruction;\nvar isStart = isTypeOf(\"Start\");\nexports.isStart = isStart;\nvar isGlobalType = isTypeOf(\"GlobalType\");\nexports.isGlobalType = isGlobalType;\nvar isLeadingComment = isTypeOf(\"LeadingComment\");\nexports.isLeadingComment = isLeadingComment;\nvar isBlockComment = isTypeOf(\"BlockComment\");\nexports.isBlockComment = isBlockComment;\nvar isData = isTypeOf(\"Data\");\nexports.isData = isData;\nvar isGlobal = isTypeOf(\"Global\");\nexports.isGlobal = isGlobal;\nvar isTable = isTypeOf(\"Table\");\nexports.isTable = isTable;\nvar isMemory = isTypeOf(\"Memory\");\nexports.isMemory = isMemory;\nvar isFuncImportDescr = isTypeOf(\"FuncImportDescr\");\nexports.isFuncImportDescr = isFuncImportDescr;\nvar isModuleImport = isTypeOf(\"ModuleImport\");\nexports.isModuleImport = isModuleImport;\nvar isModuleExportDescr = isTypeOf(\"ModuleExportDescr\");\nexports.isModuleExportDescr = isModuleExportDescr;\nvar isModuleExport = isTypeOf(\"ModuleExport\");\nexports.isModuleExport = isModuleExport;\nvar isLimit = isTypeOf(\"Limit\");\nexports.isLimit = isLimit;\nvar isSignature = isTypeOf(\"Signature\");\nexports.isSignature = isSignature;\nvar isProgram = isTypeOf(\"Program\");\nexports.isProgram = isProgram;\nvar isIdentifier = isTypeOf(\"Identifier\");\nexports.isIdentifier = isIdentifier;\nvar isBlockInstruction = isTypeOf(\"BlockInstruction\");\nexports.isBlockInstruction = isBlockInstruction;\nvar isCallInstruction = isTypeOf(\"CallInstruction\");\nexports.isCallInstruction = isCallInstruction;\nvar isCallIndirectInstruction = isTypeOf(\"CallIndirectInstruction\");\nexports.isCallIndirectInstruction = isCallIndirectInstruction;\nvar isByteArray = isTypeOf(\"ByteArray\");\nexports.isByteArray = isByteArray;\nvar isFunc = isTypeOf(\"Func\");\nexports.isFunc = isFunc;\nvar isInternalBrUnless = isTypeOf(\"InternalBrUnless\");\nexports.isInternalBrUnless = isInternalBrUnless;\nvar isInternalGoto = isTypeOf(\"InternalGoto\");\nexports.isInternalGoto = isInternalGoto;\nvar isInternalCallExtern = isTypeOf(\"InternalCallExtern\");\nexports.isInternalCallExtern = isInternalCallExtern;\nvar isInternalEndAndReturn = isTypeOf(\"InternalEndAndReturn\");\nexports.isInternalEndAndReturn = isInternalEndAndReturn;\n\nvar isNode = function isNode(node) {\n  return isModule(node) || isModuleMetadata(node) || isModuleNameMetadata(node) || isFunctionNameMetadata(node) || isLocalNameMetadata(node) || isBinaryModule(node) || isQuoteModule(node) || isSectionMetadata(node) || isProducersSectionMetadata(node) || isProducerMetadata(node) || isProducerMetadataVersionedName(node) || isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isElem(node) || isIndexInFuncSection(node) || isValtypeLiteral(node) || isTypeInstruction(node) || isStart(node) || isGlobalType(node) || isLeadingComment(node) || isBlockComment(node) || isData(node) || isGlobal(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node) || isModuleImport(node) || isModuleExportDescr(node) || isModuleExport(node) || isLimit(node) || isSignature(node) || isProgram(node) || isIdentifier(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node) || isByteArray(node) || isFunc(node) || isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isNode = isNode;\n\nvar isBlock = function isBlock(node) {\n  return isLoopInstruction(node) || isBlockInstruction(node) || isFunc(node);\n};\n\nexports.isBlock = isBlock;\n\nvar isInstruction = function isInstruction(node) {\n  return isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isTypeInstruction(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node);\n};\n\nexports.isInstruction = isInstruction;\n\nvar isExpression = function isExpression(node) {\n  return isInstr(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isValtypeLiteral(node) || isIdentifier(node);\n};\n\nexports.isExpression = isExpression;\n\nvar isNumericLiteral = function isNumericLiteral(node) {\n  return isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node);\n};\n\nexports.isNumericLiteral = isNumericLiteral;\n\nvar isImportDescr = function isImportDescr(node) {\n  return isGlobalType(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node);\n};\n\nexports.isImportDescr = isImportDescr;\n\nvar isIntrinsic = function isIntrinsic(node) {\n  return isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isIntrinsic = isIntrinsic;\nvar assertModule = assertTypeOf(\"Module\");\nexports.assertModule = assertModule;\nvar assertModuleMetadata = assertTypeOf(\"ModuleMetadata\");\nexports.assertModuleMetadata = assertModuleMetadata;\nvar assertModuleNameMetadata = assertTypeOf(\"ModuleNameMetadata\");\nexports.assertModuleNameMetadata = assertModuleNameMetadata;\nvar assertFunctionNameMetadata = assertTypeOf(\"FunctionNameMetadata\");\nexports.assertFunctionNameMetadata = assertFunctionNameMetadata;\nvar assertLocalNameMetadata = assertTypeOf(\"LocalNameMetadata\");\nexports.assertLocalNameMetadata = assertLocalNameMetadata;\nvar assertBinaryModule = assertTypeOf(\"BinaryModule\");\nexports.assertBinaryModule = assertBinaryModule;\nvar assertQuoteModule = assertTypeOf(\"QuoteModule\");\nexports.assertQuoteModule = assertQuoteModule;\nvar assertSectionMetadata = assertTypeOf(\"SectionMetadata\");\nexports.assertSectionMetadata = assertSectionMetadata;\nvar assertProducersSectionMetadata = assertTypeOf(\"ProducersSectionMetadata\");\nexports.assertProducersSectionMetadata = assertProducersSectionMetadata;\nvar assertProducerMetadata = assertTypeOf(\"ProducerMetadata\");\nexports.assertProducerMetadata = assertProducerMetadata;\nvar assertProducerMetadataVersionedName = assertTypeOf(\"ProducerMetadataVersionedName\");\nexports.assertProducerMetadataVersionedName = assertProducerMetadataVersionedName;\nvar assertLoopInstruction = assertTypeOf(\"LoopInstruction\");\nexports.assertLoopInstruction = assertLoopInstruction;\nvar assertInstr = assertTypeOf(\"Instr\");\nexports.assertInstr = assertInstr;\nvar assertIfInstruction = assertTypeOf(\"IfInstruction\");\nexports.assertIfInstruction = assertIfInstruction;\nvar assertStringLiteral = assertTypeOf(\"StringLiteral\");\nexports.assertStringLiteral = assertStringLiteral;\nvar assertNumberLiteral = assertTypeOf(\"NumberLiteral\");\nexports.assertNumberLiteral = assertNumberLiteral;\nvar assertLongNumberLiteral = assertTypeOf(\"LongNumberLiteral\");\nexports.assertLongNumberLiteral = assertLongNumberLiteral;\nvar assertFloatLiteral = assertTypeOf(\"FloatLiteral\");\nexports.assertFloatLiteral = assertFloatLiteral;\nvar assertElem = assertTypeOf(\"Elem\");\nexports.assertElem = assertElem;\nvar assertIndexInFuncSection = assertTypeOf(\"IndexInFuncSection\");\nexports.assertIndexInFuncSection = assertIndexInFuncSection;\nvar assertValtypeLiteral = assertTypeOf(\"ValtypeLiteral\");\nexports.assertValtypeLiteral = assertValtypeLiteral;\nvar assertTypeInstruction = assertTypeOf(\"TypeInstruction\");\nexports.assertTypeInstruction = assertTypeInstruction;\nvar assertStart = assertTypeOf(\"Start\");\nexports.assertStart = assertStart;\nvar assertGlobalType = assertTypeOf(\"GlobalType\");\nexports.assertGlobalType = assertGlobalType;\nvar assertLeadingComment = assertTypeOf(\"LeadingComment\");\nexports.assertLeadingComment = assertLeadingComment;\nvar assertBlockComment = assertTypeOf(\"BlockComment\");\nexports.assertBlockComment = assertBlockComment;\nvar assertData = assertTypeOf(\"Data\");\nexports.assertData = assertData;\nvar assertGlobal = assertTypeOf(\"Global\");\nexports.assertGlobal = assertGlobal;\nvar assertTable = assertTypeOf(\"Table\");\nexports.assertTable = assertTable;\nvar assertMemory = assertTypeOf(\"Memory\");\nexports.assertMemory = assertMemory;\nvar assertFuncImportDescr = assertTypeOf(\"FuncImportDescr\");\nexports.assertFuncImportDescr = assertFuncImportDescr;\nvar assertModuleImport = assertTypeOf(\"ModuleImport\");\nexports.assertModuleImport = assertModuleImport;\nvar assertModuleExportDescr = assertTypeOf(\"ModuleExportDescr\");\nexports.assertModuleExportDescr = assertModuleExportDescr;\nvar assertModuleExport = assertTypeOf(\"ModuleExport\");\nexports.assertModuleExport = assertModuleExport;\nvar assertLimit = assertTypeOf(\"Limit\");\nexports.assertLimit = assertLimit;\nvar assertSignature = assertTypeOf(\"Signature\");\nexports.assertSignature = assertSignature;\nvar assertProgram = assertTypeOf(\"Program\");\nexports.assertProgram = assertProgram;\nvar assertIdentifier = assertTypeOf(\"Identifier\");\nexports.assertIdentifier = assertIdentifier;\nvar assertBlockInstruction = assertTypeOf(\"BlockInstruction\");\nexports.assertBlockInstruction = assertBlockInstruction;\nvar assertCallInstruction = assertTypeOf(\"CallInstruction\");\nexports.assertCallInstruction = assertCallInstruction;\nvar assertCallIndirectInstruction = assertTypeOf(\"CallIndirectInstruction\");\nexports.assertCallIndirectInstruction = assertCallIndirectInstruction;\nvar assertByteArray = assertTypeOf(\"ByteArray\");\nexports.assertByteArray = assertByteArray;\nvar assertFunc = assertTypeOf(\"Func\");\nexports.assertFunc = assertFunc;\nvar assertInternalBrUnless = assertTypeOf(\"InternalBrUnless\");\nexports.assertInternalBrUnless = assertInternalBrUnless;\nvar assertInternalGoto = assertTypeOf(\"InternalGoto\");\nexports.assertInternalGoto = assertInternalGoto;\nvar assertInternalCallExtern = assertTypeOf(\"InternalCallExtern\");\nexports.assertInternalCallExtern = assertInternalCallExtern;\nvar assertInternalEndAndReturn = assertTypeOf(\"InternalEndAndReturn\");\nexports.assertInternalEndAndReturn = assertInternalEndAndReturn;\nvar unionTypesMap = {\n  Module: [\"Node\"],\n  ModuleMetadata: [\"Node\"],\n  ModuleNameMetadata: [\"Node\"],\n  FunctionNameMetadata: [\"Node\"],\n  LocalNameMetadata: [\"Node\"],\n  BinaryModule: [\"Node\"],\n  QuoteModule: [\"Node\"],\n  SectionMetadata: [\"Node\"],\n  ProducersSectionMetadata: [\"Node\"],\n  ProducerMetadata: [\"Node\"],\n  ProducerMetadataVersionedName: [\"Node\"],\n  LoopInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  Instr: [\"Node\", \"Expression\", \"Instruction\"],\n  IfInstruction: [\"Node\", \"Instruction\"],\n  StringLiteral: [\"Node\", \"Expression\"],\n  NumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  LongNumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  FloatLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  Elem: [\"Node\"],\n  IndexInFuncSection: [\"Node\"],\n  ValtypeLiteral: [\"Node\", \"Expression\"],\n  TypeInstruction: [\"Node\", \"Instruction\"],\n  Start: [\"Node\"],\n  GlobalType: [\"Node\", \"ImportDescr\"],\n  LeadingComment: [\"Node\"],\n  BlockComment: [\"Node\"],\n  Data: [\"Node\"],\n  Global: [\"Node\"],\n  Table: [\"Node\", \"ImportDescr\"],\n  Memory: [\"Node\", \"ImportDescr\"],\n  FuncImportDescr: [\"Node\", \"ImportDescr\"],\n  ModuleImport: [\"Node\"],\n  ModuleExportDescr: [\"Node\"],\n  ModuleExport: [\"Node\"],\n  Limit: [\"Node\"],\n  Signature: [\"Node\"],\n  Program: [\"Node\"],\n  Identifier: [\"Node\", \"Expression\"],\n  BlockInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  CallInstruction: [\"Node\", \"Instruction\"],\n  CallIndirectInstruction: [\"Node\", \"Instruction\"],\n  ByteArray: [\"Node\"],\n  Func: [\"Node\", \"Block\"],\n  InternalBrUnless: [\"Node\", \"Intrinsic\"],\n  InternalGoto: [\"Node\", \"Intrinsic\"],\n  InternalCallExtern: [\"Node\", \"Intrinsic\"],\n  InternalEndAndReturn: [\"Node\", \"Intrinsic\"]\n};\nexports.unionTypesMap = unionTypesMap;\nvar nodeAndUnionTypes = [\"Module\", \"ModuleMetadata\", \"ModuleNameMetadata\", \"FunctionNameMetadata\", \"LocalNameMetadata\", \"BinaryModule\", \"QuoteModule\", \"SectionMetadata\", \"ProducersSectionMetadata\", \"ProducerMetadata\", \"ProducerMetadataVersionedName\", \"LoopInstruction\", \"Instr\", \"IfInstruction\", \"StringLiteral\", \"NumberLiteral\", \"LongNumberLiteral\", \"FloatLiteral\", \"Elem\", \"IndexInFuncSection\", \"ValtypeLiteral\", \"TypeInstruction\", \"Start\", \"GlobalType\", \"LeadingComment\", \"BlockComment\", \"Data\", \"Global\", \"Table\", \"Memory\", \"FuncImportDescr\", \"ModuleImport\", \"ModuleExportDescr\", \"ModuleExport\", \"Limit\", \"Signature\", \"Program\", \"Identifier\", \"BlockInstruction\", \"CallInstruction\", \"CallIndirectInstruction\", \"ByteArray\", \"Func\", \"InternalBrUnless\", \"InternalGoto\", \"InternalCallExtern\", \"InternalEndAndReturn\", \"Node\", \"Block\", \"Instruction\", \"Expression\", \"NumericLiteral\", \"ImportDescr\", \"Intrinsic\"];\nexports.nodeAndUnionTypes = nodeAndUnionTypes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}