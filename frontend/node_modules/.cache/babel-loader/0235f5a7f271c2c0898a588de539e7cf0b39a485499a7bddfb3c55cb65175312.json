{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nimport { encodeNode } from \"@webassemblyjs/wasm-gen\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport * as t from \"@webassemblyjs/ast\";\nfunction findLastSection(ast, forSection) {\n  var targetSectionId = constants.sections[forSection]; // $FlowIgnore: metadata can not be empty\n\n  var moduleSections = ast.body[0].metadata.sections;\n  var lastSection;\n  var lastId = 0;\n  for (var i = 0, len = moduleSections.length; i < len; i++) {\n    var section = moduleSections[i]; // Ignore custom section since they can actually occur everywhere\n\n    if (section.section === \"custom\") {\n      continue;\n    }\n    var sectionId = constants.sections[section.section];\n    if (targetSectionId > lastId && targetSectionId < sectionId) {\n      return lastSection;\n    }\n    lastId = sectionId;\n    lastSection = section;\n  }\n  return lastSection;\n}\nexport function createEmptySection(ast, uint8Buffer, section) {\n  // previous section after which we are going to insert our section\n  var lastSection = findLastSection(ast, section);\n  var start, end;\n  /**\n   * It's the first section\n   */\n\n  if (lastSection == null || lastSection.section === \"custom\") {\n    start = 8\n    /* wasm header size */;\n    end = start;\n  } else {\n    start = lastSection.startOffset + lastSection.size.value + 1;\n    end = start;\n  } // section id\n\n  start += 1;\n  var sizeStartLoc = {\n    line: -1,\n    column: start\n  };\n  var sizeEndLoc = {\n    line: -1,\n    column: start + 1\n  }; // 1 byte for the empty vector\n\n  var size = t.withLoc(t.numberLiteralFromRaw(1), sizeEndLoc, sizeStartLoc);\n  var vectorOfSizeStartLoc = {\n    line: -1,\n    column: sizeEndLoc.column\n  };\n  var vectorOfSizeEndLoc = {\n    line: -1,\n    column: sizeEndLoc.column + 1\n  };\n  var vectorOfSize = t.withLoc(t.numberLiteralFromRaw(0), vectorOfSizeEndLoc, vectorOfSizeStartLoc);\n  var sectionMetadata = t.sectionMetadata(section, start, size, vectorOfSize);\n  var sectionBytes = encodeNode(sectionMetadata);\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, start - 1, end, sectionBytes); // Add section into the AST for later lookups\n\n  if (_typeof(ast.body[0].metadata) === \"object\") {\n    // $FlowIgnore: metadata can not be empty\n    ast.body[0].metadata.sections.push(sectionMetadata);\n    t.sortSectionMetadata(ast.body[0]);\n  }\n  /**\n   * Update AST\n   */\n  // Once we hit our section every that is after needs to be shifted by the delta\n\n  var deltaBytes = +sectionBytes.length;\n  var encounteredSection = false;\n  t.traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n      if (encounteredSection === true) {\n        t.shiftSection(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return {\n    uint8Buffer: uint8Buffer,\n    sectionMetadata: sectionMetadata\n  };\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","encodeNode","overrideBytesInBuffer","constants","t","findLastSection","ast","forSection","targetSectionId","sections","moduleSections","body","metadata","lastSection","lastId","i","len","length","section","sectionId","createEmptySection","uint8Buffer","start","end","startOffset","size","value","sizeStartLoc","line","column","sizeEndLoc","withLoc","numberLiteralFromRaw","vectorOfSizeStartLoc","vectorOfSizeEndLoc","vectorOfSize","sectionMetadata","sectionBytes","push","sortSectionMetadata","deltaBytes","encounteredSection","traverse","SectionMetadata","path","node","shiftSection"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@webassemblyjs/helper-wasm-section/esm/create.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { encodeNode } from \"@webassemblyjs/wasm-gen\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport * as t from \"@webassemblyjs/ast\";\n\nfunction findLastSection(ast, forSection) {\n  var targetSectionId = constants.sections[forSection]; // $FlowIgnore: metadata can not be empty\n\n  var moduleSections = ast.body[0].metadata.sections;\n  var lastSection;\n  var lastId = 0;\n\n  for (var i = 0, len = moduleSections.length; i < len; i++) {\n    var section = moduleSections[i]; // Ignore custom section since they can actually occur everywhere\n\n    if (section.section === \"custom\") {\n      continue;\n    }\n\n    var sectionId = constants.sections[section.section];\n\n    if (targetSectionId > lastId && targetSectionId < sectionId) {\n      return lastSection;\n    }\n\n    lastId = sectionId;\n    lastSection = section;\n  }\n\n  return lastSection;\n}\n\nexport function createEmptySection(ast, uint8Buffer, section) {\n  // previous section after which we are going to insert our section\n  var lastSection = findLastSection(ast, section);\n  var start, end;\n  /**\n   * It's the first section\n   */\n\n  if (lastSection == null || lastSection.section === \"custom\") {\n    start = 8\n    /* wasm header size */\n    ;\n    end = start;\n  } else {\n    start = lastSection.startOffset + lastSection.size.value + 1;\n    end = start;\n  } // section id\n\n\n  start += 1;\n  var sizeStartLoc = {\n    line: -1,\n    column: start\n  };\n  var sizeEndLoc = {\n    line: -1,\n    column: start + 1\n  }; // 1 byte for the empty vector\n\n  var size = t.withLoc(t.numberLiteralFromRaw(1), sizeEndLoc, sizeStartLoc);\n  var vectorOfSizeStartLoc = {\n    line: -1,\n    column: sizeEndLoc.column\n  };\n  var vectorOfSizeEndLoc = {\n    line: -1,\n    column: sizeEndLoc.column + 1\n  };\n  var vectorOfSize = t.withLoc(t.numberLiteralFromRaw(0), vectorOfSizeEndLoc, vectorOfSizeStartLoc);\n  var sectionMetadata = t.sectionMetadata(section, start, size, vectorOfSize);\n  var sectionBytes = encodeNode(sectionMetadata);\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, start - 1, end, sectionBytes); // Add section into the AST for later lookups\n\n  if (_typeof(ast.body[0].metadata) === \"object\") {\n    // $FlowIgnore: metadata can not be empty\n    ast.body[0].metadata.sections.push(sectionMetadata);\n    t.sortSectionMetadata(ast.body[0]);\n  }\n  /**\n   * Update AST\n   */\n  // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var deltaBytes = +sectionBytes.length;\n  var encounteredSection = false;\n  t.traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        t.shiftSection(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return {\n    uint8Buffer: uint8Buffer,\n    sectionMetadata: sectionMetadata\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}