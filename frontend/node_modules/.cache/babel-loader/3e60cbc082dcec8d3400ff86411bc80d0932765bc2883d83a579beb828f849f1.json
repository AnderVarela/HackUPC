{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ignore_1 = __importDefault(require(\"ignore\"));\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('no-restricted-imports');\nconst allowTypeImportsOptionSchema = {\n  allowTypeImports: {\n    type: 'boolean',\n    default: false\n  }\n};\nconst schemaForMergeArrayOfStringsOrObjects = {\n  items: {\n    anyOf: [{}, {\n      properties: allowTypeImportsOptionSchema\n    }]\n  }\n};\nconst schemaForMergeArrayOfStringsOrObjectPatterns = {\n  anyOf: [{}, {\n    items: {\n      properties: allowTypeImportsOptionSchema\n    }\n  }]\n};\nconst schema = (0, util_1.deepMerge)(Object.assign({}, baseRule.meta.schema), {\n  anyOf: [schemaForMergeArrayOfStringsOrObjects, {\n    items: {\n      properties: {\n        paths: schemaForMergeArrayOfStringsOrObjects,\n        patterns: schemaForMergeArrayOfStringsOrObjectPatterns\n      }\n    }\n  }]\n});\nfunction isObjectOfPaths(obj) {\n  return Object.prototype.hasOwnProperty.call(obj, 'paths');\n}\nfunction isObjectOfPatterns(obj) {\n  return Object.prototype.hasOwnProperty.call(obj, 'patterns');\n}\nfunction isOptionsArrayOfStringOrObject(options) {\n  if (isObjectOfPaths(options[0])) {\n    return false;\n  }\n  if (isObjectOfPatterns(options[0])) {\n    return false;\n  }\n  return true;\n}\nfunction getRestrictedPaths(options) {\n  if (isOptionsArrayOfStringOrObject(options)) {\n    return options;\n  }\n  if (isObjectOfPaths(options[0])) {\n    return options[0].paths;\n  }\n  return [];\n}\nfunction getRestrictedPatterns(options) {\n  if (isObjectOfPatterns(options[0])) {\n    return options[0].patterns;\n  }\n  return [];\n}\nexports.default = (0, util_1.createRule)({\n  name: 'no-restricted-imports',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow specified modules when loaded by `import`',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    messages: baseRule.meta.messages,\n    fixable: baseRule.meta.fixable,\n    schema\n  },\n  defaultOptions: [],\n  create(context) {\n    const rules = baseRule.create(context);\n    const {\n      options\n    } = context;\n    if (options.length === 0) {\n      return {};\n    }\n    const restrictedPaths = getRestrictedPaths(options);\n    const allowedTypeImportPathNameSet = new Set();\n    for (const restrictedPath of restrictedPaths) {\n      if (typeof restrictedPath === 'object' && restrictedPath.allowTypeImports) {\n        allowedTypeImportPathNameSet.add(restrictedPath.name);\n      }\n    }\n    function isAllowedTypeImportPath(importSource) {\n      return allowedTypeImportPathNameSet.has(importSource);\n    }\n    const restrictedPatterns = getRestrictedPatterns(options);\n    const allowedImportTypeMatchers = [];\n    for (const restrictedPattern of restrictedPatterns) {\n      if (typeof restrictedPattern === 'object' && restrictedPattern.allowTypeImports) {\n        // Following how ignore is configured in the base rule\n        allowedImportTypeMatchers.push((0, ignore_1.default)({\n          allowRelativePaths: true,\n          ignoreCase: !restrictedPattern.caseSensitive\n        }).add(restrictedPattern.group));\n      }\n    }\n    function isAllowedTypeImportPattern(importSource) {\n      return (\n        // As long as there's one matching pattern that allows type import\n        allowedImportTypeMatchers.some(matcher => matcher.ignores(importSource))\n      );\n    }\n    return {\n      ImportDeclaration(node) {\n        if (node.importKind === 'type') {\n          const importSource = node.source.value.trim();\n          if (!isAllowedTypeImportPath(importSource) && !isAllowedTypeImportPattern(importSource)) {\n            return rules.ImportDeclaration(node);\n          }\n        } else {\n          return rules.ImportDeclaration(node);\n        }\n      },\n      'ExportNamedDeclaration[source]'(node) {\n        if (node.exportKind === 'type') {\n          const importSource = node.source.value.trim();\n          if (!isAllowedTypeImportPath(importSource) && !isAllowedTypeImportPattern(importSource)) {\n            return rules.ExportNamedDeclaration(node);\n          }\n        } else {\n          return rules.ExportNamedDeclaration(node);\n        }\n      },\n      ExportAllDeclaration: rules.ExportAllDeclaration\n    };\n  }\n});","map":{"version":3,"names":["ignore_1","__importDefault","require","util_1","getESLintCoreRule_1","baseRule","getESLintCoreRule","allowTypeImportsOptionSchema","allowTypeImports","type","default","schemaForMergeArrayOfStringsOrObjects","items","anyOf","properties","schemaForMergeArrayOfStringsOrObjectPatterns","schema","deepMerge","Object","assign","meta","paths","patterns","isObjectOfPaths","obj","prototype","hasOwnProperty","call","isObjectOfPatterns","isOptionsArrayOfStringOrObject","options","getRestrictedPaths","getRestrictedPatterns","exports","createRule","name","docs","description","recommended","extendsBaseRule","messages","fixable","defaultOptions","create","context","rules","length","restrictedPaths","allowedTypeImportPathNameSet","Set","restrictedPath","add","isAllowedTypeImportPath","importSource","has","restrictedPatterns","allowedImportTypeMatchers","restrictedPattern","push","allowRelativePaths","ignoreCase","caseSensitive","group","isAllowedTypeImportPattern","some","matcher","ignores","ImportDeclaration","node","importKind","source","value","trim","ExportNamedDeclaration[source]","exportKind","ExportNamedDeclaration","ExportAllDeclaration"],"sources":["../../src/rules/no-restricted-imports.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}