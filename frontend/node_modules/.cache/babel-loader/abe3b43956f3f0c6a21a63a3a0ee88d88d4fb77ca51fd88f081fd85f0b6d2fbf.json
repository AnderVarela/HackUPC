{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.isNumeric = isNumeric;\nexports.hyphenToCamelCase = hyphenToCamelCase;\nexports.trimEnd = trimEnd;\nexports.kebabCase = kebabCase;\nexports.replaceSpaces = replaceSpaces;\n\n/**\n * Determines if the specified string consists entirely of numeric characters.\n *\n * @param {*} [value]\n * @returns {boolean}\n */\nfunction isNumeric(value) {\n  return !Number.isNaN(value - parseFloat(value));\n}\n/**\n * Convert a hyphenated string to camelCase.\n *\n * @param {string} string\n * @returns {string}\n */\n\nfunction hyphenToCamelCase(string) {\n  return string.replace(/-(.)/g, (match, chr) => chr.toUpperCase());\n}\n/**\n * Trim the specified substring off the string. If the string does not end\n * with the specified substring, this is a no-op.\n *\n * @param {string} haystack String to search in\n * @param {string} needle   String to search for\n * @return {string}\n */\n\nfunction trimEnd(haystack, needle) {\n  return haystack.endsWith(needle) ? haystack.slice(0, -needle.length) : haystack;\n}\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\nfunction kebabCase(str) {\n  return str.replace(KEBAB_REGEX, match => `-${match.toLowerCase()}`);\n}\nconst SPACES_REGEXP = /[\\t\\r\\n\\u0085\\u2028\\u2029]+/g;\nfunction replaceSpaces(str) {\n  return str.replace(SPACES_REGEXP, ' ');\n}","map":{"version":3,"names":["exports","__esModule","isNumeric","hyphenToCamelCase","trimEnd","kebabCase","replaceSpaces","value","Number","isNaN","parseFloat","string","replace","match","chr","toUpperCase","haystack","needle","endsWith","slice","length","KEBAB_REGEX","str","toLowerCase","SPACES_REGEXP"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@svgr/hast-util-to-babel-ast/lib/util.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.isNumeric = isNumeric;\nexports.hyphenToCamelCase = hyphenToCamelCase;\nexports.trimEnd = trimEnd;\nexports.kebabCase = kebabCase;\nexports.replaceSpaces = replaceSpaces;\n\n/**\n * Determines if the specified string consists entirely of numeric characters.\n *\n * @param {*} [value]\n * @returns {boolean}\n */\nfunction isNumeric(value) {\n  return !Number.isNaN(value - parseFloat(value));\n}\n/**\n * Convert a hyphenated string to camelCase.\n *\n * @param {string} string\n * @returns {string}\n */\n\n\nfunction hyphenToCamelCase(string) {\n  return string.replace(/-(.)/g, (match, chr) => chr.toUpperCase());\n}\n/**\n * Trim the specified substring off the string. If the string does not end\n * with the specified substring, this is a no-op.\n *\n * @param {string} haystack String to search in\n * @param {string} needle   String to search for\n * @return {string}\n */\n\n\nfunction trimEnd(haystack, needle) {\n  return haystack.endsWith(needle) ? haystack.slice(0, -needle.length) : haystack;\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nfunction kebabCase(str) {\n  return str.replace(KEBAB_REGEX, match => `-${match.toLowerCase()}`);\n}\n\nconst SPACES_REGEXP = /[\\t\\r\\n\\u0085\\u2028\\u2029]+/g;\n\nfunction replaceSpaces(str) {\n  return str.replace(SPACES_REGEXP, ' ');\n}"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,SAAS,GAAGA,SAAS;AAC7BF,OAAO,CAACG,iBAAiB,GAAGA,iBAAiB;AAC7CH,OAAO,CAACI,OAAO,GAAGA,OAAO;AACzBJ,OAAO,CAACK,SAAS,GAAGA,SAAS;AAC7BL,OAAO,CAACM,aAAa,GAAGA,aAAa;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,SAASA,CAACK,KAAK,EAAE;EACxB,OAAO,CAACC,MAAM,CAACC,KAAK,CAACF,KAAK,GAAGG,UAAU,CAACH,KAAK,CAAC,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASJ,iBAAiBA,CAACQ,MAAM,EAAE;EACjC,OAAOA,MAAM,CAACC,OAAO,CAAC,OAAO,EAAE,CAACC,KAAK,EAAEC,GAAG,KAAKA,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASX,OAAOA,CAACY,QAAQ,EAAEC,MAAM,EAAE;EACjC,OAAOD,QAAQ,CAACE,QAAQ,CAACD,MAAM,CAAC,GAAGD,QAAQ,CAACG,KAAK,CAAC,CAAC,EAAE,CAACF,MAAM,CAACG,MAAM,CAAC,GAAGJ,QAAQ;AACjF;AAEA,MAAMK,WAAW,GAAG,kCAAkC;AAEtD,SAAShB,SAASA,CAACiB,GAAG,EAAE;EACtB,OAAOA,GAAG,CAACV,OAAO,CAACS,WAAW,EAAER,KAAK,IAAK,IAAGA,KAAK,CAACU,WAAW,CAAC,CAAE,EAAC,CAAC;AACrE;AAEA,MAAMC,aAAa,GAAG,8BAA8B;AAEpD,SAASlB,aAAaA,CAACgB,GAAG,EAAE;EAC1B,OAAOA,GAAG,CAACV,OAAO,CAACY,aAAa,EAAE,GAAG,CAAC;AACxC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}