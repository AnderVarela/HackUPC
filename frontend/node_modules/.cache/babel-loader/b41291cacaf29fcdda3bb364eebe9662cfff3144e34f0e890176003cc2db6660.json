{"ast":null,"code":"var isMergeable = require('./is-mergeable');\nvar optimizeProperties = require('./properties/optimize');\nvar sortSelectors = require('../level-1/sort-selectors');\nvar tidyRules = require('../level-1/tidy-rules');\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\nvar Token = require('../../tokenizer/token');\nfunction mergeAdjacent(tokens, context) {\n  var lastToken = [null, [], []];\n  var options = context.options;\n  var adjacentSpace = options.compatibility.selectors.adjacentSpace;\n  var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var mergeLimit = options.compatibility.selectors.mergeLimit;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    var token = tokens[i];\n    if (token[0] != Token.RULE) {\n      lastToken = [null, [], []];\n      continue;\n    }\n    if (lastToken[0] == Token.RULE && serializeRules(token[1]) == serializeRules(lastToken[1])) {\n      Array.prototype.push.apply(lastToken[2], token[2]);\n      optimizeProperties(lastToken[2], true, true, context);\n      token[2] = [];\n    } else if (lastToken[0] == Token.RULE && serializeBody(token[2]) == serializeBody(lastToken[2]) && isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && isMergeable(serializeRules(lastToken[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) && lastToken[1].length < mergeLimit) {\n      lastToken[1] = tidyRules(lastToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);\n      lastToken[1] = lastToken.length > 1 ? sortSelectors(lastToken[1], selectorsSortingMethod) : lastToken[1];\n      token[2] = [];\n    } else {\n      lastToken = token;\n    }\n  }\n}\nmodule.exports = mergeAdjacent;","map":{"version":3,"names":["isMergeable","require","optimizeProperties","sortSelectors","tidyRules","OptimizationLevel","serializeBody","body","serializeRules","rules","Token","mergeAdjacent","tokens","context","lastToken","options","adjacentSpace","compatibility","selectors","selectorsSortingMethod","level","One","mergeablePseudoClasses","mergeablePseudoElements","mergeLimit","multiplePseudoMerging","i","l","length","token","RULE","Array","prototype","push","apply","concat","warnings","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/clean-css/lib/optimizer/level-2/merge-adjacent.js"],"sourcesContent":["var isMergeable = require('./is-mergeable');\n\nvar optimizeProperties = require('./properties/optimize');\n\nvar sortSelectors = require('../level-1/sort-selectors');\nvar tidyRules = require('../level-1/tidy-rules');\n\nvar OptimizationLevel = require('../../options/optimization-level').OptimizationLevel;\n\nvar serializeBody = require('../../writer/one-time').body;\nvar serializeRules = require('../../writer/one-time').rules;\n\nvar Token = require('../../tokenizer/token');\n\nfunction mergeAdjacent(tokens, context) {\n  var lastToken = [null, [], []];\n  var options = context.options;\n  var adjacentSpace = options.compatibility.selectors.adjacentSpace;\n  var selectorsSortingMethod = options.level[OptimizationLevel.One].selectorsSortingMethod;\n  var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;\n  var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;\n  var mergeLimit = options.compatibility.selectors.mergeLimit;\n  var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;\n\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    var token = tokens[i];\n\n    if (token[0] != Token.RULE) {\n      lastToken = [null, [], []];\n      continue;\n    }\n\n    if (lastToken[0] == Token.RULE && serializeRules(token[1]) == serializeRules(lastToken[1])) {\n      Array.prototype.push.apply(lastToken[2], token[2]);\n      optimizeProperties(lastToken[2], true, true, context);\n      token[2] = [];\n    } else if (lastToken[0] == Token.RULE && serializeBody(token[2]) == serializeBody(lastToken[2])\n        && isMergeable(serializeRules(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)\n        && isMergeable(\n          serializeRules(lastToken[1]),\n          mergeablePseudoClasses,\n          mergeablePseudoElements,\n          multiplePseudoMerging\n        )\n        && lastToken[1].length < mergeLimit) {\n      lastToken[1] = tidyRules(lastToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);\n      lastToken[1] = lastToken.length > 1 ? sortSelectors(lastToken[1], selectorsSortingMethod) : lastToken[1];\n      token[2] = [];\n    } else {\n      lastToken = token;\n    }\n  }\n}\n\nmodule.exports = mergeAdjacent;\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAE3C,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAEzD,IAAIE,aAAa,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AACxD,IAAIG,SAAS,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAEhD,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,kCAAkC,CAAC,CAACI,iBAAiB;AAErF,IAAIC,aAAa,GAAGL,OAAO,CAAC,uBAAuB,CAAC,CAACM,IAAI;AACzD,IAAIC,cAAc,GAAGP,OAAO,CAAC,uBAAuB,CAAC,CAACQ,KAAK;AAE3D,IAAIC,KAAK,GAAGT,OAAO,CAAC,uBAAuB,CAAC;AAE5C,SAASU,aAAaA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACtC,IAAIC,SAAS,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;EAC9B,IAAIC,OAAO,GAAGF,OAAO,CAACE,OAAO;EAC7B,IAAIC,aAAa,GAAGD,OAAO,CAACE,aAAa,CAACC,SAAS,CAACF,aAAa;EACjE,IAAIG,sBAAsB,GAAGJ,OAAO,CAACK,KAAK,CAACf,iBAAiB,CAACgB,GAAG,CAAC,CAACF,sBAAsB;EACxF,IAAIG,sBAAsB,GAAGP,OAAO,CAACE,aAAa,CAACC,SAAS,CAACI,sBAAsB;EACnF,IAAIC,uBAAuB,GAAGR,OAAO,CAACE,aAAa,CAACC,SAAS,CAACK,uBAAuB;EACrF,IAAIC,UAAU,GAAGT,OAAO,CAACE,aAAa,CAACC,SAAS,CAACM,UAAU;EAC3D,IAAIC,qBAAqB,GAAGV,OAAO,CAACE,aAAa,CAACC,SAAS,CAACO,qBAAqB;EAEjF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGf,MAAM,CAACgB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC7C,IAAIG,KAAK,GAAGjB,MAAM,CAACc,CAAC,CAAC;IAErB,IAAIG,KAAK,CAAC,CAAC,CAAC,IAAInB,KAAK,CAACoB,IAAI,EAAE;MAC1BhB,SAAS,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;MAC1B;IACF;IAEA,IAAIA,SAAS,CAAC,CAAC,CAAC,IAAIJ,KAAK,CAACoB,IAAI,IAAItB,cAAc,CAACqB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAIrB,cAAc,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1FiB,KAAK,CAACC,SAAS,CAACC,IAAI,CAACC,KAAK,CAACpB,SAAS,CAAC,CAAC,CAAC,EAAEe,KAAK,CAAC,CAAC,CAAC,CAAC;MAClD3B,kBAAkB,CAACY,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAED,OAAO,CAAC;MACrDgB,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;IACf,CAAC,MAAM,IAAIf,SAAS,CAAC,CAAC,CAAC,IAAIJ,KAAK,CAACoB,IAAI,IAAIxB,aAAa,CAACuB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAIvB,aAAa,CAACQ,SAAS,CAAC,CAAC,CAAC,CAAC,IACxFd,WAAW,CAACQ,cAAc,CAACqB,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEP,sBAAsB,EAAEC,uBAAuB,EAAEE,qBAAqB,CAAC,IAC7GzB,WAAW,CACZQ,cAAc,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC,EAC5BQ,sBAAsB,EACtBC,uBAAuB,EACvBE,qBACF,CAAC,IACEX,SAAS,CAAC,CAAC,CAAC,CAACc,MAAM,GAAGJ,UAAU,EAAE;MACvCV,SAAS,CAAC,CAAC,CAAC,GAAGV,SAAS,CAACU,SAAS,CAAC,CAAC,CAAC,CAACqB,MAAM,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAEb,aAAa,EAAE,KAAK,EAAEH,OAAO,CAACuB,QAAQ,CAAC;MACtGtB,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAACc,MAAM,GAAG,CAAC,GAAGzB,aAAa,CAACW,SAAS,CAAC,CAAC,CAAC,EAAEK,sBAAsB,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC;MACxGe,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;IACf,CAAC,MAAM;MACLf,SAAS,GAAGe,KAAK;IACnB;EACF;AACF;AAEAQ,MAAM,CAACC,OAAO,GAAG3B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}