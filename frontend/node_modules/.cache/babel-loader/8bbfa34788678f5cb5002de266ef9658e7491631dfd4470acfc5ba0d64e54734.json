{"ast":null,"code":"/*!\n * compressible\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014 Jeremiah Senkpiel\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar db = require('mime-db');\n\n/**\n * Module variables.\n * @private\n */\n\nvar COMPRESSIBLE_TYPE_REGEXP = /^text\\/|\\+(?:json|text|xml)$/i;\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = compressible;\n\n/**\n * Checks if a type is compressible.\n *\n * @param {string} type\n * @return {Boolean} compressible\n * @public\n */\n\nfunction compressible(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  }\n\n  // strip parameters\n  var match = EXTRACT_TYPE_REGEXP.exec(type);\n  var mime = match && match[1].toLowerCase();\n  var data = db[mime];\n\n  // return database information\n  if (data && data.compressible !== undefined) {\n    return data.compressible;\n  }\n\n  // fallback to regexp or unknown\n  return COMPRESSIBLE_TYPE_REGEXP.test(mime) || undefined;\n}","map":{"version":3,"names":["db","require","COMPRESSIBLE_TYPE_REGEXP","EXTRACT_TYPE_REGEXP","module","exports","compressible","type","match","exec","mime","toLowerCase","data","undefined","test"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/compressible/index.js"],"sourcesContent":["/*!\n * compressible\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014 Jeremiah Senkpiel\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\n\n/**\n * Module variables.\n * @private\n */\n\nvar COMPRESSIBLE_TYPE_REGEXP = /^text\\/|\\+(?:json|text|xml)$/i\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = compressible\n\n/**\n * Checks if a type is compressible.\n *\n * @param {string} type\n * @return {Boolean} compressible\n * @public\n */\n\nfunction compressible (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // strip parameters\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && match[1].toLowerCase()\n  var data = db[mime]\n\n  // return database information\n  if (data && data.compressible !== undefined) {\n    return data.compressible\n  }\n\n  // fallback to regexp or unknown\n  return COMPRESSIBLE_TYPE_REGEXP.test(mime) || undefined\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE3B;AACA;AACA;AACA;;AAEA,IAAIC,wBAAwB,GAAG,+BAA+B;AAC9D,IAAIC,mBAAmB,GAAG,yBAAyB;;AAEnD;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGC,YAAY;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAYA,CAAEC,IAAI,EAAE;EAC3B,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACrC,OAAO,KAAK;EACd;;EAEA;EACA,IAAIC,KAAK,GAAGL,mBAAmB,CAACM,IAAI,CAACF,IAAI,CAAC;EAC1C,IAAIG,IAAI,GAAGF,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;EAC1C,IAAIC,IAAI,GAAGZ,EAAE,CAACU,IAAI,CAAC;;EAEnB;EACA,IAAIE,IAAI,IAAIA,IAAI,CAACN,YAAY,KAAKO,SAAS,EAAE;IAC3C,OAAOD,IAAI,CAACN,YAAY;EAC1B;;EAEA;EACA,OAAOJ,wBAAwB,CAACY,IAAI,CAACJ,IAAI,CAAC,IAAIG,SAAS;AACzD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}