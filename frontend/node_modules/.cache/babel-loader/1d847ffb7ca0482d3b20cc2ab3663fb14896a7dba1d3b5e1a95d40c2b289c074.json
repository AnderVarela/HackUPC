{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _actCompat = require(\"./act-compat\");\nvar _pure = require(\"./pure\");\nObject.keys(_pure).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _pure[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _pure[key];\n    }\n  });\n});\nvar _process$env;\n\n// if we're running in a test runner that supports afterEach\n// or teardown then we'll automatically run cleanup afterEach test\n// this ensures that tests run in isolation from each other\n// if you don't like this then either import the `pure` module\n// or set the RTL_SKIP_AUTO_CLEANUP env variable to 'true'.\nif (typeof process === 'undefined' || !((_process$env = process.env) != null && _process$env.RTL_SKIP_AUTO_CLEANUP)) {\n  // ignore teardown() in code coverage because Jest does not support it\n\n  /* istanbul ignore else */\n  if (typeof afterEach === 'function') {\n    afterEach(() => {\n      (0, _pure.cleanup)();\n    });\n  } else if (typeof teardown === 'function') {\n    // Block is guarded by `typeof` check.\n    // eslint does not support `typeof` guards.\n    // eslint-disable-next-line no-undef\n    teardown(() => {\n      (0, _pure.cleanup)();\n    });\n  } // No test setup with other test runners available\n\n  /* istanbul ignore else */\n\n  if (typeof beforeAll === 'function' && typeof afterAll === 'function') {\n    // This matches the behavior of React < 18.\n    let previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();\n    beforeAll(() => {\n      previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();\n      (0, _actCompat.setReactActEnvironment)(true);\n    });\n    afterAll(() => {\n      (0, _actCompat.setReactActEnvironment)(previousIsReactActEnvironment);\n    });\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_actCompat","require","_pure","keys","forEach","key","enumerable","get","_process$env","process","env","RTL_SKIP_AUTO_CLEANUP","afterEach","cleanup","teardown","beforeAll","afterAll","previousIsReactActEnvironment","getIsReactActEnvironment","setReactActEnvironment"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@testing-library/react/dist/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _actCompat = require(\"./act-compat\");\n\nvar _pure = require(\"./pure\");\n\nObject.keys(_pure).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _pure[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _pure[key];\n    }\n  });\n});\n\nvar _process$env;\n\n// if we're running in a test runner that supports afterEach\n// or teardown then we'll automatically run cleanup afterEach test\n// this ensures that tests run in isolation from each other\n// if you don't like this then either import the `pure` module\n// or set the RTL_SKIP_AUTO_CLEANUP env variable to 'true'.\nif (typeof process === 'undefined' || !((_process$env = process.env) != null && _process$env.RTL_SKIP_AUTO_CLEANUP)) {\n  // ignore teardown() in code coverage because Jest does not support it\n\n  /* istanbul ignore else */\n  if (typeof afterEach === 'function') {\n    afterEach(() => {\n      (0, _pure.cleanup)();\n    });\n  } else if (typeof teardown === 'function') {\n    // Block is guarded by `typeof` check.\n    // eslint does not support `typeof` guards.\n    // eslint-disable-next-line no-undef\n    teardown(() => {\n      (0, _pure.cleanup)();\n    });\n  } // No test setup with other test runners available\n\n  /* istanbul ignore else */\n\n\n  if (typeof beforeAll === 'function' && typeof afterAll === 'function') {\n    // This matches the behavior of React < 18.\n    let previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();\n    beforeAll(() => {\n      previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();\n      (0, _actCompat.setReactActEnvironment)(true);\n    });\n    afterAll(() => {\n      (0, _actCompat.setReactActEnvironment)(previousIsReactActEnvironment);\n    });\n  }\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAExC,IAAIC,KAAK,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAE7BL,MAAM,CAACO,IAAI,CAACD,KAAK,CAAC,CAACE,OAAO,CAAC,UAAUC,GAAG,EAAE;EACxC,IAAIA,GAAG,KAAK,SAAS,IAAIA,GAAG,KAAK,YAAY,EAAE;EAC/C,IAAIA,GAAG,IAAIP,OAAO,IAAIA,OAAO,CAACO,GAAG,CAAC,KAAKH,KAAK,CAACG,GAAG,CAAC,EAAE;EACnDT,MAAM,CAACC,cAAc,CAACC,OAAO,EAAEO,GAAG,EAAE;IAClCC,UAAU,EAAE,IAAI;IAChBC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACf,OAAOL,KAAK,CAACG,GAAG,CAAC;IACnB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,IAAIG,YAAY;;AAEhB;AACA;AACA;AACA;AACA;AACA,IAAI,OAAOC,OAAO,KAAK,WAAW,IAAI,EAAE,CAACD,YAAY,GAAGC,OAAO,CAACC,GAAG,KAAK,IAAI,IAAIF,YAAY,CAACG,qBAAqB,CAAC,EAAE;EACnH;;EAEA;EACA,IAAI,OAAOC,SAAS,KAAK,UAAU,EAAE;IACnCA,SAAS,CAAC,MAAM;MACd,CAAC,CAAC,EAAEV,KAAK,CAACW,OAAO,EAAE,CAAC;IACtB,CAAC,CAAC;EACJ,CAAC,MAAM,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;IACzC;IACA;IACA;IACAA,QAAQ,CAAC,MAAM;MACb,CAAC,CAAC,EAAEZ,KAAK,CAACW,OAAO,EAAE,CAAC;IACtB,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;;EAGA,IAAI,OAAOE,SAAS,KAAK,UAAU,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;IACrE;IACA,IAAIC,6BAA6B,GAAG,CAAC,CAAC,EAAEjB,UAAU,CAACkB,wBAAwB,EAAE,CAAC;IAC9EH,SAAS,CAAC,MAAM;MACdE,6BAA6B,GAAG,CAAC,CAAC,EAAEjB,UAAU,CAACkB,wBAAwB,EAAE,CAAC;MAC1E,CAAC,CAAC,EAAElB,UAAU,CAACmB,sBAAsB,EAAE,IAAI,CAAC;IAC9C,CAAC,CAAC;IACFH,QAAQ,CAAC,MAAM;MACb,CAAC,CAAC,EAAEhB,UAAU,CAACmB,sBAAsB,EAAEF,6BAA6B,CAAC;IACvE,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}