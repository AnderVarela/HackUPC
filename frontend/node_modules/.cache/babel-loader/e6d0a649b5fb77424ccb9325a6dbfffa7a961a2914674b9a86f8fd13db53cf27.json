{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\nfunction _fakeTimers() {\n  const data = require('@sinonjs/fake-timers');\n  _fakeTimers = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n  _jestMessageUtil = function () {\n    return data;\n  };\n  return data;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nclass FakeTimers {\n  constructor({\n    global,\n    config,\n    maxLoops\n  }) {\n    _defineProperty(this, '_clock', void 0);\n    _defineProperty(this, '_config', void 0);\n    _defineProperty(this, '_fakingTime', void 0);\n    _defineProperty(this, '_global', void 0);\n    _defineProperty(this, '_fakeTimers', void 0);\n    _defineProperty(this, '_maxLoops', void 0);\n    this._global = global;\n    this._config = config;\n    this._maxLoops = maxLoops || 100000;\n    this._fakingTime = false;\n    this._fakeTimers = (0, _fakeTimers().withGlobal)(global);\n  }\n  clearAllTimers() {\n    if (this._fakingTime) {\n      this._clock.reset();\n    }\n  }\n  dispose() {\n    this.useRealTimers();\n  }\n  runAllTimers() {\n    if (this._checkFakeTimers()) {\n      this._clock.runAll();\n    }\n  }\n  runOnlyPendingTimers() {\n    if (this._checkFakeTimers()) {\n      this._clock.runToLast();\n    }\n  }\n  advanceTimersToNextTimer(steps = 1) {\n    if (this._checkFakeTimers()) {\n      for (let i = steps; i > 0; i--) {\n        this._clock.next(); // Fire all timers at this point: https://github.com/sinonjs/fake-timers/issues/250\n\n        this._clock.tick(0);\n        if (this._clock.countTimers() === 0) {\n          break;\n        }\n      }\n    }\n  }\n  advanceTimersByTime(msToRun) {\n    if (this._checkFakeTimers()) {\n      this._clock.tick(msToRun);\n    }\n  }\n  runAllTicks() {\n    if (this._checkFakeTimers()) {\n      // @ts-expect-error\n      this._clock.runMicrotasks();\n    }\n  }\n  useRealTimers() {\n    if (this._fakingTime) {\n      this._clock.uninstall();\n      this._fakingTime = false;\n    }\n  }\n  useFakeTimers() {\n    if (!this._fakingTime) {\n      const toFake = Object.keys(this._fakeTimers.timers);\n      this._clock = this._fakeTimers.install({\n        loopLimit: this._maxLoops,\n        now: Date.now(),\n        toFake\n      });\n      this._fakingTime = true;\n    }\n  }\n  reset() {\n    if (this._checkFakeTimers()) {\n      const {\n        now\n      } = this._clock;\n      this._clock.reset();\n      this._clock.setSystemTime(now);\n    }\n  }\n  setSystemTime(now) {\n    if (this._checkFakeTimers()) {\n      this._clock.setSystemTime(now);\n    }\n  }\n  getRealSystemTime() {\n    return Date.now();\n  }\n  getTimerCount() {\n    if (this._checkFakeTimers()) {\n      return this._clock.countTimers();\n    }\n    return 0;\n  }\n  _checkFakeTimers() {\n    if (!this._fakingTime) {\n      this._global.console.warn('A function to advance timers was called but the timers API is not ' + 'mocked with fake timers. Call `jest.useFakeTimers()` in this test or ' + 'enable fake timers globally by setting `\"timers\": \"fake\"` in the ' + 'configuration file\\nStack Trace:\\n' + (0, _jestMessageUtil().formatStackTrace)(new Error().stack, this._config, {\n        noStackTrace: false\n      }));\n    }\n    return this._fakingTime;\n  }\n}\nexports.default = FakeTimers;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_fakeTimers","data","require","_jestMessageUtil","_defineProperty","obj","key","enumerable","configurable","writable","FakeTimers","constructor","global","config","maxLoops","_global","_config","_maxLoops","_fakingTime","withGlobal","clearAllTimers","_clock","reset","dispose","useRealTimers","runAllTimers","_checkFakeTimers","runAll","runOnlyPendingTimers","runToLast","advanceTimersToNextTimer","steps","i","next","tick","countTimers","advanceTimersByTime","msToRun","runAllTicks","runMicrotasks","uninstall","useFakeTimers","toFake","keys","timers","install","loopLimit","now","Date","setSystemTime","getRealSystemTime","getTimerCount","console","warn","formatStackTrace","Error","stack","noStackTrace"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@jest/fake-timers/build/modernFakeTimers.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fakeTimers() {\n  const data = require('@sinonjs/fake-timers');\n\n  _fakeTimers = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass FakeTimers {\n  constructor({global, config, maxLoops}) {\n    _defineProperty(this, '_clock', void 0);\n\n    _defineProperty(this, '_config', void 0);\n\n    _defineProperty(this, '_fakingTime', void 0);\n\n    _defineProperty(this, '_global', void 0);\n\n    _defineProperty(this, '_fakeTimers', void 0);\n\n    _defineProperty(this, '_maxLoops', void 0);\n\n    this._global = global;\n    this._config = config;\n    this._maxLoops = maxLoops || 100000;\n    this._fakingTime = false;\n    this._fakeTimers = (0, _fakeTimers().withGlobal)(global);\n  }\n\n  clearAllTimers() {\n    if (this._fakingTime) {\n      this._clock.reset();\n    }\n  }\n\n  dispose() {\n    this.useRealTimers();\n  }\n\n  runAllTimers() {\n    if (this._checkFakeTimers()) {\n      this._clock.runAll();\n    }\n  }\n\n  runOnlyPendingTimers() {\n    if (this._checkFakeTimers()) {\n      this._clock.runToLast();\n    }\n  }\n\n  advanceTimersToNextTimer(steps = 1) {\n    if (this._checkFakeTimers()) {\n      for (let i = steps; i > 0; i--) {\n        this._clock.next(); // Fire all timers at this point: https://github.com/sinonjs/fake-timers/issues/250\n\n        this._clock.tick(0);\n\n        if (this._clock.countTimers() === 0) {\n          break;\n        }\n      }\n    }\n  }\n\n  advanceTimersByTime(msToRun) {\n    if (this._checkFakeTimers()) {\n      this._clock.tick(msToRun);\n    }\n  }\n\n  runAllTicks() {\n    if (this._checkFakeTimers()) {\n      // @ts-expect-error\n      this._clock.runMicrotasks();\n    }\n  }\n\n  useRealTimers() {\n    if (this._fakingTime) {\n      this._clock.uninstall();\n\n      this._fakingTime = false;\n    }\n  }\n\n  useFakeTimers() {\n    if (!this._fakingTime) {\n      const toFake = Object.keys(this._fakeTimers.timers);\n      this._clock = this._fakeTimers.install({\n        loopLimit: this._maxLoops,\n        now: Date.now(),\n        toFake\n      });\n      this._fakingTime = true;\n    }\n  }\n\n  reset() {\n    if (this._checkFakeTimers()) {\n      const {now} = this._clock;\n\n      this._clock.reset();\n\n      this._clock.setSystemTime(now);\n    }\n  }\n\n  setSystemTime(now) {\n    if (this._checkFakeTimers()) {\n      this._clock.setSystemTime(now);\n    }\n  }\n\n  getRealSystemTime() {\n    return Date.now();\n  }\n\n  getTimerCount() {\n    if (this._checkFakeTimers()) {\n      return this._clock.countTimers();\n    }\n\n    return 0;\n  }\n\n  _checkFakeTimers() {\n    if (!this._fakingTime) {\n      this._global.console.warn(\n        'A function to advance timers was called but the timers API is not ' +\n          'mocked with fake timers. Call `jest.useFakeTimers()` in this test or ' +\n          'enable fake timers globally by setting `\"timers\": \"fake\"` in the ' +\n          'configuration file\\nStack Trace:\\n' +\n          (0, _jestMessageUtil().formatStackTrace)(\n            new Error().stack,\n            this._config,\n            {\n              noStackTrace: false\n            }\n          )\n      );\n    }\n\n    return this._fakingTime;\n  }\n}\n\nexports.default = FakeTimers;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}