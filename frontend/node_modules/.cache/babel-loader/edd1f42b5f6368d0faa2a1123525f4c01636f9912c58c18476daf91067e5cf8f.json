{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAdditionalItems = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: ({\n    params: {\n      len\n    }\n  }) => (0, codegen_1.str)`must NOT have more than ${len} items`,\n  params: ({\n    params: {\n      len\n    }\n  }) => (0, codegen_1._)`{limit: ${len}}`\n};\nconst def = {\n  keyword: \"additionalItems\",\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt) {\n    const {\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      items\n    } = parentSchema;\n    if (!Array.isArray(items)) {\n      (0, util_1.checkStrictMode)(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas');\n      return;\n    }\n    validateAdditionalItems(cxt, items);\n  }\n};\nfunction validateAdditionalItems(cxt, items) {\n  const {\n    gen,\n    schema,\n    data,\n    keyword,\n    it\n  } = cxt;\n  it.items = true;\n  const len = gen.const(\"len\", (0, codegen_1._)`${data}.length`);\n  if (schema === false) {\n    cxt.setParams({\n      len: items.length\n    });\n    cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);\n  } else if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n    const valid = gen.var(\"valid\", (0, codegen_1._)`${len} <= ${items.length}`); // TODO var\n    gen.if((0, codegen_1.not)(valid), () => validateItems(valid));\n    cxt.ok(valid);\n  }\n  function validateItems(valid) {\n    gen.forRange(\"i\", items.length, len, i => {\n      cxt.subschema({\n        keyword,\n        dataProp: i,\n        dataPropType: util_1.Type.Num\n      }, valid);\n      if (!it.allErrors) gen.if((0, codegen_1.not)(valid), () => gen.break());\n    });\n  }\n}\nexports.validateAdditionalItems = validateAdditionalItems;\nexports.default = def;","map":{"version":3,"names":["codegen_1","require","util_1","error","message","params","len","str","_","def","keyword","type","schemaType","before","code","cxt","parentSchema","it","items","Array","isArray","checkStrictMode","validateAdditionalItems","gen","schema","data","const","setParams","length","pass","alwaysValidSchema","valid","var","if","not","validateItems","ok","forRange","i","subschema","dataProp","dataPropType","Type","Num","allErrors","break","exports","default"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\vocabularies\\applicator\\additionalItems.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, not, Name} from \"../../compile/codegen\"\nimport {alwaysValidSchema, checkStrictMode, Type} from \"../../compile/util\"\n\nexport type AdditionalItemsError = ErrorObject<\"additionalItems\", {limit: number}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {len}}) => str`must NOT have more than ${len} items`,\n  params: ({params: {len}}) => _`{limit: ${len}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"additionalItems\" as const,\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt: KeywordCxt) {\n    const {parentSchema, it} = cxt\n    const {items} = parentSchema\n    if (!Array.isArray(items)) {\n      checkStrictMode(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas')\n      return\n    }\n    validateAdditionalItems(cxt, items)\n  },\n}\n\nexport function validateAdditionalItems(cxt: KeywordCxt, items: AnySchema[]): void {\n  const {gen, schema, data, keyword, it} = cxt\n  it.items = true\n  const len = gen.const(\"len\", _`${data}.length`)\n  if (schema === false) {\n    cxt.setParams({len: items.length})\n    cxt.pass(_`${len} <= ${items.length}`)\n  } else if (typeof schema == \"object\" && !alwaysValidSchema(it, schema)) {\n    const valid = gen.var(\"valid\", _`${len} <= ${items.length}`) // TODO var\n    gen.if(not(valid), () => validateItems(valid))\n    cxt.ok(valid)\n  }\n\n  function validateItems(valid: Name): void {\n    gen.forRange(\"i\", items.length, len, (i) => {\n      cxt.subschema({keyword, dataProp: i, dataPropType: Type.Num}, valid)\n      if (!it.allErrors) gen.if(not(valid), () => gen.break())\n    })\n  }\n}\n\nexport default def\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}