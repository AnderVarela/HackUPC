{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n  constructor() {\n    this.head = this.tail = null;\n    this.length = 0;\n  }\n  removeLink(node) {\n    if (node.prev) node.prev.next = node.next;else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n  }\n  empty() {\n    while (this.head) this.shift();\n    return this;\n  }\n  insertAfter(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n  }\n  insertBefore(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n  }\n  unshift(node) {\n    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n  }\n  push(node) {\n    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n  }\n  shift() {\n    return this.head && this.removeLink(this.head);\n  }\n  pop() {\n    return this.tail && this.removeLink(this.tail);\n  }\n  toArray() {\n    return [...this];\n  }\n  *[Symbol.iterator]() {\n    var cur = this.head;\n    while (cur) {\n      yield cur.data;\n      cur = cur.next;\n    }\n  }\n  remove(testFn) {\n    var curr = this.head;\n    while (curr) {\n      var {\n        next\n      } = curr;\n      if (testFn(curr)) {\n        this.removeLink(curr);\n      }\n      curr = next;\n    }\n    return this;\n  }\n}\nexports.default = DLL;\nfunction setInitial(dll, node) {\n  dll.length = 1;\n  dll.head = dll.tail = node;\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","DLL","constructor","head","tail","length","removeLink","node","prev","next","empty","shift","insertAfter","newNode","insertBefore","unshift","setInitial","push","pop","toArray","Symbol","iterator","cur","data","remove","testFn","curr","default","dll","module"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/async/internal/DoublyLinkedList.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty() {\n        while (this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator]() {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove(testFn) {\n        var curr = this.head;\n        while (curr) {\n            var { next } = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nexports.default = DLL;\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\nmodule.exports = exports.default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}