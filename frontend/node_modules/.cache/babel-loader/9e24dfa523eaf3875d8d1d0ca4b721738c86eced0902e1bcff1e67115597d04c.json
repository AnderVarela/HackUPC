{"ast":null,"code":"/**\n * class HelpFormatter\n *\n * Formatter for generating usage messages and argument help strings. Only the\n * name of this class is considered a public API. All the methods provided by\n * the class are considered an implementation detail.\n *\n * Do not call in your code, use this class only for inherits your own forvatter\n *\n * ToDo add [additonal formatters][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#formatter-class\n **/\n'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\n// Constants\nvar c = require('../const');\nvar $$ = require('../utils');\n\n/*:nodoc:* internal\n * new Support(parent, heding)\n * - parent (object): parent section\n * - heading (string): header string\n *\n **/\nfunction Section(parent, heading) {\n  this._parent = parent;\n  this._heading = heading;\n  this._items = [];\n}\n\n/*:nodoc:* internal\n * Section#addItem(callback) -> Void\n * - callback (array): tuple with function and args\n *\n * Add function for single element\n **/\nSection.prototype.addItem = function (callback) {\n  this._items.push(callback);\n};\n\n/*:nodoc:* internal\n * Section#formatHelp(formatter) -> string\n * - formatter (HelpFormatter): current formatter\n *\n * Form help section string\n *\n **/\nSection.prototype.formatHelp = function (formatter) {\n  var itemHelp, heading;\n\n  // format the indented section\n  if (this._parent) {\n    formatter._indent();\n  }\n  itemHelp = this._items.map(function (item) {\n    var obj, func, args;\n    obj = formatter;\n    func = item[0];\n    args = item[1];\n    return func.apply(obj, args);\n  });\n  itemHelp = formatter._joinParts(itemHelp);\n  if (this._parent) {\n    formatter._dedent();\n  }\n\n  // return nothing if the section was empty\n  if (!itemHelp) {\n    return '';\n  }\n\n  // add the heading if the section was non-empty\n  heading = '';\n  if (this._heading && this._heading !== c.SUPPRESS) {\n    var currentIndent = formatter.currentIndent;\n    heading = $$.repeat(' ', currentIndent) + this._heading + ':' + c.EOL;\n  }\n\n  // join the section-initialize newline, the heading and the help\n  return formatter._joinParts([c.EOL, heading, itemHelp, c.EOL]);\n};\n\n/**\n * new HelpFormatter(options)\n *\n * #### Options:\n * - `prog`: program name\n * - `indentIncriment`: indent step, default value 2\n * - `maxHelpPosition`: max help position, default value = 24\n * - `width`: line width\n *\n **/\nvar HelpFormatter = module.exports = function HelpFormatter(options) {\n  options = options || {};\n  this._prog = options.prog;\n  this._maxHelpPosition = options.maxHelpPosition || 24;\n  this._width = options.width || (process.env.COLUMNS || 80) - 2;\n  this._currentIndent = 0;\n  this._indentIncriment = options.indentIncriment || 2;\n  this._level = 0;\n  this._actionMaxLength = 0;\n  this._rootSection = new Section(null);\n  this._currentSection = this._rootSection;\n  this._whitespaceMatcher = new RegExp('\\\\s+', 'g');\n  this._longBreakMatcher = new RegExp(c.EOL + c.EOL + c.EOL + '+', 'g');\n};\nHelpFormatter.prototype._indent = function () {\n  this._currentIndent += this._indentIncriment;\n  this._level += 1;\n};\nHelpFormatter.prototype._dedent = function () {\n  this._currentIndent -= this._indentIncriment;\n  this._level -= 1;\n  if (this._currentIndent < 0) {\n    throw new Error('Indent decreased below 0.');\n  }\n};\nHelpFormatter.prototype._addItem = function (func, args) {\n  this._currentSection.addItem([func, args]);\n};\n\n//\n// Message building methods\n//\n\n/**\n * HelpFormatter#startSection(heading) -> Void\n * - heading (string): header string\n *\n * Start new help section\n *\n * See alse [code example][1]\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.startSection = function (heading) {\n  this._indent();\n  var section = new Section(this._currentSection, heading);\n  var func = section.formatHelp.bind(section);\n  this._addItem(func, [this]);\n  this._currentSection = section;\n};\n\n/**\n * HelpFormatter#endSection -> Void\n *\n * End help section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n **/\nHelpFormatter.prototype.endSection = function () {\n  this._currentSection = this._currentSection._parent;\n  this._dedent();\n};\n\n/**\n * HelpFormatter#addText(text) -> Void\n * - text (string): plain text\n *\n * Add plain text into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.addText = function (text) {\n  if (text && text !== c.SUPPRESS) {\n    this._addItem(this._formatText, [text]);\n  }\n};\n\n/**\n * HelpFormatter#addUsage(usage, actions, groups, prefix) -> Void\n * - usage (string): usage text\n * - actions (array): actions list\n * - groups (array): groups list\n * - prefix (string): usage prefix\n *\n * Add usage data into current section\n *\n * ##### Example\n *\n *      formatter.addUsage(this.usage, this._actions, []);\n *      return formatter.formatHelp();\n *\n **/\nHelpFormatter.prototype.addUsage = function (usage, actions, groups, prefix) {\n  if (usage !== c.SUPPRESS) {\n    this._addItem(this._formatUsage, [usage, actions, groups, prefix]);\n  }\n};\n\n/**\n * HelpFormatter#addArgument(action) -> Void\n * - action (object): action\n *\n * Add argument into current section\n *\n * Single variant of [[HelpFormatter#addArguments]]\n **/\nHelpFormatter.prototype.addArgument = function (action) {\n  if (action.help !== c.SUPPRESS) {\n    var self = this;\n\n    // find all invocations\n    var invocations = [this._formatActionInvocation(action)];\n    var invocationLength = invocations[0].length;\n    var actionLength;\n    if (action._getSubactions) {\n      this._indent();\n      action._getSubactions().forEach(function (subaction) {\n        var invocationNew = self._formatActionInvocation(subaction);\n        invocations.push(invocationNew);\n        invocationLength = Math.max(invocationLength, invocationNew.length);\n      });\n      this._dedent();\n    }\n\n    // update the maximum item length\n    actionLength = invocationLength + this._currentIndent;\n    this._actionMaxLength = Math.max(this._actionMaxLength, actionLength);\n\n    // add the item to the list\n    this._addItem(this._formatAction, [action]);\n  }\n};\n\n/**\n * HelpFormatter#addArguments(actions) -> Void\n * - actions (array): actions list\n *\n * Mass add arguments into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.addArguments = function (actions) {\n  var self = this;\n  actions.forEach(function (action) {\n    self.addArgument(action);\n  });\n};\n\n//\n// Help-formatting methods\n//\n\n/**\n * HelpFormatter#formatHelp -> string\n *\n * Format help\n *\n * ##### Example\n *\n *      formatter.addText(this.epilog);\n *      return formatter.formatHelp();\n *\n **/\nHelpFormatter.prototype.formatHelp = function () {\n  var help = this._rootSection.formatHelp(this);\n  if (help) {\n    help = help.replace(this._longBreakMatcher, c.EOL + c.EOL);\n    help = $$.trimChars(help, c.EOL) + c.EOL;\n  }\n  return help;\n};\nHelpFormatter.prototype._joinParts = function (partStrings) {\n  return partStrings.filter(function (part) {\n    return part && part !== c.SUPPRESS;\n  }).join('');\n};\nHelpFormatter.prototype._formatUsage = function (usage, actions, groups, prefix) {\n  if (!prefix && typeof prefix !== 'string') {\n    prefix = 'usage: ';\n  }\n  actions = actions || [];\n  groups = groups || [];\n\n  // if usage is specified, use that\n  if (usage) {\n    usage = sprintf(usage, {\n      prog: this._prog\n    });\n\n    // if no optionals or positionals are available, usage is just prog\n  } else if (!usage && actions.length === 0) {\n    usage = this._prog;\n\n    // if optionals and positionals are available, calculate usage\n  } else if (!usage) {\n    var prog = this._prog;\n    var optionals = [];\n    var positionals = [];\n    var actionUsage;\n    var textWidth;\n\n    // split optionals from positionals\n    actions.forEach(function (action) {\n      if (action.isOptional()) {\n        optionals.push(action);\n      } else {\n        positionals.push(action);\n      }\n    });\n\n    // build full usage string\n    actionUsage = this._formatActionsUsage([].concat(optionals, positionals), groups);\n    usage = [prog, actionUsage].join(' ');\n\n    // wrap the usage parts if it's too long\n    textWidth = this._width - this._currentIndent;\n    if (prefix.length + usage.length > textWidth) {\n      // break usage into wrappable parts\n      var regexpPart = new RegExp('\\\\(.*?\\\\)+|\\\\[.*?\\\\]+|\\\\S+', 'g');\n      var optionalUsage = this._formatActionsUsage(optionals, groups);\n      var positionalUsage = this._formatActionsUsage(positionals, groups);\n      var optionalParts = optionalUsage.match(regexpPart);\n      var positionalParts = positionalUsage.match(regexpPart) || [];\n      if (optionalParts.join(' ') !== optionalUsage) {\n        throw new Error('assert \"optionalParts.join(\\' \\') === optionalUsage\"');\n      }\n      if (positionalParts.join(' ') !== positionalUsage) {\n        throw new Error('assert \"positionalParts.join(\\' \\') === positionalUsage\"');\n      }\n\n      // helper for wrapping lines\n      /*eslint-disable func-style*/ // node 0.10 compat\n      var _getLines = function (parts, indent, prefix) {\n        var lines = [];\n        var line = [];\n        var lineLength = prefix ? prefix.length - 1 : indent.length - 1;\n        parts.forEach(function (part) {\n          if (lineLength + 1 + part.length > textWidth) {\n            lines.push(indent + line.join(' '));\n            line = [];\n            lineLength = indent.length - 1;\n          }\n          line.push(part);\n          lineLength += part.length + 1;\n        });\n        if (line) {\n          lines.push(indent + line.join(' '));\n        }\n        if (prefix) {\n          lines[0] = lines[0].substr(indent.length);\n        }\n        return lines;\n      };\n      var lines, indent, parts;\n      // if prog is short, follow it with optionals or positionals\n      if (prefix.length + prog.length <= 0.75 * textWidth) {\n        indent = $$.repeat(' ', prefix.length + prog.length + 1);\n        if (optionalParts) {\n          lines = [].concat(_getLines([prog].concat(optionalParts), indent, prefix), _getLines(positionalParts, indent));\n        } else if (positionalParts) {\n          lines = _getLines([prog].concat(positionalParts), indent, prefix);\n        } else {\n          lines = [prog];\n        }\n\n        // if prog is long, put it on its own line\n      } else {\n        indent = $$.repeat(' ', prefix.length);\n        parts = optionalParts.concat(positionalParts);\n        lines = _getLines(parts, indent);\n        if (lines.length > 1) {\n          lines = [].concat(_getLines(optionalParts, indent), _getLines(positionalParts, indent));\n        }\n        lines = [prog].concat(lines);\n      }\n      // join lines into usage\n      usage = lines.join(c.EOL);\n    }\n  }\n\n  // prefix with 'usage:'\n  return prefix + usage + c.EOL + c.EOL;\n};\nHelpFormatter.prototype._formatActionsUsage = function (actions, groups) {\n  // find group indices and identify actions in groups\n  var groupActions = [];\n  var inserts = [];\n  var self = this;\n  groups.forEach(function (group) {\n    var end;\n    var i;\n    var start = actions.indexOf(group._groupActions[0]);\n    if (start >= 0) {\n      end = start + group._groupActions.length;\n\n      //if (actions.slice(start, end) === group._groupActions) {\n      if ($$.arrayEqual(actions.slice(start, end), group._groupActions)) {\n        group._groupActions.forEach(function (action) {\n          groupActions.push(action);\n        });\n        if (!group.required) {\n          if (inserts[start]) {\n            inserts[start] += ' [';\n          } else {\n            inserts[start] = '[';\n          }\n          inserts[end] = ']';\n        } else {\n          if (inserts[start]) {\n            inserts[start] += ' (';\n          } else {\n            inserts[start] = '(';\n          }\n          inserts[end] = ')';\n        }\n        for (i = start + 1; i < end; i += 1) {\n          inserts[i] = '|';\n        }\n      }\n    }\n  });\n\n  // collect all actions format strings\n  var parts = [];\n  actions.forEach(function (action, actionIndex) {\n    var part;\n    var optionString;\n    var argsDefault;\n    var argsString;\n\n    // suppressed arguments are marked with None\n    // remove | separators for suppressed arguments\n    if (action.help === c.SUPPRESS) {\n      parts.push(null);\n      if (inserts[actionIndex] === '|') {\n        inserts.splice(actionIndex, actionIndex);\n      } else if (inserts[actionIndex + 1] === '|') {\n        inserts.splice(actionIndex + 1, actionIndex + 1);\n      }\n\n      // produce all arg strings\n    } else if (!action.isOptional()) {\n      part = self._formatArgs(action, action.dest);\n\n      // if it's in a group, strip the outer []\n      if (groupActions.indexOf(action) >= 0) {\n        if (part[0] === '[' && part[part.length - 1] === ']') {\n          part = part.slice(1, -1);\n        }\n      }\n      // add the action string to the list\n      parts.push(part);\n\n      // produce the first way to invoke the option in brackets\n    } else {\n      optionString = action.optionStrings[0];\n\n      // if the Optional doesn't take a value, format is: -s or --long\n      if (action.nargs === 0) {\n        part = '' + optionString;\n\n        // if the Optional takes a value, format is: -s ARGS or --long ARGS\n      } else {\n        argsDefault = action.dest.toUpperCase();\n        argsString = self._formatArgs(action, argsDefault);\n        part = optionString + ' ' + argsString;\n      }\n      // make it look optional if it's not required or in a group\n      if (!action.required && groupActions.indexOf(action) < 0) {\n        part = '[' + part + ']';\n      }\n      // add the action string to the list\n      parts.push(part);\n    }\n  });\n\n  // insert things at the necessary indices\n  for (var i = inserts.length - 1; i >= 0; --i) {\n    if (inserts[i] !== null) {\n      parts.splice(i, 0, inserts[i]);\n    }\n  }\n\n  // join all the action items with spaces\n  var text = parts.filter(function (part) {\n    return !!part;\n  }).join(' ');\n\n  // clean up separators for mutually exclusive groups\n  text = text.replace(/([\\[(]) /g, '$1'); // remove spaces\n  text = text.replace(/ ([\\])])/g, '$1');\n  text = text.replace(/\\[ *\\]/g, ''); // remove empty groups\n  text = text.replace(/\\( *\\)/g, '');\n  text = text.replace(/\\(([^|]*)\\)/g, '$1'); // remove () from single action groups\n\n  text = text.trim();\n\n  // return the text\n  return text;\n};\nHelpFormatter.prototype._formatText = function (text) {\n  text = sprintf(text, {\n    prog: this._prog\n  });\n  var textWidth = this._width - this._currentIndent;\n  var indentIncriment = $$.repeat(' ', this._currentIndent);\n  return this._fillText(text, textWidth, indentIncriment) + c.EOL + c.EOL;\n};\nHelpFormatter.prototype._formatAction = function (action) {\n  var self = this;\n  var helpText;\n  var helpLines;\n  var parts;\n  var indentFirst;\n\n  // determine the required width and the entry label\n  var helpPosition = Math.min(this._actionMaxLength + 2, this._maxHelpPosition);\n  var helpWidth = this._width - helpPosition;\n  var actionWidth = helpPosition - this._currentIndent - 2;\n  var actionHeader = this._formatActionInvocation(action);\n\n  // no help; start on same line and add a final newline\n  if (!action.help) {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + c.EOL;\n\n    // short action name; start on the same line and pad two spaces\n  } else if (actionHeader.length <= actionWidth) {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + '  ' + $$.repeat(' ', actionWidth - actionHeader.length);\n    indentFirst = 0;\n\n    // long action name; start on the next line\n  } else {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + c.EOL;\n    indentFirst = helpPosition;\n  }\n\n  // collect the pieces of the action help\n  parts = [actionHeader];\n\n  // if there was help for the action, add lines of help text\n  if (action.help) {\n    helpText = this._expandHelp(action);\n    helpLines = this._splitLines(helpText, helpWidth);\n    parts.push($$.repeat(' ', indentFirst) + helpLines[0] + c.EOL);\n    helpLines.slice(1).forEach(function (line) {\n      parts.push($$.repeat(' ', helpPosition) + line + c.EOL);\n    });\n\n    // or add a newline if the description doesn't end with one\n  } else if (actionHeader.charAt(actionHeader.length - 1) !== c.EOL) {\n    parts.push(c.EOL);\n  }\n  // if there are any sub-actions, add their help as well\n  if (action._getSubactions) {\n    this._indent();\n    action._getSubactions().forEach(function (subaction) {\n      parts.push(self._formatAction(subaction));\n    });\n    this._dedent();\n  }\n  // return a single string\n  return this._joinParts(parts);\n};\nHelpFormatter.prototype._formatActionInvocation = function (action) {\n  if (!action.isOptional()) {\n    var format_func = this._metavarFormatter(action, action.dest);\n    var metavars = format_func(1);\n    return metavars[0];\n  }\n  var parts = [];\n  var argsDefault;\n  var argsString;\n\n  // if the Optional doesn't take a value, format is: -s, --long\n  if (action.nargs === 0) {\n    parts = parts.concat(action.optionStrings);\n\n    // if the Optional takes a value, format is: -s ARGS, --long ARGS\n  } else {\n    argsDefault = action.dest.toUpperCase();\n    argsString = this._formatArgs(action, argsDefault);\n    action.optionStrings.forEach(function (optionString) {\n      parts.push(optionString + ' ' + argsString);\n    });\n  }\n  return parts.join(', ');\n};\nHelpFormatter.prototype._metavarFormatter = function (action, metavarDefault) {\n  var result;\n  if (action.metavar || action.metavar === '') {\n    result = action.metavar;\n  } else if (action.choices) {\n    var choices = action.choices;\n    if (typeof choices === 'string') {\n      choices = choices.split('').join(', ');\n    } else if (Array.isArray(choices)) {\n      choices = choices.join(',');\n    } else {\n      choices = Object.keys(choices).join(',');\n    }\n    result = '{' + choices + '}';\n  } else {\n    result = metavarDefault;\n  }\n  return function (size) {\n    if (Array.isArray(result)) {\n      return result;\n    }\n    var metavars = [];\n    for (var i = 0; i < size; i += 1) {\n      metavars.push(result);\n    }\n    return metavars;\n  };\n};\nHelpFormatter.prototype._formatArgs = function (action, metavarDefault) {\n  var result;\n  var metavars;\n  var buildMetavar = this._metavarFormatter(action, metavarDefault);\n  switch (action.nargs) {\n    /*eslint-disable no-undefined*/\n    case undefined:\n    case null:\n      metavars = buildMetavar(1);\n      result = '' + metavars[0];\n      break;\n    case c.OPTIONAL:\n      metavars = buildMetavar(1);\n      result = '[' + metavars[0] + ']';\n      break;\n    case c.ZERO_OR_MORE:\n      metavars = buildMetavar(2);\n      result = '[' + metavars[0] + ' [' + metavars[1] + ' ...]]';\n      break;\n    case c.ONE_OR_MORE:\n      metavars = buildMetavar(2);\n      result = '' + metavars[0] + ' [' + metavars[1] + ' ...]';\n      break;\n    case c.REMAINDER:\n      result = '...';\n      break;\n    case c.PARSER:\n      metavars = buildMetavar(1);\n      result = metavars[0] + ' ...';\n      break;\n    default:\n      metavars = buildMetavar(action.nargs);\n      result = metavars.join(' ');\n  }\n  return result;\n};\nHelpFormatter.prototype._expandHelp = function (action) {\n  var params = {\n    prog: this._prog\n  };\n  Object.keys(action).forEach(function (actionProperty) {\n    var actionValue = action[actionProperty];\n    if (actionValue !== c.SUPPRESS) {\n      params[actionProperty] = actionValue;\n    }\n  });\n  if (params.choices) {\n    if (typeof params.choices === 'string') {\n      params.choices = params.choices.split('').join(', ');\n    } else if (Array.isArray(params.choices)) {\n      params.choices = params.choices.join(', ');\n    } else {\n      params.choices = Object.keys(params.choices).join(', ');\n    }\n  }\n  return sprintf(this._getHelpString(action), params);\n};\nHelpFormatter.prototype._splitLines = function (text, width) {\n  var lines = [];\n  var delimiters = [' ', '.', ',', '!', '?'];\n  var re = new RegExp('[' + delimiters.join('') + '][^' + delimiters.join('') + ']*$');\n  text = text.replace(/[\\n\\|\\t]/g, ' ');\n  text = text.trim();\n  text = text.replace(this._whitespaceMatcher, ' ');\n\n  // Wraps the single paragraph in text (a string) so every line\n  // is at most width characters long.\n  text.split(c.EOL).forEach(function (line) {\n    if (width >= line.length) {\n      lines.push(line);\n      return;\n    }\n    var wrapStart = 0;\n    var wrapEnd = width;\n    var delimiterIndex = 0;\n    while (wrapEnd <= line.length) {\n      if (wrapEnd !== line.length && delimiters.indexOf(line[wrapEnd] < -1)) {\n        delimiterIndex = (re.exec(line.substring(wrapStart, wrapEnd)) || {}).index;\n        wrapEnd = wrapStart + delimiterIndex + 1;\n      }\n      lines.push(line.substring(wrapStart, wrapEnd));\n      wrapStart = wrapEnd;\n      wrapEnd += width;\n    }\n    if (wrapStart < line.length) {\n      lines.push(line.substring(wrapStart, wrapEnd));\n    }\n  });\n  return lines;\n};\nHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = this._splitLines(text, width);\n  lines = lines.map(function (line) {\n    return indent + line;\n  });\n  return lines.join(c.EOL);\n};\nHelpFormatter.prototype._getHelpString = function (action) {\n  return action.help;\n};","map":{"version":3,"names":["sprintf","require","c","$$","Section","parent","heading","_parent","_heading","_items","prototype","addItem","callback","push","formatHelp","formatter","itemHelp","_indent","map","item","obj","func","args","apply","_joinParts","_dedent","SUPPRESS","currentIndent","repeat","EOL","HelpFormatter","module","exports","options","_prog","prog","_maxHelpPosition","maxHelpPosition","_width","width","process","env","COLUMNS","_currentIndent","_indentIncriment","indentIncriment","_level","_actionMaxLength","_rootSection","_currentSection","_whitespaceMatcher","RegExp","_longBreakMatcher","Error","_addItem","startSection","section","bind","endSection","addText","text","_formatText","addUsage","usage","actions","groups","prefix","_formatUsage","addArgument","action","help","self","invocations","_formatActionInvocation","invocationLength","length","actionLength","_getSubactions","forEach","subaction","invocationNew","Math","max","_formatAction","addArguments","replace","trimChars","partStrings","filter","part","join","optionals","positionals","actionUsage","textWidth","isOptional","_formatActionsUsage","concat","regexpPart","optionalUsage","positionalUsage","optionalParts","match","positionalParts","_getLines","parts","indent","lines","line","lineLength","substr","groupActions","inserts","group","end","i","start","indexOf","_groupActions","arrayEqual","slice","required","actionIndex","optionString","argsDefault","argsString","splice","_formatArgs","dest","optionStrings","nargs","toUpperCase","trim","_fillText","helpText","helpLines","indentFirst","helpPosition","min","helpWidth","actionWidth","actionHeader","_expandHelp","_splitLines","charAt","format_func","_metavarFormatter","metavars","metavarDefault","result","metavar","choices","split","Array","isArray","Object","keys","size","buildMetavar","undefined","OPTIONAL","ZERO_OR_MORE","ONE_OR_MORE","REMAINDER","PARSER","params","actionProperty","actionValue","_getHelpString","delimiters","re","wrapStart","wrapEnd","delimiterIndex","exec","substring","index"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/argparse/lib/help/formatter.js"],"sourcesContent":["/**\n * class HelpFormatter\n *\n * Formatter for generating usage messages and argument help strings. Only the\n * name of this class is considered a public API. All the methods provided by\n * the class are considered an implementation detail.\n *\n * Do not call in your code, use this class only for inherits your own forvatter\n *\n * ToDo add [additonal formatters][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#formatter-class\n **/\n'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\n// Constants\nvar c = require('../const');\n\nvar $$ = require('../utils');\n\n\n/*:nodoc:* internal\n * new Support(parent, heding)\n * - parent (object): parent section\n * - heading (string): header string\n *\n **/\nfunction Section(parent, heading) {\n  this._parent = parent;\n  this._heading = heading;\n  this._items = [];\n}\n\n/*:nodoc:* internal\n * Section#addItem(callback) -> Void\n * - callback (array): tuple with function and args\n *\n * Add function for single element\n **/\nSection.prototype.addItem = function (callback) {\n  this._items.push(callback);\n};\n\n/*:nodoc:* internal\n * Section#formatHelp(formatter) -> string\n * - formatter (HelpFormatter): current formatter\n *\n * Form help section string\n *\n **/\nSection.prototype.formatHelp = function (formatter) {\n  var itemHelp, heading;\n\n  // format the indented section\n  if (this._parent) {\n    formatter._indent();\n  }\n\n  itemHelp = this._items.map(function (item) {\n    var obj, func, args;\n\n    obj = formatter;\n    func = item[0];\n    args = item[1];\n    return func.apply(obj, args);\n  });\n  itemHelp = formatter._joinParts(itemHelp);\n\n  if (this._parent) {\n    formatter._dedent();\n  }\n\n  // return nothing if the section was empty\n  if (!itemHelp) {\n    return '';\n  }\n\n  // add the heading if the section was non-empty\n  heading = '';\n  if (this._heading && this._heading !== c.SUPPRESS) {\n    var currentIndent = formatter.currentIndent;\n    heading = $$.repeat(' ', currentIndent) + this._heading + ':' + c.EOL;\n  }\n\n  // join the section-initialize newline, the heading and the help\n  return formatter._joinParts([ c.EOL, heading, itemHelp, c.EOL ]);\n};\n\n/**\n * new HelpFormatter(options)\n *\n * #### Options:\n * - `prog`: program name\n * - `indentIncriment`: indent step, default value 2\n * - `maxHelpPosition`: max help position, default value = 24\n * - `width`: line width\n *\n **/\nvar HelpFormatter = module.exports = function HelpFormatter(options) {\n  options = options || {};\n\n  this._prog = options.prog;\n\n  this._maxHelpPosition = options.maxHelpPosition || 24;\n  this._width = (options.width || ((process.env.COLUMNS || 80) - 2));\n\n  this._currentIndent = 0;\n  this._indentIncriment = options.indentIncriment || 2;\n  this._level = 0;\n  this._actionMaxLength = 0;\n\n  this._rootSection = new Section(null);\n  this._currentSection = this._rootSection;\n\n  this._whitespaceMatcher = new RegExp('\\\\s+', 'g');\n  this._longBreakMatcher = new RegExp(c.EOL + c.EOL + c.EOL + '+', 'g');\n};\n\nHelpFormatter.prototype._indent = function () {\n  this._currentIndent += this._indentIncriment;\n  this._level += 1;\n};\n\nHelpFormatter.prototype._dedent = function () {\n  this._currentIndent -= this._indentIncriment;\n  this._level -= 1;\n  if (this._currentIndent < 0) {\n    throw new Error('Indent decreased below 0.');\n  }\n};\n\nHelpFormatter.prototype._addItem = function (func, args) {\n  this._currentSection.addItem([ func, args ]);\n};\n\n//\n// Message building methods\n//\n\n/**\n * HelpFormatter#startSection(heading) -> Void\n * - heading (string): header string\n *\n * Start new help section\n *\n * See alse [code example][1]\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.startSection = function (heading) {\n  this._indent();\n  var section = new Section(this._currentSection, heading);\n  var func = section.formatHelp.bind(section);\n  this._addItem(func, [ this ]);\n  this._currentSection = section;\n};\n\n/**\n * HelpFormatter#endSection -> Void\n *\n * End help section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n **/\nHelpFormatter.prototype.endSection = function () {\n  this._currentSection = this._currentSection._parent;\n  this._dedent();\n};\n\n/**\n * HelpFormatter#addText(text) -> Void\n * - text (string): plain text\n *\n * Add plain text into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.addText = function (text) {\n  if (text && text !== c.SUPPRESS) {\n    this._addItem(this._formatText, [ text ]);\n  }\n};\n\n/**\n * HelpFormatter#addUsage(usage, actions, groups, prefix) -> Void\n * - usage (string): usage text\n * - actions (array): actions list\n * - groups (array): groups list\n * - prefix (string): usage prefix\n *\n * Add usage data into current section\n *\n * ##### Example\n *\n *      formatter.addUsage(this.usage, this._actions, []);\n *      return formatter.formatHelp();\n *\n **/\nHelpFormatter.prototype.addUsage = function (usage, actions, groups, prefix) {\n  if (usage !== c.SUPPRESS) {\n    this._addItem(this._formatUsage, [ usage, actions, groups, prefix ]);\n  }\n};\n\n/**\n * HelpFormatter#addArgument(action) -> Void\n * - action (object): action\n *\n * Add argument into current section\n *\n * Single variant of [[HelpFormatter#addArguments]]\n **/\nHelpFormatter.prototype.addArgument = function (action) {\n  if (action.help !== c.SUPPRESS) {\n    var self = this;\n\n    // find all invocations\n    var invocations = [ this._formatActionInvocation(action) ];\n    var invocationLength = invocations[0].length;\n\n    var actionLength;\n\n    if (action._getSubactions) {\n      this._indent();\n      action._getSubactions().forEach(function (subaction) {\n\n        var invocationNew = self._formatActionInvocation(subaction);\n        invocations.push(invocationNew);\n        invocationLength = Math.max(invocationLength, invocationNew.length);\n\n      });\n      this._dedent();\n    }\n\n    // update the maximum item length\n    actionLength = invocationLength + this._currentIndent;\n    this._actionMaxLength = Math.max(this._actionMaxLength, actionLength);\n\n    // add the item to the list\n    this._addItem(this._formatAction, [ action ]);\n  }\n};\n\n/**\n * HelpFormatter#addArguments(actions) -> Void\n * - actions (array): actions list\n *\n * Mass add arguments into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.addArguments = function (actions) {\n  var self = this;\n  actions.forEach(function (action) {\n    self.addArgument(action);\n  });\n};\n\n//\n// Help-formatting methods\n//\n\n/**\n * HelpFormatter#formatHelp -> string\n *\n * Format help\n *\n * ##### Example\n *\n *      formatter.addText(this.epilog);\n *      return formatter.formatHelp();\n *\n **/\nHelpFormatter.prototype.formatHelp = function () {\n  var help = this._rootSection.formatHelp(this);\n  if (help) {\n    help = help.replace(this._longBreakMatcher, c.EOL + c.EOL);\n    help = $$.trimChars(help, c.EOL) + c.EOL;\n  }\n  return help;\n};\n\nHelpFormatter.prototype._joinParts = function (partStrings) {\n  return partStrings.filter(function (part) {\n    return (part && part !== c.SUPPRESS);\n  }).join('');\n};\n\nHelpFormatter.prototype._formatUsage = function (usage, actions, groups, prefix) {\n  if (!prefix && typeof prefix !== 'string') {\n    prefix = 'usage: ';\n  }\n\n  actions = actions || [];\n  groups = groups || [];\n\n\n  // if usage is specified, use that\n  if (usage) {\n    usage = sprintf(usage, { prog: this._prog });\n\n    // if no optionals or positionals are available, usage is just prog\n  } else if (!usage && actions.length === 0) {\n    usage = this._prog;\n\n    // if optionals and positionals are available, calculate usage\n  } else if (!usage) {\n    var prog = this._prog;\n    var optionals = [];\n    var positionals = [];\n    var actionUsage;\n    var textWidth;\n\n    // split optionals from positionals\n    actions.forEach(function (action) {\n      if (action.isOptional()) {\n        optionals.push(action);\n      } else {\n        positionals.push(action);\n      }\n    });\n\n    // build full usage string\n    actionUsage = this._formatActionsUsage([].concat(optionals, positionals), groups);\n    usage = [ prog, actionUsage ].join(' ');\n\n    // wrap the usage parts if it's too long\n    textWidth = this._width - this._currentIndent;\n    if ((prefix.length + usage.length) > textWidth) {\n\n      // break usage into wrappable parts\n      var regexpPart = new RegExp('\\\\(.*?\\\\)+|\\\\[.*?\\\\]+|\\\\S+', 'g');\n      var optionalUsage = this._formatActionsUsage(optionals, groups);\n      var positionalUsage = this._formatActionsUsage(positionals, groups);\n\n\n      var optionalParts = optionalUsage.match(regexpPart);\n      var positionalParts = positionalUsage.match(regexpPart) || [];\n\n      if (optionalParts.join(' ') !== optionalUsage) {\n        throw new Error('assert \"optionalParts.join(\\' \\') === optionalUsage\"');\n      }\n      if (positionalParts.join(' ') !== positionalUsage) {\n        throw new Error('assert \"positionalParts.join(\\' \\') === positionalUsage\"');\n      }\n\n      // helper for wrapping lines\n      /*eslint-disable func-style*/ // node 0.10 compat\n      var _getLines = function (parts, indent, prefix) {\n        var lines = [];\n        var line = [];\n\n        var lineLength = prefix ? prefix.length - 1 : indent.length - 1;\n\n        parts.forEach(function (part) {\n          if (lineLength + 1 + part.length > textWidth) {\n            lines.push(indent + line.join(' '));\n            line = [];\n            lineLength = indent.length - 1;\n          }\n          line.push(part);\n          lineLength += part.length + 1;\n        });\n\n        if (line) {\n          lines.push(indent + line.join(' '));\n        }\n        if (prefix) {\n          lines[0] = lines[0].substr(indent.length);\n        }\n        return lines;\n      };\n\n      var lines, indent, parts;\n      // if prog is short, follow it with optionals or positionals\n      if (prefix.length + prog.length <= 0.75 * textWidth) {\n        indent = $$.repeat(' ', (prefix.length + prog.length + 1));\n        if (optionalParts) {\n          lines = [].concat(\n            _getLines([ prog ].concat(optionalParts), indent, prefix),\n            _getLines(positionalParts, indent)\n          );\n        } else if (positionalParts) {\n          lines = _getLines([ prog ].concat(positionalParts), indent, prefix);\n        } else {\n          lines = [ prog ];\n        }\n\n        // if prog is long, put it on its own line\n      } else {\n        indent = $$.repeat(' ', prefix.length);\n        parts = optionalParts.concat(positionalParts);\n        lines = _getLines(parts, indent);\n        if (lines.length > 1) {\n          lines = [].concat(\n            _getLines(optionalParts, indent),\n            _getLines(positionalParts, indent)\n          );\n        }\n        lines = [ prog ].concat(lines);\n      }\n      // join lines into usage\n      usage = lines.join(c.EOL);\n    }\n  }\n\n  // prefix with 'usage:'\n  return prefix + usage + c.EOL + c.EOL;\n};\n\nHelpFormatter.prototype._formatActionsUsage = function (actions, groups) {\n  // find group indices and identify actions in groups\n  var groupActions = [];\n  var inserts = [];\n  var self = this;\n\n  groups.forEach(function (group) {\n    var end;\n    var i;\n\n    var start = actions.indexOf(group._groupActions[0]);\n    if (start >= 0) {\n      end = start + group._groupActions.length;\n\n      //if (actions.slice(start, end) === group._groupActions) {\n      if ($$.arrayEqual(actions.slice(start, end), group._groupActions)) {\n        group._groupActions.forEach(function (action) {\n          groupActions.push(action);\n        });\n\n        if (!group.required) {\n          if (inserts[start]) {\n            inserts[start] += ' [';\n          } else {\n            inserts[start] = '[';\n          }\n          inserts[end] = ']';\n        } else {\n          if (inserts[start]) {\n            inserts[start] += ' (';\n          } else {\n            inserts[start] = '(';\n          }\n          inserts[end] = ')';\n        }\n        for (i = start + 1; i < end; i += 1) {\n          inserts[i] = '|';\n        }\n      }\n    }\n  });\n\n  // collect all actions format strings\n  var parts = [];\n\n  actions.forEach(function (action, actionIndex) {\n    var part;\n    var optionString;\n    var argsDefault;\n    var argsString;\n\n    // suppressed arguments are marked with None\n    // remove | separators for suppressed arguments\n    if (action.help === c.SUPPRESS) {\n      parts.push(null);\n      if (inserts[actionIndex] === '|') {\n        inserts.splice(actionIndex, actionIndex);\n      } else if (inserts[actionIndex + 1] === '|') {\n        inserts.splice(actionIndex + 1, actionIndex + 1);\n      }\n\n      // produce all arg strings\n    } else if (!action.isOptional()) {\n      part = self._formatArgs(action, action.dest);\n\n      // if it's in a group, strip the outer []\n      if (groupActions.indexOf(action) >= 0) {\n        if (part[0] === '[' && part[part.length - 1] === ']') {\n          part = part.slice(1, -1);\n        }\n      }\n      // add the action string to the list\n      parts.push(part);\n\n    // produce the first way to invoke the option in brackets\n    } else {\n      optionString = action.optionStrings[0];\n\n      // if the Optional doesn't take a value, format is: -s or --long\n      if (action.nargs === 0) {\n        part = '' + optionString;\n\n      // if the Optional takes a value, format is: -s ARGS or --long ARGS\n      } else {\n        argsDefault = action.dest.toUpperCase();\n        argsString = self._formatArgs(action, argsDefault);\n        part = optionString + ' ' + argsString;\n      }\n      // make it look optional if it's not required or in a group\n      if (!action.required && groupActions.indexOf(action) < 0) {\n        part = '[' + part + ']';\n      }\n      // add the action string to the list\n      parts.push(part);\n    }\n  });\n\n  // insert things at the necessary indices\n  for (var i = inserts.length - 1; i >= 0; --i) {\n    if (inserts[i] !== null) {\n      parts.splice(i, 0, inserts[i]);\n    }\n  }\n\n  // join all the action items with spaces\n  var text = parts.filter(function (part) {\n    return !!part;\n  }).join(' ');\n\n  // clean up separators for mutually exclusive groups\n  text = text.replace(/([\\[(]) /g, '$1'); // remove spaces\n  text = text.replace(/ ([\\])])/g, '$1');\n  text = text.replace(/\\[ *\\]/g, ''); // remove empty groups\n  text = text.replace(/\\( *\\)/g, '');\n  text = text.replace(/\\(([^|]*)\\)/g, '$1'); // remove () from single action groups\n\n  text = text.trim();\n\n  // return the text\n  return text;\n};\n\nHelpFormatter.prototype._formatText = function (text) {\n  text = sprintf(text, { prog: this._prog });\n  var textWidth = this._width - this._currentIndent;\n  var indentIncriment = $$.repeat(' ', this._currentIndent);\n  return this._fillText(text, textWidth, indentIncriment) + c.EOL + c.EOL;\n};\n\nHelpFormatter.prototype._formatAction = function (action) {\n  var self = this;\n\n  var helpText;\n  var helpLines;\n  var parts;\n  var indentFirst;\n\n  // determine the required width and the entry label\n  var helpPosition = Math.min(this._actionMaxLength + 2, this._maxHelpPosition);\n  var helpWidth = this._width - helpPosition;\n  var actionWidth = helpPosition - this._currentIndent - 2;\n  var actionHeader = this._formatActionInvocation(action);\n\n  // no help; start on same line and add a final newline\n  if (!action.help) {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + c.EOL;\n\n  // short action name; start on the same line and pad two spaces\n  } else if (actionHeader.length <= actionWidth) {\n    actionHeader = $$.repeat(' ', this._currentIndent) +\n        actionHeader +\n        '  ' +\n        $$.repeat(' ', actionWidth - actionHeader.length);\n    indentFirst = 0;\n\n  // long action name; start on the next line\n  } else {\n    actionHeader = $$.repeat(' ', this._currentIndent) + actionHeader + c.EOL;\n    indentFirst = helpPosition;\n  }\n\n  // collect the pieces of the action help\n  parts = [ actionHeader ];\n\n  // if there was help for the action, add lines of help text\n  if (action.help) {\n    helpText = this._expandHelp(action);\n    helpLines = this._splitLines(helpText, helpWidth);\n    parts.push($$.repeat(' ', indentFirst) + helpLines[0] + c.EOL);\n    helpLines.slice(1).forEach(function (line) {\n      parts.push($$.repeat(' ', helpPosition) + line + c.EOL);\n    });\n\n  // or add a newline if the description doesn't end with one\n  } else if (actionHeader.charAt(actionHeader.length - 1) !== c.EOL) {\n    parts.push(c.EOL);\n  }\n  // if there are any sub-actions, add their help as well\n  if (action._getSubactions) {\n    this._indent();\n    action._getSubactions().forEach(function (subaction) {\n      parts.push(self._formatAction(subaction));\n    });\n    this._dedent();\n  }\n  // return a single string\n  return this._joinParts(parts);\n};\n\nHelpFormatter.prototype._formatActionInvocation = function (action) {\n  if (!action.isOptional()) {\n    var format_func = this._metavarFormatter(action, action.dest);\n    var metavars = format_func(1);\n    return metavars[0];\n  }\n\n  var parts = [];\n  var argsDefault;\n  var argsString;\n\n  // if the Optional doesn't take a value, format is: -s, --long\n  if (action.nargs === 0) {\n    parts = parts.concat(action.optionStrings);\n\n  // if the Optional takes a value, format is: -s ARGS, --long ARGS\n  } else {\n    argsDefault = action.dest.toUpperCase();\n    argsString = this._formatArgs(action, argsDefault);\n    action.optionStrings.forEach(function (optionString) {\n      parts.push(optionString + ' ' + argsString);\n    });\n  }\n  return parts.join(', ');\n};\n\nHelpFormatter.prototype._metavarFormatter = function (action, metavarDefault) {\n  var result;\n\n  if (action.metavar || action.metavar === '') {\n    result = action.metavar;\n  } else if (action.choices) {\n    var choices = action.choices;\n\n    if (typeof choices === 'string') {\n      choices = choices.split('').join(', ');\n    } else if (Array.isArray(choices)) {\n      choices = choices.join(',');\n    } else {\n      choices = Object.keys(choices).join(',');\n    }\n    result = '{' + choices + '}';\n  } else {\n    result = metavarDefault;\n  }\n\n  return function (size) {\n    if (Array.isArray(result)) {\n      return result;\n    }\n\n    var metavars = [];\n    for (var i = 0; i < size; i += 1) {\n      metavars.push(result);\n    }\n    return metavars;\n  };\n};\n\nHelpFormatter.prototype._formatArgs = function (action, metavarDefault) {\n  var result;\n  var metavars;\n\n  var buildMetavar = this._metavarFormatter(action, metavarDefault);\n\n  switch (action.nargs) {\n    /*eslint-disable no-undefined*/\n    case undefined:\n    case null:\n      metavars = buildMetavar(1);\n      result = '' + metavars[0];\n      break;\n    case c.OPTIONAL:\n      metavars = buildMetavar(1);\n      result = '[' + metavars[0] + ']';\n      break;\n    case c.ZERO_OR_MORE:\n      metavars = buildMetavar(2);\n      result = '[' + metavars[0] + ' [' + metavars[1] + ' ...]]';\n      break;\n    case c.ONE_OR_MORE:\n      metavars = buildMetavar(2);\n      result = '' + metavars[0] + ' [' + metavars[1] + ' ...]';\n      break;\n    case c.REMAINDER:\n      result = '...';\n      break;\n    case c.PARSER:\n      metavars = buildMetavar(1);\n      result = metavars[0] + ' ...';\n      break;\n    default:\n      metavars = buildMetavar(action.nargs);\n      result = metavars.join(' ');\n  }\n  return result;\n};\n\nHelpFormatter.prototype._expandHelp = function (action) {\n  var params = { prog: this._prog };\n\n  Object.keys(action).forEach(function (actionProperty) {\n    var actionValue = action[actionProperty];\n\n    if (actionValue !== c.SUPPRESS) {\n      params[actionProperty] = actionValue;\n    }\n  });\n\n  if (params.choices) {\n    if (typeof params.choices === 'string') {\n      params.choices = params.choices.split('').join(', ');\n    } else if (Array.isArray(params.choices)) {\n      params.choices = params.choices.join(', ');\n    } else {\n      params.choices = Object.keys(params.choices).join(', ');\n    }\n  }\n\n  return sprintf(this._getHelpString(action), params);\n};\n\nHelpFormatter.prototype._splitLines = function (text, width) {\n  var lines = [];\n  var delimiters = [ ' ', '.', ',', '!', '?' ];\n  var re = new RegExp('[' + delimiters.join('') + '][^' + delimiters.join('') + ']*$');\n\n  text = text.replace(/[\\n\\|\\t]/g, ' ');\n\n  text = text.trim();\n  text = text.replace(this._whitespaceMatcher, ' ');\n\n  // Wraps the single paragraph in text (a string) so every line\n  // is at most width characters long.\n  text.split(c.EOL).forEach(function (line) {\n    if (width >= line.length) {\n      lines.push(line);\n      return;\n    }\n\n    var wrapStart = 0;\n    var wrapEnd = width;\n    var delimiterIndex = 0;\n    while (wrapEnd <= line.length) {\n      if (wrapEnd !== line.length && delimiters.indexOf(line[wrapEnd] < -1)) {\n        delimiterIndex = (re.exec(line.substring(wrapStart, wrapEnd)) || {}).index;\n        wrapEnd = wrapStart + delimiterIndex + 1;\n      }\n      lines.push(line.substring(wrapStart, wrapEnd));\n      wrapStart = wrapEnd;\n      wrapEnd += width;\n    }\n    if (wrapStart < line.length) {\n      lines.push(line.substring(wrapStart, wrapEnd));\n    }\n  });\n\n  return lines;\n};\n\nHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = this._splitLines(text, width);\n  lines = lines.map(function (line) {\n    return indent + line;\n  });\n  return lines.join(c.EOL);\n};\n\nHelpFormatter.prototype._getHelpString = function (action) {\n  return action.help;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}