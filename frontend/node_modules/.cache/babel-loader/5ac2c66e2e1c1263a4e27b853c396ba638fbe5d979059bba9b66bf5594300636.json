{"ast":null,"code":"'use strict';\n\nconst Q = require('q'),\n  CoaParam = require('./coaparam'),\n  chalk = require('chalk');\n\n/**\n * Option\n *\n * Named entity. Options may have short and long keys for use from command line.\n *\n * @namespace\n * @class Opt\n * @extends CoaParam\n */\nmodule.exports = class Opt extends CoaParam {\n  /**\n   * @constructs\n   * @param {COA.Cmd} cmd - parent command\n   */\n  constructor(cmd) {\n    super(cmd);\n    this._short = null;\n    this._long = null;\n    this._flag = false;\n    this._only = false;\n    this._cmd._opts.push(this);\n  }\n\n  /**\n   * Set a short key for option to be used with one hyphen from command line.\n   *\n   * @param {String} short - short name\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n  short(short) {\n    this._short = short;\n    this._cmd._optsByKey[`-${short}`] = this;\n    return this;\n  }\n\n  /**\n   * Set a short key for option to be used with double hyphens from command line.\n   *\n   * @param {String} long - long name\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n  long(long) {\n    this._long = long;\n    this._cmd._optsByKey[`--${long}`] = this;\n    return this;\n  }\n\n  /**\n   * Make an option boolean, i.e. option without value.\n   *\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n  flag() {\n    this._flag = true;\n    return this;\n  }\n\n  /**\n   * Makes an option to act as a command,\n   * i.e. program will exit just after option action.\n   *\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n  only() {\n    this._only = true;\n    return this;\n  }\n\n  /**\n   * Add action for current option command.\n   * This action is performed if the current option\n   * is present in parsed options (with any value).\n   *\n   * @param {Function} act - action function,\n   *         invoked in the context of command instance\n   *         and has the parameters:\n   *                 - {Object} opts - parsed options\n   *                 - {Array} args - parsed arguments\n   *                 - {Object} res - actions result accumulator\n   *         It can return rejected promise by Cmd.reject (in case of error)\n   *         or any other value treated as result.\n   * @returns {COA.Opt} - this instance (for chainability)\n   */\n  act(act) {\n    // Need function here for arguments\n    const opt = this;\n    this._cmd.act(function (opts) {\n      if (!opts.hasOwnProperty(opt._name)) return;\n      const res = act.apply(this, arguments);\n      if (!opt._only) return res;\n      return Q.when(res, out => this.reject({\n        toString: () => out.toString(),\n        exitCode: 0\n      }));\n    });\n    return this;\n  }\n  _saveVal(opts, val) {\n    this._val && (val = this._val(val));\n    const name = this._name;\n    this._arr ? (opts[name] || (opts[name] = [])).push(val) : opts[name] = val;\n    return val;\n  }\n  _parse(argv, opts) {\n    return this._saveVal(opts, this._flag ? true : argv.shift());\n  }\n  _checkParsed(opts) {\n    return !opts.hasOwnProperty(this._name);\n  }\n  _usage() {\n    const res = [],\n      nameStr = this._name.toUpperCase();\n    if (this._short) {\n      res.push('-', chalk.greenBright(this._short));\n      this._flag || res.push(' ' + nameStr);\n      res.push(', ');\n    }\n    if (this._long) {\n      res.push('--', chalk.green(this._long));\n      this._flag || res.push('=' + nameStr);\n    }\n    res.push(' : ', this._title);\n    this._req && res.push(' ', chalk.redBright('(required)'));\n    return res.join('');\n  }\n  _requiredText() {\n    return `Missing required option:\\n  ${this._usage()}`;\n  }\n};","map":{"version":3,"names":["Q","require","CoaParam","chalk","module","exports","Opt","constructor","cmd","_short","_long","_flag","_only","_cmd","_opts","push","short","_optsByKey","long","flag","only","act","opt","opts","hasOwnProperty","_name","res","apply","arguments","when","out","reject","toString","exitCode","_saveVal","val","_val","name","_arr","_parse","argv","shift","_checkParsed","_usage","nameStr","toUpperCase","greenBright","green","_title","_req","redBright","join","_requiredText"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/coa/lib/opt.js"],"sourcesContent":["'use strict';\n\nconst\n    Q = require('q'),\n\n    CoaParam = require('./coaparam'),\n    chalk = require('chalk');\n\n/**\n * Option\n *\n * Named entity. Options may have short and long keys for use from command line.\n *\n * @namespace\n * @class Opt\n * @extends CoaParam\n */\nmodule.exports = class Opt extends CoaParam {\n    /**\n     * @constructs\n     * @param {COA.Cmd} cmd - parent command\n     */\n    constructor(cmd) {\n        super(cmd);\n\n        this._short = null;\n        this._long = null;\n        this._flag = false;\n        this._only = false;\n        this._cmd._opts.push(this);\n    }\n\n    /**\n     * Set a short key for option to be used with one hyphen from command line.\n     *\n     * @param {String} short - short name\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    short(short) {\n        this._short = short;\n        this._cmd._optsByKey[`-${short}`] = this;\n        return this;\n    }\n\n    /**\n     * Set a short key for option to be used with double hyphens from command line.\n     *\n     * @param {String} long - long name\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    long(long) {\n        this._long = long;\n        this._cmd._optsByKey[`--${long}`] = this;\n        return this;\n    }\n\n    /**\n     * Make an option boolean, i.e. option without value.\n     *\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    flag() {\n        this._flag = true;\n        return this;\n    }\n\n    /**\n     * Makes an option to act as a command,\n     * i.e. program will exit just after option action.\n     *\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    only() {\n        this._only = true;\n        return this;\n    }\n\n    /**\n     * Add action for current option command.\n     * This action is performed if the current option\n     * is present in parsed options (with any value).\n     *\n     * @param {Function} act - action function,\n     *         invoked in the context of command instance\n     *         and has the parameters:\n     *                 - {Object} opts - parsed options\n     *                 - {Array} args - parsed arguments\n     *                 - {Object} res - actions result accumulator\n     *         It can return rejected promise by Cmd.reject (in case of error)\n     *         or any other value treated as result.\n     * @returns {COA.Opt} - this instance (for chainability)\n     */\n    act(act) {\n        // Need function here for arguments\n        const opt = this;\n        this._cmd.act(function(opts) {\n            if(!opts.hasOwnProperty(opt._name)) return;\n\n            const res = act.apply(this, arguments);\n            if(!opt._only) return res;\n\n            return Q.when(res, out => this.reject({\n                toString : () => out.toString(),\n                exitCode : 0\n            }));\n        });\n\n        return this;\n    }\n\n    _saveVal(opts, val) {\n        this._val && (val = this._val(val));\n\n        const name = this._name;\n        this._arr\n            ? (opts[name] || (opts[name] = [])).push(val)\n            : (opts[name] = val);\n\n        return val;\n    }\n\n    _parse(argv, opts) {\n        return this._saveVal(opts, this._flag ? true : argv.shift());\n    }\n\n    _checkParsed(opts) {\n        return !opts.hasOwnProperty(this._name);\n    }\n\n    _usage() {\n        const res = [],\n            nameStr = this._name.toUpperCase();\n\n        if(this._short) {\n            res.push('-', chalk.greenBright(this._short));\n            this._flag || res.push(' ' + nameStr);\n            res.push(', ');\n        }\n\n        if(this._long) {\n            res.push('--', chalk.green(this._long));\n            this._flag || res.push('=' + nameStr);\n        }\n\n        res.push(' : ', this._title);\n\n        this._req && res.push(' ', chalk.redBright('(required)'));\n\n        return res.join('');\n    }\n\n    _requiredText() {\n        return `Missing required option:\\n  ${this._usage()}`;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}