{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('object-curly-spacing');\nexports.default = (0, util_1.createRule)({\n  name: 'object-curly-spacing',\n  // eslint-disable-next-line eslint-plugin/prefer-message-ids,eslint-plugin/require-meta-type,eslint-plugin/require-meta-schema,eslint-plugin/require-meta-fixable -- all in base rule - https://github.com/not-an-aardvark/eslint-plugin-eslint-plugin/issues/274\n  meta: Object.assign(Object.assign({}, baseRule.meta), {\n    docs: {\n      description: 'Enforce consistent spacing inside braces',\n      recommended: false,\n      extendsBaseRule: true\n    }\n  }),\n  defaultOptions: ['never'],\n  create(context) {\n    // eslint-disable-next-line no-restricted-syntax -- Use raw options for extended rules.\n    const [firstOption, secondOption] = context.options;\n    const spaced = firstOption === 'always';\n    const sourceCode = context.getSourceCode();\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param option The option to exclude.\n     * @returns Whether or not the property is excluded.\n     */\n    function isOptionSet(option) {\n      return secondOption ? secondOption[option] === !spaced : false;\n    }\n    const options = {\n      spaced,\n      arraysInObjectsException: isOptionSet('arraysInObjects'),\n      objectsInObjectsException: isOptionSet('objectsInObjects')\n    };\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param node The node to report in the event of an error.\n     * @param token The token to use for the report.\n     */\n    function reportNoBeginningSpace(node, token) {\n      const nextToken = context.getSourceCode().getTokenAfter(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: nextToken.loc.start\n        },\n        messageId: 'unexpectedSpaceAfter',\n        data: {\n          token: token.value\n        },\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], nextToken.range[0]]);\n        }\n      });\n    }\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param node The node to report in the event of an error.\n     * @param token The token to use for the report.\n     */\n    function reportNoEndingSpace(node, token) {\n      const previousToken = context.getSourceCode().getTokenBefore(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: previousToken.loc.end,\n          end: token.loc.start\n        },\n        messageId: 'unexpectedSpaceBefore',\n        data: {\n          token: token.value\n        },\n        fix(fixer) {\n          return fixer.removeRange([previousToken.range[1], token.range[0]]);\n        }\n      });\n    }\n    /**\n     * Reports that there should be a space after the first token\n     * @param node The node to report in the event of an error.\n     * @param token The token to use for the report.\n     */\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: 'requireSpaceAfter',\n        data: {\n          token: token.value\n        },\n        fix(fixer) {\n          return fixer.insertTextAfter(token, ' ');\n        }\n      });\n    }\n    /**\n     * Reports that there should be a space before the last token\n     * @param node The node to report in the event of an error.\n     * @param token The token to use for the report.\n     */\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: 'requireSpaceBefore',\n        data: {\n          token: token.value\n        },\n        fix(fixer) {\n          return fixer.insertTextBefore(token, ' ');\n        }\n      });\n    }\n    /**\n     * Determines if spacing in curly braces is valid.\n     * @param node The AST node to check.\n     * @param first The first token to check (should be the opening brace)\n     * @param second The second token to check (should be first after the opening brace)\n     * @param penultimate The penultimate token to check (should be last before closing brace)\n     * @param last The last token to check (should be closing brace)\n     */\n    function validateBraceSpacing(node, first, second, penultimate, last) {\n      if ((0, util_1.isTokenOnSameLine)(first, second)) {\n        const firstSpaced = sourceCode.isSpaceBetween(first, second);\n        const secondType = sourceCode.getNodeByRangeIndex(second.range[0]).type;\n        const openingCurlyBraceMustBeSpaced = options.arraysInObjectsException && [utils_1.AST_NODE_TYPES.TSMappedType, utils_1.AST_NODE_TYPES.TSIndexSignature].includes(secondType) ? !options.spaced : options.spaced;\n        if (openingCurlyBraceMustBeSpaced && !firstSpaced) {\n          reportRequiredBeginningSpace(node, first);\n        }\n        if (!openingCurlyBraceMustBeSpaced && firstSpaced && second.type !== utils_1.AST_TOKEN_TYPES.Line) {\n          reportNoBeginningSpace(node, first);\n        }\n      }\n      if ((0, util_1.isTokenOnSameLine)(penultimate, last)) {\n        const shouldCheckPenultimate = options.arraysInObjectsException && (0, util_1.isClosingBracketToken)(penultimate) || options.objectsInObjectsException && (0, util_1.isClosingBraceToken)(penultimate);\n        const penultimateType = shouldCheckPenultimate ? sourceCode.getNodeByRangeIndex(penultimate.range[0]).type : undefined;\n        const closingCurlyBraceMustBeSpaced = options.arraysInObjectsException && penultimateType === utils_1.AST_NODE_TYPES.TSTupleType || options.objectsInObjectsException && penultimateType !== undefined && [utils_1.AST_NODE_TYPES.TSMappedType, utils_1.AST_NODE_TYPES.TSTypeLiteral].includes(penultimateType) ? !options.spaced : options.spaced;\n        const lastSpaced = sourceCode.isSpaceBetween(penultimate, last);\n        if (closingCurlyBraceMustBeSpaced && !lastSpaced) {\n          reportRequiredEndingSpace(node, last);\n        }\n        if (!closingCurlyBraceMustBeSpaced && lastSpaced) {\n          reportNoEndingSpace(node, last);\n        }\n      }\n    }\n    /**\n     * Gets '}' token of an object node.\n     *\n     * Because the last token of object patterns might be a type annotation,\n     * this traverses tokens preceded by the last property, then returns the\n     * first '}' token.\n     * @param node The node to get. This node is an\n     *      ObjectExpression or an ObjectPattern. And this node has one or\n     *      more properties.\n     * @returns '}' token.\n     */\n    function getClosingBraceOfObject(node) {\n      const lastProperty = node.members[node.members.length - 1];\n      return sourceCode.getTokenAfter(lastProperty, util_1.isClosingBraceToken);\n    }\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n    const rules = baseRule.create(context);\n    return Object.assign(Object.assign({}, rules), {\n      TSMappedType(node) {\n        const first = sourceCode.getFirstToken(node);\n        const last = sourceCode.getLastToken(node);\n        const second = sourceCode.getTokenAfter(first, {\n          includeComments: true\n        });\n        const penultimate = sourceCode.getTokenBefore(last, {\n          includeComments: true\n        });\n        validateBraceSpacing(node, first, second, penultimate, last);\n      },\n      TSTypeLiteral(node) {\n        if (node.members.length === 0) {\n          return;\n        }\n        const first = sourceCode.getFirstToken(node);\n        const last = getClosingBraceOfObject(node);\n        const second = sourceCode.getTokenAfter(first, {\n          includeComments: true\n        });\n        const penultimate = sourceCode.getTokenBefore(last, {\n          includeComments: true\n        });\n        validateBraceSpacing(node, first, second, penultimate, last);\n      }\n    });\n  }\n});","map":{"version":3,"names":["utils_1","require","util_1","getESLintCoreRule_1","baseRule","getESLintCoreRule","exports","default","createRule","name","meta","Object","assign","docs","description","recommended","extendsBaseRule","defaultOptions","create","context","firstOption","secondOption","options","spaced","sourceCode","getSourceCode","isOptionSet","option","arraysInObjectsException","objectsInObjectsException","reportNoBeginningSpace","node","token","nextToken","getTokenAfter","includeComments","report","loc","start","end","messageId","data","value","fix","fixer","removeRange","range","reportNoEndingSpace","previousToken","getTokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","validateBraceSpacing","first","second","penultimate","last","isTokenOnSameLine","firstSpaced","isSpaceBetween","secondType","getNodeByRangeIndex","type","openingCurlyBraceMustBeSpaced","AST_NODE_TYPES","TSMappedType","TSIndexSignature","includes","AST_TOKEN_TYPES","Line","shouldCheckPenultimate","isClosingBracketToken","isClosingBraceToken","penultimateType","undefined","closingCurlyBraceMustBeSpaced","TSTupleType","TSTypeLiteral","lastSpaced","getClosingBraceOfObject","lastProperty","members","length","rules","getFirstToken","getLastToken"],"sources":["../../src/rules/object-curly-spacing.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}