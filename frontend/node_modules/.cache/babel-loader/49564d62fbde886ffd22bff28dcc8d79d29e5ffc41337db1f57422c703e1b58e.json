{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readFile = readFile;\nexports.readFileSync = readFileSync;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nasync function fsReadFileAsync(pathname, encoding) {\n  return new Promise((resolve, reject) => {\n    _fs.default.readFile(pathname, encoding, (error, contents) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve(contents);\n    });\n  });\n}\nasync function readFile(filepath, options = {}) {\n  const throwNotFound = options.throwNotFound === true;\n  try {\n    const content = await fsReadFileAsync(filepath, 'utf8');\n    return content;\n  } catch (error) {\n    if (throwNotFound === false && (error.code === 'ENOENT' || error.code === 'EISDIR')) {\n      return null;\n    }\n    throw error;\n  }\n}\nfunction readFileSync(filepath, options = {}) {\n  const throwNotFound = options.throwNotFound === true;\n  try {\n    const content = _fs.default.readFileSync(filepath, 'utf8');\n    return content;\n  } catch (error) {\n    if (throwNotFound === false && (error.code === 'ENOENT' || error.code === 'EISDIR')) {\n      return null;\n    }\n    throw error;\n  }\n}","map":{"version":3,"names":["_fs","_interopRequireDefault","require","fsReadFileAsync","pathname","encoding","Promise","resolve","reject","default","readFile","error","contents","filepath","options","throwNotFound","content","code","readFileSync"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\cosmiconfig\\src\\readFile.ts"],"sourcesContent":["import fs from 'fs';\n\nasync function fsReadFileAsync(\n  pathname: string,\n  encoding: BufferEncoding,\n): Promise<string> {\n  return new Promise((resolve, reject): void => {\n    fs.readFile(pathname, encoding, (error, contents): void => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(contents);\n    });\n  });\n}\n\ninterface Options {\n  throwNotFound?: boolean;\n}\n\nasync function readFile(\n  filepath: string,\n  options: Options = {},\n): Promise<string | null> {\n  const throwNotFound = options.throwNotFound === true;\n\n  try {\n    const content = await fsReadFileAsync(filepath, 'utf8');\n\n    return content;\n  } catch (error) {\n    if (\n      throwNotFound === false &&\n      (error.code === 'ENOENT' || error.code === 'EISDIR')\n    ) {\n      return null;\n    }\n\n    throw error;\n  }\n}\n\nfunction readFileSync(filepath: string, options: Options = {}): string | null {\n  const throwNotFound = options.throwNotFound === true;\n\n  try {\n    const content = fs.readFileSync(filepath, 'utf8');\n\n    return content;\n  } catch (error) {\n    if (\n      throwNotFound === false &&\n      (error.code === 'ENOENT' || error.code === 'EISDIR')\n    ) {\n      return null;\n    }\n\n    throw error;\n  }\n}\n\nexport { readFile, readFileSync };\n"],"mappings":";;;;;;;AAAA,IAAAA,GAAA,GAAAC,sBAAA,CAAAC,OAAA;;;;;;AAEA,eAAeC,eAAfA,CACEC,QADF,EAEEC,QAFF,EAGmB;EACjB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAA2B;IAC5CR,GAAA,CAAAS,OAAA,CAAGC,QAAH,CAAYN,QAAZ,EAAsBC,QAAtB,EAAgC,CAACM,KAAD,EAAQC,QAAR,KAA2B;MACzD,IAAID,KAAJ,EAAW;QACTH,MAAM,CAACG,KAAD,CAAN;QACA;MACD;MAEDJ,OAAO,CAACK,QAAD,CAAP;IACD,CAPD;EAQD,CATM,CAAP;AAUD;AAMD,eAAeF,QAAfA,CACEG,QADF,EAEEC,OAAgB,GAAG,EAFrB,EAG0B;EACxB,MAAMC,aAAa,GAAGD,OAAO,CAACC,aAAR,KAA0B,IAAhD;EAEA,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMb,eAAe,CAACU,QAAD,EAAW,MAAX,CAArC;IAEA,OAAOG,OAAP;EACD,CAJD,CAIE,OAAOL,KAAP,EAAc;IACd,IACEI,aAAa,KAAK,KAAlB,KACCJ,KAAK,CAACM,IAAN,KAAe,QAAf,IAA2BN,KAAK,CAACM,IAAN,KAAe,QAD3C,CADF,EAGE;MACA,OAAO,IAAP;IACD;IAED,MAAMN,KAAN;EACD;AACF;AAED,SAASO,YAATA,CAAsBL,QAAtB,EAAwCC,OAAgB,GAAG,EAA3D,EAA8E;EAC5E,MAAMC,aAAa,GAAGD,OAAO,CAACC,aAAR,KAA0B,IAAhD;EAEA,IAAI;IACF,MAAMC,OAAO,GAAGhB,GAAA,CAAAS,OAAA,CAAGS,YAAH,CAAgBL,QAAhB,EAA0B,MAA1B,CAAhB;IAEA,OAAOG,OAAP;EACD,CAJD,CAIE,OAAOL,KAAP,EAAc;IACd,IACEI,aAAa,KAAK,KAAlB,KACCJ,KAAK,CAACM,IAAN,KAAe,QAAf,IAA2BN,KAAK,CAACM,IAAN,KAAe,QAD3C,CADF,EAGE;MACA,OAAO,IAAP;IACD;IAED,MAAMN,KAAN;EACD;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}