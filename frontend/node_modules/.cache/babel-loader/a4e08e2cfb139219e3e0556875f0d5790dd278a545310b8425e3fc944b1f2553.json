{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBinaryOperatorPrecedence = exports.getOperatorPrecedence = exports.OperatorPrecedence = void 0;\nconst typescript_1 = require(\"typescript\");\nvar OperatorPrecedence;\n(function (OperatorPrecedence) {\n  // Expression:\n  //     AssignmentExpression\n  //     Expression `,` AssignmentExpression\n  OperatorPrecedence[OperatorPrecedence[\"Comma\"] = 0] = \"Comma\";\n  // NOTE: `Spread` is higher than `Comma` due to how it is parsed in |ElementList|\n  // SpreadElement:\n  //     `...` AssignmentExpression\n  OperatorPrecedence[OperatorPrecedence[\"Spread\"] = 1] = \"Spread\";\n  // AssignmentExpression:\n  //     ConditionalExpression\n  //     YieldExpression\n  //     ArrowFunction\n  //     AsyncArrowFunction\n  //     LeftHandSideExpression `=` AssignmentExpression\n  //     LeftHandSideExpression AssignmentOperator AssignmentExpression\n  //\n  // NOTE: AssignmentExpression is broken down into several precedences due to the requirements\n  //       of the parenthesize rules.\n  // AssignmentExpression: YieldExpression\n  // YieldExpression:\n  //     `yield`\n  //     `yield` AssignmentExpression\n  //     `yield` `*` AssignmentExpression\n  OperatorPrecedence[OperatorPrecedence[\"Yield\"] = 2] = \"Yield\";\n  // AssignmentExpression: LeftHandSideExpression `=` AssignmentExpression\n  // AssignmentExpression: LeftHandSideExpression AssignmentOperator AssignmentExpression\n  // AssignmentOperator: one of\n  //     `*=` `/=` `%=` `+=` `-=` `<<=` `>>=` `>>>=` `&=` `^=` `|=` `**=`\n  OperatorPrecedence[OperatorPrecedence[\"Assignment\"] = 3] = \"Assignment\";\n  // NOTE: `Conditional` is considered higher than `Assignment` here, but in reality they have\n  //       the same precedence.\n  // AssignmentExpression: ConditionalExpression\n  // ConditionalExpression:\n  //     ShortCircuitExpression\n  //     ShortCircuitExpression `?` AssignmentExpression `:` AssignmentExpression\n  // ShortCircuitExpression:\n  //     LogicalORExpression\n  //     CoalesceExpression\n  OperatorPrecedence[OperatorPrecedence[\"Conditional\"] = 4] = \"Conditional\";\n  // CoalesceExpression:\n  //     CoalesceExpressionHead `??` BitwiseORExpression\n  // CoalesceExpressionHead:\n  //     CoalesceExpression\n  //     BitwiseORExpression\n  OperatorPrecedence[OperatorPrecedence[\"Coalesce\"] = 4] = \"Coalesce\";\n  // LogicalORExpression:\n  //     LogicalANDExpression\n  //     LogicalORExpression `||` LogicalANDExpression\n  OperatorPrecedence[OperatorPrecedence[\"LogicalOR\"] = 5] = \"LogicalOR\";\n  // LogicalANDExpression:\n  //     BitwiseORExpression\n  //     LogicalANDExpression `&&` BitwiseORExpression\n  OperatorPrecedence[OperatorPrecedence[\"LogicalAND\"] = 6] = \"LogicalAND\";\n  // BitwiseORExpression:\n  //     BitwiseXORExpression\n  //     BitwiseORExpression `^` BitwiseXORExpression\n  OperatorPrecedence[OperatorPrecedence[\"BitwiseOR\"] = 7] = \"BitwiseOR\";\n  // BitwiseXORExpression:\n  //     BitwiseANDExpression\n  //     BitwiseXORExpression `^` BitwiseANDExpression\n  OperatorPrecedence[OperatorPrecedence[\"BitwiseXOR\"] = 8] = \"BitwiseXOR\";\n  // BitwiseANDExpression:\n  //     EqualityExpression\n  //     BitwiseANDExpression `^` EqualityExpression\n  OperatorPrecedence[OperatorPrecedence[\"BitwiseAND\"] = 9] = \"BitwiseAND\";\n  // EqualityExpression:\n  //     RelationalExpression\n  //     EqualityExpression `==` RelationalExpression\n  //     EqualityExpression `!=` RelationalExpression\n  //     EqualityExpression `===` RelationalExpression\n  //     EqualityExpression `!==` RelationalExpression\n  OperatorPrecedence[OperatorPrecedence[\"Equality\"] = 10] = \"Equality\";\n  // RelationalExpression:\n  //     ShiftExpression\n  //     RelationalExpression `<` ShiftExpression\n  //     RelationalExpression `>` ShiftExpression\n  //     RelationalExpression `<=` ShiftExpression\n  //     RelationalExpression `>=` ShiftExpression\n  //     RelationalExpression `instanceof` ShiftExpression\n  //     RelationalExpression `in` ShiftExpression\n  //     [+TypeScript] RelationalExpression `as` Type\n  OperatorPrecedence[OperatorPrecedence[\"Relational\"] = 11] = \"Relational\";\n  // ShiftExpression:\n  //     AdditiveExpression\n  //     ShiftExpression `<<` AdditiveExpression\n  //     ShiftExpression `>>` AdditiveExpression\n  //     ShiftExpression `>>>` AdditiveExpression\n  OperatorPrecedence[OperatorPrecedence[\"Shift\"] = 12] = \"Shift\";\n  // AdditiveExpression:\n  //     MultiplicativeExpression\n  //     AdditiveExpression `+` MultiplicativeExpression\n  //     AdditiveExpression `-` MultiplicativeExpression\n  OperatorPrecedence[OperatorPrecedence[\"Additive\"] = 13] = \"Additive\";\n  // MultiplicativeExpression:\n  //     ExponentiationExpression\n  //     MultiplicativeExpression MultiplicativeOperator ExponentiationExpression\n  // MultiplicativeOperator: one of `*`, `/`, `%`\n  OperatorPrecedence[OperatorPrecedence[\"Multiplicative\"] = 14] = \"Multiplicative\";\n  // ExponentiationExpression:\n  //     UnaryExpression\n  //     UpdateExpression `**` ExponentiationExpression\n  OperatorPrecedence[OperatorPrecedence[\"Exponentiation\"] = 15] = \"Exponentiation\";\n  // UnaryExpression:\n  //     UpdateExpression\n  //     `delete` UnaryExpression\n  //     `void` UnaryExpression\n  //     `typeof` UnaryExpression\n  //     `+` UnaryExpression\n  //     `-` UnaryExpression\n  //     `~` UnaryExpression\n  //     `!` UnaryExpression\n  //     AwaitExpression\n  // UpdateExpression:            // TODO: Do we need to investigate the precedence here?\n  //     `++` UnaryExpression\n  //     `--` UnaryExpression\n  OperatorPrecedence[OperatorPrecedence[\"Unary\"] = 16] = \"Unary\";\n  // UpdateExpression:\n  //     LeftHandSideExpression\n  //     LeftHandSideExpression `++`\n  //     LeftHandSideExpression `--`\n  OperatorPrecedence[OperatorPrecedence[\"Update\"] = 17] = \"Update\";\n  // LeftHandSideExpression:\n  //     NewExpression\n  //     CallExpression\n  // NewExpression:\n  //     MemberExpression\n  //     `new` NewExpression\n  OperatorPrecedence[OperatorPrecedence[\"LeftHandSide\"] = 18] = \"LeftHandSide\";\n  // CallExpression:\n  //     CoverCallExpressionAndAsyncArrowHead\n  //     SuperCall\n  //     ImportCall\n  //     CallExpression Arguments\n  //     CallExpression `[` Expression `]`\n  //     CallExpression `.` IdentifierName\n  //     CallExpression TemplateLiteral\n  // MemberExpression:\n  //     PrimaryExpression\n  //     MemberExpression `[` Expression `]`\n  //     MemberExpression `.` IdentifierName\n  //     MemberExpression TemplateLiteral\n  //     SuperProperty\n  //     MetaProperty\n  //     `new` MemberExpression Arguments\n  OperatorPrecedence[OperatorPrecedence[\"Member\"] = 19] = \"Member\";\n  // TODO: JSXElement?\n  // PrimaryExpression:\n  //     `this`\n  //     IdentifierReference\n  //     Literal\n  //     ArrayLiteral\n  //     ObjectLiteral\n  //     FunctionExpression\n  //     ClassExpression\n  //     GeneratorExpression\n  //     AsyncFunctionExpression\n  //     AsyncGeneratorExpression\n  //     RegularExpressionLiteral\n  //     TemplateLiteral\n  //     CoverParenthesizedExpressionAndArrowParameterList\n  OperatorPrecedence[OperatorPrecedence[\"Primary\"] = 20] = \"Primary\";\n  OperatorPrecedence[OperatorPrecedence[\"Highest\"] = 20] = \"Highest\";\n  OperatorPrecedence[OperatorPrecedence[\"Lowest\"] = 0] = \"Lowest\";\n  // -1 is lower than all other precedences. Returning it will cause binary expression\n  // parsing to stop.\n  OperatorPrecedence[OperatorPrecedence[\"Invalid\"] = -1] = \"Invalid\";\n})(OperatorPrecedence || (exports.OperatorPrecedence = OperatorPrecedence = {}));\nfunction getOperatorPrecedence(nodeKind, operatorKind, hasArguments) {\n  switch (nodeKind) {\n    case typescript_1.SyntaxKind.CommaListExpression:\n      return OperatorPrecedence.Comma;\n    case typescript_1.SyntaxKind.SpreadElement:\n      return OperatorPrecedence.Spread;\n    case typescript_1.SyntaxKind.YieldExpression:\n      return OperatorPrecedence.Yield;\n    case typescript_1.SyntaxKind.ConditionalExpression:\n      return OperatorPrecedence.Conditional;\n    case typescript_1.SyntaxKind.BinaryExpression:\n      switch (operatorKind) {\n        case typescript_1.SyntaxKind.CommaToken:\n          return OperatorPrecedence.Comma;\n        case typescript_1.SyntaxKind.EqualsToken:\n        case typescript_1.SyntaxKind.PlusEqualsToken:\n        case typescript_1.SyntaxKind.MinusEqualsToken:\n        case typescript_1.SyntaxKind.AsteriskAsteriskEqualsToken:\n        case typescript_1.SyntaxKind.AsteriskEqualsToken:\n        case typescript_1.SyntaxKind.SlashEqualsToken:\n        case typescript_1.SyntaxKind.PercentEqualsToken:\n        case typescript_1.SyntaxKind.LessThanLessThanEqualsToken:\n        case typescript_1.SyntaxKind.GreaterThanGreaterThanEqualsToken:\n        case typescript_1.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:\n        case typescript_1.SyntaxKind.AmpersandEqualsToken:\n        case typescript_1.SyntaxKind.CaretEqualsToken:\n        case typescript_1.SyntaxKind.BarEqualsToken:\n        case typescript_1.SyntaxKind.BarBarEqualsToken:\n        case typescript_1.SyntaxKind.AmpersandAmpersandEqualsToken:\n        case typescript_1.SyntaxKind.QuestionQuestionEqualsToken:\n          return OperatorPrecedence.Assignment;\n        default:\n          return getBinaryOperatorPrecedence(operatorKind);\n      }\n    // TODO: Should prefix `++` and `--` be moved to the `Update` precedence?\n    case typescript_1.SyntaxKind.TypeAssertionExpression:\n    case typescript_1.SyntaxKind.NonNullExpression:\n    case typescript_1.SyntaxKind.PrefixUnaryExpression:\n    case typescript_1.SyntaxKind.TypeOfExpression:\n    case typescript_1.SyntaxKind.VoidExpression:\n    case typescript_1.SyntaxKind.DeleteExpression:\n    case typescript_1.SyntaxKind.AwaitExpression:\n      return OperatorPrecedence.Unary;\n    case typescript_1.SyntaxKind.PostfixUnaryExpression:\n      return OperatorPrecedence.Update;\n    case typescript_1.SyntaxKind.CallExpression:\n      return OperatorPrecedence.LeftHandSide;\n    case typescript_1.SyntaxKind.NewExpression:\n      return hasArguments ? OperatorPrecedence.Member : OperatorPrecedence.LeftHandSide;\n    case typescript_1.SyntaxKind.TaggedTemplateExpression:\n    case typescript_1.SyntaxKind.PropertyAccessExpression:\n    case typescript_1.SyntaxKind.ElementAccessExpression:\n    case typescript_1.SyntaxKind.MetaProperty:\n      return OperatorPrecedence.Member;\n    case typescript_1.SyntaxKind.AsExpression:\n      return OperatorPrecedence.Relational;\n    case typescript_1.SyntaxKind.ThisKeyword:\n    case typescript_1.SyntaxKind.SuperKeyword:\n    case typescript_1.SyntaxKind.Identifier:\n    case typescript_1.SyntaxKind.PrivateIdentifier:\n    case typescript_1.SyntaxKind.NullKeyword:\n    case typescript_1.SyntaxKind.TrueKeyword:\n    case typescript_1.SyntaxKind.FalseKeyword:\n    case typescript_1.SyntaxKind.NumericLiteral:\n    case typescript_1.SyntaxKind.BigIntLiteral:\n    case typescript_1.SyntaxKind.StringLiteral:\n    case typescript_1.SyntaxKind.ArrayLiteralExpression:\n    case typescript_1.SyntaxKind.ObjectLiteralExpression:\n    case typescript_1.SyntaxKind.FunctionExpression:\n    case typescript_1.SyntaxKind.ArrowFunction:\n    case typescript_1.SyntaxKind.ClassExpression:\n    case typescript_1.SyntaxKind.RegularExpressionLiteral:\n    case typescript_1.SyntaxKind.NoSubstitutionTemplateLiteral:\n    case typescript_1.SyntaxKind.TemplateExpression:\n    case typescript_1.SyntaxKind.ParenthesizedExpression:\n    case typescript_1.SyntaxKind.OmittedExpression:\n    case typescript_1.SyntaxKind.JsxElement:\n    case typescript_1.SyntaxKind.JsxSelfClosingElement:\n    case typescript_1.SyntaxKind.JsxFragment:\n      return OperatorPrecedence.Primary;\n    default:\n      return OperatorPrecedence.Invalid;\n  }\n}\nexports.getOperatorPrecedence = getOperatorPrecedence;\nfunction getBinaryOperatorPrecedence(kind) {\n  switch (kind) {\n    case typescript_1.SyntaxKind.QuestionQuestionToken:\n      return OperatorPrecedence.Coalesce;\n    case typescript_1.SyntaxKind.BarBarToken:\n      return OperatorPrecedence.LogicalOR;\n    case typescript_1.SyntaxKind.AmpersandAmpersandToken:\n      return OperatorPrecedence.LogicalAND;\n    case typescript_1.SyntaxKind.BarToken:\n      return OperatorPrecedence.BitwiseOR;\n    case typescript_1.SyntaxKind.CaretToken:\n      return OperatorPrecedence.BitwiseXOR;\n    case typescript_1.SyntaxKind.AmpersandToken:\n      return OperatorPrecedence.BitwiseAND;\n    case typescript_1.SyntaxKind.EqualsEqualsToken:\n    case typescript_1.SyntaxKind.ExclamationEqualsToken:\n    case typescript_1.SyntaxKind.EqualsEqualsEqualsToken:\n    case typescript_1.SyntaxKind.ExclamationEqualsEqualsToken:\n      return OperatorPrecedence.Equality;\n    case typescript_1.SyntaxKind.LessThanToken:\n    case typescript_1.SyntaxKind.GreaterThanToken:\n    case typescript_1.SyntaxKind.LessThanEqualsToken:\n    case typescript_1.SyntaxKind.GreaterThanEqualsToken:\n    case typescript_1.SyntaxKind.InstanceOfKeyword:\n    case typescript_1.SyntaxKind.InKeyword:\n    case typescript_1.SyntaxKind.AsKeyword:\n      return OperatorPrecedence.Relational;\n    case typescript_1.SyntaxKind.LessThanLessThanToken:\n    case typescript_1.SyntaxKind.GreaterThanGreaterThanToken:\n    case typescript_1.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n      return OperatorPrecedence.Shift;\n    case typescript_1.SyntaxKind.PlusToken:\n    case typescript_1.SyntaxKind.MinusToken:\n      return OperatorPrecedence.Additive;\n    case typescript_1.SyntaxKind.AsteriskToken:\n    case typescript_1.SyntaxKind.SlashToken:\n    case typescript_1.SyntaxKind.PercentToken:\n      return OperatorPrecedence.Multiplicative;\n    case typescript_1.SyntaxKind.AsteriskAsteriskToken:\n      return OperatorPrecedence.Exponentiation;\n  }\n  // -1 is lower than all other precedences.  Returning it will cause binary expression\n  // parsing to stop.\n  return -1;\n}\nexports.getBinaryOperatorPrecedence = getBinaryOperatorPrecedence;","map":{"version":3,"names":["typescript_1","require","OperatorPrecedence","exports","getOperatorPrecedence","nodeKind","operatorKind","hasArguments","SyntaxKind","CommaListExpression","Comma","SpreadElement","Spread","YieldExpression","Yield","ConditionalExpression","Conditional","BinaryExpression","CommaToken","EqualsToken","PlusEqualsToken","MinusEqualsToken","AsteriskAsteriskEqualsToken","AsteriskEqualsToken","SlashEqualsToken","PercentEqualsToken","LessThanLessThanEqualsToken","GreaterThanGreaterThanEqualsToken","GreaterThanGreaterThanGreaterThanEqualsToken","AmpersandEqualsToken","CaretEqualsToken","BarEqualsToken","BarBarEqualsToken","AmpersandAmpersandEqualsToken","QuestionQuestionEqualsToken","Assignment","getBinaryOperatorPrecedence","TypeAssertionExpression","NonNullExpression","PrefixUnaryExpression","TypeOfExpression","VoidExpression","DeleteExpression","AwaitExpression","Unary","PostfixUnaryExpression","Update","CallExpression","LeftHandSide","NewExpression","Member","TaggedTemplateExpression","PropertyAccessExpression","ElementAccessExpression","MetaProperty","AsExpression","Relational","ThisKeyword","SuperKeyword","Identifier","PrivateIdentifier","NullKeyword","TrueKeyword","FalseKeyword","NumericLiteral","BigIntLiteral","StringLiteral","ArrayLiteralExpression","ObjectLiteralExpression","FunctionExpression","ArrowFunction","ClassExpression","RegularExpressionLiteral","NoSubstitutionTemplateLiteral","TemplateExpression","ParenthesizedExpression","OmittedExpression","JsxElement","JsxSelfClosingElement","JsxFragment","Primary","Invalid","kind","QuestionQuestionToken","Coalesce","BarBarToken","LogicalOR","AmpersandAmpersandToken","LogicalAND","BarToken","BitwiseOR","CaretToken","BitwiseXOR","AmpersandToken","BitwiseAND","EqualsEqualsToken","ExclamationEqualsToken","EqualsEqualsEqualsToken","ExclamationEqualsEqualsToken","Equality","LessThanToken","GreaterThanToken","LessThanEqualsToken","GreaterThanEqualsToken","InstanceOfKeyword","InKeyword","AsKeyword","LessThanLessThanToken","GreaterThanGreaterThanToken","GreaterThanGreaterThanGreaterThanToken","Shift","PlusToken","MinusToken","Additive","AsteriskToken","SlashToken","PercentToken","Multiplicative","AsteriskAsteriskToken","Exponentiation"],"sources":["../../src/util/getOperatorPrecedence.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}