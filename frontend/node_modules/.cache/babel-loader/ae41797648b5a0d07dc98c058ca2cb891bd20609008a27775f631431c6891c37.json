{"ast":null,"code":"/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only arguments-related bug in ES Modules-supporting browsers (Edge 16 & 17).\n * Use this plugin instead of @babel/plugin-transform-parameters when targeting ES Modules.\n */\n\nexport default (({\n  types: t\n}) => {\n  const isArrowParent = p => p.parentKey === \"params\" && p.parentPath && t.isArrowFunctionExpression(p.parentPath);\n  return {\n    name: \"transform-edge-default-parameters\",\n    visitor: {\n      AssignmentPattern(path) {\n        const arrowArgParent = path.find(isArrowParent);\n        if (arrowArgParent && path.parent.shorthand) {\n          // In Babel 7+, there is no way to force non-shorthand properties.\n          path.parent.shorthand = false;\n          (path.parent.extra || {}).shorthand = false;\n\n          // So, to ensure non-shorthand, rename the local identifier so it no longer matches:\n          path.scope.rename(path.parent.key.name);\n        }\n      }\n    }\n  };\n});","map":{"version":3,"names":["types","t","isArrowParent","p","parentKey","parentPath","isArrowFunctionExpression","name","visitor","AssignmentPattern","path","arrowArgParent","find","parent","shorthand","extra","scope","rename","key"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@babel/preset-modules/src/plugins/transform-edge-default-parameters/index.js"],"sourcesContent":["/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only arguments-related bug in ES Modules-supporting browsers (Edge 16 & 17).\n * Use this plugin instead of @babel/plugin-transform-parameters when targeting ES Modules.\n */\n\nexport default ({ types: t }) => {\n  const isArrowParent = p =>\n    p.parentKey === \"params\" &&\n    p.parentPath &&\n    t.isArrowFunctionExpression(p.parentPath);\n\n  return {\n    name: \"transform-edge-default-parameters\",\n    visitor: {\n      AssignmentPattern(path) {\n        const arrowArgParent = path.find(isArrowParent);\n        if (arrowArgParent && path.parent.shorthand) {\n          // In Babel 7+, there is no way to force non-shorthand properties.\n          path.parent.shorthand = false;\n          (path.parent.extra || {}).shorthand = false;\n\n          // So, to ensure non-shorthand, rename the local identifier so it no longer matches:\n          path.scope.rename(path.parent.key.name);\n        }\n      },\n    },\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,gBAAe,CAAC;EAAEA,KAAK,EAAEC;AAAE,CAAC,KAAK;EAC/B,MAAMC,aAAa,GAAGC,CAAC,IACrBA,CAAC,CAACC,SAAS,KAAK,QAAQ,IACxBD,CAAC,CAACE,UAAU,IACZJ,CAAC,CAACK,yBAAyB,CAACH,CAAC,CAACE,UAAU,CAAC;EAE3C,OAAO;IACLE,IAAI,EAAE,mCAAmC;IACzCC,OAAO,EAAE;MACPC,iBAAiBA,CAACC,IAAI,EAAE;QACtB,MAAMC,cAAc,GAAGD,IAAI,CAACE,IAAI,CAACV,aAAa,CAAC;QAC/C,IAAIS,cAAc,IAAID,IAAI,CAACG,MAAM,CAACC,SAAS,EAAE;UAC3C;UACAJ,IAAI,CAACG,MAAM,CAACC,SAAS,GAAG,KAAK;UAC7B,CAACJ,IAAI,CAACG,MAAM,CAACE,KAAK,IAAI,CAAC,CAAC,EAAED,SAAS,GAAG,KAAK;;UAE3C;UACAJ,IAAI,CAACM,KAAK,CAACC,MAAM,CAACP,IAAI,CAACG,MAAM,CAACK,GAAG,CAACX,IAAI,CAAC;QACzC;MACF;IACF;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}