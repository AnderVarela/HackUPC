{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('semi');\nexports.default = util.createRule({\n  name: 'semi',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Require or disallow semicolons instead of ASI',\n      // too opinionated to be recommended\n      recommended: false,\n      extendsBaseRule: true\n    },\n    fixable: 'code',\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    schema: baseRule.meta.schema,\n    // TODO: this rule has only had messages since v7.0 - remove this when we remove support for v6\n    messages: (_a = baseRule.meta.messages) !== null && _a !== void 0 ? _a : {\n      missingSemi: 'Missing semicolon.',\n      extraSemi: 'Extra semicolon.'\n    }\n  },\n  defaultOptions: ['always', {\n    omitLastInOneLineBlock: false,\n    beforeStatementContinuationChars: 'any'\n  }],\n  create(context) {\n    const rules = baseRule.create(context);\n    const checkForSemicolon = rules.ExpressionStatement;\n    /*\n      The following nodes are handled by the member-delimiter-style rule\n      AST_NODE_TYPES.TSCallSignatureDeclaration,\n      AST_NODE_TYPES.TSConstructSignatureDeclaration,\n      AST_NODE_TYPES.TSIndexSignature,\n      AST_NODE_TYPES.TSMethodSignature,\n      AST_NODE_TYPES.TSPropertySignature,\n    */\n    const nodesToCheck = [utils_1.AST_NODE_TYPES.PropertyDefinition, utils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition, utils_1.AST_NODE_TYPES.TSDeclareFunction, utils_1.AST_NODE_TYPES.TSExportAssignment, utils_1.AST_NODE_TYPES.TSImportEqualsDeclaration, utils_1.AST_NODE_TYPES.TSTypeAliasDeclaration, utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression].reduce((acc, node) => {\n      acc[node] = checkForSemicolon;\n      return acc;\n    }, {});\n    return Object.assign(Object.assign(Object.assign({}, rules), nodesToCheck), {\n      ExportDefaultDeclaration(node) {\n        if (node.declaration.type !== utils_1.AST_NODE_TYPES.TSInterfaceDeclaration) {\n          rules.ExportDefaultDeclaration(node);\n        }\n      }\n    });\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","getESLintCoreRule_1","baseRule","getESLintCoreRule","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","fixable","hasSuggestions","schema","messages","_a","missingSemi","extraSemi","defaultOptions","omitLastInOneLineBlock","beforeStatementContinuationChars","create","context","rules","checkForSemicolon","ExpressionStatement","nodesToCheck","AST_NODE_TYPES","PropertyDefinition","TSAbstractPropertyDefinition","TSDeclareFunction","TSExportAssignment","TSImportEqualsDeclaration","TSTypeAliasDeclaration","TSEmptyBodyFunctionExpression","reduce","acc","node","Object","assign","ExportDefaultDeclaration","declaration","TSInterfaceDeclaration"],"sources":["../../src/rules/semi.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AACA,MAAAG,mBAAA,GAAAH,OAAA;AAEA,MAAMI,QAAQ,GAAG,IAAAD,mBAAA,CAAAE,iBAAiB,EAAC,MAAM,CAAC;AAK1CC,OAAA,CAAAC,OAAA,GAAeN,IAAI,CAACO,UAAU,CAAsB;EAClDC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE;IACJC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;MACJC,WAAW,EAAE,+CAA+C;MAC5D;MACAC,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE;KAClB;IACDC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAEb,QAAQ,CAACM,IAAI,CAACO,cAAc;IAC5CC,MAAM,EAAEd,QAAQ,CAACM,IAAI,CAACQ,MAAM;IAC5B;IACAC,QAAQ,EAAE,CAAAC,EAAA,GAAAhB,QAAQ,CAACM,IAAI,CAACS,QAAQ,cAAAC,EAAA,cAAAA,EAAA,GAAI;MAClCC,WAAW,EAAE,oBAAoB;MACjCC,SAAS,EAAE;;GAEd;EACDC,cAAc,EAAE,CACd,QAAQ,EACR;IACEC,sBAAsB,EAAE,KAAK;IAC7BC,gCAAgC,EAAE;GACnC,CACF;EACDC,MAAMA,CAACC,OAAO;IACZ,MAAMC,KAAK,GAAGxB,QAAQ,CAACsB,MAAM,CAACC,OAAO,CAAC;IACtC,MAAME,iBAAiB,GACrBD,KAAK,CAACE,mBAA2D;IAEnE;;;;;;;;IAQA,MAAMC,YAAY,GAAG,CACnBhC,OAAA,CAAAiC,cAAc,CAACC,kBAAkB,EACjClC,OAAA,CAAAiC,cAAc,CAACE,4BAA4B,EAC3CnC,OAAA,CAAAiC,cAAc,CAACG,iBAAiB,EAChCpC,OAAA,CAAAiC,cAAc,CAACI,kBAAkB,EACjCrC,OAAA,CAAAiC,cAAc,CAACK,yBAAyB,EACxCtC,OAAA,CAAAiC,cAAc,CAACM,sBAAsB,EACrCvC,OAAA,CAAAiC,cAAc,CAACO,6BAA6B,CAC7C,CAACC,MAAM,CAAwB,CAACC,GAAG,EAAEC,IAAI,KAAI;MAC5CD,GAAG,CAACC,IAAc,CAAC,GAAGb,iBAAiB;MACvC,OAAOY,GAAG;IACZ,CAAC,EAAE,EAAE,CAAC;IAEN,OAAAE,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKhB,KAAK,GACLG,YAAY;MACfc,wBAAwBA,CAACH,IAAI;QAC3B,IAAIA,IAAI,CAACI,WAAW,CAACnC,IAAI,KAAKZ,OAAA,CAAAiC,cAAc,CAACe,sBAAsB,EAAE;UACnEnB,KAAK,CAACiB,wBAAwB,CAACH,IAAI,CAAC;;MAExC;IAAC;EAEL;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}