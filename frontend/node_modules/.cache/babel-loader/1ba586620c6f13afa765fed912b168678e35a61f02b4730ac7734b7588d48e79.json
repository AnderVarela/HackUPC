{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from '@formatjs/ecma402-abstract';\nimport { IntlMessageFormat } from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from './error';\nimport { TYPE } from '@formatjs/icu-messageformat-parser';\nfunction setTimeZoneInOptions(opts, timeZone) {\n  return Object.keys(opts).reduce(function (all, k) {\n    all[k] = __assign({\n      timeZone: timeZone\n    }, opts[k]);\n    return all;\n  }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n  var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n  return keys.reduce(function (all, k) {\n    all[k] = __assign(__assign({}, opts1[k] || {}), opts2[k] || {});\n    return all;\n  }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n  if (!timeZone) {\n    return f1;\n  }\n  var mfFormats = IntlMessageFormat.formats;\n  return __assign(__assign(__assign({}, mfFormats), f1), {\n    date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)),\n    time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone))\n  });\n}\nexport var formatMessage = function (_a, state, messageDescriptor, values, opts) {\n  var locale = _a.locale,\n    formats = _a.formats,\n    messages = _a.messages,\n    defaultLocale = _a.defaultLocale,\n    defaultFormats = _a.defaultFormats,\n    fallbackOnEmptyString = _a.fallbackOnEmptyString,\n    onError = _a.onError,\n    timeZone = _a.timeZone,\n    defaultRichTextElements = _a.defaultRichTextElements;\n  if (messageDescriptor === void 0) {\n    messageDescriptor = {\n      id: ''\n    };\n  }\n  var msgId = messageDescriptor.id,\n    defaultMessage = messageDescriptor.defaultMessage;\n  // `id` is a required field of a Message Descriptor.\n  invariant(!!msgId, \"[@formatjs/intl] An `id` must be provided to format a message. You can either:\\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\\nto autofix this issue\");\n  var id = String(msgId);\n  var message =\n  // In case messages is Object.create(null)\n  // e.g import('foo.json') from webpack)\n  // See https://github.com/formatjs/formatjs/issues/1914\n  messages && Object.prototype.hasOwnProperty.call(messages, id) && messages[id];\n  // IMPORTANT: Hot path if `message` is AST with a single literal node\n  if (Array.isArray(message) && message.length === 1 && message[0].type === TYPE.literal) {\n    return message[0].value;\n  }\n  // IMPORTANT: Hot path straight lookup for performance\n  if (!values && message && typeof message === 'string' && !defaultRichTextElements) {\n    return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n  }\n  values = __assign(__assign({}, defaultRichTextElements), values || {});\n  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n  if (!message) {\n    if (fallbackOnEmptyString === false && message === '') {\n      return message;\n    }\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      // This prevents warnings from littering the console in development\n      // when no `messages` are passed into the <IntlProvider> for the\n      // default locale.\n      onError(new MissingTranslationError(messageDescriptor, locale));\n    }\n    if (defaultMessage) {\n      try {\n        var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n        return formatter.format(values);\n      } catch (e) {\n        onError(new MessageFormatError(\"Error formatting default message for: \\\"\".concat(id, \"\\\", rendering default message verbatim\"), locale, messageDescriptor, e));\n        return typeof defaultMessage === 'string' ? defaultMessage : id;\n      }\n    }\n    return id;\n  }\n  // We have the translated message\n  try {\n    var formatter = state.getMessageFormat(message, locale, formats, __assign({\n      formatters: state\n    }, opts || {}));\n    return formatter.format(values);\n  } catch (e) {\n    onError(new MessageFormatError(\"Error formatting message: \\\"\".concat(id, \"\\\", using \").concat(defaultMessage ? 'default message' : 'id', \" as fallback.\"), locale, messageDescriptor, e));\n  }\n  if (defaultMessage) {\n    try {\n      var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n      return formatter.format(values);\n    } catch (e) {\n      onError(new MessageFormatError(\"Error formatting the default message for: \\\"\".concat(id, \"\\\", rendering message verbatim\"), locale, messageDescriptor, e));\n    }\n  }\n  if (typeof message === 'string') {\n    return message;\n  }\n  if (typeof defaultMessage === 'string') {\n    return defaultMessage;\n  }\n  return id;\n};","map":{"version":3,"names":["__assign","invariant","IntlMessageFormat","MissingTranslationError","MessageFormatError","TYPE","setTimeZoneInOptions","opts","timeZone","Object","keys","reduce","all","k","deepMergeOptions","opts1","opts2","deepMergeFormatsAndSetTimeZone","f1","mfFormats","formats","date","time","formatMessage","_a","state","messageDescriptor","values","locale","messages","defaultLocale","defaultFormats","fallbackOnEmptyString","onError","defaultRichTextElements","id","msgId","defaultMessage","String","message","prototype","hasOwnProperty","call","Array","isArray","length","type","literal","value","replace","toLowerCase","formatter","getMessageFormat","format","e","concat","formatters"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/intl/lib/src/message.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant } from '@formatjs/ecma402-abstract';\nimport { IntlMessageFormat, } from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from './error';\nimport { TYPE } from '@formatjs/icu-messageformat-parser';\nfunction setTimeZoneInOptions(opts, timeZone) {\n    return Object.keys(opts).reduce(function (all, k) {\n        all[k] = __assign({ timeZone: timeZone }, opts[k]);\n        return all;\n    }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n    var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n    return keys.reduce(function (all, k) {\n        all[k] = __assign(__assign({}, (opts1[k] || {})), (opts2[k] || {}));\n        return all;\n    }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n    if (!timeZone) {\n        return f1;\n    }\n    var mfFormats = IntlMessageFormat.formats;\n    return __assign(__assign(__assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\n}\nexport var formatMessage = function (_a, state, messageDescriptor, values, opts) {\n    var locale = _a.locale, formats = _a.formats, messages = _a.messages, defaultLocale = _a.defaultLocale, defaultFormats = _a.defaultFormats, fallbackOnEmptyString = _a.fallbackOnEmptyString, onError = _a.onError, timeZone = _a.timeZone, defaultRichTextElements = _a.defaultRichTextElements;\n    if (messageDescriptor === void 0) { messageDescriptor = { id: '' }; }\n    var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;\n    // `id` is a required field of a Message Descriptor.\n    invariant(!!msgId, \"[@formatjs/intl] An `id` must be provided to format a message. You can either:\\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\\nto autofix this issue\");\n    var id = String(msgId);\n    var message = \n    // In case messages is Object.create(null)\n    // e.g import('foo.json') from webpack)\n    // See https://github.com/formatjs/formatjs/issues/1914\n    messages &&\n        Object.prototype.hasOwnProperty.call(messages, id) &&\n        messages[id];\n    // IMPORTANT: Hot path if `message` is AST with a single literal node\n    if (Array.isArray(message) &&\n        message.length === 1 &&\n        message[0].type === TYPE.literal) {\n        return message[0].value;\n    }\n    // IMPORTANT: Hot path straight lookup for performance\n    if (!values &&\n        message &&\n        typeof message === 'string' &&\n        !defaultRichTextElements) {\n        return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n    }\n    values = __assign(__assign({}, defaultRichTextElements), (values || {}));\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n    if (!message) {\n        if (fallbackOnEmptyString === false && message === '') {\n            return message;\n        }\n        if (!defaultMessage ||\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\n            // This prevents warnings from littering the console in development\n            // when no `messages` are passed into the <IntlProvider> for the\n            // default locale.\n            onError(new MissingTranslationError(messageDescriptor, locale));\n        }\n        if (defaultMessage) {\n            try {\n                var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n                return formatter.format(values);\n            }\n            catch (e) {\n                onError(new MessageFormatError(\"Error formatting default message for: \\\"\".concat(id, \"\\\", rendering default message verbatim\"), locale, messageDescriptor, e));\n                return typeof defaultMessage === 'string' ? defaultMessage : id;\n            }\n        }\n        return id;\n    }\n    // We have the translated message\n    try {\n        var formatter = state.getMessageFormat(message, locale, formats, __assign({ formatters: state }, (opts || {})));\n        return formatter.format(values);\n    }\n    catch (e) {\n        onError(new MessageFormatError(\"Error formatting message: \\\"\".concat(id, \"\\\", using \").concat(defaultMessage ? 'default message' : 'id', \" as fallback.\"), locale, messageDescriptor, e));\n    }\n    if (defaultMessage) {\n        try {\n            var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n            return formatter.format(values);\n        }\n        catch (e) {\n            onError(new MessageFormatError(\"Error formatting the default message for: \\\"\".concat(id, \"\\\", rendering message verbatim\"), locale, messageDescriptor, e));\n        }\n    }\n    if (typeof message === 'string') {\n        return message;\n    }\n    if (typeof defaultMessage === 'string') {\n        return defaultMessage;\n    }\n    return id;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}