{"ast":null,"code":"import { compareFunctionCovs, compareRangeCovs, compareScriptCovs } from \"./compare\";\nimport { RangeTree } from \"./range-tree\";\n/**\n * Normalizes a process coverage.\n *\n * Sorts the scripts alphabetically by `url`.\n * Reassigns script ids: the script at index `0` receives `\"0\"`, the script at\n * index `1` receives `\"1\"` etc.\n * This does not normalize the script coverages.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function normalizeProcessCov(processCov) {\n  processCov.result.sort(compareScriptCovs);\n  for (const [scriptId, scriptCov] of processCov.result.entries()) {\n    scriptCov.scriptId = scriptId.toString(10);\n  }\n}\n/**\n * Normalizes a process coverage deeply.\n *\n * Normalizes the script coverages deeply, then normalizes the process coverage\n * itself.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function deepNormalizeProcessCov(processCov) {\n  for (const scriptCov of processCov.result) {\n    deepNormalizeScriptCov(scriptCov);\n  }\n  normalizeProcessCov(processCov);\n}\n/**\n * Normalizes a script coverage.\n *\n * Sorts the function by root range (pre-order sort).\n * This does not normalize the function coverages.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function normalizeScriptCov(scriptCov) {\n  scriptCov.functions.sort(compareFunctionCovs);\n}\n/**\n * Normalizes a script coverage deeply.\n *\n * Normalizes the function coverages deeply, then normalizes the script coverage\n * itself.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function deepNormalizeScriptCov(scriptCov) {\n  for (const funcCov of scriptCov.functions) {\n    normalizeFunctionCov(funcCov);\n  }\n  normalizeScriptCov(scriptCov);\n}\n/**\n * Normalizes a function coverage.\n *\n * Sorts the ranges (pre-order sort).\n * TODO: Tree-based normalization of the ranges.\n *\n * @param funcCov Function coverage to normalize.\n */\nexport function normalizeFunctionCov(funcCov) {\n  funcCov.ranges.sort(compareRangeCovs);\n  const tree = RangeTree.fromSortedRanges(funcCov.ranges);\n  normalizeRangeTree(tree);\n  funcCov.ranges = tree.toRanges();\n}\n/**\n * @internal\n */\nexport function normalizeRangeTree(tree) {\n  tree.normalize();\n}","map":{"version":3,"names":["compareFunctionCovs","compareRangeCovs","compareScriptCovs","RangeTree","normalizeProcessCov","processCov","result","sort","scriptId","scriptCov","entries","toString","deepNormalizeProcessCov","deepNormalizeScriptCov","normalizeScriptCov","functions","funcCov","normalizeFunctionCov","ranges","tree","fromSortedRanges","normalizeRangeTree","toRanges","normalize"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@bcoe\\v8-coverage\\dist\\lib\\_src\\normalize.ts"],"sourcesContent":["import { compareFunctionCovs, compareRangeCovs, compareScriptCovs } from \"./compare\";\nimport { RangeTree } from \"./range-tree\";\nimport { FunctionCov, ProcessCov, ScriptCov } from \"./types\";\n\n/**\n * Normalizes a process coverage.\n *\n * Sorts the scripts alphabetically by `url`.\n * Reassigns script ids: the script at index `0` receives `\"0\"`, the script at\n * index `1` receives `\"1\"` etc.\n * This does not normalize the script coverages.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function normalizeProcessCov(processCov: ProcessCov): void {\n  processCov.result.sort(compareScriptCovs);\n  for (const [scriptId, scriptCov] of processCov.result.entries()) {\n    scriptCov.scriptId = scriptId.toString(10);\n  }\n}\n\n/**\n * Normalizes a process coverage deeply.\n *\n * Normalizes the script coverages deeply, then normalizes the process coverage\n * itself.\n *\n * @param processCov Process coverage to normalize.\n */\nexport function deepNormalizeProcessCov(processCov: ProcessCov): void {\n  for (const scriptCov of processCov.result) {\n    deepNormalizeScriptCov(scriptCov);\n  }\n  normalizeProcessCov(processCov);\n}\n\n/**\n * Normalizes a script coverage.\n *\n * Sorts the function by root range (pre-order sort).\n * This does not normalize the function coverages.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function normalizeScriptCov(scriptCov: ScriptCov): void {\n  scriptCov.functions.sort(compareFunctionCovs);\n}\n\n/**\n * Normalizes a script coverage deeply.\n *\n * Normalizes the function coverages deeply, then normalizes the script coverage\n * itself.\n *\n * @param scriptCov Script coverage to normalize.\n */\nexport function deepNormalizeScriptCov(scriptCov: ScriptCov): void {\n  for (const funcCov of scriptCov.functions) {\n    normalizeFunctionCov(funcCov);\n  }\n  normalizeScriptCov(scriptCov);\n}\n\n/**\n * Normalizes a function coverage.\n *\n * Sorts the ranges (pre-order sort).\n * TODO: Tree-based normalization of the ranges.\n *\n * @param funcCov Function coverage to normalize.\n */\nexport function normalizeFunctionCov(funcCov: FunctionCov): void {\n  funcCov.ranges.sort(compareRangeCovs);\n  const tree: RangeTree = RangeTree.fromSortedRanges(funcCov.ranges)!;\n  normalizeRangeTree(tree);\n  funcCov.ranges = tree.toRanges();\n}\n\n/**\n * @internal\n */\nexport function normalizeRangeTree(tree: RangeTree): void {\n  tree.normalize();\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,gBAAgB,EAAEC,iBAAiB,QAAQ,WAAW;AACpF,SAASC,SAAS,QAAQ,cAAc;AAGxC;;;;;;;;;;AAUA,OAAM,SAAUC,mBAAmBA,CAACC,UAAsB;EACxDA,UAAU,CAACC,MAAM,CAACC,IAAI,CAACL,iBAAiB,CAAC;EACzC,KAAK,MAAM,CAACM,QAAQ,EAAEC,SAAS,CAAC,IAAIJ,UAAU,CAACC,MAAM,CAACI,OAAO,EAAE,EAAE;IAC/DD,SAAS,CAACD,QAAQ,GAAGA,QAAQ,CAACG,QAAQ,CAAC,EAAE,CAAC;;AAE9C;AAEA;;;;;;;;AAQA,OAAM,SAAUC,uBAAuBA,CAACP,UAAsB;EAC5D,KAAK,MAAMI,SAAS,IAAIJ,UAAU,CAACC,MAAM,EAAE;IACzCO,sBAAsB,CAACJ,SAAS,CAAC;;EAEnCL,mBAAmB,CAACC,UAAU,CAAC;AACjC;AAEA;;;;;;;;AAQA,OAAM,SAAUS,kBAAkBA,CAACL,SAAoB;EACrDA,SAAS,CAACM,SAAS,CAACR,IAAI,CAACP,mBAAmB,CAAC;AAC/C;AAEA;;;;;;;;AAQA,OAAM,SAAUa,sBAAsBA,CAACJ,SAAoB;EACzD,KAAK,MAAMO,OAAO,IAAIP,SAAS,CAACM,SAAS,EAAE;IACzCE,oBAAoB,CAACD,OAAO,CAAC;;EAE/BF,kBAAkB,CAACL,SAAS,CAAC;AAC/B;AAEA;;;;;;;;AAQA,OAAM,SAAUQ,oBAAoBA,CAACD,OAAoB;EACvDA,OAAO,CAACE,MAAM,CAACX,IAAI,CAACN,gBAAgB,CAAC;EACrC,MAAMkB,IAAI,GAAchB,SAAS,CAACiB,gBAAgB,CAACJ,OAAO,CAACE,MAAM,CAAE;EACnEG,kBAAkB,CAACF,IAAI,CAAC;EACxBH,OAAO,CAACE,MAAM,GAAGC,IAAI,CAACG,QAAQ,EAAE;AAClC;AAEA;;;AAGA,OAAM,SAAUD,kBAAkBA,CAACF,IAAe;EAChDA,IAAI,CAACI,SAAS,EAAE;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}