{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = remove;\n\n/* eslint-disable no-param-reassign */\nfunction isInside(scope, regex) {\n  if (!scope.hub.file.opts) {\n    return true;\n  }\n  var filename = scope.hub.file.opts.filename;\n  if (!filename) {\n    return true;\n  }\n  if (!regex) {\n    return false;\n  }\n  return regex.test(filename);\n} // Remove a specific path.\n\nfunction remove(path, globalOptions, options) {\n  var visitedKey = globalOptions.visitedKey,\n    unsafeWrapTemplate = globalOptions.unsafeWrapTemplate,\n    wrapTemplate = globalOptions.wrapTemplate,\n    mode = globalOptions.mode,\n    ignoreFilenames = globalOptions.ignoreFilenames,\n    types = globalOptions.types;\n  if (ignoreFilenames && isInside(path.scope, ignoreFilenames)) {\n    return;\n  } // Prevent infinity loop.\n\n  if (path.node[visitedKey]) {\n    return;\n  }\n  path.node[visitedKey] = true;\n  if (mode === 'remove') {\n    // remove() crash in some conditions.\n    if (path.parentPath.type === 'ConditionalExpression') {\n      path.replaceWith(types.unaryExpression('void', types.numericLiteral(0)));\n    } else {\n      path.remove();\n    }\n    return;\n  }\n  if (mode === 'wrap' || mode === 'unsafe-wrap') {\n    switch (options.type) {\n      // This is legacy, we do not optimize it.\n      case 'createClass':\n        break;\n      // Inspired from babel-plugin-transform-class-properties.\n\n      case 'class static':\n        {\n          var ref;\n          var pathClassDeclaration = options.pathClassDeclaration;\n          if (!pathClassDeclaration.isClassExpression() && pathClassDeclaration.node.id) {\n            ref = pathClassDeclaration.node.id;\n          } else {\n            // Class without name not supported\n            return;\n          }\n          var node = types.expressionStatement(types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)); // We need to append the node at the parent level in this case.\n\n          if (pathClassDeclaration.parentPath.isExportDeclaration()) {\n            pathClassDeclaration = pathClassDeclaration.parentPath;\n          }\n          pathClassDeclaration.insertAfter(node);\n          path.remove();\n          break;\n        }\n      case 'assign':\n        if (mode === 'unsafe-wrap') {\n          path.replaceWith(unsafeWrapTemplate({\n            NODE: path.node\n          }));\n        } else {\n          path.replaceWith(wrapTemplate({\n            LEFT: path.node.left,\n            RIGHT: path.node.right\n          }));\n        }\n        path.node[visitedKey] = true;\n        break;\n      case 'declarator':\n        path.replaceWith(wrapTemplate({\n          LEFT: path.node.id,\n          RIGHT: path.node.init\n        }, {\n          as: 'variableDeclarator'\n        }));\n        path.node[visitedKey] = true;\n        break;\n      default:\n        break;\n    }\n    return;\n  }\n  throw new Error(\"transform-react-remove-prop-type: unsupported mode \".concat(mode, \".\"));\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","remove","isInside","scope","regex","hub","file","opts","filename","test","path","globalOptions","options","visitedKey","unsafeWrapTemplate","wrapTemplate","mode","ignoreFilenames","types","node","parentPath","type","replaceWith","unaryExpression","numericLiteral","ref","pathClassDeclaration","isClassExpression","id","expressionStatement","assignmentExpression","memberExpression","key","isExportDeclaration","insertAfter","NODE","LEFT","left","RIGHT","right","init","as","Error","concat"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/babel-plugin-transform-react-remove-prop-types/lib/remove.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = remove;\n\n/* eslint-disable no-param-reassign */\nfunction isInside(scope, regex) {\n  if (!scope.hub.file.opts) {\n    return true;\n  }\n\n  var filename = scope.hub.file.opts.filename;\n\n  if (!filename) {\n    return true;\n  }\n\n  if (!regex) {\n    return false;\n  }\n\n  return regex.test(filename);\n} // Remove a specific path.\n\n\nfunction remove(path, globalOptions, options) {\n  var visitedKey = globalOptions.visitedKey,\n      unsafeWrapTemplate = globalOptions.unsafeWrapTemplate,\n      wrapTemplate = globalOptions.wrapTemplate,\n      mode = globalOptions.mode,\n      ignoreFilenames = globalOptions.ignoreFilenames,\n      types = globalOptions.types;\n\n  if (ignoreFilenames && isInside(path.scope, ignoreFilenames)) {\n    return;\n  } // Prevent infinity loop.\n\n\n  if (path.node[visitedKey]) {\n    return;\n  }\n\n  path.node[visitedKey] = true;\n\n  if (mode === 'remove') {\n    // remove() crash in some conditions.\n    if (path.parentPath.type === 'ConditionalExpression') {\n      path.replaceWith(types.unaryExpression('void', types.numericLiteral(0)));\n    } else {\n      path.remove();\n    }\n\n    return;\n  }\n\n  if (mode === 'wrap' || mode === 'unsafe-wrap') {\n    switch (options.type) {\n      // This is legacy, we do not optimize it.\n      case 'createClass':\n        break;\n      // Inspired from babel-plugin-transform-class-properties.\n\n      case 'class static':\n        {\n          var ref;\n          var pathClassDeclaration = options.pathClassDeclaration;\n\n          if (!pathClassDeclaration.isClassExpression() && pathClassDeclaration.node.id) {\n            ref = pathClassDeclaration.node.id;\n          } else {\n            // Class without name not supported\n            return;\n          }\n\n          var node = types.expressionStatement(types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)); // We need to append the node at the parent level in this case.\n\n          if (pathClassDeclaration.parentPath.isExportDeclaration()) {\n            pathClassDeclaration = pathClassDeclaration.parentPath;\n          }\n\n          pathClassDeclaration.insertAfter(node);\n          path.remove();\n          break;\n        }\n\n      case 'assign':\n        if (mode === 'unsafe-wrap') {\n          path.replaceWith(unsafeWrapTemplate({\n            NODE: path.node\n          }));\n        } else {\n          path.replaceWith(wrapTemplate({\n            LEFT: path.node.left,\n            RIGHT: path.node.right\n          }));\n        }\n\n        path.node[visitedKey] = true;\n        break;\n\n      case 'declarator':\n        path.replaceWith(wrapTemplate({\n          LEFT: path.node.id,\n          RIGHT: path.node.init\n        }, {\n          as: 'variableDeclarator'\n        }));\n        path.node[visitedKey] = true;\n        break;\n\n      default:\n        break;\n    }\n\n    return;\n  }\n\n  throw new Error(\"transform-react-remove-prop-type: unsupported mode \".concat(mode, \".\"));\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}