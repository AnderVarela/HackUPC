{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\nvar core = require('@babel/core');\nvar pluginTransformParameters = require('@babel/plugin-transform-parameters');\nvar helperCompilationTargets = require('@babel/helper-compilation-targets');\nfunction shouldStoreRHSInTemporaryVariable(node) {\n  if (!node) return false;\n  if (node.type === \"ArrayPattern\") {\n    const nonNullElements = node.elements.filter(element => element !== null);\n    if (nonNullElements.length > 1) return true;else return shouldStoreRHSInTemporaryVariable(nonNullElements[0]);\n  } else if (node.type === \"ObjectPattern\") {\n    const {\n      properties\n    } = node;\n    if (properties.length > 1) return true;else if (properties.length === 0) return false;else {\n      const firstProperty = properties[0];\n      if (firstProperty.type === \"ObjectProperty\") {\n        return shouldStoreRHSInTemporaryVariable(firstProperty.value);\n      } else {\n        return shouldStoreRHSInTemporaryVariable(firstProperty);\n      }\n    }\n  } else if (node.type === \"AssignmentPattern\") {\n    return shouldStoreRHSInTemporaryVariable(node.left);\n  } else if (node.type === \"RestElement\") {\n    if (node.argument.type === \"Identifier\") return true;\n    return shouldStoreRHSInTemporaryVariable(node.argument);\n  } else {\n    return false;\n  }\n}\nvar compatData = {\n  \"Object.assign\": {\n    chrome: \"49\",\n    opera: \"36\",\n    edge: \"13\",\n    firefox: \"36\",\n    safari: \"10\",\n    node: \"6\",\n    deno: \"1\",\n    ios: \"10\",\n    samsung: \"5\",\n    opera_mobile: \"36\",\n    electron: \"0.37\"\n  }\n};\nconst {\n  isAssignmentPattern,\n  isObjectProperty\n} = core.types;\n{\n  const node = core.types.identifier(\"a\");\n  const property = core.types.objectProperty(core.types.identifier(\"key\"), node);\n  const pattern = core.types.objectPattern([property]);\n  var ZERO_REFS = core.types.isReferenced(node, property, pattern) ? 1 : 0;\n}\nvar index = helperPluginUtils.declare((api, opts) => {\n  var _api$assumption, _api$assumption2, _api$assumption3, _api$assumption4;\n  api.assertVersion(\"^7.0.0-0 || >8.0.0-alpha <8.0.0-beta\");\n  const targets = api.targets();\n  const supportsObjectAssign = !helperCompilationTargets.isRequired(\"Object.assign\", targets, {\n    compatData\n  });\n  const {\n    useBuiltIns = supportsObjectAssign,\n    loose = false\n  } = opts;\n  if (typeof loose !== \"boolean\") {\n    throw new Error(\".loose must be a boolean, or undefined\");\n  }\n  const ignoreFunctionLength = (_api$assumption = api.assumption(\"ignoreFunctionLength\")) != null ? _api$assumption : loose;\n  const objectRestNoSymbols = (_api$assumption2 = api.assumption(\"objectRestNoSymbols\")) != null ? _api$assumption2 : loose;\n  const pureGetters = (_api$assumption3 = api.assumption(\"pureGetters\")) != null ? _api$assumption3 : loose;\n  const setSpreadProperties = (_api$assumption4 = api.assumption(\"setSpreadProperties\")) != null ? _api$assumption4 : loose;\n  function getExtendsHelper(file) {\n    return useBuiltIns ? core.types.memberExpression(core.types.identifier(\"Object\"), core.types.identifier(\"assign\")) : file.addHelper(\"extends\");\n  }\n  function hasRestElement(path) {\n    let foundRestElement = false;\n    visitRestElements(path, restElement => {\n      foundRestElement = true;\n      restElement.stop();\n    });\n    return foundRestElement;\n  }\n  function hasObjectPatternRestElement(path) {\n    let foundRestElement = false;\n    visitRestElements(path, restElement => {\n      if (restElement.parentPath.isObjectPattern()) {\n        foundRestElement = true;\n        restElement.stop();\n      }\n    });\n    return foundRestElement;\n  }\n  function visitRestElements(path, visitor) {\n    path.traverse({\n      Expression(path) {\n        const {\n          parent,\n          key\n        } = path;\n        if (isAssignmentPattern(parent) && key === \"right\" || isObjectProperty(parent) && parent.computed && key === \"key\") {\n          path.skip();\n        }\n      },\n      RestElement: visitor\n    });\n  }\n  function hasSpread(node) {\n    for (const prop of node.properties) {\n      if (core.types.isSpreadElement(prop)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function extractNormalizedKeys(node) {\n    const props = node.properties;\n    const keys = [];\n    let allPrimitives = true;\n    let hasTemplateLiteral = false;\n    for (const prop of props) {\n      const {\n        key\n      } = prop;\n      if (core.types.isIdentifier(key) && !prop.computed) {\n        keys.push(core.types.stringLiteral(key.name));\n      } else if (core.types.isTemplateLiteral(key)) {\n        keys.push(core.types.cloneNode(key));\n        hasTemplateLiteral = true;\n      } else if (core.types.isLiteral(key)) {\n        keys.push(core.types.stringLiteral(String(key.value)));\n      } else {\n        keys.push(core.types.cloneNode(key));\n        if (core.types.isMemberExpression(key, {\n          computed: false\n        }) && core.types.isIdentifier(key.object, {\n          name: \"Symbol\"\n        }) || core.types.isCallExpression(key) && core.types.matchesPattern(key.callee, \"Symbol.for\")) ;else {\n          allPrimitives = false;\n        }\n      }\n    }\n    return {\n      keys,\n      allPrimitives,\n      hasTemplateLiteral\n    };\n  }\n  function replaceImpureComputedKeys(properties, scope) {\n    const impureComputedPropertyDeclarators = [];\n    for (const propPath of properties) {\n      const key = propPath.get(\"key\");\n      if (propPath.node.computed && !key.isPure()) {\n        const name = scope.generateUidBasedOnNode(key.node);\n        const declarator = core.types.variableDeclarator(core.types.identifier(name), key.node);\n        impureComputedPropertyDeclarators.push(declarator);\n        key.replaceWith(core.types.identifier(name));\n      }\n    }\n    return impureComputedPropertyDeclarators;\n  }\n  function removeUnusedExcludedKeys(path) {\n    const bindings = path.getOuterBindingIdentifierPaths();\n    Object.keys(bindings).forEach(bindingName => {\n      const bindingParentPath = bindings[bindingName].parentPath;\n      if (path.scope.getBinding(bindingName).references > ZERO_REFS || !bindingParentPath.isObjectProperty()) {\n        return;\n      }\n      bindingParentPath.remove();\n    });\n  }\n  function createObjectRest(path, file, objRef) {\n    const props = path.get(\"properties\");\n    const last = props[props.length - 1];\n    core.types.assertRestElement(last.node);\n    const restElement = core.types.cloneNode(last.node);\n    last.remove();\n    const impureComputedPropertyDeclarators = replaceImpureComputedKeys(path.get(\"properties\"), path.scope);\n    const {\n      keys,\n      allPrimitives,\n      hasTemplateLiteral\n    } = extractNormalizedKeys(path.node);\n    if (keys.length === 0) {\n      return [impureComputedPropertyDeclarators, restElement.argument, core.types.callExpression(getExtendsHelper(file), [core.types.objectExpression([]), core.types.sequenceExpression([core.types.callExpression(file.addHelper(\"objectDestructuringEmpty\"), [core.types.cloneNode(objRef)]), core.types.cloneNode(objRef)])])];\n    }\n    let keyExpression;\n    if (!allPrimitives) {\n      keyExpression = core.types.callExpression(core.types.memberExpression(core.types.arrayExpression(keys), core.types.identifier(\"map\")), [file.addHelper(\"toPropertyKey\")]);\n    } else {\n      keyExpression = core.types.arrayExpression(keys);\n      if (!hasTemplateLiteral && !core.types.isProgram(path.scope.block)) {\n        const program = path.findParent(path => path.isProgram());\n        const id = path.scope.generateUidIdentifier(\"excluded\");\n        program.scope.push({\n          id,\n          init: keyExpression,\n          kind: \"const\"\n        });\n        keyExpression = core.types.cloneNode(id);\n      }\n    }\n    return [impureComputedPropertyDeclarators, restElement.argument, core.types.callExpression(file.addHelper(`objectWithoutProperties${objectRestNoSymbols ? \"Loose\" : \"\"}`), [core.types.cloneNode(objRef), keyExpression])];\n  }\n  function replaceRestElement(parentPath, paramPath, container) {\n    if (paramPath.isAssignmentPattern()) {\n      replaceRestElement(parentPath, paramPath.get(\"left\"), container);\n      return;\n    }\n    if (paramPath.isArrayPattern() && hasRestElement(paramPath)) {\n      const elements = paramPath.get(\"elements\");\n      for (let i = 0; i < elements.length; i++) {\n        replaceRestElement(parentPath, elements[i], container);\n      }\n    }\n    if (paramPath.isObjectPattern() && hasRestElement(paramPath)) {\n      const uid = parentPath.scope.generateUidIdentifier(\"ref\");\n      const declar = core.types.variableDeclaration(\"let\", [core.types.variableDeclarator(paramPath.node, uid)]);\n      if (container) {\n        container.push(declar);\n      } else {\n        parentPath.ensureBlock();\n        parentPath.get(\"body\").unshiftContainer(\"body\", declar);\n      }\n      paramPath.replaceWith(core.types.cloneNode(uid));\n    }\n  }\n  return {\n    name: \"transform-object-rest-spread\",\n    inherits: api.version[0] === \"8\" ? undefined : require(\"@babel/plugin-syntax-object-rest-spread\").default,\n    visitor: {\n      Function(path) {\n        const params = path.get(\"params\");\n        const paramsWithRestElement = new Set();\n        const idsInRestParams = new Set();\n        for (let i = 0; i < params.length; ++i) {\n          const param = params[i];\n          if (hasRestElement(param)) {\n            paramsWithRestElement.add(i);\n            for (const name of Object.keys(param.getBindingIdentifiers())) {\n              idsInRestParams.add(name);\n            }\n          }\n        }\n        let idInRest = false;\n        const IdentifierHandler = function (path, functionScope) {\n          const name = path.node.name;\n          if (path.scope.getBinding(name) === functionScope.getBinding(name) && idsInRestParams.has(name)) {\n            idInRest = true;\n            path.stop();\n          }\n        };\n        let i;\n        for (i = 0; i < params.length && !idInRest; ++i) {\n          const param = params[i];\n          if (!paramsWithRestElement.has(i)) {\n            if (param.isReferencedIdentifier() || param.isBindingIdentifier()) {\n              IdentifierHandler(param, path.scope);\n            } else {\n              param.traverse({\n                \"Scope|TypeAnnotation|TSTypeAnnotation\": path => path.skip(),\n                \"ReferencedIdentifier|BindingIdentifier\": IdentifierHandler\n              }, path.scope);\n            }\n          }\n        }\n        if (!idInRest) {\n          for (let i = 0; i < params.length; ++i) {\n            const param = params[i];\n            if (paramsWithRestElement.has(i)) {\n              replaceRestElement(path, param);\n            }\n          }\n        } else {\n          const shouldTransformParam = idx => idx >= i - 1 || paramsWithRestElement.has(idx);\n          pluginTransformParameters.convertFunctionParams(path, ignoreFunctionLength, shouldTransformParam, replaceRestElement);\n        }\n      },\n      VariableDeclarator(path, file) {\n        if (!path.get(\"id\").isObjectPattern()) {\n          return;\n        }\n        let insertionPath = path;\n        const originalPath = path;\n        visitRestElements(path.get(\"id\"), path => {\n          if (!path.parentPath.isObjectPattern()) {\n            return;\n          }\n          if (shouldStoreRHSInTemporaryVariable(originalPath.node.id) && !core.types.isIdentifier(originalPath.node.init)) {\n            const initRef = path.scope.generateUidIdentifierBasedOnNode(originalPath.node.init, \"ref\");\n            originalPath.insertBefore(core.types.variableDeclarator(initRef, originalPath.node.init));\n            originalPath.replaceWith(core.types.variableDeclarator(originalPath.node.id, core.types.cloneNode(initRef)));\n            return;\n          }\n          let ref = originalPath.node.init;\n          const refPropertyPath = [];\n          let kind;\n          path.findParent(path => {\n            if (path.isObjectProperty()) {\n              refPropertyPath.unshift(path);\n            } else if (path.isVariableDeclarator()) {\n              kind = path.parentPath.node.kind;\n              return true;\n            }\n          });\n          const impureObjRefComputedDeclarators = replaceImpureComputedKeys(refPropertyPath, path.scope);\n          refPropertyPath.forEach(prop => {\n            const {\n              node\n            } = prop;\n            ref = core.types.memberExpression(ref, core.types.cloneNode(node.key), node.computed || core.types.isLiteral(node.key));\n          });\n          const objectPatternPath = path.findParent(path => path.isObjectPattern());\n          const [impureComputedPropertyDeclarators, argument, callExpression] = createObjectRest(objectPatternPath, file, ref);\n          if (pureGetters) {\n            removeUnusedExcludedKeys(objectPatternPath);\n          }\n          core.types.assertIdentifier(argument);\n          insertionPath.insertBefore(impureComputedPropertyDeclarators);\n          insertionPath.insertBefore(impureObjRefComputedDeclarators);\n          insertionPath = insertionPath.insertAfter(core.types.variableDeclarator(argument, callExpression))[0];\n          path.scope.registerBinding(kind, insertionPath);\n          if (objectPatternPath.node.properties.length === 0) {\n            objectPatternPath.findParent(path => path.isObjectProperty() || path.isVariableDeclarator()).remove();\n          }\n        });\n      },\n      ExportNamedDeclaration(path) {\n        const declaration = path.get(\"declaration\");\n        if (!declaration.isVariableDeclaration()) return;\n        const hasRest = declaration.get(\"declarations\").some(path => hasObjectPatternRestElement(path.get(\"id\")));\n        if (!hasRest) return;\n        const specifiers = [];\n        for (const name of Object.keys(path.getOuterBindingIdentifiers(true))) {\n          specifiers.push(core.types.exportSpecifier(core.types.identifier(name), core.types.identifier(name)));\n        }\n        path.replaceWith(declaration.node);\n        path.insertAfter(core.types.exportNamedDeclaration(null, specifiers));\n      },\n      CatchClause(path) {\n        const paramPath = path.get(\"param\");\n        replaceRestElement(path, paramPath);\n      },\n      AssignmentExpression(path, file) {\n        const leftPath = path.get(\"left\");\n        if (leftPath.isObjectPattern() && hasRestElement(leftPath)) {\n          const nodes = [];\n          const refName = path.scope.generateUidBasedOnNode(path.node.right, \"ref\");\n          nodes.push(core.types.variableDeclaration(\"var\", [core.types.variableDeclarator(core.types.identifier(refName), path.node.right)]));\n          const [impureComputedPropertyDeclarators, argument, callExpression] = createObjectRest(leftPath, file, core.types.identifier(refName));\n          if (impureComputedPropertyDeclarators.length > 0) {\n            nodes.push(core.types.variableDeclaration(\"var\", impureComputedPropertyDeclarators));\n          }\n          const nodeWithoutSpread = core.types.cloneNode(path.node);\n          nodeWithoutSpread.right = core.types.identifier(refName);\n          nodes.push(core.types.expressionStatement(nodeWithoutSpread));\n          nodes.push(core.types.expressionStatement(core.types.assignmentExpression(\"=\", argument, callExpression)));\n          nodes.push(core.types.expressionStatement(core.types.identifier(refName)));\n          path.replaceWithMultiple(nodes);\n        }\n      },\n      ForXStatement(path) {\n        const {\n          node,\n          scope\n        } = path;\n        const leftPath = path.get(\"left\");\n        const left = node.left;\n        if (!hasObjectPatternRestElement(leftPath)) {\n          return;\n        }\n        if (!core.types.isVariableDeclaration(left)) {\n          const temp = scope.generateUidIdentifier(\"ref\");\n          node.left = core.types.variableDeclaration(\"var\", [core.types.variableDeclarator(temp)]);\n          path.ensureBlock();\n          const body = path.node.body;\n          if (body.body.length === 0 && path.isCompletionRecord()) {\n            body.body.unshift(core.types.expressionStatement(scope.buildUndefinedNode()));\n          }\n          body.body.unshift(core.types.expressionStatement(core.types.assignmentExpression(\"=\", left, core.types.cloneNode(temp))));\n        } else {\n          const pattern = left.declarations[0].id;\n          const key = scope.generateUidIdentifier(\"ref\");\n          node.left = core.types.variableDeclaration(left.kind, [core.types.variableDeclarator(key, null)]);\n          path.ensureBlock();\n          const body = node.body;\n          body.body.unshift(core.types.variableDeclaration(node.left.kind, [core.types.variableDeclarator(pattern, core.types.cloneNode(key))]));\n        }\n      },\n      ArrayPattern(path) {\n        const objectPatterns = [];\n        visitRestElements(path, path => {\n          if (!path.parentPath.isObjectPattern()) {\n            return;\n          }\n          const objectPattern = path.parentPath;\n          const uid = path.scope.generateUidIdentifier(\"ref\");\n          objectPatterns.push(core.types.variableDeclarator(objectPattern.node, uid));\n          objectPattern.replaceWith(core.types.cloneNode(uid));\n          path.skip();\n        });\n        if (objectPatterns.length > 0) {\n          const statementPath = path.getStatementParent();\n          const statementNode = statementPath.node;\n          const kind = statementNode.type === \"VariableDeclaration\" ? statementNode.kind : \"var\";\n          statementPath.insertAfter(core.types.variableDeclaration(kind, objectPatterns));\n        }\n      },\n      ObjectExpression(path, file) {\n        if (!hasSpread(path.node)) return;\n        let helper;\n        if (setSpreadProperties) {\n          helper = getExtendsHelper(file);\n        } else {\n          {\n            try {\n              helper = file.addHelper(\"objectSpread2\");\n            } catch (_unused) {\n              this.file.declarations[\"objectSpread2\"] = null;\n              helper = file.addHelper(\"objectSpread\");\n            }\n          }\n        }\n        let exp = null;\n        let props = [];\n        function make() {\n          const hadProps = props.length > 0;\n          const obj = core.types.objectExpression(props);\n          props = [];\n          if (!exp) {\n            exp = core.types.callExpression(helper, [obj]);\n            return;\n          }\n          if (pureGetters) {\n            if (hadProps) {\n              exp.arguments.push(obj);\n            }\n            return;\n          }\n          exp = core.types.callExpression(core.types.cloneNode(helper), [exp, ...(hadProps ? [core.types.objectExpression([]), obj] : [])]);\n        }\n        for (const prop of path.node.properties) {\n          if (core.types.isSpreadElement(prop)) {\n            make();\n            exp.arguments.push(prop.argument);\n          } else {\n            props.push(prop);\n          }\n        }\n        if (props.length) make();\n        path.replaceWith(exp);\n      }\n    }\n  };\n});\nexports.default = index;","map":{"version":3,"names":["shouldStoreRHSInTemporaryVariable","node","type","nonNullElements","elements","filter","element","length","properties","firstProperty","value","left","argument","compatData","chrome","opera","edge","firefox","safari","deno","ios","samsung","opera_mobile","electron","isAssignmentPattern","isObjectProperty","core","types","identifier","property","objectProperty","pattern","objectPattern","ZERO_REFS","isReferenced","index","helperPluginUtils","declare","api","opts","_api$assumption","_api$assumption2","_api$assumption3","_api$assumption4","assertVersion","targets","supportsObjectAssign","helperCompilationTargets","isRequired","useBuiltIns","loose","Error","ignoreFunctionLength","assumption","objectRestNoSymbols","pureGetters","setSpreadProperties","getExtendsHelper","file","memberExpression","addHelper","hasRestElement","path","foundRestElement","visitRestElements","restElement","stop","hasObjectPatternRestElement","parentPath","isObjectPattern","visitor","traverse","Expression","parent","key","computed","skip","RestElement","hasSpread","prop","isSpreadElement","extractNormalizedKeys","props","keys","allPrimitives","hasTemplateLiteral","isIdentifier","push","stringLiteral","name","isTemplateLiteral","cloneNode","isLiteral","String","isMemberExpression","object","isCallExpression","matchesPattern","callee","replaceImpureComputedKeys","scope","impureComputedPropertyDeclarators","propPath","get","isPure","generateUidBasedOnNode","declarator","variableDeclarator","replaceWith","removeUnusedExcludedKeys","bindings","getOuterBindingIdentifierPaths","Object","forEach","bindingName","bindingParentPath","getBinding","references","remove","createObjectRest","objRef","last","assertRestElement","callExpression","objectExpression","sequenceExpression","keyExpression","arrayExpression","isProgram","block","program","findParent","id","generateUidIdentifier","init","kind","replaceRestElement","paramPath","container","isArrayPattern","i","uid","declar","variableDeclaration","ensureBlock","unshiftContainer","inherits","version","undefined","require","default","Function","params","paramsWithRestElement","Set","idsInRestParams","param","add","getBindingIdentifiers","idInRest","IdentifierHandler","functionScope","has","isReferencedIdentifier","isBindingIdentifier","shouldTransformParam","idx","pluginTransformParameters","convertFunctionParams","VariableDeclarator","insertionPath","originalPath","initRef","generateUidIdentifierBasedOnNode","insertBefore","ref","refPropertyPath","unshift","isVariableDeclarator","impureObjRefComputedDeclarators","objectPatternPath","assertIdentifier","insertAfter","registerBinding","ExportNamedDeclaration","declaration","isVariableDeclaration","hasRest","some","specifiers","getOuterBindingIdentifiers","exportSpecifier","exportNamedDeclaration","CatchClause","AssignmentExpression","leftPath","nodes","refName","right","nodeWithoutSpread","expressionStatement","assignmentExpression","replaceWithMultiple","ForXStatement","temp","body","isCompletionRecord","buildUndefinedNode","declarations","ArrayPattern","objectPatterns","statementPath","getStatementParent","statementNode","ObjectExpression","helper","_unused","exp","make","hadProps","obj","arguments"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\plugin-transform-object-rest-spread\\src\\shouldStoreRHSInTemporaryVariable.ts","C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\plugin-transform-object-rest-spread\\src\\compat-data.ts","C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\plugin-transform-object-rest-spread\\src\\index.ts"],"sourcesContent":["import type { types as t } from \"@babel/core\";\n\n/**\n * This is a helper function to determine if we should create an intermediate variable\n * such that the RHS of an assignment is not duplicated.\n *\n * See https://github.com/babel/babel/pull/13711#issuecomment-914388382 for discussion\n * on further optimizations.\n */\nexport default function shouldStoreRHSInTemporaryVariable(\n  node: t.LVal,\n): boolean {\n  if (!node) return false;\n  if (node.type === \"ArrayPattern\") {\n    const nonNullElements = node.elements.filter(element => element !== null);\n    if (nonNullElements.length > 1) return true;\n    else return shouldStoreRHSInTemporaryVariable(nonNullElements[0]);\n  } else if (node.type === \"ObjectPattern\") {\n    const { properties } = node;\n    if (properties.length > 1) return true;\n    else if (properties.length === 0) return false;\n    else {\n      const firstProperty = properties[0];\n      if (firstProperty.type === \"ObjectProperty\") {\n        // the value of the property must be an LVal\n        return shouldStoreRHSInTemporaryVariable(firstProperty.value as t.LVal);\n      } else {\n        return shouldStoreRHSInTemporaryVariable(firstProperty);\n      }\n    }\n  } else if (node.type === \"AssignmentPattern\") {\n    return shouldStoreRHSInTemporaryVariable(node.left);\n  } else if (node.type === \"RestElement\") {\n    if (node.argument.type === \"Identifier\") return true;\n    return shouldStoreRHSInTemporaryVariable(node.argument);\n  } else {\n    // node is Identifier or MemberExpression\n    return false;\n  }\n}\n","export default {\n  \"Object.assign\": {\n    chrome: \"49\",\n    opera: \"36\",\n    edge: \"13\",\n    firefox: \"36\",\n    safari: \"10\",\n    node: \"6\",\n    deno: \"1\",\n    ios: \"10\",\n    samsung: \"5\",\n    opera_mobile: \"36\",\n    electron: \"0.37\",\n  },\n};\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport { types as t } from \"@babel/core\";\nimport type { PluginPass } from \"@babel/core\";\nimport type { NodePath, Scope } from \"@babel/traverse\";\nimport { convertFunctionParams } from \"@babel/plugin-transform-parameters\";\nimport { isRequired } from \"@babel/helper-compilation-targets\";\nimport shouldStoreRHSInTemporaryVariable from \"./shouldStoreRHSInTemporaryVariable.ts\";\nimport compatData from \"./compat-data.ts\";\n\nconst { isAssignmentPattern, isObjectProperty } = t;\n// @babel/types <=7.3.3 counts FOO as referenced in var { x: FOO }.\n// We need to detect this bug to know if \"unused\" means 0 or 1 references.\nif (!process.env.BABEL_8_BREAKING) {\n  const node = t.identifier(\"a\");\n  const property = t.objectProperty(t.identifier(\"key\"), node);\n  const pattern = t.objectPattern([property]);\n\n  // eslint-disable-next-line no-var\n  var ZERO_REFS = t.isReferenced(node, property, pattern) ? 1 : 0;\n}\n\ntype Param = NodePath<t.Function[\"params\"][number]>;\nexport interface Options {\n  useBuiltIns?: boolean;\n  loose?: boolean;\n}\n\nexport default declare((api, opts: Options) => {\n  api.assertVersion(REQUIRED_VERSION(7));\n\n  const targets = api.targets();\n  const supportsObjectAssign = !isRequired(\"Object.assign\", targets, {\n    compatData,\n  });\n\n  const { useBuiltIns = supportsObjectAssign, loose = false } = opts;\n\n  if (typeof loose !== \"boolean\") {\n    throw new Error(\".loose must be a boolean, or undefined\");\n  }\n\n  const ignoreFunctionLength = api.assumption(\"ignoreFunctionLength\") ?? loose;\n  const objectRestNoSymbols = api.assumption(\"objectRestNoSymbols\") ?? loose;\n  const pureGetters = api.assumption(\"pureGetters\") ?? loose;\n  const setSpreadProperties = api.assumption(\"setSpreadProperties\") ?? loose;\n\n  function getExtendsHelper(\n    file: PluginPass,\n  ): t.MemberExpression | t.Identifier {\n    return useBuiltIns\n      ? t.memberExpression(t.identifier(\"Object\"), t.identifier(\"assign\"))\n      : file.addHelper(\"extends\");\n  }\n\n  function hasRestElement(path: Param) {\n    let foundRestElement = false;\n    visitRestElements(path, restElement => {\n      foundRestElement = true;\n      restElement.stop();\n    });\n    return foundRestElement;\n  }\n\n  function hasObjectPatternRestElement(path: NodePath): boolean {\n    let foundRestElement = false;\n    visitRestElements(path, restElement => {\n      if (restElement.parentPath.isObjectPattern()) {\n        foundRestElement = true;\n        restElement.stop();\n      }\n    });\n    return foundRestElement;\n  }\n\n  function visitRestElements(\n    path: NodePath,\n    visitor: (path: NodePath<t.RestElement>) => any,\n  ) {\n    path.traverse({\n      Expression(path) {\n        const { parent, key } = path;\n        if (\n          (isAssignmentPattern(parent) && key === \"right\") ||\n          (isObjectProperty(parent) && parent.computed && key === \"key\")\n        ) {\n          path.skip();\n        }\n      },\n      RestElement: visitor,\n    });\n  }\n\n  function hasSpread(node: t.ObjectExpression): boolean {\n    for (const prop of node.properties) {\n      if (t.isSpreadElement(prop)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // returns an array of all keys of an object, and a status flag indicating if all extracted keys\n  // were converted to stringLiterals or not\n  // e.g. extracts {keys: [\"a\", \"b\", \"3\", ++x], allPrimitives: false }\n  // from ast of {a: \"foo\", b, 3: \"bar\", [++x]: \"baz\"}\n  // `allPrimitives: false` doesn't necessarily mean that there is a non-primitive, but just\n  // that we are not sure.\n  function extractNormalizedKeys(node: t.ObjectPattern) {\n    // RestElement has been removed in createObjectRest\n    const props = node.properties as t.ObjectProperty[];\n    const keys: t.Expression[] = [];\n    let allPrimitives = true;\n    let hasTemplateLiteral = false;\n\n    for (const prop of props) {\n      const { key } = prop;\n      if (t.isIdentifier(key) && !prop.computed) {\n        // since a key {a: 3} is equivalent to {\"a\": 3}, use the latter\n        keys.push(t.stringLiteral(key.name));\n      } else if (t.isTemplateLiteral(key)) {\n        keys.push(t.cloneNode(key));\n        hasTemplateLiteral = true;\n      } else if (t.isLiteral(key)) {\n        keys.push(\n          t.stringLiteral(\n            String(\n              // @ts-expect-error prop.key can not be a NullLiteral\n              key.value,\n            ),\n          ),\n        );\n      } else {\n        // @ts-expect-error private name has been handled by destructuring-private\n        keys.push(t.cloneNode(key));\n\n        if (\n          (t.isMemberExpression(key, { computed: false }) &&\n            t.isIdentifier(key.object, { name: \"Symbol\" })) ||\n          (t.isCallExpression(key) &&\n            t.matchesPattern(key.callee, \"Symbol.for\"))\n        ) {\n          // there all return a primitive\n        } else {\n          allPrimitives = false;\n        }\n      }\n    }\n\n    return { keys, allPrimitives, hasTemplateLiteral };\n  }\n\n  // replaces impure computed keys with new identifiers\n  // and returns variable declarators of these new identifiers\n  function replaceImpureComputedKeys(\n    properties: NodePath<t.ObjectProperty>[],\n    scope: Scope,\n  ) {\n    const impureComputedPropertyDeclarators: t.VariableDeclarator[] = [];\n    for (const propPath of properties) {\n      // PrivateName is handled in destructuring-private plugin\n      const key = propPath.get(\"key\") as NodePath<t.Expression>;\n      if (propPath.node.computed && !key.isPure()) {\n        const name = scope.generateUidBasedOnNode(key.node);\n        const declarator = t.variableDeclarator(t.identifier(name), key.node);\n        impureComputedPropertyDeclarators.push(declarator);\n        key.replaceWith(t.identifier(name));\n      }\n    }\n    return impureComputedPropertyDeclarators;\n  }\n\n  function removeUnusedExcludedKeys(path: NodePath<t.ObjectPattern>): void {\n    const bindings = path.getOuterBindingIdentifierPaths();\n\n    Object.keys(bindings).forEach(bindingName => {\n      const bindingParentPath = bindings[bindingName].parentPath;\n      if (\n        path.scope.getBinding(bindingName).references >\n          (process.env.BABEL_8_BREAKING ? 0 : ZERO_REFS) ||\n        !bindingParentPath.isObjectProperty()\n      ) {\n        return;\n      }\n      bindingParentPath.remove();\n    });\n  }\n\n  //expects path to an object pattern\n  function createObjectRest(\n    path: NodePath<t.ObjectPattern>,\n    file: PluginPass,\n    objRef: t.Identifier | t.MemberExpression,\n  ): [t.VariableDeclarator[], t.LVal, t.CallExpression] {\n    const props = path.get(\"properties\");\n    const last = props[props.length - 1];\n    t.assertRestElement(last.node);\n    const restElement = t.cloneNode(last.node);\n    last.remove();\n\n    const impureComputedPropertyDeclarators = replaceImpureComputedKeys(\n      path.get(\"properties\") as NodePath<t.ObjectProperty>[],\n      path.scope,\n    );\n    const { keys, allPrimitives, hasTemplateLiteral } = extractNormalizedKeys(\n      path.node,\n    );\n\n    if (keys.length === 0) {\n      return [\n        impureComputedPropertyDeclarators,\n        restElement.argument,\n        t.callExpression(getExtendsHelper(file), [\n          t.objectExpression([]),\n          t.sequenceExpression([\n            t.callExpression(file.addHelper(\"objectDestructuringEmpty\"), [\n              t.cloneNode(objRef),\n            ]),\n            t.cloneNode(objRef),\n          ]),\n        ]),\n      ];\n    }\n\n    let keyExpression;\n    if (!allPrimitives) {\n      // map to toPropertyKey to handle the possible non-string values\n      keyExpression = t.callExpression(\n        t.memberExpression(t.arrayExpression(keys), t.identifier(\"map\")),\n        [file.addHelper(\"toPropertyKey\")],\n      );\n    } else {\n      keyExpression = t.arrayExpression(keys);\n\n      if (!hasTemplateLiteral && !t.isProgram(path.scope.block)) {\n        // Hoist definition of excluded keys, so that it's not created each time.\n        const program = path.findParent(path => path.isProgram());\n        const id = path.scope.generateUidIdentifier(\"excluded\");\n\n        program.scope.push({\n          id,\n          init: keyExpression,\n          kind: \"const\",\n        });\n\n        keyExpression = t.cloneNode(id);\n      }\n    }\n\n    return [\n      impureComputedPropertyDeclarators,\n      restElement.argument,\n      t.callExpression(\n        file.addHelper(\n          `objectWithoutProperties${objectRestNoSymbols ? \"Loose\" : \"\"}`,\n        ),\n        [t.cloneNode(objRef), keyExpression],\n      ),\n    ];\n  }\n\n  function replaceRestElement(\n    parentPath: NodePath<t.Function | t.CatchClause>,\n    paramPath: NodePath<\n      t.Function[\"params\"][number] | t.AssignmentPattern[\"left\"]\n    >,\n    container?: t.VariableDeclaration[],\n  ): void {\n    if (paramPath.isAssignmentPattern()) {\n      replaceRestElement(parentPath, paramPath.get(\"left\"), container);\n      return;\n    }\n\n    if (paramPath.isArrayPattern() && hasRestElement(paramPath)) {\n      const elements = paramPath.get(\"elements\");\n\n      for (let i = 0; i < elements.length; i++) {\n        replaceRestElement(parentPath, elements[i], container);\n      }\n    }\n\n    if (paramPath.isObjectPattern() && hasRestElement(paramPath)) {\n      const uid = parentPath.scope.generateUidIdentifier(\"ref\");\n\n      const declar = t.variableDeclaration(\"let\", [\n        t.variableDeclarator(paramPath.node, uid),\n      ]);\n\n      if (container) {\n        container.push(declar);\n      } else {\n        parentPath.ensureBlock();\n        (parentPath.get(\"body\") as NodePath<t.BlockStatement>).unshiftContainer(\n          \"body\",\n          declar,\n        );\n      }\n      paramPath.replaceWith(t.cloneNode(uid));\n    }\n  }\n\n  return {\n    name: \"transform-object-rest-spread\",\n    inherits:\n      USE_ESM || IS_STANDALONE || api.version[0] === \"8\"\n        ? undefined\n        : // eslint-disable-next-line no-restricted-globals\n          require(\"@babel/plugin-syntax-object-rest-spread\").default,\n\n    visitor: {\n      // function a({ b, ...c }) {}\n      Function(path) {\n        const params = path.get(\"params\");\n        const paramsWithRestElement = new Set<number>();\n        const idsInRestParams = new Set();\n        for (let i = 0; i < params.length; ++i) {\n          const param = params[i];\n          if (hasRestElement(param)) {\n            paramsWithRestElement.add(i);\n            for (const name of Object.keys(param.getBindingIdentifiers())) {\n              idsInRestParams.add(name);\n            }\n          }\n        }\n\n        // if true, a parameter exists that has an id in its initializer\n        // that is also an id bound in a rest parameter\n        // example: f({...R}, a = R)\n        let idInRest = false;\n\n        const IdentifierHandler = function (\n          path: NodePath<t.Identifier>,\n          functionScope: Scope,\n        ) {\n          const name = path.node.name;\n          if (\n            path.scope.getBinding(name) === functionScope.getBinding(name) &&\n            idsInRestParams.has(name)\n          ) {\n            idInRest = true;\n            path.stop();\n          }\n        };\n\n        let i: number;\n        for (i = 0; i < params.length && !idInRest; ++i) {\n          const param = params[i];\n          if (!paramsWithRestElement.has(i)) {\n            if (param.isReferencedIdentifier() || param.isBindingIdentifier()) {\n              IdentifierHandler(param, path.scope);\n            } else {\n              param.traverse(\n                {\n                  \"Scope|TypeAnnotation|TSTypeAnnotation\": path => path.skip(),\n                  \"ReferencedIdentifier|BindingIdentifier\": IdentifierHandler,\n                },\n                path.scope,\n              );\n            }\n          }\n        }\n\n        if (!idInRest) {\n          for (let i = 0; i < params.length; ++i) {\n            const param = params[i];\n            if (paramsWithRestElement.has(i)) {\n              replaceRestElement(path, param);\n            }\n          }\n        } else {\n          const shouldTransformParam = (idx: number) =>\n            idx >= i - 1 || paramsWithRestElement.has(idx);\n          convertFunctionParams(\n            path,\n            ignoreFunctionLength,\n            shouldTransformParam,\n            replaceRestElement,\n          );\n        }\n      },\n\n      // adapted from transform-destructuring/src/index.js#pushObjectRest\n      // const { a, ...b } = c;\n      VariableDeclarator(path, file) {\n        if (!path.get(\"id\").isObjectPattern()) {\n          return;\n        }\n\n        let insertionPath = path;\n        const originalPath = path;\n\n        visitRestElements(path.get(\"id\"), path => {\n          if (!path.parentPath.isObjectPattern()) {\n            // Return early if the parent is not an ObjectPattern, but\n            // (for example) an ArrayPattern or Function, because that\n            // means this RestElement is an not an object property.\n            return;\n          }\n\n          if (\n            // skip single-property case, e.g.\n            // const { ...x } = foo();\n            // since the RHS will not be duplicated\n            shouldStoreRHSInTemporaryVariable(originalPath.node.id) &&\n            !t.isIdentifier(originalPath.node.init)\n          ) {\n            // const { a, ...b } = foo();\n            // to avoid calling foo() twice, as a first step convert it to:\n            // const _foo = foo(),\n            //       { a, ...b } = _foo;\n            const initRef = path.scope.generateUidIdentifierBasedOnNode(\n              originalPath.node.init,\n              \"ref\",\n            );\n            // insert _foo = foo()\n            originalPath.insertBefore(\n              t.variableDeclarator(initRef, originalPath.node.init),\n            );\n            // replace foo() with _foo\n            originalPath.replaceWith(\n              t.variableDeclarator(originalPath.node.id, t.cloneNode(initRef)),\n            );\n\n            return;\n          }\n\n          let ref = originalPath.node.init;\n          const refPropertyPath: NodePath<t.ObjectProperty>[] = [];\n          let kind;\n\n          path.findParent((path: NodePath): boolean => {\n            if (path.isObjectProperty()) {\n              refPropertyPath.unshift(path);\n            } else if (path.isVariableDeclarator()) {\n              kind = path.parentPath.node.kind;\n              return true;\n            }\n          });\n\n          const impureObjRefComputedDeclarators = replaceImpureComputedKeys(\n            refPropertyPath,\n            path.scope,\n          );\n          refPropertyPath.forEach(prop => {\n            const { node } = prop;\n            ref = t.memberExpression(\n              ref,\n              t.cloneNode(node.key),\n              node.computed || t.isLiteral(node.key),\n            );\n          });\n\n          //@ts-expect-error: findParent can not apply assertions on result shape\n          const objectPatternPath: NodePath<t.ObjectPattern> = path.findParent(\n            path => path.isObjectPattern(),\n          );\n\n          const [impureComputedPropertyDeclarators, argument, callExpression] =\n            createObjectRest(\n              objectPatternPath,\n              file,\n              ref as t.MemberExpression,\n            );\n\n          if (pureGetters) {\n            removeUnusedExcludedKeys(objectPatternPath);\n          }\n\n          t.assertIdentifier(argument);\n\n          insertionPath.insertBefore(impureComputedPropertyDeclarators);\n\n          insertionPath.insertBefore(impureObjRefComputedDeclarators);\n\n          insertionPath = insertionPath.insertAfter(\n            t.variableDeclarator(argument, callExpression),\n          )[0] as NodePath<t.VariableDeclarator>;\n\n          path.scope.registerBinding(kind, insertionPath);\n\n          if (objectPatternPath.node.properties.length === 0) {\n            objectPatternPath\n              .findParent(\n                path => path.isObjectProperty() || path.isVariableDeclarator(),\n              )\n              .remove();\n          }\n        });\n      },\n\n      // taken from transform-destructuring/src/index.js#visitor\n      // export var { a, ...b } = c;\n      ExportNamedDeclaration(path) {\n        const declaration = path.get(\"declaration\");\n        if (!declaration.isVariableDeclaration()) return;\n\n        const hasRest = declaration\n          .get(\"declarations\")\n          .some(path => hasObjectPatternRestElement(path.get(\"id\")));\n        if (!hasRest) return;\n\n        const specifiers = [];\n\n        for (const name of Object.keys(path.getOuterBindingIdentifiers(true))) {\n          specifiers.push(\n            t.exportSpecifier(t.identifier(name), t.identifier(name)),\n          );\n        }\n\n        // Split the declaration and export list into two declarations so that the variable\n        // declaration can be split up later without needing to worry about not being a\n        // top-level statement.\n        path.replaceWith(declaration.node);\n        path.insertAfter(t.exportNamedDeclaration(null, specifiers));\n      },\n\n      // try {} catch ({a, ...b}) {}\n      CatchClause(path) {\n        const paramPath = path.get(\"param\");\n        replaceRestElement(path, paramPath);\n      },\n\n      // ({a, ...b} = c);\n      AssignmentExpression(path, file) {\n        const leftPath = path.get(\"left\");\n        if (leftPath.isObjectPattern() && hasRestElement(leftPath)) {\n          const nodes = [];\n\n          const refName = path.scope.generateUidBasedOnNode(\n            path.node.right,\n            \"ref\",\n          );\n\n          nodes.push(\n            t.variableDeclaration(\"var\", [\n              t.variableDeclarator(t.identifier(refName), path.node.right),\n            ]),\n          );\n\n          const [impureComputedPropertyDeclarators, argument, callExpression] =\n            createObjectRest(leftPath, file, t.identifier(refName));\n\n          if (impureComputedPropertyDeclarators.length > 0) {\n            nodes.push(\n              t.variableDeclaration(\"var\", impureComputedPropertyDeclarators),\n            );\n          }\n\n          const nodeWithoutSpread = t.cloneNode(path.node);\n          nodeWithoutSpread.right = t.identifier(refName);\n          nodes.push(t.expressionStatement(nodeWithoutSpread));\n          nodes.push(\n            t.expressionStatement(\n              t.assignmentExpression(\"=\", argument, callExpression),\n            ),\n          );\n          nodes.push(t.expressionStatement(t.identifier(refName)));\n\n          path.replaceWithMultiple(nodes);\n        }\n      },\n\n      // taken from transform-destructuring/src/index.js#visitor\n      ForXStatement(path: NodePath<t.ForXStatement>) {\n        const { node, scope } = path;\n        const leftPath = path.get(\"left\");\n        const left = node.left;\n\n        if (!hasObjectPatternRestElement(leftPath)) {\n          return;\n        }\n\n        if (!t.isVariableDeclaration(left)) {\n          // for ({a, ...b} of []) {}\n          const temp = scope.generateUidIdentifier(\"ref\");\n\n          node.left = t.variableDeclaration(\"var\", [\n            t.variableDeclarator(temp),\n          ]);\n\n          path.ensureBlock();\n          const body = path.node.body as t.BlockStatement;\n\n          if (body.body.length === 0 && path.isCompletionRecord()) {\n            body.body.unshift(\n              t.expressionStatement(scope.buildUndefinedNode()),\n            );\n          }\n\n          body.body.unshift(\n            t.expressionStatement(\n              t.assignmentExpression(\"=\", left, t.cloneNode(temp)),\n            ),\n          );\n        } else {\n          // for (var {a, ...b} of []) {}\n          const pattern = left.declarations[0].id;\n\n          const key = scope.generateUidIdentifier(\"ref\");\n          node.left = t.variableDeclaration(left.kind, [\n            t.variableDeclarator(key, null),\n          ]);\n\n          path.ensureBlock();\n          const body = node.body as t.BlockStatement;\n\n          body.body.unshift(\n            t.variableDeclaration(node.left.kind, [\n              t.variableDeclarator(pattern, t.cloneNode(key)),\n            ]),\n          );\n        }\n      },\n\n      // [{a, ...b}] = c;\n      ArrayPattern(path) {\n        const objectPatterns: t.VariableDeclarator[] = [];\n\n        visitRestElements(path, path => {\n          if (!path.parentPath.isObjectPattern()) {\n            // Return early if the parent is not an ObjectPattern, but\n            // (for example) an ArrayPattern or Function, because that\n            // means this RestElement is an not an object property.\n            return;\n          }\n\n          const objectPattern = path.parentPath;\n\n          const uid = path.scope.generateUidIdentifier(\"ref\");\n          objectPatterns.push(t.variableDeclarator(objectPattern.node, uid));\n\n          objectPattern.replaceWith(t.cloneNode(uid));\n          path.skip();\n        });\n\n        if (objectPatterns.length > 0) {\n          const statementPath = path.getStatementParent();\n          const statementNode = statementPath.node;\n          const kind =\n            statementNode.type === \"VariableDeclaration\"\n              ? statementNode.kind\n              : \"var\";\n          statementPath.insertAfter(\n            t.variableDeclaration(kind, objectPatterns),\n          );\n        }\n      },\n\n      // var a = { ...b, ...c }\n      ObjectExpression(path, file) {\n        if (!hasSpread(path.node)) return;\n\n        let helper: t.Identifier | t.MemberExpression;\n        if (setSpreadProperties) {\n          helper = getExtendsHelper(file);\n        } else {\n          if (process.env.BABEL_8_BREAKING) {\n            helper = file.addHelper(\"objectSpread2\");\n          } else {\n            try {\n              helper = file.addHelper(\"objectSpread2\");\n            } catch {\n              // TODO: This is needed to workaround https://github.com/babel/babel/issues/10187\n              // and https://github.com/babel/babel/issues/10179 for older @babel/core versions\n              // where #10187 isn't fixed.\n              this.file.declarations[\"objectSpread2\"] = null;\n\n              // objectSpread2 has been introduced in v7.5.0\n              // We have to maintain backward compatibility.\n              helper = file.addHelper(\"objectSpread\");\n            }\n          }\n        }\n\n        let exp: t.CallExpression = null;\n        let props: t.ObjectMember[] = [];\n\n        function make() {\n          const hadProps = props.length > 0;\n          const obj = t.objectExpression(props);\n          props = [];\n\n          if (!exp) {\n            exp = t.callExpression(helper, [obj]);\n            return;\n          }\n\n          // When we can assume that getters are pure and don't depend on\n          // the order of evaluation, we can avoid making multiple calls.\n          if (pureGetters) {\n            if (hadProps) {\n              exp.arguments.push(obj);\n            }\n            return;\n          }\n\n          exp = t.callExpression(t.cloneNode(helper), [\n            exp,\n            // If we have static props, we need to insert an empty object\n            // because the odd arguments are copied with [[Get]], not\n            // [[GetOwnProperty]]\n            ...(hadProps ? [t.objectExpression([]), obj] : []),\n          ]);\n        }\n\n        for (const prop of path.node.properties) {\n          if (t.isSpreadElement(prop)) {\n            make();\n            exp.arguments.push(prop.argument);\n          } else {\n            props.push(prop);\n          }\n        }\n\n        if (props.length) make();\n\n        path.replaceWith(exp);\n      },\n    },\n  };\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}