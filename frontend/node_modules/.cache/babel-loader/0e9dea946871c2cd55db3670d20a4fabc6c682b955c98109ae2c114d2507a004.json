{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'no-redeclare',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Disallow variable redeclaration',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        builtinGlobals: {\n          type: 'boolean'\n        },\n        ignoreDeclarationMerge: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      redeclared: \"'{{id}}' is already defined.\",\n      redeclaredAsBuiltin: \"'{{id}}' is already defined as a built-in global variable.\",\n      redeclaredBySyntax: \"'{{id}}' is already defined by a variable declaration.\"\n    }\n  },\n  defaultOptions: [{\n    builtinGlobals: true,\n    ignoreDeclarationMerge: true\n  }],\n  create(context, [options]) {\n    const sourceCode = context.getSourceCode();\n    const CLASS_DECLARATION_MERGE_NODES = new Set([utils_1.AST_NODE_TYPES.TSInterfaceDeclaration, utils_1.AST_NODE_TYPES.TSModuleDeclaration, utils_1.AST_NODE_TYPES.ClassDeclaration]);\n    const FUNCTION_DECLARATION_MERGE_NODES = new Set([utils_1.AST_NODE_TYPES.TSModuleDeclaration, utils_1.AST_NODE_TYPES.FunctionDeclaration]);\n    const ENUM_DECLARATION_MERGE_NODES = new Set([utils_1.AST_NODE_TYPES.TSEnumDeclaration, utils_1.AST_NODE_TYPES.TSModuleDeclaration]);\n    function* iterateDeclarations(variable) {\n      if ((options === null || options === void 0 ? void 0 : options.builtinGlobals) && 'eslintImplicitGlobalSetting' in variable && (variable.eslintImplicitGlobalSetting === 'readonly' || variable.eslintImplicitGlobalSetting === 'writable')) {\n        yield {\n          type: 'builtin'\n        };\n      }\n      if ('eslintExplicitGlobalComments' in variable && variable.eslintExplicitGlobalComments) {\n        for (const comment of variable.eslintExplicitGlobalComments) {\n          yield {\n            type: 'comment',\n            node: comment,\n            loc: util.getNameLocationInGlobalDirectiveComment(sourceCode, comment, variable.name)\n          };\n        }\n      }\n      const identifiers = variable.identifiers.map(id => ({\n        identifier: id,\n        parent: id.parent\n      }))\n      // ignore function declarations because TS will treat them as an overload\n      .filter(({\n        parent\n      }) => parent.type !== utils_1.AST_NODE_TYPES.TSDeclareFunction);\n      if (options.ignoreDeclarationMerge && identifiers.length > 1) {\n        if (\n        // interfaces merging\n        identifiers.every(({\n          parent\n        }) => parent.type === utils_1.AST_NODE_TYPES.TSInterfaceDeclaration)) {\n          return;\n        }\n        if (\n        // namespace/module merging\n        identifiers.every(({\n          parent\n        }) => parent.type === utils_1.AST_NODE_TYPES.TSModuleDeclaration)) {\n          return;\n        }\n        if (\n        // class + interface/namespace merging\n        identifiers.every(({\n          parent\n        }) => CLASS_DECLARATION_MERGE_NODES.has(parent.type))) {\n          const classDecls = identifiers.filter(({\n            parent\n          }) => parent.type === utils_1.AST_NODE_TYPES.ClassDeclaration);\n          if (classDecls.length === 1) {\n            // safe declaration merging\n            return;\n          }\n          // there's more than one class declaration, which needs to be reported\n          for (const {\n            identifier\n          } of classDecls) {\n            yield {\n              type: 'syntax',\n              node: identifier,\n              loc: identifier.loc\n            };\n          }\n          return;\n        }\n        if (\n        // class + interface/namespace merging\n        identifiers.every(({\n          parent\n        }) => FUNCTION_DECLARATION_MERGE_NODES.has(parent.type))) {\n          const functionDecls = identifiers.filter(({\n            parent\n          }) => parent.type === utils_1.AST_NODE_TYPES.FunctionDeclaration);\n          if (functionDecls.length === 1) {\n            // safe declaration merging\n            return;\n          }\n          // there's more than one function declaration, which needs to be reported\n          for (const {\n            identifier\n          } of functionDecls) {\n            yield {\n              type: 'syntax',\n              node: identifier,\n              loc: identifier.loc\n            };\n          }\n          return;\n        }\n        if (\n        // enum + namespace merging\n        identifiers.every(({\n          parent\n        }) => ENUM_DECLARATION_MERGE_NODES.has(parent.type))) {\n          const enumDecls = identifiers.filter(({\n            parent\n          }) => parent.type === utils_1.AST_NODE_TYPES.TSEnumDeclaration);\n          if (enumDecls.length === 1) {\n            // safe declaration merging\n            return;\n          }\n          // there's more than one enum declaration, which needs to be reported\n          for (const {\n            identifier\n          } of enumDecls) {\n            yield {\n              type: 'syntax',\n              node: identifier,\n              loc: identifier.loc\n            };\n          }\n          return;\n        }\n      }\n      for (const {\n        identifier\n      } of identifiers) {\n        yield {\n          type: 'syntax',\n          node: identifier,\n          loc: identifier.loc\n        };\n      }\n    }\n    function findVariablesInScope(scope) {\n      for (const variable of scope.variables) {\n        const [declaration, ...extraDeclarations] = iterateDeclarations(variable);\n        if (extraDeclarations.length === 0) {\n          continue;\n        }\n        /*\n         * If the type of a declaration is different from the type of\n         * the first declaration, it shows the location of the first\n         * declaration.\n         */\n        const detailMessageId = declaration.type === 'builtin' ? 'redeclaredAsBuiltin' : 'redeclaredBySyntax';\n        const data = {\n          id: variable.name\n        };\n        // Report extra declarations.\n        for (const {\n          type,\n          node,\n          loc\n        } of extraDeclarations) {\n          const messageId = type === declaration.type ? 'redeclared' : detailMessageId;\n          if (node) {\n            context.report({\n              node,\n              loc,\n              messageId,\n              data\n            });\n          } else if (loc) {\n            context.report({\n              loc,\n              messageId,\n              data\n            });\n          }\n        }\n      }\n    }\n    /**\n     * Find variables in the current scope.\n     */\n    function checkForBlock(node) {\n      const scope = context.getScope();\n      /*\n       * In ES5, some node type such as `BlockStatement` doesn't have that scope.\n       * `scope.block` is a different node in such a case.\n       */\n      if (scope.block === node) {\n        findVariablesInScope(scope);\n      }\n    }\n    return {\n      Program() {\n        const scope = context.getScope();\n        findVariablesInScope(scope);\n        // Node.js or ES modules has a special scope.\n        if (scope.type === 'global' && scope.childScopes[0] &&\n        // The special scope's block is the Program node.\n        scope.block === scope.childScopes[0].block) {\n          findVariablesInScope(scope.childScopes[0]);\n        }\n      },\n      FunctionDeclaration: checkForBlock,\n      FunctionExpression: checkForBlock,\n      ArrowFunctionExpression: checkForBlock,\n      BlockStatement: checkForBlock,\n      ForStatement: checkForBlock,\n      ForInStatement: checkForBlock,\n      ForOfStatement: checkForBlock,\n      SwitchStatement: checkForBlock\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","schema","properties","builtinGlobals","ignoreDeclarationMerge","additionalProperties","messages","redeclared","redeclaredAsBuiltin","redeclaredBySyntax","defaultOptions","create","context","options","sourceCode","getSourceCode","CLASS_DECLARATION_MERGE_NODES","Set","AST_NODE_TYPES","TSInterfaceDeclaration","TSModuleDeclaration","ClassDeclaration","FUNCTION_DECLARATION_MERGE_NODES","FunctionDeclaration","ENUM_DECLARATION_MERGE_NODES","TSEnumDeclaration","iterateDeclarations","variable","eslintImplicitGlobalSetting","eslintExplicitGlobalComments","comment","node","loc","getNameLocationInGlobalDirectiveComment","identifiers","map","id","identifier","parent","filter","TSDeclareFunction","length","every","has","classDecls","functionDecls","enumDecls","findVariablesInScope","scope","variables","declaration","extraDeclarations","detailMessageId","data","messageId","report","checkForBlock","getScope","block","Program","childScopes","FunctionExpression","ArrowFunctionExpression","BlockStatement","ForStatement","ForInStatement","ForOfStatement","SwitchStatement"],"sources":["../../src/rules/no-redeclare.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AAUAG,OAAA,CAAAC,OAAA,GAAeH,IAAI,CAACI,UAAU,CAAsB;EAClDC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAE;IACJC,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE;MACJC,WAAW,EAAE,iCAAiC;MAC9CC,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE;KAClB;IACDC,MAAM,EAAE,CACN;MACEL,IAAI,EAAE,QAAQ;MACdM,UAAU,EAAE;QACVC,cAAc,EAAE;UACdP,IAAI,EAAE;SACP;QACDQ,sBAAsB,EAAE;UACtBR,IAAI,EAAE;;OAET;MACDS,oBAAoB,EAAE;KACvB,CACF;IACDC,QAAQ,EAAE;MACRC,UAAU,EAAE,8BAA8B;MAC1CC,mBAAmB,EACjB,4DAA4D;MAC9DC,kBAAkB,EAChB;;GAEL;EACDC,cAAc,EAAE,CACd;IACEP,cAAc,EAAE,IAAI;IACpBC,sBAAsB,EAAE;GACzB,CACF;EACDO,MAAMA,CAACC,OAAO,EAAE,CAACC,OAAO,CAAC;IACvB,MAAMC,UAAU,GAAGF,OAAO,CAACG,aAAa,EAAE;IAE1C,MAAMC,6BAA6B,GAAG,IAAIC,GAAG,CAAiB,CAC5D9B,OAAA,CAAA+B,cAAc,CAACC,sBAAsB,EACrChC,OAAA,CAAA+B,cAAc,CAACE,mBAAmB,EAClCjC,OAAA,CAAA+B,cAAc,CAACG,gBAAgB,CAChC,CAAC;IACF,MAAMC,gCAAgC,GAAG,IAAIL,GAAG,CAAiB,CAC/D9B,OAAA,CAAA+B,cAAc,CAACE,mBAAmB,EAClCjC,OAAA,CAAA+B,cAAc,CAACK,mBAAmB,CACnC,CAAC;IACF,MAAMC,4BAA4B,GAAG,IAAIP,GAAG,CAAiB,CAC3D9B,OAAA,CAAA+B,cAAc,CAACO,iBAAiB,EAChCtC,OAAA,CAAA+B,cAAc,CAACE,mBAAmB,CACnC,CAAC;IAEF,UAAUM,mBAAmBA,CAACC,QAAiC;MAS7D,IACE,CAAAd,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEV,cAAc,KACvB,6BAA6B,IAAIwB,QAAQ,KACxCA,QAAQ,CAACC,2BAA2B,KAAK,UAAU,IAClDD,QAAQ,CAACC,2BAA2B,KAAK,UAAU,CAAC,EACtD;QACA,MAAM;UAAEhC,IAAI,EAAE;QAAS,CAAE;;MAG3B,IACE,8BAA8B,IAAI+B,QAAQ,IAC1CA,QAAQ,CAACE,4BAA4B,EACrC;QACA,KAAK,MAAMC,OAAO,IAAIH,QAAQ,CAACE,4BAA4B,EAAE;UAC3D,MAAM;YACJjC,IAAI,EAAE,SAAS;YACfmC,IAAI,EAAED,OAAO;YACbE,GAAG,EAAE3C,IAAI,CAAC4C,uCAAuC,CAC/CnB,UAAU,EACVgB,OAAO,EACPH,QAAQ,CAACjC,IAAI;WAEhB;;;MAIL,MAAMwC,WAAW,GAAGP,QAAQ,CAACO,WAAW,CACrCC,GAAG,CAACC,EAAE,KAAK;QACVC,UAAU,EAAED,EAAE;QACdE,MAAM,EAAEF,EAAE,CAACE;OACZ,CAAC;MACF;MAAA,CACCC,MAAM,CACL,CAAC;QAAED;MAAM,CAAE,KAAKA,MAAM,CAAC1C,IAAI,KAAKT,OAAA,CAAA+B,cAAc,CAACsB,iBAAiB,CACjE;MAEH,IAAI3B,OAAO,CAACT,sBAAsB,IAAI8B,WAAW,CAACO,MAAM,GAAG,CAAC,EAAE;QAC5D;QACE;QACAP,WAAW,CAACQ,KAAK,CACf,CAAC;UAAEJ;QAAM,CAAE,KACTA,MAAM,CAAC1C,IAAI,KAAKT,OAAA,CAAA+B,cAAc,CAACC,sBAAsB,CACxD,EACD;UACA;;QAGF;QACE;QACAe,WAAW,CAACQ,KAAK,CACf,CAAC;UAAEJ;QAAM,CAAE,KAAKA,MAAM,CAAC1C,IAAI,KAAKT,OAAA,CAAA+B,cAAc,CAACE,mBAAmB,CACnE,EACD;UACA;;QAGF;QACE;QACAc,WAAW,CAACQ,KAAK,CAAC,CAAC;UAAEJ;QAAM,CAAE,KAC3BtB,6BAA6B,CAAC2B,GAAG,CAACL,MAAM,CAAC1C,IAAI,CAAC,CAC/C,EACD;UACA,MAAMgD,UAAU,GAAGV,WAAW,CAACK,MAAM,CACnC,CAAC;YAAED;UAAM,CAAE,KAAKA,MAAM,CAAC1C,IAAI,KAAKT,OAAA,CAAA+B,cAAc,CAACG,gBAAgB,CAChE;UACD,IAAIuB,UAAU,CAACH,MAAM,KAAK,CAAC,EAAE;YAC3B;YACA;;UAGF;UACA,KAAK,MAAM;YAAEJ;UAAU,CAAE,IAAIO,UAAU,EAAE;YACvC,MAAM;cAAEhD,IAAI,EAAE,QAAQ;cAAEmC,IAAI,EAAEM,UAAU;cAAEL,GAAG,EAAEK,UAAU,CAACL;YAAG,CAAE;;UAEjE;;QAGF;QACE;QACAE,WAAW,CAACQ,KAAK,CAAC,CAAC;UAAEJ;QAAM,CAAE,KAC3BhB,gCAAgC,CAACqB,GAAG,CAACL,MAAM,CAAC1C,IAAI,CAAC,CAClD,EACD;UACA,MAAMiD,aAAa,GAAGX,WAAW,CAACK,MAAM,CACtC,CAAC;YAAED;UAAM,CAAE,KAAKA,MAAM,CAAC1C,IAAI,KAAKT,OAAA,CAAA+B,cAAc,CAACK,mBAAmB,CACnE;UACD,IAAIsB,aAAa,CAACJ,MAAM,KAAK,CAAC,EAAE;YAC9B;YACA;;UAGF;UACA,KAAK,MAAM;YAAEJ;UAAU,CAAE,IAAIQ,aAAa,EAAE;YAC1C,MAAM;cAAEjD,IAAI,EAAE,QAAQ;cAAEmC,IAAI,EAAEM,UAAU;cAAEL,GAAG,EAAEK,UAAU,CAACL;YAAG,CAAE;;UAEjE;;QAGF;QACE;QACAE,WAAW,CAACQ,KAAK,CAAC,CAAC;UAAEJ;QAAM,CAAE,KAC3Bd,4BAA4B,CAACmB,GAAG,CAACL,MAAM,CAAC1C,IAAI,CAAC,CAC9C,EACD;UACA,MAAMkD,SAAS,GAAGZ,WAAW,CAACK,MAAM,CAClC,CAAC;YAAED;UAAM,CAAE,KAAKA,MAAM,CAAC1C,IAAI,KAAKT,OAAA,CAAA+B,cAAc,CAACO,iBAAiB,CACjE;UACD,IAAIqB,SAAS,CAACL,MAAM,KAAK,CAAC,EAAE;YAC1B;YACA;;UAGF;UACA,KAAK,MAAM;YAAEJ;UAAU,CAAE,IAAIS,SAAS,EAAE;YACtC,MAAM;cAAElD,IAAI,EAAE,QAAQ;cAAEmC,IAAI,EAAEM,UAAU;cAAEL,GAAG,EAAEK,UAAU,CAACL;YAAG,CAAE;;UAEjE;;;MAIJ,KAAK,MAAM;QAAEK;MAAU,CAAE,IAAIH,WAAW,EAAE;QACxC,MAAM;UAAEtC,IAAI,EAAE,QAAQ;UAAEmC,IAAI,EAAEM,UAAU;UAAEL,GAAG,EAAEK,UAAU,CAACL;QAAG,CAAE;;IAEnE;IAEA,SAASe,oBAAoBA,CAACC,KAA2B;MACvD,KAAK,MAAMrB,QAAQ,IAAIqB,KAAK,CAACC,SAAS,EAAE;QACtC,MAAM,CAACC,WAAW,EAAE,GAAGC,iBAAiB,CAAC,GACvCzB,mBAAmB,CAACC,QAAQ,CAAC;QAE/B,IAAIwB,iBAAiB,CAACV,MAAM,KAAK,CAAC,EAAE;UAClC;;QAGF;;;;;QAKA,MAAMW,eAAe,GACnBF,WAAW,CAACtD,IAAI,KAAK,SAAS,GAC1B,qBAAqB,GACrB,oBAAoB;QAC1B,MAAMyD,IAAI,GAAG;UAAEjB,EAAE,EAAET,QAAQ,CAACjC;QAAI,CAAE;QAElC;QACA,KAAK,MAAM;UAAEE,IAAI;UAAEmC,IAAI;UAAEC;QAAG,CAAE,IAAImB,iBAAiB,EAAE;UACnD,MAAMG,SAAS,GACb1D,IAAI,KAAKsD,WAAW,CAACtD,IAAI,GAAG,YAAY,GAAGwD,eAAe;UAE5D,IAAIrB,IAAI,EAAE;YACRnB,OAAO,CAAC2C,MAAM,CAAC;cAAExB,IAAI;cAAEC,GAAG;cAAEsB,SAAS;cAAED;YAAI,CAAE,CAAC;WAC/C,MAAM,IAAIrB,GAAG,EAAE;YACdpB,OAAO,CAAC2C,MAAM,CAAC;cAAEvB,GAAG;cAAEsB,SAAS;cAAED;YAAI,CAAE,CAAC;;;;IAIhD;IAEA;;;IAGA,SAASG,aAAaA,CAACzB,IAAmB;MACxC,MAAMiB,KAAK,GAAGpC,OAAO,CAAC6C,QAAQ,EAAE;MAEhC;;;;MAIA,IAAIT,KAAK,CAACU,KAAK,KAAK3B,IAAI,EAAE;QACxBgB,oBAAoB,CAACC,KAAK,CAAC;;IAE/B;IAEA,OAAO;MACLW,OAAOA,CAAA;QACL,MAAMX,KAAK,GAAGpC,OAAO,CAAC6C,QAAQ,EAAE;QAEhCV,oBAAoB,CAACC,KAAK,CAAC;QAE3B;QACA,IACEA,KAAK,CAACpD,IAAI,KAAK,QAAQ,IACvBoD,KAAK,CAACY,WAAW,CAAC,CAAC,CAAC;QACpB;QACAZ,KAAK,CAACU,KAAK,KAAKV,KAAK,CAACY,WAAW,CAAC,CAAC,CAAC,CAACF,KAAK,EAC1C;UACAX,oBAAoB,CAACC,KAAK,CAACY,WAAW,CAAC,CAAC,CAAC,CAAC;;MAE9C,CAAC;MAEDrC,mBAAmB,EAAEiC,aAAa;MAClCK,kBAAkB,EAAEL,aAAa;MACjCM,uBAAuB,EAAEN,aAAa;MAEtCO,cAAc,EAAEP,aAAa;MAC7BQ,YAAY,EAAER,aAAa;MAC3BS,cAAc,EAAET,aAAa;MAC7BU,cAAc,EAAEV,aAAa;MAC7BW,eAAe,EAAEX;KAClB;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}