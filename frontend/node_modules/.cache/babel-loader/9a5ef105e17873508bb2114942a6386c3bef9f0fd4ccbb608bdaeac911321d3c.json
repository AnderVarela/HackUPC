{"ast":null,"code":"import { SetArray, put, remove } from '@jridgewell/set-array';\nimport { encode } from '@jridgewell/sourcemap-codec';\nimport { TraceMap, decodedMappings } from '@jridgewell/trace-mapping';\nconst COLUMN = 0;\nconst SOURCES_INDEX = 1;\nconst SOURCE_LINE = 2;\nconst SOURCE_COLUMN = 3;\nconst NAMES_INDEX = 4;\nconst NO_NAME = -1;\n/**\n * Provides the state to generate a sourcemap.\n */\nclass GenMapping {\n  constructor({\n    file,\n    sourceRoot\n  } = {}) {\n    this._names = new SetArray();\n    this._sources = new SetArray();\n    this._sourcesContent = [];\n    this._mappings = [];\n    this.file = file;\n    this.sourceRoot = sourceRoot;\n    this._ignoreList = new SetArray();\n  }\n}\n/**\n * Typescript doesn't allow friend access to private fields, so this just casts the map into a type\n * with public access modifiers.\n */\nfunction cast(map) {\n  return map;\n}\nfunction addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {\n  return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);\n}\nfunction addMapping(map, mapping) {\n  return addMappingInternal(false, map, mapping);\n}\n/**\n * Same as `addSegment`, but will only add the segment if it generates useful information in the\n * resulting map. This only works correctly if segments are added **in order**, meaning you should\n * not add a segment with a lower generated line/column than one that came before.\n */\nconst maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {\n  return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);\n};\n/**\n * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n * not add a mapping with a lower generated line/column than one that came before.\n */\nconst maybeAddMapping = (map, mapping) => {\n  return addMappingInternal(true, map, mapping);\n};\n/**\n * Adds/removes the content of the source file to the source map.\n */\nfunction setSourceContent(map, source, content) {\n  const {\n    _sources: sources,\n    _sourcesContent: sourcesContent\n  } = cast(map);\n  const index = put(sources, source);\n  sourcesContent[index] = content;\n}\nfunction setIgnore(map, source, ignore = true) {\n  const {\n    _sources: sources,\n    _sourcesContent: sourcesContent,\n    _ignoreList: ignoreList\n  } = cast(map);\n  const index = put(sources, source);\n  if (index === sourcesContent.length) sourcesContent[index] = null;\n  if (ignore) put(ignoreList, index);else remove(ignoreList, index);\n}\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nfunction toDecodedMap(map) {\n  const {\n    _mappings: mappings,\n    _sources: sources,\n    _sourcesContent: sourcesContent,\n    _names: names,\n    _ignoreList: ignoreList\n  } = cast(map);\n  removeEmptyFinalLines(mappings);\n  return {\n    version: 3,\n    file: map.file || undefined,\n    names: names.array,\n    sourceRoot: map.sourceRoot || undefined,\n    sources: sources.array,\n    sourcesContent,\n    mappings,\n    ignoreList: ignoreList.array\n  };\n}\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nfunction toEncodedMap(map) {\n  const decoded = toDecodedMap(map);\n  return Object.assign(Object.assign({}, decoded), {\n    mappings: encode(decoded.mappings)\n  });\n}\n/**\n * Constructs a new GenMapping, using the already present mappings of the input.\n */\nfunction fromMap(input) {\n  const map = new TraceMap(input);\n  const gen = new GenMapping({\n    file: map.file,\n    sourceRoot: map.sourceRoot\n  });\n  putAll(cast(gen)._names, map.names);\n  putAll(cast(gen)._sources, map.sources);\n  cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n  cast(gen)._mappings = decodedMappings(map);\n  if (map.ignoreList) putAll(cast(gen)._ignoreList, map.ignoreList);\n  return gen;\n}\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nfunction allMappings(map) {\n  const out = [];\n  const {\n    _mappings: mappings,\n    _sources: sources,\n    _names: names\n  } = cast(map);\n  for (let i = 0; i < mappings.length; i++) {\n    const line = mappings[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n      const generated = {\n        line: i + 1,\n        column: seg[COLUMN]\n      };\n      let source = undefined;\n      let original = undefined;\n      let name = undefined;\n      if (seg.length !== 1) {\n        source = sources.array[seg[SOURCES_INDEX]];\n        original = {\n          line: seg[SOURCE_LINE] + 1,\n          column: seg[SOURCE_COLUMN]\n        };\n        if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];\n      }\n      out.push({\n        generated,\n        source,\n        original,\n        name\n      });\n    }\n  }\n  return out;\n}\n// This split declaration is only so that terser can elminiate the static initialization block.\nfunction addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {\n  const {\n    _mappings: mappings,\n    _sources: sources,\n    _sourcesContent: sourcesContent,\n    _names: names\n  } = cast(map);\n  const line = getLine(mappings, genLine);\n  const index = getColumnIndex(line, genColumn);\n  if (!source) {\n    if (skipable && skipSourceless(line, index)) return;\n    return insert(line, index, [genColumn]);\n  }\n  const sourcesIndex = put(sources, source);\n  const namesIndex = name ? put(names, name) : NO_NAME;\n  if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;\n  if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n    return;\n  }\n  return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);\n}\nfunction getLine(mappings, index) {\n  for (let i = mappings.length; i <= index; i++) {\n    mappings[i] = [];\n  }\n  return mappings[index];\n}\nfunction getColumnIndex(line, genColumn) {\n  let index = line.length;\n  for (let i = index - 1; i >= 0; index = i--) {\n    const current = line[i];\n    if (genColumn >= current[COLUMN]) break;\n  }\n  return index;\n}\nfunction insert(array, index, value) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\nfunction removeEmptyFinalLines(mappings) {\n  const {\n    length\n  } = mappings;\n  let len = length;\n  for (let i = len - 1; i >= 0; len = i, i--) {\n    if (mappings[i].length > 0) break;\n  }\n  if (len < length) mappings.length = len;\n}\nfunction putAll(setarr, array) {\n  for (let i = 0; i < array.length; i++) put(setarr, array[i]);\n}\nfunction skipSourceless(line, index) {\n  // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n  // doesn't generate any useful information.\n  if (index === 0) return true;\n  const prev = line[index - 1];\n  // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n  // genrate any new information. Else, this segment will end the source/named segment and point to\n  // a sourceless position, which is useful.\n  return prev.length === 1;\n}\nfunction skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {\n  // A source/named segment at the start of a line gives position at that genColumn\n  if (index === 0) return false;\n  const prev = line[index - 1];\n  // If the previous segment is sourceless, then we're transitioning to a source.\n  if (prev.length === 1) return false;\n  // If the previous segment maps to the exact same source position, then this segment doesn't\n  // provide any new position information.\n  return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);\n}\nfunction addMappingInternal(skipable, map, mapping) {\n  const {\n    generated,\n    source,\n    original,\n    name,\n    content\n  } = mapping;\n  if (!source) {\n    return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);\n  }\n  return addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content);\n}\nexport { GenMapping, addMapping, addSegment, allMappings, fromMap, maybeAddMapping, maybeAddSegment, setIgnore, setSourceContent, toDecodedMap, toEncodedMap };","map":{"version":3,"names":["COLUMN","SOURCES_INDEX","SOURCE_LINE","SOURCE_COLUMN","NAMES_INDEX","NO_NAME","GenMapping","constructor","file","sourceRoot","_names","SetArray","_sources","_sourcesContent","_mappings","_ignoreList","cast","map","addSegment","genLine","genColumn","source","sourceLine","sourceColumn","name","content","addSegmentInternal","addMapping","mapping","addMappingInternal","maybeAddSegment","maybeAddMapping","setSourceContent","sources","sourcesContent","index","put","setIgnore","ignore","ignoreList","length","remove","toDecodedMap","mappings","names","removeEmptyFinalLines","version","undefined","array","toEncodedMap","decoded","Object","assign","encode","fromMap","input","TraceMap","gen","putAll","decodedMappings","allMappings","out","i","line","j","seg","generated","column","original","push","skipable","getLine","getColumnIndex","skipSourceless","insert","sourcesIndex","namesIndex","skipSource","current","value","len","setarr","prev"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@jridgewell\\gen-mapping\\src\\sourcemap-segment.ts","C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@jridgewell\\gen-mapping\\src\\gen-mapping.ts"],"sourcesContent":["type GeneratedColumn = number;\ntype SourcesIndex = number;\ntype SourceLine = number;\ntype SourceColumn = number;\ntype NamesIndex = number;\n\nexport type SourceMapSegment =\n  | [GeneratedColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];\n\nexport const COLUMN = 0;\nexport const SOURCES_INDEX = 1;\nexport const SOURCE_LINE = 2;\nexport const SOURCE_COLUMN = 3;\nexport const NAMES_INDEX = 4;\n","import { SetArray, put, remove } from '@jridgewell/set-array';\nimport { encode } from '@jridgewell/sourcemap-codec';\nimport { TraceMap, decodedMappings } from '@jridgewell/trace-mapping';\n\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n} from './sourcemap-segment';\n\nimport type { SourceMapInput } from '@jridgewell/trace-mapping';\nimport type { SourceMapSegment } from './sourcemap-segment';\nimport type { DecodedSourceMap, EncodedSourceMap, Pos, Mapping } from './types';\n\nexport type { DecodedSourceMap, EncodedSourceMap, Mapping };\n\nexport type Options = {\n  file?: string | null;\n  sourceRoot?: string | null;\n};\n\nconst NO_NAME = -1;\n\n/**\n * Provides the state to generate a sourcemap.\n */\nexport class GenMapping {\n  private declare _names: SetArray<string>;\n  private declare _sources: SetArray<string>;\n  private declare _sourcesContent: (string | null)[];\n  private declare _mappings: SourceMapSegment[][];\n  private declare _ignoreList: SetArray<number>;\n  declare file: string | null | undefined;\n  declare sourceRoot: string | null | undefined;\n\n  constructor({ file, sourceRoot }: Options = {}) {\n    this._names = new SetArray();\n    this._sources = new SetArray();\n    this._sourcesContent = [];\n    this._mappings = [];\n    this.file = file;\n    this.sourceRoot = sourceRoot;\n    this._ignoreList = new SetArray();\n  }\n}\n\ninterface PublicMap {\n  _names: GenMapping['_names'];\n  _sources: GenMapping['_sources'];\n  _sourcesContent: GenMapping['_sourcesContent'];\n  _mappings: GenMapping['_mappings'];\n  _ignoreList: GenMapping['_ignoreList'];\n}\n\n/**\n * Typescript doesn't allow friend access to private fields, so this just casts the map into a type\n * with public access modifiers.\n */\nfunction cast(map: unknown): PublicMap {\n  return map as any;\n}\n\n/**\n * A low-level API to associate a generated position with an original source position. Line and\n * column here are 0-based, unlike `addMapping`.\n */\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source?: null,\n  sourceLine?: null,\n  sourceColumn?: null,\n  name?: null,\n  content?: null,\n): void;\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: string,\n  sourceLine: number,\n  sourceColumn: number,\n  name?: null,\n  content?: string | null,\n): void;\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: string,\n  sourceLine: number,\n  sourceColumn: number,\n  name: string,\n  content?: string | null,\n): void;\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source?: string | null,\n  sourceLine?: number | null,\n  sourceColumn?: number | null,\n  name?: string | null,\n  content?: string | null,\n): void {\n  return addSegmentInternal(\n    false,\n    map,\n    genLine,\n    genColumn,\n    source,\n    sourceLine,\n    sourceColumn,\n    name,\n    content,\n  );\n}\n\n/**\n * A high-level API to associate a generated position with an original source position. Line is\n * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n */\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source?: null;\n    original?: null;\n    name?: null;\n    content?: null;\n  },\n): void;\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: string;\n    original: Pos;\n    name?: null;\n    content?: string | null;\n  },\n): void;\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: string;\n    original: Pos;\n    name: string;\n    content?: string | null;\n  },\n): void;\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source?: string | null;\n    original?: Pos | null;\n    name?: string | null;\n    content?: string | null;\n  },\n): void {\n  return addMappingInternal(false, map, mapping as Parameters<typeof addMappingInternal>[2]);\n}\n\n/**\n * Same as `addSegment`, but will only add the segment if it generates useful information in the\n * resulting map. This only works correctly if segments are added **in order**, meaning you should\n * not add a segment with a lower generated line/column than one that came before.\n */\nexport const maybeAddSegment: typeof addSegment = (\n  map,\n  genLine,\n  genColumn,\n  source,\n  sourceLine,\n  sourceColumn,\n  name,\n  content,\n) => {\n  return addSegmentInternal(\n    true,\n    map,\n    genLine,\n    genColumn,\n    source,\n    sourceLine,\n    sourceColumn,\n    name,\n    content,\n  );\n};\n\n/**\n * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n * not add a mapping with a lower generated line/column than one that came before.\n */\nexport const maybeAddMapping: typeof addMapping = (map, mapping) => {\n  return addMappingInternal(true, map, mapping as Parameters<typeof addMappingInternal>[2]);\n};\n\n/**\n * Adds/removes the content of the source file to the source map.\n */\nexport function setSourceContent(map: GenMapping, source: string, content: string | null): void {\n  const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);\n  const index = put(sources, source);\n  sourcesContent[index] = content;\n}\n\nexport function setIgnore(map: GenMapping, source: string, ignore = true) {\n  const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map);\n  const index = put(sources, source);\n  if (index === sourcesContent.length) sourcesContent[index] = null;\n  if (ignore) put(ignoreList, index);\n  else remove(ignoreList, index);\n}\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport function toDecodedMap(map: GenMapping): DecodedSourceMap {\n  const {\n    _mappings: mappings,\n    _sources: sources,\n    _sourcesContent: sourcesContent,\n    _names: names,\n    _ignoreList: ignoreList,\n  } = cast(map);\n  removeEmptyFinalLines(mappings);\n\n  return {\n    version: 3,\n    file: map.file || undefined,\n    names: names.array,\n    sourceRoot: map.sourceRoot || undefined,\n    sources: sources.array,\n    sourcesContent,\n    mappings,\n    ignoreList: ignoreList.array,\n  };\n}\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport function toEncodedMap(map: GenMapping): EncodedSourceMap {\n  const decoded = toDecodedMap(map);\n  return {\n    ...decoded,\n    mappings: encode(decoded.mappings as SourceMapSegment[][]),\n  };\n}\n\n/**\n * Constructs a new GenMapping, using the already present mappings of the input.\n */\nexport function fromMap(input: SourceMapInput): GenMapping {\n  const map = new TraceMap(input);\n  const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });\n\n  putAll(cast(gen)._names, map.names);\n  putAll(cast(gen)._sources, map.sources as string[]);\n  cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n  cast(gen)._mappings = decodedMappings(map) as GenMapping['_mappings'];\n  if (map.ignoreList) putAll(cast(gen)._ignoreList, map.ignoreList);\n\n  return gen;\n}\n\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nexport function allMappings(map: GenMapping): Mapping[] {\n  const out: Mapping[] = [];\n  const { _mappings: mappings, _sources: sources, _names: names } = cast(map);\n\n  for (let i = 0; i < mappings.length; i++) {\n    const line = mappings[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n\n      const generated = { line: i + 1, column: seg[COLUMN] };\n      let source: string | undefined = undefined;\n      let original: Pos | undefined = undefined;\n      let name: string | undefined = undefined;\n\n      if (seg.length !== 1) {\n        source = sources.array[seg[SOURCES_INDEX]];\n        original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };\n\n        if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];\n      }\n\n      out.push({ generated, source, original, name } as Mapping);\n    }\n  }\n\n  return out;\n}\n\n// This split declaration is only so that terser can elminiate the static initialization block.\nfunction addSegmentInternal<S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: S,\n  sourceLine: S extends string ? number : null | undefined,\n  sourceColumn: S extends string ? number : null | undefined,\n  name: S extends string ? string | null | undefined : null | undefined,\n  content: S extends string ? string | null | undefined : null | undefined,\n): void {\n  const {\n    _mappings: mappings,\n    _sources: sources,\n    _sourcesContent: sourcesContent,\n    _names: names,\n  } = cast(map);\n  const line = getLine(mappings, genLine);\n  const index = getColumnIndex(line, genColumn);\n\n  if (!source) {\n    if (skipable && skipSourceless(line, index)) return;\n    return insert(line, index, [genColumn]);\n  }\n\n  // Sigh, TypeScript can't figure out sourceLine and sourceColumn aren't nullish if source\n  // isn't nullish.\n  assert<number>(sourceLine);\n  assert<number>(sourceColumn);\n\n  const sourcesIndex = put(sources, source);\n  const namesIndex = name ? put(names, name) : NO_NAME;\n  if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content ?? null;\n\n  if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n    return;\n  }\n\n  return insert(\n    line,\n    index,\n    name\n      ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n      : [genColumn, sourcesIndex, sourceLine, sourceColumn],\n  );\n}\n\nfunction assert<T>(_val: unknown): asserts _val is T {\n  // noop.\n}\n\nfunction getLine(mappings: SourceMapSegment[][], index: number): SourceMapSegment[] {\n  for (let i = mappings.length; i <= index; i++) {\n    mappings[i] = [];\n  }\n  return mappings[index];\n}\n\nfunction getColumnIndex(line: SourceMapSegment[], genColumn: number): number {\n  let index = line.length;\n  for (let i = index - 1; i >= 0; index = i--) {\n    const current = line[i];\n    if (genColumn >= current[COLUMN]) break;\n  }\n  return index;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n\nfunction removeEmptyFinalLines(mappings: SourceMapSegment[][]) {\n  const { length } = mappings;\n  let len = length;\n  for (let i = len - 1; i >= 0; len = i, i--) {\n    if (mappings[i].length > 0) break;\n  }\n  if (len < length) mappings.length = len;\n}\n\nfunction putAll<T extends string | number>(setarr: SetArray<T>, array: T[]) {\n  for (let i = 0; i < array.length; i++) put(setarr, array[i]);\n}\n\nfunction skipSourceless(line: SourceMapSegment[], index: number): boolean {\n  // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n  // doesn't generate any useful information.\n  if (index === 0) return true;\n\n  const prev = line[index - 1];\n  // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n  // genrate any new information. Else, this segment will end the source/named segment and point to\n  // a sourceless position, which is useful.\n  return prev.length === 1;\n}\n\nfunction skipSource(\n  line: SourceMapSegment[],\n  index: number,\n  sourcesIndex: number,\n  sourceLine: number,\n  sourceColumn: number,\n  namesIndex: number,\n): boolean {\n  // A source/named segment at the start of a line gives position at that genColumn\n  if (index === 0) return false;\n\n  const prev = line[index - 1];\n\n  // If the previous segment is sourceless, then we're transitioning to a source.\n  if (prev.length === 1) return false;\n\n  // If the previous segment maps to the exact same source position, then this segment doesn't\n  // provide any new position information.\n  return (\n    sourcesIndex === prev[SOURCES_INDEX] &&\n    sourceLine === prev[SOURCE_LINE] &&\n    sourceColumn === prev[SOURCE_COLUMN] &&\n    namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME)\n  );\n}\n\nfunction addMappingInternal<S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: S;\n    original: S extends string ? Pos : null | undefined;\n    name: S extends string ? string | null | undefined : null | undefined;\n    content: S extends string ? string | null | undefined : null | undefined;\n  },\n) {\n  const { generated, source, original, name, content } = mapping;\n  if (!source) {\n    return addSegmentInternal(\n      skipable,\n      map,\n      generated.line - 1,\n      generated.column,\n      null,\n      null,\n      null,\n      null,\n      null,\n    );\n  }\n  assert<Pos>(original);\n  return addSegmentInternal(\n    skipable,\n    map,\n    generated.line - 1,\n    generated.column,\n    source as string,\n    original.line - 1,\n    original.column,\n    name,\n    content,\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}