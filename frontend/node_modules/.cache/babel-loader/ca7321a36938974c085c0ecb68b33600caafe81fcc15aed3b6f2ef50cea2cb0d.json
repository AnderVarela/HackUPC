{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadPlugin = loadPlugin;\nexports.loadPreset = loadPreset;\nexports.resolvePreset = exports.resolvePlugin = void 0;\nfunction _debug() {\n  const data = require(\"debug\");\n  _debug = function () {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  const data = require(\"path\");\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nvar _async = require(\"../../gensync-utils/async.js\");\nvar _moduleTypes = require(\"./module-types.js\");\nfunction _url() {\n  const data = require(\"url\");\n  _url = function () {\n    return data;\n  };\n  return data;\n}\nvar _importMetaResolve = require(\"../../vendor/import-meta-resolve.js\");\nfunction _fs() {\n  const data = require(\"fs\");\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nconst debug = _debug()(\"babel:config:loading:files:plugins\");\nconst EXACT_RE = /^module:/;\nconst BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\\/|babel-plugin-)/;\nconst BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\\/|babel-preset-)/;\nconst BABEL_PLUGIN_ORG_RE = /^(@babel\\/)(?!plugin-|[^/]+\\/)/;\nconst BABEL_PRESET_ORG_RE = /^(@babel\\/)(?!preset-|[^/]+\\/)/;\nconst OTHER_PLUGIN_ORG_RE = /^(@(?!babel\\/)[^/]+\\/)(?![^/]*babel-plugin(?:-|\\/|$)|[^/]+\\/)/;\nconst OTHER_PRESET_ORG_RE = /^(@(?!babel\\/)[^/]+\\/)(?![^/]*babel-preset(?:-|\\/|$)|[^/]+\\/)/;\nconst OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;\nconst resolvePlugin = exports.resolvePlugin = resolveStandardizedName.bind(null, \"plugin\");\nconst resolvePreset = exports.resolvePreset = resolveStandardizedName.bind(null, \"preset\");\nfunction* loadPlugin(name, dirname) {\n  const filepath = resolvePlugin(name, dirname, yield* (0, _async.isAsync)());\n  const value = yield* requireModule(\"plugin\", filepath);\n  debug(\"Loaded plugin %o from %o.\", name, dirname);\n  return {\n    filepath,\n    value\n  };\n}\nfunction* loadPreset(name, dirname) {\n  const filepath = resolvePreset(name, dirname, yield* (0, _async.isAsync)());\n  const value = yield* requireModule(\"preset\", filepath);\n  debug(\"Loaded preset %o from %o.\", name, dirname);\n  return {\n    filepath,\n    value\n  };\n}\nfunction standardizeName(type, name) {\n  if (_path().isAbsolute(name)) return name;\n  const isPreset = type === \"preset\";\n  return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`).replace(EXACT_RE, \"\");\n}\nfunction* resolveAlternativesHelper(type, name) {\n  const standardizedName = standardizeName(type, name);\n  const {\n    error,\n    value\n  } = yield standardizedName;\n  if (!error) return value;\n  if (error.code !== \"MODULE_NOT_FOUND\") throw error;\n  if (standardizedName !== name && !(yield name).error) {\n    error.message += `\\n- If you want to resolve \"${name}\", use \"module:${name}\"`;\n  }\n  if (!(yield standardizeName(type, \"@babel/\" + name)).error) {\n    error.message += `\\n- Did you mean \"@babel/${name}\"?`;\n  }\n  const oppositeType = type === \"preset\" ? \"plugin\" : \"preset\";\n  if (!(yield standardizeName(oppositeType, name)).error) {\n    error.message += `\\n- Did you accidentally pass a ${oppositeType} as a ${type}?`;\n  }\n  if (type === \"plugin\") {\n    const transformName = standardizedName.replace(\"-proposal-\", \"-transform-\");\n    if (transformName !== standardizedName && !(yield transformName).error) {\n      error.message += `\\n- Did you mean \"${transformName}\"?`;\n    }\n  }\n  error.message += `\\n\nMake sure that all the Babel plugins and presets you are using\nare defined as dependencies or devDependencies in your package.json\nfile. It's possible that the missing plugin is loaded by a preset\nyou are using that forgot to add the plugin to its dependencies: you\ncan workaround this problem by explicitly adding the missing package\nto your top-level package.json.\n`;\n  throw error;\n}\nfunction tryRequireResolve(id, dirname) {\n  try {\n    if (dirname) {\n      return {\n        error: null,\n        value: (((v, w) => (v = v.split(\".\"), w = w.split(\".\"), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, \"8.9\") ? require.resolve : (r, {\n          paths: [b]\n        }, M = require(\"module\")) => {\n          let f = M._findPath(r, M._nodeModulePaths(b).concat(b));\n          if (f) return f;\n          f = new Error(`Cannot resolve module '${r}'`);\n          f.code = \"MODULE_NOT_FOUND\";\n          throw f;\n        })(id, {\n          paths: [dirname]\n        })\n      };\n    } else {\n      return {\n        error: null,\n        value: require.resolve(id)\n      };\n    }\n  } catch (error) {\n    return {\n      error,\n      value: null\n    };\n  }\n}\nfunction tryImportMetaResolve(id, options) {\n  try {\n    return {\n      error: null,\n      value: (0, _importMetaResolve.resolve)(id, options)\n    };\n  } catch (error) {\n    return {\n      error,\n      value: null\n    };\n  }\n}\nfunction resolveStandardizedNameForRequire(type, name, dirname) {\n  const it = resolveAlternativesHelper(type, name);\n  let res = it.next();\n  while (!res.done) {\n    res = it.next(tryRequireResolve(res.value, dirname));\n  }\n  return res.value;\n}\nfunction resolveStandardizedNameForImport(type, name, dirname) {\n  const parentUrl = (0, _url().pathToFileURL)(_path().join(dirname, \"./babel-virtual-resolve-base.js\")).href;\n  const it = resolveAlternativesHelper(type, name);\n  let res = it.next();\n  while (!res.done) {\n    res = it.next(tryImportMetaResolve(res.value, parentUrl));\n  }\n  return (0, _url().fileURLToPath)(res.value);\n}\nfunction resolveStandardizedName(type, name, dirname, resolveESM) {\n  if (!_moduleTypes.supportsESM || !resolveESM) {\n    return resolveStandardizedNameForRequire(type, name, dirname);\n  }\n  try {\n    const resolved = resolveStandardizedNameForImport(type, name, dirname);\n    if (!(0, _fs().existsSync)(resolved)) {\n      throw Object.assign(new Error(`Could not resolve \"${name}\" in file ${dirname}.`), {\n        type: \"MODULE_NOT_FOUND\"\n      });\n    }\n    return resolved;\n  } catch (e) {\n    try {\n      return resolveStandardizedNameForRequire(type, name, dirname);\n    } catch (e2) {\n      if (e.type === \"MODULE_NOT_FOUND\") throw e;\n      if (e2.type === \"MODULE_NOT_FOUND\") throw e2;\n      throw e;\n    }\n  }\n}\n{\n  var LOADING_MODULES = new Set();\n}\nfunction* requireModule(type, name) {\n  {\n    if (!(yield* (0, _async.isAsync)()) && LOADING_MODULES.has(name)) {\n      throw new Error(`Reentrant ${type} detected trying to load \"${name}\". This module is not ignored ` + \"and is trying to load itself while compiling itself, leading to a dependency cycle. \" + 'We recommend adding it to your \"ignore\" list in your babelrc, or to a .babelignore.');\n    }\n  }\n  try {\n    {\n      LOADING_MODULES.add(name);\n    }\n    {\n      return yield* (0, _moduleTypes.default)(name, `You appear to be using a native ECMAScript module ${type}, ` + \"which is only supported when running Babel asynchronously.\", true);\n    }\n  } catch (err) {\n    err.message = `[BABEL]: ${err.message} (While processing: ${name})`;\n    throw err;\n  } finally {\n    {\n      LOADING_MODULES.delete(name);\n    }\n  }\n}\n0 && 0;","map":{"version":3,"names":["_debug","data","require","_path","_async","_moduleTypes","_url","_importMetaResolve","_fs","debug","EXACT_RE","BABEL_PLUGIN_PREFIX_RE","BABEL_PRESET_PREFIX_RE","BABEL_PLUGIN_ORG_RE","BABEL_PRESET_ORG_RE","OTHER_PLUGIN_ORG_RE","OTHER_PRESET_ORG_RE","OTHER_ORG_DEFAULT_RE","resolvePlugin","exports","resolveStandardizedName","bind","resolvePreset","loadPlugin","name","dirname","filepath","isAsync","value","requireModule","loadPreset","standardizeName","type","isAbsolute","isPreset","replace","resolveAlternativesHelper","standardizedName","error","code","message","oppositeType","transformName","tryRequireResolve","id","v","w","split","process","versions","node","resolve","r","paths","b","M","f","_findPath","_nodeModulePaths","concat","Error","tryImportMetaResolve","options","resolveStandardizedNameForRequire","it","res","next","done","resolveStandardizedNameForImport","parentUrl","pathToFileURL","join","href","fileURLToPath","resolveESM","supportsESM","resolved","existsSync","Object","assign","e","e2","LOADING_MODULES","Set","has","add","default","err","delete"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\core\\src\\config\\files\\plugins.ts"],"sourcesContent":["/**\n * This file handles all logic for converting string-based configuration references into loaded objects.\n */\n\nimport buildDebug from \"debug\";\nimport path from \"path\";\nimport type { Handler } from \"gensync\";\nimport { isAsync } from \"../../gensync-utils/async.ts\";\nimport loadCodeDefault, { supportsESM } from \"./module-types.ts\";\nimport { fileURLToPath, pathToFileURL } from \"url\";\n\nimport { resolve as importMetaResolve } from \"../../vendor/import-meta-resolve.js\";\n\nimport { createRequire } from \"module\";\nimport { existsSync } from \"fs\";\nconst require = createRequire(import.meta.url);\n\nconst debug = buildDebug(\"babel:config:loading:files:plugins\");\n\nconst EXACT_RE = /^module:/;\nconst BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\\/|babel-plugin-)/;\nconst BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\\/|babel-preset-)/;\nconst BABEL_PLUGIN_ORG_RE = /^(@babel\\/)(?!plugin-|[^/]+\\/)/;\nconst BABEL_PRESET_ORG_RE = /^(@babel\\/)(?!preset-|[^/]+\\/)/;\nconst OTHER_PLUGIN_ORG_RE =\n  /^(@(?!babel\\/)[^/]+\\/)(?![^/]*babel-plugin(?:-|\\/|$)|[^/]+\\/)/;\nconst OTHER_PRESET_ORG_RE =\n  /^(@(?!babel\\/)[^/]+\\/)(?![^/]*babel-preset(?:-|\\/|$)|[^/]+\\/)/;\nconst OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;\n\nexport const resolvePlugin = resolveStandardizedName.bind(null, \"plugin\");\nexport const resolvePreset = resolveStandardizedName.bind(null, \"preset\");\n\nexport function* loadPlugin(\n  name: string,\n  dirname: string,\n): Handler<{ filepath: string; value: unknown }> {\n  const filepath = resolvePlugin(name, dirname, yield* isAsync());\n\n  const value = yield* requireModule(\"plugin\", filepath);\n  debug(\"Loaded plugin %o from %o.\", name, dirname);\n\n  return { filepath, value };\n}\n\nexport function* loadPreset(\n  name: string,\n  dirname: string,\n): Handler<{ filepath: string; value: unknown }> {\n  const filepath = resolvePreset(name, dirname, yield* isAsync());\n\n  const value = yield* requireModule(\"preset\", filepath);\n\n  debug(\"Loaded preset %o from %o.\", name, dirname);\n\n  return { filepath, value };\n}\n\nfunction standardizeName(type: \"plugin\" | \"preset\", name: string) {\n  // Let absolute and relative paths through.\n  if (path.isAbsolute(name)) return name;\n\n  const isPreset = type === \"preset\";\n\n  return (\n    name\n      // foo -> babel-preset-foo\n      .replace(\n        isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE,\n        `babel-${type}-`,\n      )\n      // @babel/es2015 -> @babel/preset-es2015\n      .replace(\n        isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE,\n        `$1${type}-`,\n      )\n      // @foo/mypreset -> @foo/babel-preset-mypreset\n      .replace(\n        isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE,\n        `$1babel-${type}-`,\n      )\n      // @foo -> @foo/babel-preset\n      .replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`)\n      // module:mypreset -> mypreset\n      .replace(EXACT_RE, \"\")\n  );\n}\n\ntype Result<T> = { error: Error; value: null } | { error: null; value: T };\n\nfunction* resolveAlternativesHelper(\n  type: \"plugin\" | \"preset\",\n  name: string,\n): Iterator<string, string, Result<string>> {\n  const standardizedName = standardizeName(type, name);\n  const { error, value } = yield standardizedName;\n  if (!error) return value;\n\n  // @ts-expect-error code may not index error\n  if (error.code !== \"MODULE_NOT_FOUND\") throw error;\n\n  if (standardizedName !== name && !(yield name).error) {\n    error.message += `\\n- If you want to resolve \"${name}\", use \"module:${name}\"`;\n  }\n\n  if (!(yield standardizeName(type, \"@babel/\" + name)).error) {\n    error.message += `\\n- Did you mean \"@babel/${name}\"?`;\n  }\n\n  const oppositeType = type === \"preset\" ? \"plugin\" : \"preset\";\n  if (!(yield standardizeName(oppositeType, name)).error) {\n    error.message += `\\n- Did you accidentally pass a ${oppositeType} as a ${type}?`;\n  }\n\n  if (type === \"plugin\") {\n    const transformName = standardizedName.replace(\"-proposal-\", \"-transform-\");\n    if (transformName !== standardizedName && !(yield transformName).error) {\n      error.message += `\\n- Did you mean \"${transformName}\"?`;\n    }\n  }\n\n  error.message += `\\n\nMake sure that all the Babel plugins and presets you are using\nare defined as dependencies or devDependencies in your package.json\nfile. It's possible that the missing plugin is loaded by a preset\nyou are using that forgot to add the plugin to its dependencies: you\ncan workaround this problem by explicitly adding the missing package\nto your top-level package.json.\n`;\n\n  throw error;\n}\n\nfunction tryRequireResolve(\n  id: string,\n  dirname: string | undefined,\n): Result<string> {\n  try {\n    if (dirname) {\n      return { error: null, value: require.resolve(id, { paths: [dirname] }) };\n    } else {\n      return { error: null, value: require.resolve(id) };\n    }\n  } catch (error) {\n    return { error, value: null };\n  }\n}\n\nfunction tryImportMetaResolve(\n  id: Parameters<typeof importMetaResolve>[0],\n  options: Parameters<typeof importMetaResolve>[1],\n): Result<string> {\n  try {\n    return { error: null, value: importMetaResolve(id, options) };\n  } catch (error) {\n    return { error, value: null };\n  }\n}\n\nfunction resolveStandardizedNameForRequire(\n  type: \"plugin\" | \"preset\",\n  name: string,\n  dirname: string,\n) {\n  const it = resolveAlternativesHelper(type, name);\n  let res = it.next();\n  while (!res.done) {\n    res = it.next(tryRequireResolve(res.value, dirname));\n  }\n  return res.value;\n}\nfunction resolveStandardizedNameForImport(\n  type: \"plugin\" | \"preset\",\n  name: string,\n  dirname: string,\n) {\n  const parentUrl = pathToFileURL(\n    path.join(dirname, \"./babel-virtual-resolve-base.js\"),\n  ).href;\n\n  const it = resolveAlternativesHelper(type, name);\n  let res = it.next();\n  while (!res.done) {\n    res = it.next(tryImportMetaResolve(res.value, parentUrl));\n  }\n  return fileURLToPath(res.value);\n}\n\nfunction resolveStandardizedName(\n  type: \"plugin\" | \"preset\",\n  name: string,\n  dirname: string,\n  resolveESM: boolean,\n) {\n  if (!supportsESM || !resolveESM) {\n    return resolveStandardizedNameForRequire(type, name, dirname);\n  }\n\n  try {\n    const resolved = resolveStandardizedNameForImport(type, name, dirname);\n    // import-meta-resolve 4.0 does not throw if the module is not found.\n    if (!existsSync(resolved)) {\n      throw Object.assign(\n        new Error(`Could not resolve \"${name}\" in file ${dirname}.`),\n        { type: \"MODULE_NOT_FOUND\" },\n      );\n    }\n    return resolved;\n  } catch (e) {\n    try {\n      return resolveStandardizedNameForRequire(type, name, dirname);\n    } catch (e2) {\n      if (e.type === \"MODULE_NOT_FOUND\") throw e;\n      if (e2.type === \"MODULE_NOT_FOUND\") throw e2;\n      throw e;\n    }\n  }\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  // eslint-disable-next-line no-var\n  var LOADING_MODULES = new Set();\n}\nfunction* requireModule(type: string, name: string): Handler<unknown> {\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!(yield* isAsync()) && LOADING_MODULES.has(name)) {\n      throw new Error(\n        `Reentrant ${type} detected trying to load \"${name}\". This module is not ignored ` +\n          \"and is trying to load itself while compiling itself, leading to a dependency cycle. \" +\n          'We recommend adding it to your \"ignore\" list in your babelrc, or to a .babelignore.',\n      );\n    }\n  }\n\n  try {\n    if (!process.env.BABEL_8_BREAKING) {\n      LOADING_MODULES.add(name);\n    }\n\n    if (process.env.BABEL_8_BREAKING) {\n      return yield* loadCodeDefault(\n        name,\n        `You appear to be using a native ECMAScript module ${type}, ` +\n          \"which is only supported when running Babel asynchronously.\",\n      );\n    } else {\n      return yield* loadCodeDefault(\n        name,\n        `You appear to be using a native ECMAScript module ${type}, ` +\n          \"which is only supported when running Babel asynchronously.\",\n        // For backward compatibility, we need to support malformed presets\n        // defined as separate named exports rather than a single default\n        // export.\n        // See packages/babel-core/test/fixtures/option-manager/presets/es2015_named.js\n        // @ts-ignore(Babel 7 vs Babel 8) This param has been removed\n        true,\n      );\n    }\n  } catch (err) {\n    err.message = `[BABEL]: ${err.message} (While processing: ${name})`;\n    throw err;\n  } finally {\n    if (!process.env.BABEL_8_BREAKING) {\n      LOADING_MODULES.delete(name);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}