{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.analyze = void 0;\nconst visitor_keys_1 = require(\"@typescript-eslint/visitor-keys\");\nconst lib_1 = require(\"./lib\");\nconst referencer_1 = require(\"./referencer\");\nconst ScopeManager_1 = require(\"./ScopeManager\");\nconst DEFAULT_OPTIONS = {\n  childVisitorKeys: visitor_keys_1.visitorKeys,\n  ecmaVersion: 2018,\n  globalReturn: false,\n  impliedStrict: false,\n  jsxPragma: 'React',\n  jsxFragmentName: null,\n  lib: ['es2018'],\n  sourceType: 'script',\n  emitDecoratorMetadata: false\n};\n/**\n * Convert ecmaVersion to lib.\n * `'latest'` is converted to 1e8 at parser.\n */\nfunction mapEcmaVersion(version) {\n  if (version == null || version === 3 || version === 5) {\n    return 'es5';\n  }\n  const year = version > 2000 ? version : 2015 + (version - 6);\n  const lib = `es${year}`;\n  return lib in lib_1.lib ? lib : year > 2020 ? 'esnext' : 'es5';\n}\n/**\n * Takes an AST and returns the analyzed scopes.\n */\nfunction analyze(tree, providedOptions) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  const ecmaVersion = (_a = providedOptions === null || providedOptions === void 0 ? void 0 : providedOptions.ecmaVersion) !== null && _a !== void 0 ? _a : DEFAULT_OPTIONS.ecmaVersion;\n  const options = {\n    childVisitorKeys: (_b = providedOptions === null || providedOptions === void 0 ? void 0 : providedOptions.childVisitorKeys) !== null && _b !== void 0 ? _b : DEFAULT_OPTIONS.childVisitorKeys,\n    ecmaVersion,\n    globalReturn: (_c = providedOptions === null || providedOptions === void 0 ? void 0 : providedOptions.globalReturn) !== null && _c !== void 0 ? _c : DEFAULT_OPTIONS.globalReturn,\n    impliedStrict: (_d = providedOptions === null || providedOptions === void 0 ? void 0 : providedOptions.impliedStrict) !== null && _d !== void 0 ? _d : DEFAULT_OPTIONS.impliedStrict,\n    jsxPragma: (providedOptions === null || providedOptions === void 0 ? void 0 : providedOptions.jsxPragma) === undefined ? DEFAULT_OPTIONS.jsxPragma : providedOptions.jsxPragma,\n    jsxFragmentName: (_e = providedOptions === null || providedOptions === void 0 ? void 0 : providedOptions.jsxFragmentName) !== null && _e !== void 0 ? _e : DEFAULT_OPTIONS.jsxFragmentName,\n    sourceType: (_f = providedOptions === null || providedOptions === void 0 ? void 0 : providedOptions.sourceType) !== null && _f !== void 0 ? _f : DEFAULT_OPTIONS.sourceType,\n    lib: (_g = providedOptions === null || providedOptions === void 0 ? void 0 : providedOptions.lib) !== null && _g !== void 0 ? _g : [mapEcmaVersion(ecmaVersion)],\n    emitDecoratorMetadata: (_h = providedOptions === null || providedOptions === void 0 ? void 0 : providedOptions.emitDecoratorMetadata) !== null && _h !== void 0 ? _h : DEFAULT_OPTIONS.emitDecoratorMetadata\n  };\n  // ensure the option is lower cased\n  options.lib = options.lib.map(l => l.toLowerCase());\n  const scopeManager = new ScopeManager_1.ScopeManager(options);\n  const referencer = new referencer_1.Referencer(options, scopeManager);\n  referencer.visit(tree);\n  return scopeManager;\n}\nexports.analyze = analyze;","map":{"version":3,"names":["visitor_keys_1","require","lib_1","referencer_1","ScopeManager_1","DEFAULT_OPTIONS","childVisitorKeys","visitorKeys","ecmaVersion","globalReturn","impliedStrict","jsxPragma","jsxFragmentName","lib","sourceType","emitDecoratorMetadata","mapEcmaVersion","version","year","analyze","tree","providedOptions","_a","options","_b","_c","_d","undefined","_e","_f","_g","_h","map","l","toLowerCase","scopeManager","ScopeManager","referencer","Referencer","visit","exports"],"sources":["../src/analyze.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}