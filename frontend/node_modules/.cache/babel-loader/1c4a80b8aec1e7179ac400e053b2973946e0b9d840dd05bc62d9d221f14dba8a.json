{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\nvar _diffSequences = _interopRequireDefault(require('diff-sequences'));\nvar _cleanupSemantic = require('./cleanupSemantic');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst diffStrings = (a, b) => {\n  const isCommon = (aIndex, bIndex) => a[aIndex] === b[bIndex];\n  let aIndex = 0;\n  let bIndex = 0;\n  const diffs = [];\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    if (aIndex !== aCommon) {\n      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex, aCommon)));\n    }\n    if (bIndex !== bCommon) {\n      diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex, bCommon)));\n    }\n    aIndex = aCommon + nCommon; // number of characters compared in a\n\n    bIndex = bCommon + nCommon; // number of characters compared in b\n\n    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_EQUAL, b.slice(bCommon, bIndex)));\n  };\n  (0, _diffSequences.default)(a.length, b.length, isCommon, foundSubsequence); // After the last common subsequence, push remaining change items.\n\n  if (aIndex !== a.length) {\n    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex)));\n  }\n  if (bIndex !== b.length) {\n    diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex)));\n  }\n  return diffs;\n};\nvar _default = diffStrings;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_diffSequences","_interopRequireDefault","require","_cleanupSemantic","obj","__esModule","diffStrings","a","b","isCommon","aIndex","bIndex","diffs","foundSubsequence","nCommon","aCommon","bCommon","push","Diff","DIFF_DELETE","slice","DIFF_INSERT","DIFF_EQUAL","length","_default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@jest/globals/node_modules/jest-diff/build/diffStrings.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _diffSequences = _interopRequireDefault(require('diff-sequences'));\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst diffStrings = (a, b) => {\n  const isCommon = (aIndex, bIndex) => a[aIndex] === b[bIndex];\n\n  let aIndex = 0;\n  let bIndex = 0;\n  const diffs = [];\n\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    if (aIndex !== aCommon) {\n      diffs.push(\n        new _cleanupSemantic.Diff(\n          _cleanupSemantic.DIFF_DELETE,\n          a.slice(aIndex, aCommon)\n        )\n      );\n    }\n\n    if (bIndex !== bCommon) {\n      diffs.push(\n        new _cleanupSemantic.Diff(\n          _cleanupSemantic.DIFF_INSERT,\n          b.slice(bIndex, bCommon)\n        )\n      );\n    }\n\n    aIndex = aCommon + nCommon; // number of characters compared in a\n\n    bIndex = bCommon + nCommon; // number of characters compared in b\n\n    diffs.push(\n      new _cleanupSemantic.Diff(\n        _cleanupSemantic.DIFF_EQUAL,\n        b.slice(bCommon, bIndex)\n      )\n    );\n  };\n\n  (0, _diffSequences.default)(a.length, b.length, isCommon, foundSubsequence); // After the last common subsequence, push remaining change items.\n\n  if (aIndex !== a.length) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex))\n    );\n  }\n\n  if (bIndex !== b.length) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex))\n    );\n  }\n\n  return diffs;\n};\n\nvar _default = diffStrings;\nexports.default = _default;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,cAAc,GAAGC,sBAAsB,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAEtE,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAEnD,SAASD,sBAAsBA,CAACG,GAAG,EAAE;EACnC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAACL,OAAO,EAAEK;EAAG,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,WAAW,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC5B,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,MAAM,KAAKJ,CAAC,CAACG,MAAM,CAAC,KAAKF,CAAC,CAACG,MAAM,CAAC;EAE5D,IAAID,MAAM,GAAG,CAAC;EACd,IAAIC,MAAM,GAAG,CAAC;EACd,MAAMC,KAAK,GAAG,EAAE;EAEhB,MAAMC,gBAAgB,GAAGA,CAACC,OAAO,EAAEC,OAAO,EAAEC,OAAO,KAAK;IACtD,IAAIN,MAAM,KAAKK,OAAO,EAAE;MACtBH,KAAK,CAACK,IAAI,CACR,IAAId,gBAAgB,CAACe,IAAI,CACvBf,gBAAgB,CAACgB,WAAW,EAC5BZ,CAAC,CAACa,KAAK,CAACV,MAAM,EAAEK,OAAO,CACzB,CACF,CAAC;IACH;IAEA,IAAIJ,MAAM,KAAKK,OAAO,EAAE;MACtBJ,KAAK,CAACK,IAAI,CACR,IAAId,gBAAgB,CAACe,IAAI,CACvBf,gBAAgB,CAACkB,WAAW,EAC5Bb,CAAC,CAACY,KAAK,CAACT,MAAM,EAAEK,OAAO,CACzB,CACF,CAAC;IACH;IAEAN,MAAM,GAAGK,OAAO,GAAGD,OAAO,CAAC,CAAC;;IAE5BH,MAAM,GAAGK,OAAO,GAAGF,OAAO,CAAC,CAAC;;IAE5BF,KAAK,CAACK,IAAI,CACR,IAAId,gBAAgB,CAACe,IAAI,CACvBf,gBAAgB,CAACmB,UAAU,EAC3Bd,CAAC,CAACY,KAAK,CAACJ,OAAO,EAAEL,MAAM,CACzB,CACF,CAAC;EACH,CAAC;EAED,CAAC,CAAC,EAAEX,cAAc,CAACD,OAAO,EAAEQ,CAAC,CAACgB,MAAM,EAAEf,CAAC,CAACe,MAAM,EAAEd,QAAQ,EAAEI,gBAAgB,CAAC,CAAC,CAAC;;EAE7E,IAAIH,MAAM,KAAKH,CAAC,CAACgB,MAAM,EAAE;IACvBX,KAAK,CAACK,IAAI,CACR,IAAId,gBAAgB,CAACe,IAAI,CAACf,gBAAgB,CAACgB,WAAW,EAAEZ,CAAC,CAACa,KAAK,CAACV,MAAM,CAAC,CACzE,CAAC;EACH;EAEA,IAAIC,MAAM,KAAKH,CAAC,CAACe,MAAM,EAAE;IACvBX,KAAK,CAACK,IAAI,CACR,IAAId,gBAAgB,CAACe,IAAI,CAACf,gBAAgB,CAACkB,WAAW,EAAEb,CAAC,CAACY,KAAK,CAACT,MAAM,CAAC,CACzE,CAAC;EACH;EAEA,OAAOC,KAAK;AACd,CAAC;AAED,IAAIY,QAAQ,GAAGlB,WAAW;AAC1BT,OAAO,CAACE,OAAO,GAAGyB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}