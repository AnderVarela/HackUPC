{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = require(\"./code\");\nconst scope_1 = require(\"./scope\");\nvar code_2 = require(\"./code\");\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function () {\n    return code_2._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function () {\n    return code_2.str;\n  }\n});\nObject.defineProperty(exports, \"strConcat\", {\n  enumerable: true,\n  get: function () {\n    return code_2.strConcat;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function () {\n    return code_2.nil;\n  }\n});\nObject.defineProperty(exports, \"getProperty\", {\n  enumerable: true,\n  get: function () {\n    return code_2.getProperty;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return code_2.stringify;\n  }\n});\nObject.defineProperty(exports, \"regexpCode\", {\n  enumerable: true,\n  get: function () {\n    return code_2.regexpCode;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function () {\n    return code_2.Name;\n  }\n});\nvar scope_2 = require(\"./scope\");\nObject.defineProperty(exports, \"Scope\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.Scope;\n  }\n});\nObject.defineProperty(exports, \"ValueScope\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.ValueScope;\n  }\n});\nObject.defineProperty(exports, \"ValueScopeName\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.ValueScopeName;\n  }\n});\nObject.defineProperty(exports, \"varKinds\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.varKinds;\n  }\n});\nexports.operators = {\n  GT: new code_1._Code(\">\"),\n  GTE: new code_1._Code(\">=\"),\n  LT: new code_1._Code(\"<\"),\n  LTE: new code_1._Code(\"<=\"),\n  EQ: new code_1._Code(\"===\"),\n  NEQ: new code_1._Code(\"!==\"),\n  NOT: new code_1._Code(\"!\"),\n  OR: new code_1._Code(\"||\"),\n  AND: new code_1._Code(\"&&\"),\n  ADD: new code_1._Code(\"+\")\n};\nclass Node {\n  optimizeNodes() {\n    return this;\n  }\n  optimizeNames(_names, _constants) {\n    return this;\n  }\n}\nclass Def extends Node {\n  constructor(varKind, name, rhs) {\n    super();\n    this.varKind = varKind;\n    this.name = name;\n    this.rhs = rhs;\n  }\n  render({\n    es5,\n    _n\n  }) {\n    const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n    const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n    return `${varKind} ${this.name}${rhs};` + _n;\n  }\n  optimizeNames(names, constants) {\n    if (!names[this.name.str]) return;\n    if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);\n    return this;\n  }\n  get names() {\n    return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n  }\n}\nclass Assign extends Node {\n  constructor(lhs, rhs, sideEffects) {\n    super();\n    this.lhs = lhs;\n    this.rhs = rhs;\n    this.sideEffects = sideEffects;\n  }\n  render({\n    _n\n  }) {\n    return `${this.lhs} = ${this.rhs};` + _n;\n  }\n  optimizeNames(names, constants) {\n    if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;\n    this.rhs = optimizeExpr(this.rhs, names, constants);\n    return this;\n  }\n  get names() {\n    const names = this.lhs instanceof code_1.Name ? {} : {\n      ...this.lhs.names\n    };\n    return addExprNames(names, this.rhs);\n  }\n}\nclass AssignOp extends Assign {\n  constructor(lhs, op, rhs, sideEffects) {\n    super(lhs, rhs, sideEffects);\n    this.op = op;\n  }\n  render({\n    _n\n  }) {\n    return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n  }\n}\nclass Label extends Node {\n  constructor(label) {\n    super();\n    this.label = label;\n    this.names = {};\n  }\n  render({\n    _n\n  }) {\n    return `${this.label}:` + _n;\n  }\n}\nclass Break extends Node {\n  constructor(label) {\n    super();\n    this.label = label;\n    this.names = {};\n  }\n  render({\n    _n\n  }) {\n    const label = this.label ? ` ${this.label}` : \"\";\n    return `break${label};` + _n;\n  }\n}\nclass Throw extends Node {\n  constructor(error) {\n    super();\n    this.error = error;\n  }\n  render({\n    _n\n  }) {\n    return `throw ${this.error};` + _n;\n  }\n  get names() {\n    return this.error.names;\n  }\n}\nclass AnyCode extends Node {\n  constructor(code) {\n    super();\n    this.code = code;\n  }\n  render({\n    _n\n  }) {\n    return `${this.code};` + _n;\n  }\n  optimizeNodes() {\n    return `${this.code}` ? this : undefined;\n  }\n  optimizeNames(names, constants) {\n    this.code = optimizeExpr(this.code, names, constants);\n    return this;\n  }\n  get names() {\n    return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n  }\n}\nclass ParentNode extends Node {\n  constructor(nodes = []) {\n    super();\n    this.nodes = nodes;\n  }\n  render(opts) {\n    return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n  }\n  optimizeNodes() {\n    const {\n      nodes\n    } = this;\n    let i = nodes.length;\n    while (i--) {\n      const n = nodes[i].optimizeNodes();\n      if (Array.isArray(n)) nodes.splice(i, 1, ...n);else if (n) nodes[i] = n;else nodes.splice(i, 1);\n    }\n    return nodes.length > 0 ? this : undefined;\n  }\n  optimizeNames(names, constants) {\n    const {\n      nodes\n    } = this;\n    let i = nodes.length;\n    while (i--) {\n      // iterating backwards improves 1-pass optimization\n      const n = nodes[i];\n      if (n.optimizeNames(names, constants)) continue;\n      subtractNames(names, n.names);\n      nodes.splice(i, 1);\n    }\n    return nodes.length > 0 ? this : undefined;\n  }\n  get names() {\n    return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n  }\n}\nclass BlockNode extends ParentNode {\n  render(opts) {\n    return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n  }\n}\nclass Root extends ParentNode {}\nclass Else extends BlockNode {}\nElse.kind = \"else\";\nclass If extends BlockNode {\n  constructor(condition, nodes) {\n    super(nodes);\n    this.condition = condition;\n  }\n  render(opts) {\n    let code = `if(${this.condition})` + super.render(opts);\n    if (this.else) code += \"else \" + this.else.render(opts);\n    return code;\n  }\n  optimizeNodes() {\n    super.optimizeNodes();\n    const cond = this.condition;\n    if (cond === true) return this.nodes; // else is ignored here\n    let e = this.else;\n    if (e) {\n      const ns = e.optimizeNodes();\n      e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n    }\n    if (e) {\n      if (cond === false) return e instanceof If ? e : e.nodes;\n      if (this.nodes.length) return this;\n      return new If(not(cond), e instanceof If ? [e] : e.nodes);\n    }\n    if (cond === false || !this.nodes.length) return undefined;\n    return this;\n  }\n  optimizeNames(names, constants) {\n    var _a;\n    this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n    if (!(super.optimizeNames(names, constants) || this.else)) return;\n    this.condition = optimizeExpr(this.condition, names, constants);\n    return this;\n  }\n  get names() {\n    const names = super.names;\n    addExprNames(names, this.condition);\n    if (this.else) addNames(names, this.else.names);\n    return names;\n  }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {}\nFor.kind = \"for\";\nclass ForLoop extends For {\n  constructor(iteration) {\n    super();\n    this.iteration = iteration;\n  }\n  render(opts) {\n    return `for(${this.iteration})` + super.render(opts);\n  }\n  optimizeNames(names, constants) {\n    if (!super.optimizeNames(names, constants)) return;\n    this.iteration = optimizeExpr(this.iteration, names, constants);\n    return this;\n  }\n  get names() {\n    return addNames(super.names, this.iteration.names);\n  }\n}\nclass ForRange extends For {\n  constructor(varKind, name, from, to) {\n    super();\n    this.varKind = varKind;\n    this.name = name;\n    this.from = from;\n    this.to = to;\n  }\n  render(opts) {\n    const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n    const {\n      name,\n      from,\n      to\n    } = this;\n    return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n  }\n  get names() {\n    const names = addExprNames(super.names, this.from);\n    return addExprNames(names, this.to);\n  }\n}\nclass ForIter extends For {\n  constructor(loop, varKind, name, iterable) {\n    super();\n    this.loop = loop;\n    this.varKind = varKind;\n    this.name = name;\n    this.iterable = iterable;\n  }\n  render(opts) {\n    return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n  }\n  optimizeNames(names, constants) {\n    if (!super.optimizeNames(names, constants)) return;\n    this.iterable = optimizeExpr(this.iterable, names, constants);\n    return this;\n  }\n  get names() {\n    return addNames(super.names, this.iterable.names);\n  }\n}\nclass Func extends BlockNode {\n  constructor(name, args, async) {\n    super();\n    this.name = name;\n    this.args = args;\n    this.async = async;\n  }\n  render(opts) {\n    const _async = this.async ? \"async \" : \"\";\n    return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n  }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n  render(opts) {\n    return \"return \" + super.render(opts);\n  }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n  render(opts) {\n    let code = \"try\" + super.render(opts);\n    if (this.catch) code += this.catch.render(opts);\n    if (this.finally) code += this.finally.render(opts);\n    return code;\n  }\n  optimizeNodes() {\n    var _a, _b;\n    super.optimizeNodes();\n    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n    return this;\n  }\n  optimizeNames(names, constants) {\n    var _a, _b;\n    super.optimizeNames(names, constants);\n    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n    return this;\n  }\n  get names() {\n    const names = super.names;\n    if (this.catch) addNames(names, this.catch.names);\n    if (this.finally) addNames(names, this.finally.names);\n    return names;\n  }\n}\nclass Catch extends BlockNode {\n  constructor(error) {\n    super();\n    this.error = error;\n  }\n  render(opts) {\n    return `catch(${this.error})` + super.render(opts);\n  }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n  render(opts) {\n    return \"finally\" + super.render(opts);\n  }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n  constructor(extScope, opts = {}) {\n    this._values = {};\n    this._blockStarts = [];\n    this._constants = {};\n    this.opts = {\n      ...opts,\n      _n: opts.lines ? \"\\n\" : \"\"\n    };\n    this._extScope = extScope;\n    this._scope = new scope_1.Scope({\n      parent: extScope\n    });\n    this._nodes = [new Root()];\n  }\n  toString() {\n    return this._root.render(this.opts);\n  }\n  // returns unique name in the internal scope\n  name(prefix) {\n    return this._scope.name(prefix);\n  }\n  // reserves unique name in the external scope\n  scopeName(prefix) {\n    return this._extScope.name(prefix);\n  }\n  // reserves unique name in the external scope and assigns value to it\n  scopeValue(prefixOrName, value) {\n    const name = this._extScope.value(prefixOrName, value);\n    const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n    vs.add(name);\n    return name;\n  }\n  getScopeValue(prefix, keyOrRef) {\n    return this._extScope.getValue(prefix, keyOrRef);\n  }\n  // return code that assigns values in the external scope to the names that are used internally\n  // (same names that were returned by gen.scopeName or gen.scopeValue)\n  scopeRefs(scopeName) {\n    return this._extScope.scopeRefs(scopeName, this._values);\n  }\n  scopeCode() {\n    return this._extScope.scopeCode(this._values);\n  }\n  _def(varKind, nameOrPrefix, rhs, constant) {\n    const name = this._scope.toName(nameOrPrefix);\n    if (rhs !== undefined && constant) this._constants[name.str] = rhs;\n    this._leafNode(new Def(varKind, name, rhs));\n    return name;\n  }\n  // `const` declaration (`var` in es5 mode)\n  const(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n  }\n  // `let` declaration with optional assignment (`var` in es5 mode)\n  let(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n  }\n  // `var` declaration with optional assignment\n  var(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n  }\n  // assignment code\n  assign(lhs, rhs, sideEffects) {\n    return this._leafNode(new Assign(lhs, rhs, sideEffects));\n  }\n  // `+=` code\n  add(lhs, rhs) {\n    return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n  }\n  // appends passed SafeExpr to code or executes Block\n  code(c) {\n    if (typeof c == \"function\") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));\n    return this;\n  }\n  // returns code for object literal for the passed argument list of key-value pairs\n  object(...keyValues) {\n    const code = [\"{\"];\n    for (const [key, value] of keyValues) {\n      if (code.length > 1) code.push(\",\");\n      code.push(key);\n      if (key !== value || this.opts.es5) {\n        code.push(\":\");\n        (0, code_1.addCodeArg)(code, value);\n      }\n    }\n    code.push(\"}\");\n    return new code_1._Code(code);\n  }\n  // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n  if(condition, thenBody, elseBody) {\n    this._blockNode(new If(condition));\n    if (thenBody && elseBody) {\n      this.code(thenBody).else().code(elseBody).endIf();\n    } else if (thenBody) {\n      this.code(thenBody).endIf();\n    } else if (elseBody) {\n      throw new Error('CodeGen: \"else\" body without \"then\" body');\n    }\n    return this;\n  }\n  // `else if` clause - invalid without `if` or after `else` clauses\n  elseIf(condition) {\n    return this._elseNode(new If(condition));\n  }\n  // `else` clause - only valid after `if` or `else if` clauses\n  else() {\n    return this._elseNode(new Else());\n  }\n  // end `if` statement (needed if gen.if was used only with condition)\n  endIf() {\n    return this._endBlockNode(If, Else);\n  }\n  _for(node, forBody) {\n    this._blockNode(node);\n    if (forBody) this.code(forBody).endFor();\n    return this;\n  }\n  // a generic `for` clause (or statement if `forBody` is passed)\n  for(iteration, forBody) {\n    return this._for(new ForLoop(iteration), forBody);\n  }\n  // `for` statement for a range of values\n  forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n    const name = this._scope.toName(nameOrPrefix);\n    return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n  }\n  // `for-of` statement (in es5 mode replace with a normal for loop)\n  forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n    const name = this._scope.toName(nameOrPrefix);\n    if (this.opts.es5) {\n      const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n      return this.forRange(\"_i\", 0, (0, code_1._)`${arr}.length`, i => {\n        this.var(name, (0, code_1._)`${arr}[${i}]`);\n        forBody(name);\n      });\n    }\n    return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n  }\n  // `for-in` statement.\n  // With option `ownProperties` replaced with a `for-of` loop for object keys\n  forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n    if (this.opts.ownProperties) {\n      return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);\n    }\n    const name = this._scope.toName(nameOrPrefix);\n    return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n  }\n  // end `for` loop\n  endFor() {\n    return this._endBlockNode(For);\n  }\n  // `label` statement\n  label(label) {\n    return this._leafNode(new Label(label));\n  }\n  // `break` statement\n  break(label) {\n    return this._leafNode(new Break(label));\n  }\n  // `return` statement\n  return(value) {\n    const node = new Return();\n    this._blockNode(node);\n    this.code(value);\n    if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node');\n    return this._endBlockNode(Return);\n  }\n  // `try` statement\n  try(tryBody, catchCode, finallyCode) {\n    if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n    const node = new Try();\n    this._blockNode(node);\n    this.code(tryBody);\n    if (catchCode) {\n      const error = this.name(\"e\");\n      this._currNode = node.catch = new Catch(error);\n      catchCode(error);\n    }\n    if (finallyCode) {\n      this._currNode = node.finally = new Finally();\n      this.code(finallyCode);\n    }\n    return this._endBlockNode(Catch, Finally);\n  }\n  // `throw` statement\n  throw(error) {\n    return this._leafNode(new Throw(error));\n  }\n  // start self-balancing block\n  block(body, nodeCount) {\n    this._blockStarts.push(this._nodes.length);\n    if (body) this.code(body).endBlock(nodeCount);\n    return this;\n  }\n  // end the current self-balancing block\n  endBlock(nodeCount) {\n    const len = this._blockStarts.pop();\n    if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\");\n    const toClose = this._nodes.length - len;\n    if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {\n      throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n    }\n    this._nodes.length = len;\n    return this;\n  }\n  // `function` heading (or definition if funcBody is passed)\n  func(name, args = code_1.nil, async, funcBody) {\n    this._blockNode(new Func(name, args, async));\n    if (funcBody) this.code(funcBody).endFunc();\n    return this;\n  }\n  // end function definition\n  endFunc() {\n    return this._endBlockNode(Func);\n  }\n  optimize(n = 1) {\n    while (n-- > 0) {\n      this._root.optimizeNodes();\n      this._root.optimizeNames(this._root.names, this._constants);\n    }\n  }\n  _leafNode(node) {\n    this._currNode.nodes.push(node);\n    return this;\n  }\n  _blockNode(node) {\n    this._currNode.nodes.push(node);\n    this._nodes.push(node);\n  }\n  _endBlockNode(N1, N2) {\n    const n = this._currNode;\n    if (n instanceof N1 || N2 && n instanceof N2) {\n      this._nodes.pop();\n      return this;\n    }\n    throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n  }\n  _elseNode(node) {\n    const n = this._currNode;\n    if (!(n instanceof If)) {\n      throw new Error('CodeGen: \"else\" without \"if\"');\n    }\n    this._currNode = n.else = node;\n    return this;\n  }\n  get _root() {\n    return this._nodes[0];\n  }\n  get _currNode() {\n    const ns = this._nodes;\n    return ns[ns.length - 1];\n  }\n  set _currNode(node) {\n    const ns = this._nodes;\n    ns[ns.length - 1] = node;\n  }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n  for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0);\n  return names;\n}\nfunction addExprNames(names, from) {\n  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n  if (expr instanceof code_1.Name) return replaceName(expr);\n  if (!canOptimize(expr)) return expr;\n  return new code_1._Code(expr._items.reduce((items, c) => {\n    if (c instanceof code_1.Name) c = replaceName(c);\n    if (c instanceof code_1._Code) items.push(...c._items);else items.push(c);\n    return items;\n  }, []));\n  function replaceName(n) {\n    const c = constants[n.str];\n    if (c === undefined || names[n.str] !== 1) return n;\n    delete names[n.str];\n    return c;\n  }\n  function canOptimize(e) {\n    return e instanceof code_1._Code && e._items.some(c => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined);\n  }\n}\nfunction subtractNames(names, from) {\n  for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._)`!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and(...args) {\n  return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or(...args) {\n  return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n  return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;\n}\nfunction par(x) {\n  return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;\n}","map":{"version":3,"names":["code_1","require","scope_1","code_2","Object","defineProperty","exports","enumerable","get","_","str","strConcat","nil","getProperty","stringify","regexpCode","Name","scope_2","Scope","ValueScope","ValueScopeName","varKinds","operators","GT","_Code","GTE","LT","LTE","EQ","NEQ","NOT","OR","AND","ADD","Node","optimizeNodes","optimizeNames","_names","_constants","Def","constructor","varKind","name","rhs","render","es5","_n","var","undefined","names","constants","optimizeExpr","_CodeOrName","Assign","lhs","sideEffects","addExprNames","AssignOp","op","Label","label","Break","Throw","error","AnyCode","code","ParentNode","nodes","opts","reduce","n","i","length","Array","isArray","splice","subtractNames","addNames","BlockNode","Root","Else","kind","If","condition","else","cond","e","ns","not","_a","For","ForLoop","iteration","ForRange","from","to","ForIter","loop","iterable","Func","args","async","_async","Return","Try","catch","finally","_b","Catch","Finally","CodeGen","extScope","_values","_blockStarts","lines","_extScope","_scope","parent","_nodes","toString","_root","prefix","scopeName","scopeValue","prefixOrName","value","vs","Set","add","getScopeValue","keyOrRef","getValue","scopeRefs","scopeCode","_def","nameOrPrefix","constant","toName","_leafNode","const","_constant","let","assign","c","object","keyValues","key","push","addCodeArg","if","thenBody","elseBody","_blockNode","endIf","Error","elseIf","_elseNode","_endBlockNode","_for","node","forBody","endFor","for","forRange","forOf","arr","forIn","obj","ownProperties","break","return","try","tryBody","catchCode","finallyCode","_currNode","throw","block","body","nodeCount","endBlock","len","pop","toClose","func","funcBody","endFunc","optimize","N1","N2","expr","replaceName","canOptimize","_items","items","some","x","par","andCode","mappend","and","orCode","or","y"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\compile\\codegen\\index.ts"],"sourcesContent":["import type {ScopeValueSets, NameValue, ValueScope, ValueScopeName} from \"./scope\"\nimport {_, nil, _Code, Code, Name, UsedNames, CodeItem, addCodeArg, _CodeOrName} from \"./code\"\nimport {Scope, varKinds} from \"./scope\"\n\nexport {_, str, strConcat, nil, getProperty, stringify, regexpCode, Name, Code} from \"./code\"\nexport {Scope, ScopeStore, ValueScope, ValueScopeName, ScopeValueSets, varKinds} from \"./scope\"\n\n// type for expressions that can be safely inserted in code without quotes\nexport type SafeExpr = Code | number | boolean | null\n\n// type that is either Code of function that adds code to CodeGen instance using its methods\nexport type Block = Code | (() => void)\n\nexport const operators = {\n  GT: new _Code(\">\"),\n  GTE: new _Code(\">=\"),\n  LT: new _Code(\"<\"),\n  LTE: new _Code(\"<=\"),\n  EQ: new _Code(\"===\"),\n  NEQ: new _Code(\"!==\"),\n  NOT: new _Code(\"!\"),\n  OR: new _Code(\"||\"),\n  AND: new _Code(\"&&\"),\n  ADD: new _Code(\"+\"),\n}\n\nabstract class Node {\n  abstract readonly names: UsedNames\n\n  optimizeNodes(): this | ChildNode | ChildNode[] | undefined {\n    return this\n  }\n\n  optimizeNames(_names: UsedNames, _constants: Constants): this | undefined {\n    return this\n  }\n\n  // get count(): number {\n  //   return 1\n  // }\n}\n\nclass Def extends Node {\n  constructor(\n    private readonly varKind: Name,\n    private readonly name: Name,\n    private rhs?: SafeExpr\n  ) {\n    super()\n  }\n\n  render({es5, _n}: CGOptions): string {\n    const varKind = es5 ? varKinds.var : this.varKind\n    const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`\n    return `${varKind} ${this.name}${rhs};` + _n\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (!names[this.name.str]) return\n    if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return this.rhs instanceof _CodeOrName ? this.rhs.names : {}\n  }\n}\n\nclass Assign extends Node {\n  constructor(\n    readonly lhs: Code,\n    public rhs: SafeExpr,\n    private readonly sideEffects?: boolean\n  ) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.lhs} = ${this.rhs};` + _n\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (this.lhs instanceof Name && !names[this.lhs.str] && !this.sideEffects) return\n    this.rhs = optimizeExpr(this.rhs, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    const names = this.lhs instanceof Name ? {} : {...this.lhs.names}\n    return addExprNames(names, this.rhs)\n  }\n}\n\nclass AssignOp extends Assign {\n  constructor(\n    lhs: Code,\n    private readonly op: Code,\n    rhs: SafeExpr,\n    sideEffects?: boolean\n  ) {\n    super(lhs, rhs, sideEffects)\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.lhs} ${this.op}= ${this.rhs};` + _n\n  }\n}\n\nclass Label extends Node {\n  readonly names: UsedNames = {}\n  constructor(readonly label: Name) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.label}:` + _n\n  }\n}\n\nclass Break extends Node {\n  readonly names: UsedNames = {}\n  constructor(readonly label?: Code) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    const label = this.label ? ` ${this.label}` : \"\"\n    return `break${label};` + _n\n  }\n}\n\nclass Throw extends Node {\n  constructor(readonly error: Code) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `throw ${this.error};` + _n\n  }\n\n  get names(): UsedNames {\n    return this.error.names\n  }\n}\n\nclass AnyCode extends Node {\n  constructor(private code: SafeExpr) {\n    super()\n  }\n\n  render({_n}: CGOptions): string {\n    return `${this.code};` + _n\n  }\n\n  optimizeNodes(): this | undefined {\n    return `${this.code}` ? this : undefined\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this {\n    this.code = optimizeExpr(this.code, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return this.code instanceof _CodeOrName ? this.code.names : {}\n  }\n}\n\nabstract class ParentNode extends Node {\n  constructor(readonly nodes: ChildNode[] = []) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return this.nodes.reduce((code, n) => code + n.render(opts), \"\")\n  }\n\n  optimizeNodes(): this | ChildNode | ChildNode[] | undefined {\n    const {nodes} = this\n    let i = nodes.length\n    while (i--) {\n      const n = nodes[i].optimizeNodes()\n      if (Array.isArray(n)) nodes.splice(i, 1, ...n)\n      else if (n) nodes[i] = n\n      else nodes.splice(i, 1)\n    }\n    return nodes.length > 0 ? this : undefined\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    const {nodes} = this\n    let i = nodes.length\n    while (i--) {\n      // iterating backwards improves 1-pass optimization\n      const n = nodes[i]\n      if (n.optimizeNames(names, constants)) continue\n      subtractNames(names, n.names)\n      nodes.splice(i, 1)\n    }\n    return nodes.length > 0 ? this : undefined\n  }\n\n  get names(): UsedNames {\n    return this.nodes.reduce((names: UsedNames, n) => addNames(names, n.names), {})\n  }\n\n  // get count(): number {\n  //   return this.nodes.reduce((c, n) => c + n.count, 1)\n  // }\n}\n\nabstract class BlockNode extends ParentNode {\n  render(opts: CGOptions): string {\n    return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n\n  }\n}\n\nclass Root extends ParentNode {}\n\nclass Else extends BlockNode {\n  static readonly kind = \"else\"\n}\n\nclass If extends BlockNode {\n  static readonly kind = \"if\"\n  else?: If | Else\n  constructor(\n    private condition: Code | boolean,\n    nodes?: ChildNode[]\n  ) {\n    super(nodes)\n  }\n\n  render(opts: CGOptions): string {\n    let code = `if(${this.condition})` + super.render(opts)\n    if (this.else) code += \"else \" + this.else.render(opts)\n    return code\n  }\n\n  optimizeNodes(): If | ChildNode[] | undefined {\n    super.optimizeNodes()\n    const cond = this.condition\n    if (cond === true) return this.nodes // else is ignored here\n    let e = this.else\n    if (e) {\n      const ns = e.optimizeNodes()\n      e = this.else = Array.isArray(ns) ? new Else(ns) : (ns as Else | undefined)\n    }\n    if (e) {\n      if (cond === false) return e instanceof If ? e : e.nodes\n      if (this.nodes.length) return this\n      return new If(not(cond), e instanceof If ? [e] : e.nodes)\n    }\n    if (cond === false || !this.nodes.length) return undefined\n    return this\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    this.else = this.else?.optimizeNames(names, constants)\n    if (!(super.optimizeNames(names, constants) || this.else)) return\n    this.condition = optimizeExpr(this.condition, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    const names = super.names\n    addExprNames(names, this.condition)\n    if (this.else) addNames(names, this.else.names)\n    return names\n  }\n\n  // get count(): number {\n  //   return super.count + (this.else?.count || 0)\n  // }\n}\n\nabstract class For extends BlockNode {\n  static readonly kind = \"for\"\n}\n\nclass ForLoop extends For {\n  constructor(private iteration: Code) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return `for(${this.iteration})` + super.render(opts)\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (!super.optimizeNames(names, constants)) return\n    this.iteration = optimizeExpr(this.iteration, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return addNames(super.names, this.iteration.names)\n  }\n}\n\nclass ForRange extends For {\n  constructor(\n    private readonly varKind: Name,\n    private readonly name: Name,\n    private readonly from: SafeExpr,\n    private readonly to: SafeExpr\n  ) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    const varKind = opts.es5 ? varKinds.var : this.varKind\n    const {name, from, to} = this\n    return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts)\n  }\n\n  get names(): UsedNames {\n    const names = addExprNames(super.names, this.from)\n    return addExprNames(names, this.to)\n  }\n}\n\nclass ForIter extends For {\n  constructor(\n    private readonly loop: \"of\" | \"in\",\n    private readonly varKind: Name,\n    private readonly name: Name,\n    private iterable: Code\n  ) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts)\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this | undefined {\n    if (!super.optimizeNames(names, constants)) return\n    this.iterable = optimizeExpr(this.iterable, names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    return addNames(super.names, this.iterable.names)\n  }\n}\n\nclass Func extends BlockNode {\n  static readonly kind = \"func\"\n  constructor(\n    public name: Name,\n    public args: Code,\n    public async?: boolean\n  ) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    const _async = this.async ? \"async \" : \"\"\n    return `${_async}function ${this.name}(${this.args})` + super.render(opts)\n  }\n}\n\nclass Return extends ParentNode {\n  static readonly kind = \"return\"\n\n  render(opts: CGOptions): string {\n    return \"return \" + super.render(opts)\n  }\n}\n\nclass Try extends BlockNode {\n  catch?: Catch\n  finally?: Finally\n\n  render(opts: CGOptions): string {\n    let code = \"try\" + super.render(opts)\n    if (this.catch) code += this.catch.render(opts)\n    if (this.finally) code += this.finally.render(opts)\n    return code\n  }\n\n  optimizeNodes(): this {\n    super.optimizeNodes()\n    this.catch?.optimizeNodes() as Catch | undefined\n    this.finally?.optimizeNodes() as Finally | undefined\n    return this\n  }\n\n  optimizeNames(names: UsedNames, constants: Constants): this {\n    super.optimizeNames(names, constants)\n    this.catch?.optimizeNames(names, constants)\n    this.finally?.optimizeNames(names, constants)\n    return this\n  }\n\n  get names(): UsedNames {\n    const names = super.names\n    if (this.catch) addNames(names, this.catch.names)\n    if (this.finally) addNames(names, this.finally.names)\n    return names\n  }\n\n  // get count(): number {\n  //   return super.count + (this.catch?.count || 0) + (this.finally?.count || 0)\n  // }\n}\n\nclass Catch extends BlockNode {\n  static readonly kind = \"catch\"\n  constructor(readonly error: Name) {\n    super()\n  }\n\n  render(opts: CGOptions): string {\n    return `catch(${this.error})` + super.render(opts)\n  }\n}\n\nclass Finally extends BlockNode {\n  static readonly kind = \"finally\"\n  render(opts: CGOptions): string {\n    return \"finally\" + super.render(opts)\n  }\n}\n\ntype StartBlockNode = If | For | Func | Return | Try\n\ntype LeafNode = Def | Assign | Label | Break | Throw | AnyCode\n\ntype ChildNode = StartBlockNode | LeafNode\n\ntype EndBlockNodeType =\n  | typeof If\n  | typeof Else\n  | typeof For\n  | typeof Func\n  | typeof Return\n  | typeof Catch\n  | typeof Finally\n\ntype Constants = Record<string, SafeExpr | undefined>\n\nexport interface CodeGenOptions {\n  es5?: boolean\n  lines?: boolean\n  ownProperties?: boolean\n}\n\ninterface CGOptions extends CodeGenOptions {\n  _n: \"\\n\" | \"\"\n}\n\nexport class CodeGen {\n  readonly _scope: Scope\n  readonly _extScope: ValueScope\n  readonly _values: ScopeValueSets = {}\n  private readonly _nodes: ParentNode[]\n  private readonly _blockStarts: number[] = []\n  private readonly _constants: Constants = {}\n  private readonly opts: CGOptions\n\n  constructor(extScope: ValueScope, opts: CodeGenOptions = {}) {\n    this.opts = {...opts, _n: opts.lines ? \"\\n\" : \"\"}\n    this._extScope = extScope\n    this._scope = new Scope({parent: extScope})\n    this._nodes = [new Root()]\n  }\n\n  toString(): string {\n    return this._root.render(this.opts)\n  }\n\n  // returns unique name in the internal scope\n  name(prefix: string): Name {\n    return this._scope.name(prefix)\n  }\n\n  // reserves unique name in the external scope\n  scopeName(prefix: string): ValueScopeName {\n    return this._extScope.name(prefix)\n  }\n\n  // reserves unique name in the external scope and assigns value to it\n  scopeValue(prefixOrName: ValueScopeName | string, value: NameValue): Name {\n    const name = this._extScope.value(prefixOrName, value)\n    const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set())\n    vs.add(name)\n    return name\n  }\n\n  getScopeValue(prefix: string, keyOrRef: unknown): ValueScopeName | undefined {\n    return this._extScope.getValue(prefix, keyOrRef)\n  }\n\n  // return code that assigns values in the external scope to the names that are used internally\n  // (same names that were returned by gen.scopeName or gen.scopeValue)\n  scopeRefs(scopeName: Name): Code {\n    return this._extScope.scopeRefs(scopeName, this._values)\n  }\n\n  scopeCode(): Code {\n    return this._extScope.scopeCode(this._values)\n  }\n\n  private _def(\n    varKind: Name,\n    nameOrPrefix: Name | string,\n    rhs?: SafeExpr,\n    constant?: boolean\n  ): Name {\n    const name = this._scope.toName(nameOrPrefix)\n    if (rhs !== undefined && constant) this._constants[name.str] = rhs\n    this._leafNode(new Def(varKind, name, rhs))\n    return name\n  }\n\n  // `const` declaration (`var` in es5 mode)\n  const(nameOrPrefix: Name | string, rhs: SafeExpr, _constant?: boolean): Name {\n    return this._def(varKinds.const, nameOrPrefix, rhs, _constant)\n  }\n\n  // `let` declaration with optional assignment (`var` in es5 mode)\n  let(nameOrPrefix: Name | string, rhs?: SafeExpr, _constant?: boolean): Name {\n    return this._def(varKinds.let, nameOrPrefix, rhs, _constant)\n  }\n\n  // `var` declaration with optional assignment\n  var(nameOrPrefix: Name | string, rhs?: SafeExpr, _constant?: boolean): Name {\n    return this._def(varKinds.var, nameOrPrefix, rhs, _constant)\n  }\n\n  // assignment code\n  assign(lhs: Code, rhs: SafeExpr, sideEffects?: boolean): CodeGen {\n    return this._leafNode(new Assign(lhs, rhs, sideEffects))\n  }\n\n  // `+=` code\n  add(lhs: Code, rhs: SafeExpr): CodeGen {\n    return this._leafNode(new AssignOp(lhs, operators.ADD, rhs))\n  }\n\n  // appends passed SafeExpr to code or executes Block\n  code(c: Block | SafeExpr): CodeGen {\n    if (typeof c == \"function\") c()\n    else if (c !== nil) this._leafNode(new AnyCode(c))\n    return this\n  }\n\n  // returns code for object literal for the passed argument list of key-value pairs\n  object(...keyValues: [Name | string, SafeExpr | string][]): _Code {\n    const code: CodeItem[] = [\"{\"]\n    for (const [key, value] of keyValues) {\n      if (code.length > 1) code.push(\",\")\n      code.push(key)\n      if (key !== value || this.opts.es5) {\n        code.push(\":\")\n        addCodeArg(code, value)\n      }\n    }\n    code.push(\"}\")\n    return new _Code(code)\n  }\n\n  // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n  if(condition: Code | boolean, thenBody?: Block, elseBody?: Block): CodeGen {\n    this._blockNode(new If(condition))\n\n    if (thenBody && elseBody) {\n      this.code(thenBody).else().code(elseBody).endIf()\n    } else if (thenBody) {\n      this.code(thenBody).endIf()\n    } else if (elseBody) {\n      throw new Error('CodeGen: \"else\" body without \"then\" body')\n    }\n    return this\n  }\n\n  // `else if` clause - invalid without `if` or after `else` clauses\n  elseIf(condition: Code | boolean): CodeGen {\n    return this._elseNode(new If(condition))\n  }\n\n  // `else` clause - only valid after `if` or `else if` clauses\n  else(): CodeGen {\n    return this._elseNode(new Else())\n  }\n\n  // end `if` statement (needed if gen.if was used only with condition)\n  endIf(): CodeGen {\n    return this._endBlockNode(If, Else)\n  }\n\n  private _for(node: For, forBody?: Block): CodeGen {\n    this._blockNode(node)\n    if (forBody) this.code(forBody).endFor()\n    return this\n  }\n\n  // a generic `for` clause (or statement if `forBody` is passed)\n  for(iteration: Code, forBody?: Block): CodeGen {\n    return this._for(new ForLoop(iteration), forBody)\n  }\n\n  // `for` statement for a range of values\n  forRange(\n    nameOrPrefix: Name | string,\n    from: SafeExpr,\n    to: SafeExpr,\n    forBody: (index: Name) => void,\n    varKind: Code = this.opts.es5 ? varKinds.var : varKinds.let\n  ): CodeGen {\n    const name = this._scope.toName(nameOrPrefix)\n    return this._for(new ForRange(varKind, name, from, to), () => forBody(name))\n  }\n\n  // `for-of` statement (in es5 mode replace with a normal for loop)\n  forOf(\n    nameOrPrefix: Name | string,\n    iterable: Code,\n    forBody: (item: Name) => void,\n    varKind: Code = varKinds.const\n  ): CodeGen {\n    const name = this._scope.toName(nameOrPrefix)\n    if (this.opts.es5) {\n      const arr = iterable instanceof Name ? iterable : this.var(\"_arr\", iterable)\n      return this.forRange(\"_i\", 0, _`${arr}.length`, (i) => {\n        this.var(name, _`${arr}[${i}]`)\n        forBody(name)\n      })\n    }\n    return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name))\n  }\n\n  // `for-in` statement.\n  // With option `ownProperties` replaced with a `for-of` loop for object keys\n  forIn(\n    nameOrPrefix: Name | string,\n    obj: Code,\n    forBody: (item: Name) => void,\n    varKind: Code = this.opts.es5 ? varKinds.var : varKinds.const\n  ): CodeGen {\n    if (this.opts.ownProperties) {\n      return this.forOf(nameOrPrefix, _`Object.keys(${obj})`, forBody)\n    }\n    const name = this._scope.toName(nameOrPrefix)\n    return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name))\n  }\n\n  // end `for` loop\n  endFor(): CodeGen {\n    return this._endBlockNode(For)\n  }\n\n  // `label` statement\n  label(label: Name): CodeGen {\n    return this._leafNode(new Label(label))\n  }\n\n  // `break` statement\n  break(label?: Code): CodeGen {\n    return this._leafNode(new Break(label))\n  }\n\n  // `return` statement\n  return(value: Block | SafeExpr): CodeGen {\n    const node = new Return()\n    this._blockNode(node)\n    this.code(value)\n    if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node')\n    return this._endBlockNode(Return)\n  }\n\n  // `try` statement\n  try(tryBody: Block, catchCode?: (e: Name) => void, finallyCode?: Block): CodeGen {\n    if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"')\n    const node = new Try()\n    this._blockNode(node)\n    this.code(tryBody)\n    if (catchCode) {\n      const error = this.name(\"e\")\n      this._currNode = node.catch = new Catch(error)\n      catchCode(error)\n    }\n    if (finallyCode) {\n      this._currNode = node.finally = new Finally()\n      this.code(finallyCode)\n    }\n    return this._endBlockNode(Catch, Finally)\n  }\n\n  // `throw` statement\n  throw(error: Code): CodeGen {\n    return this._leafNode(new Throw(error))\n  }\n\n  // start self-balancing block\n  block(body?: Block, nodeCount?: number): CodeGen {\n    this._blockStarts.push(this._nodes.length)\n    if (body) this.code(body).endBlock(nodeCount)\n    return this\n  }\n\n  // end the current self-balancing block\n  endBlock(nodeCount?: number): CodeGen {\n    const len = this._blockStarts.pop()\n    if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\")\n    const toClose = this._nodes.length - len\n    if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {\n      throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`)\n    }\n    this._nodes.length = len\n    return this\n  }\n\n  // `function` heading (or definition if funcBody is passed)\n  func(name: Name, args: Code = nil, async?: boolean, funcBody?: Block): CodeGen {\n    this._blockNode(new Func(name, args, async))\n    if (funcBody) this.code(funcBody).endFunc()\n    return this\n  }\n\n  // end function definition\n  endFunc(): CodeGen {\n    return this._endBlockNode(Func)\n  }\n\n  optimize(n = 1): void {\n    while (n-- > 0) {\n      this._root.optimizeNodes()\n      this._root.optimizeNames(this._root.names, this._constants)\n    }\n  }\n\n  private _leafNode(node: LeafNode): CodeGen {\n    this._currNode.nodes.push(node)\n    return this\n  }\n\n  private _blockNode(node: StartBlockNode): void {\n    this._currNode.nodes.push(node)\n    this._nodes.push(node)\n  }\n\n  private _endBlockNode(N1: EndBlockNodeType, N2?: EndBlockNodeType): CodeGen {\n    const n = this._currNode\n    if (n instanceof N1 || (N2 && n instanceof N2)) {\n      this._nodes.pop()\n      return this\n    }\n    throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`)\n  }\n\n  private _elseNode(node: If | Else): CodeGen {\n    const n = this._currNode\n    if (!(n instanceof If)) {\n      throw new Error('CodeGen: \"else\" without \"if\"')\n    }\n    this._currNode = n.else = node\n    return this\n  }\n\n  private get _root(): Root {\n    return this._nodes[0] as Root\n  }\n\n  private get _currNode(): ParentNode {\n    const ns = this._nodes\n    return ns[ns.length - 1]\n  }\n\n  private set _currNode(node: ParentNode) {\n    const ns = this._nodes\n    ns[ns.length - 1] = node\n  }\n\n  // get nodeCount(): number {\n  //   return this._root.count\n  // }\n}\n\nfunction addNames(names: UsedNames, from: UsedNames): UsedNames {\n  for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0)\n  return names\n}\n\nfunction addExprNames(names: UsedNames, from: SafeExpr): UsedNames {\n  return from instanceof _CodeOrName ? addNames(names, from.names) : names\n}\n\nfunction optimizeExpr<T extends SafeExpr | Code>(expr: T, names: UsedNames, constants: Constants): T\nfunction optimizeExpr(expr: SafeExpr, names: UsedNames, constants: Constants): SafeExpr {\n  if (expr instanceof Name) return replaceName(expr)\n  if (!canOptimize(expr)) return expr\n  return new _Code(\n    expr._items.reduce((items: CodeItem[], c: SafeExpr | string) => {\n      if (c instanceof Name) c = replaceName(c)\n      if (c instanceof _Code) items.push(...c._items)\n      else items.push(c)\n      return items\n    }, [])\n  )\n\n  function replaceName(n: Name): SafeExpr {\n    const c = constants[n.str]\n    if (c === undefined || names[n.str] !== 1) return n\n    delete names[n.str]\n    return c\n  }\n\n  function canOptimize(e: SafeExpr): e is _Code {\n    return (\n      e instanceof _Code &&\n      e._items.some(\n        (c) => c instanceof Name && names[c.str] === 1 && constants[c.str] !== undefined\n      )\n    )\n  }\n}\n\nfunction subtractNames(names: UsedNames, from: UsedNames): void {\n  for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0)\n}\n\nexport function not<T extends Code | SafeExpr>(x: T): T\nexport function not(x: Code | SafeExpr): Code | SafeExpr {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : _`!${par(x)}`\n}\n\nconst andCode = mappend(operators.AND)\n\n// boolean AND (&&) expression with the passed arguments\nexport function and(...args: Code[]): Code {\n  return args.reduce(andCode)\n}\n\nconst orCode = mappend(operators.OR)\n\n// boolean OR (||) expression with the passed arguments\nexport function or(...args: Code[]): Code {\n  return args.reduce(orCode)\n}\n\ntype MAppend = (x: Code, y: Code) => Code\n\nfunction mappend(op: Code): MAppend {\n  return (x, y) => (x === nil ? y : y === nil ? x : _`${par(x)} ${op} ${par(y)}`)\n}\n\nfunction par(x: Code): Code {\n  return x instanceof Name ? x : _`(${x})`\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}