{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nconst util_1 = require(\"../util\");\nvar Group;\n(function (Group) {\n  Group[\"conditional\"] = \"conditional\";\n  Group[\"function\"] = \"function\";\n  Group[\"import\"] = \"import\";\n  Group[\"intersection\"] = \"intersection\";\n  Group[\"keyword\"] = \"keyword\";\n  Group[\"nullish\"] = \"nullish\";\n  Group[\"literal\"] = \"literal\";\n  Group[\"named\"] = \"named\";\n  Group[\"object\"] = \"object\";\n  Group[\"operator\"] = \"operator\";\n  Group[\"tuple\"] = \"tuple\";\n  Group[\"union\"] = \"union\";\n})(Group || (Group = {}));\nfunction getGroup(node) {\n  switch (node.type) {\n    case utils_1.AST_NODE_TYPES.TSConditionalType:\n      return Group.conditional;\n    case utils_1.AST_NODE_TYPES.TSConstructorType:\n    case utils_1.AST_NODE_TYPES.TSFunctionType:\n      return Group.function;\n    case utils_1.AST_NODE_TYPES.TSImportType:\n      return Group.import;\n    case utils_1.AST_NODE_TYPES.TSIntersectionType:\n      return Group.intersection;\n    case utils_1.AST_NODE_TYPES.TSAnyKeyword:\n    case utils_1.AST_NODE_TYPES.TSBigIntKeyword:\n    case utils_1.AST_NODE_TYPES.TSBooleanKeyword:\n    case utils_1.AST_NODE_TYPES.TSNeverKeyword:\n    case utils_1.AST_NODE_TYPES.TSNumberKeyword:\n    case utils_1.AST_NODE_TYPES.TSObjectKeyword:\n    case utils_1.AST_NODE_TYPES.TSStringKeyword:\n    case utils_1.AST_NODE_TYPES.TSSymbolKeyword:\n    case utils_1.AST_NODE_TYPES.TSThisType:\n    case utils_1.AST_NODE_TYPES.TSUnknownKeyword:\n    case utils_1.AST_NODE_TYPES.TSIntrinsicKeyword:\n      return Group.keyword;\n    case utils_1.AST_NODE_TYPES.TSNullKeyword:\n    case utils_1.AST_NODE_TYPES.TSUndefinedKeyword:\n    case utils_1.AST_NODE_TYPES.TSVoidKeyword:\n      return Group.nullish;\n    case utils_1.AST_NODE_TYPES.TSLiteralType:\n    case utils_1.AST_NODE_TYPES.TSTemplateLiteralType:\n      return Group.literal;\n    case utils_1.AST_NODE_TYPES.TSArrayType:\n    case utils_1.AST_NODE_TYPES.TSIndexedAccessType:\n    case utils_1.AST_NODE_TYPES.TSInferType:\n    case utils_1.AST_NODE_TYPES.TSTypeReference:\n    case utils_1.AST_NODE_TYPES.TSQualifiedName:\n      return Group.named;\n    case utils_1.AST_NODE_TYPES.TSMappedType:\n    case utils_1.AST_NODE_TYPES.TSTypeLiteral:\n      return Group.object;\n    case utils_1.AST_NODE_TYPES.TSTypeOperator:\n    case utils_1.AST_NODE_TYPES.TSTypeQuery:\n      return Group.operator;\n    case utils_1.AST_NODE_TYPES.TSTupleType:\n      return Group.tuple;\n    case utils_1.AST_NODE_TYPES.TSUnionType:\n      return Group.union;\n    // These types should never occur as part of a union/intersection\n    case utils_1.AST_NODE_TYPES.TSAbstractKeyword:\n    case utils_1.AST_NODE_TYPES.TSAsyncKeyword:\n    case utils_1.AST_NODE_TYPES.TSDeclareKeyword:\n    case utils_1.AST_NODE_TYPES.TSExportKeyword:\n    case utils_1.AST_NODE_TYPES.TSNamedTupleMember:\n    case utils_1.AST_NODE_TYPES.TSOptionalType:\n    case utils_1.AST_NODE_TYPES.TSPrivateKeyword:\n    case utils_1.AST_NODE_TYPES.TSProtectedKeyword:\n    case utils_1.AST_NODE_TYPES.TSPublicKeyword:\n    case utils_1.AST_NODE_TYPES.TSReadonlyKeyword:\n    case utils_1.AST_NODE_TYPES.TSRestType:\n    case utils_1.AST_NODE_TYPES.TSStaticKeyword:\n    case utils_1.AST_NODE_TYPES.TSTypePredicate:\n      /* istanbul ignore next */\n      throw new Error(`Unexpected Type ${node.type}`);\n  }\n}\nexports.default = util.createRule({\n  name: 'sort-type-union-intersection-members',\n  meta: {\n    deprecated: true,\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce members of a type union/intersection to be sorted alphabetically',\n      recommended: false\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    messages: {\n      notSorted: '{{type}} type members must be sorted.',\n      notSortedNamed: '{{type}} type {{name}} members must be sorted.',\n      suggestFix: 'Sort members of type (removes all comments).'\n    },\n    replacedBy: ['@typescript-eslint/sort-type-constituents'],\n    schema: [{\n      type: 'object',\n      properties: {\n        checkIntersections: {\n          description: 'Whether to check intersection types.',\n          type: 'boolean'\n        },\n        checkUnions: {\n          description: 'Whether to check union types.',\n          type: 'boolean'\n        },\n        groupOrder: {\n          description: 'Ordering of the groups.',\n          type: 'array',\n          items: {\n            type: 'string',\n            enum: (0, util_1.getEnumNames)(Group)\n          }\n        }\n      }\n    }]\n  },\n  defaultOptions: [{\n    checkIntersections: true,\n    checkUnions: true,\n    groupOrder: [Group.named, Group.keyword, Group.operator, Group.literal, Group.function, Group.import, Group.conditional, Group.object, Group.tuple, Group.intersection, Group.union, Group.nullish]\n  }],\n  create(context, [{\n    checkIntersections,\n    checkUnions,\n    groupOrder\n  }]) {\n    const sourceCode = context.getSourceCode();\n    const collator = new Intl.Collator('en', {\n      sensitivity: 'base',\n      numeric: true\n    });\n    function checkSorting(node) {\n      var _a;\n      const sourceOrder = node.types.map(type => {\n        var _a;\n        const group = (_a = groupOrder === null || groupOrder === void 0 ? void 0 : groupOrder.indexOf(getGroup(type))) !== null && _a !== void 0 ? _a : -1;\n        return {\n          group: group === -1 ? Number.MAX_SAFE_INTEGER : group,\n          node: type,\n          text: sourceCode.getText(type)\n        };\n      });\n      const expectedOrder = [...sourceOrder].sort((a, b) => {\n        if (a.group !== b.group) {\n          return a.group - b.group;\n        }\n        return collator.compare(a.text, b.text) || (a.text < b.text ? -1 : a.text > b.text ? 1 : 0);\n      });\n      const hasComments = node.types.some(type => {\n        const count = sourceCode.getCommentsBefore(type).length + sourceCode.getCommentsAfter(type).length;\n        return count > 0;\n      });\n      for (let i = 0; i < expectedOrder.length; i += 1) {\n        if (expectedOrder[i].node !== sourceOrder[i].node) {\n          let messageId = 'notSorted';\n          const data = {\n            name: '',\n            type: node.type === utils_1.AST_NODE_TYPES.TSIntersectionType ? 'Intersection' : 'Union'\n          };\n          if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.TSTypeAliasDeclaration) {\n            messageId = 'notSortedNamed';\n            data.name = node.parent.id.name;\n          }\n          const fix = fixer => {\n            const sorted = expectedOrder.map(t => (0, util_1.typeNodeRequiresParentheses)(t.node, t.text) || node.type === utils_1.AST_NODE_TYPES.TSIntersectionType && t.node.type === utils_1.AST_NODE_TYPES.TSUnionType ? `(${t.text})` : t.text).join(node.type === utils_1.AST_NODE_TYPES.TSIntersectionType ? ' & ' : ' | ');\n            return fixer.replaceText(node, sorted);\n          };\n          return context.report(Object.assign({\n            node,\n            messageId,\n            data\n          }, hasComments ? {\n            suggest: [{\n              messageId: 'suggestFix',\n              fix\n            }]\n          } : {\n            fix\n          }));\n        }\n      }\n    }\n    return Object.assign(Object.assign({}, checkIntersections && {\n      TSIntersectionType(node) {\n        checkSorting(node);\n      }\n    }), checkUnions && {\n      TSUnionType(node) {\n        checkSorting(node);\n      }\n    });\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","util_1","Group","getGroup","node","type","AST_NODE_TYPES","TSConditionalType","conditional","TSConstructorType","TSFunctionType","function","TSImportType","import","TSIntersectionType","intersection","TSAnyKeyword","TSBigIntKeyword","TSBooleanKeyword","TSNeverKeyword","TSNumberKeyword","TSObjectKeyword","TSStringKeyword","TSSymbolKeyword","TSThisType","TSUnknownKeyword","TSIntrinsicKeyword","keyword","TSNullKeyword","TSUndefinedKeyword","TSVoidKeyword","nullish","TSLiteralType","TSTemplateLiteralType","literal","TSArrayType","TSIndexedAccessType","TSInferType","TSTypeReference","TSQualifiedName","named","TSMappedType","TSTypeLiteral","object","TSTypeOperator","TSTypeQuery","operator","TSTupleType","tuple","TSUnionType","union","TSAbstractKeyword","TSAsyncKeyword","TSDeclareKeyword","TSExportKeyword","TSNamedTupleMember","TSOptionalType","TSPrivateKeyword","TSProtectedKeyword","TSPublicKeyword","TSReadonlyKeyword","TSRestType","TSStaticKeyword","TSTypePredicate","Error","exports","default","createRule","name","meta","deprecated","docs","description","recommended","fixable","hasSuggestions","messages","notSorted","notSortedNamed","suggestFix","replacedBy","schema","properties","checkIntersections","checkUnions","groupOrder","items","enum","getEnumNames","defaultOptions","create","context","sourceCode","getSourceCode","collator","Intl","Collator","sensitivity","numeric","checkSorting","sourceOrder","types","map","group","_a","indexOf","Number","MAX_SAFE_INTEGER","text","getText","expectedOrder","sort","a","b","compare","hasComments","some","count","getCommentsBefore","length","getCommentsAfter","i","messageId","data","parent","TSTypeAliasDeclaration","id","fix","fixer","sorted","t","typeNodeRequiresParentheses","join","replaceText","report","Object","assign","suggest"],"sources":["../../src/rules/sort-type-union-intersection-members.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}