{"ast":null,"code":"import { extname, sep, resolve, posix } from 'path';\nimport pm from 'picomatch';\nconst addExtension = function addExtension(filename, ext = '.js') {\n  let result = `${filename}`;\n  if (!extname(filename)) result += ext;\n  return result;\n};\nfunction walk(ast, {\n  enter,\n  leave\n}) {\n  return visit(ast, null, enter, leave);\n}\nlet should_skip = false;\nlet should_remove = false;\nlet replacement = null;\nconst context = {\n  skip: () => should_skip = true,\n  remove: () => should_remove = true,\n  replace: node => replacement = node\n};\nfunction replace(parent, prop, index, node) {\n  if (parent) {\n    if (index !== null) {\n      parent[prop][index] = node;\n    } else {\n      parent[prop] = node;\n    }\n  }\n}\nfunction remove(parent, prop, index) {\n  if (parent) {\n    if (index !== null) {\n      parent[prop].splice(index, 1);\n    } else {\n      delete parent[prop];\n    }\n  }\n}\nfunction visit(node, parent, enter, leave, prop, index) {\n  if (node) {\n    if (enter) {\n      const _should_skip = should_skip;\n      const _should_remove = should_remove;\n      const _replacement = replacement;\n      should_skip = false;\n      should_remove = false;\n      replacement = null;\n      enter.call(context, node, parent, prop, index);\n      if (replacement) {\n        node = replacement;\n        replace(parent, prop, index, node);\n      }\n      if (should_remove) {\n        remove(parent, prop, index);\n      }\n      const skipped = should_skip;\n      const removed = should_remove;\n      should_skip = _should_skip;\n      should_remove = _should_remove;\n      replacement = _replacement;\n      if (skipped) return node;\n      if (removed) return null;\n    }\n    for (const key in node) {\n      const value = node[key];\n      if (typeof value !== 'object') {\n        continue;\n      } else if (Array.isArray(value)) {\n        for (let j = 0, k = 0; j < value.length; j += 1, k += 1) {\n          if (value[j] !== null && typeof value[j].type === 'string') {\n            if (!visit(value[j], node, enter, leave, key, k)) {\n              // removed\n              j--;\n            }\n          }\n        }\n      } else if (value !== null && typeof value.type === 'string') {\n        visit(value, node, enter, leave, key, null);\n      }\n    }\n    if (leave) {\n      const _replacement = replacement;\n      const _should_remove = should_remove;\n      replacement = null;\n      should_remove = false;\n      leave.call(context, node, parent, prop, index);\n      if (replacement) {\n        node = replacement;\n        replace(parent, prop, index, node);\n      }\n      if (should_remove) {\n        remove(parent, prop, index);\n      }\n      const removed = should_remove;\n      replacement = _replacement;\n      should_remove = _should_remove;\n      if (removed) return null;\n    }\n  }\n  return node;\n}\nconst extractors = {\n  ArrayPattern(names, param) {\n    for (const element of param.elements) {\n      if (element) extractors[element.type](names, element);\n    }\n  },\n  AssignmentPattern(names, param) {\n    extractors[param.left.type](names, param.left);\n  },\n  Identifier(names, param) {\n    names.push(param.name);\n  },\n  MemberExpression() {},\n  ObjectPattern(names, param) {\n    for (const prop of param.properties) {\n      // @ts-ignore Typescript reports that this is not a valid type\n      if (prop.type === 'RestElement') {\n        extractors.RestElement(names, prop);\n      } else {\n        extractors[prop.value.type](names, prop.value);\n      }\n    }\n  },\n  RestElement(names, param) {\n    extractors[param.argument.type](names, param.argument);\n  }\n};\nconst extractAssignedNames = function extractAssignedNames(param) {\n  const names = [];\n  extractors[param.type](names, param);\n  return names;\n};\nconst blockDeclarations = {\n  const: true,\n  let: true\n};\nclass Scope {\n  constructor(options = {}) {\n    this.parent = options.parent;\n    this.isBlockScope = !!options.block;\n    this.declarations = Object.create(null);\n    if (options.params) {\n      options.params.forEach(param => {\n        extractAssignedNames(param).forEach(name => {\n          this.declarations[name] = true;\n        });\n      });\n    }\n  }\n  addDeclaration(node, isBlockDeclaration, isVar) {\n    if (!isBlockDeclaration && this.isBlockScope) {\n      // it's a `var` or function node, and this\n      // is a block scope, so we need to go up\n      this.parent.addDeclaration(node, isBlockDeclaration, isVar);\n    } else if (node.id) {\n      extractAssignedNames(node.id).forEach(name => {\n        this.declarations[name] = true;\n      });\n    }\n  }\n  contains(name) {\n    return this.declarations[name] || (this.parent ? this.parent.contains(name) : false);\n  }\n}\nconst attachScopes = function attachScopes(ast, propertyName = 'scope') {\n  let scope = new Scope();\n  walk(ast, {\n    enter(n, parent) {\n      const node = n;\n      // function foo () {...}\n      // class Foo {...}\n      if (/(Function|Class)Declaration/.test(node.type)) {\n        scope.addDeclaration(node, false, false);\n      }\n      // var foo = 1\n      if (node.type === 'VariableDeclaration') {\n        const {\n          kind\n        } = node;\n        const isBlockDeclaration = blockDeclarations[kind];\n        // don't add const/let declarations in the body of a for loop #113\n        const parentType = parent ? parent.type : '';\n        if (!(isBlockDeclaration && /ForOfStatement/.test(parentType))) {\n          node.declarations.forEach(declaration => {\n            scope.addDeclaration(declaration, isBlockDeclaration, true);\n          });\n        }\n      }\n      let newScope;\n      // create new function scope\n      if (/Function/.test(node.type)) {\n        const func = node;\n        newScope = new Scope({\n          parent: scope,\n          block: false,\n          params: func.params\n        });\n        // named function expressions - the name is considered\n        // part of the function's scope\n        if (func.type === 'FunctionExpression' && func.id) {\n          newScope.addDeclaration(func, false, false);\n        }\n      }\n      // create new block scope\n      if (node.type === 'BlockStatement' && !/Function/.test(parent.type)) {\n        newScope = new Scope({\n          parent: scope,\n          block: true\n        });\n      }\n      // catch clause has its own block scope\n      if (node.type === 'CatchClause') {\n        newScope = new Scope({\n          parent: scope,\n          params: node.param ? [node.param] : [],\n          block: true\n        });\n      }\n      if (newScope) {\n        Object.defineProperty(node, propertyName, {\n          value: newScope,\n          configurable: true\n        });\n        scope = newScope;\n      }\n    },\n    leave(n) {\n      const node = n;\n      if (node[propertyName]) scope = scope.parent;\n    }\n  });\n  return scope;\n};\n\n// Helper since Typescript can't detect readonly arrays with Array.isArray\nfunction isArray(arg) {\n  return Array.isArray(arg);\n}\nfunction ensureArray(thing) {\n  if (isArray(thing)) return thing;\n  if (thing == null) return [];\n  return [thing];\n}\nfunction getMatcherString(id, resolutionBase) {\n  if (resolutionBase === false) {\n    return id;\n  }\n  // resolve('') is valid and will default to process.cwd()\n  const basePath = resolve(resolutionBase || '').split(sep).join('/')\n  // escape all possible (posix + win) path characters that might interfere with regex\n  .replace(/[-^$*+?.()|[\\]{}]/g, '\\\\$&');\n  // Note that we use posix.join because:\n  // 1. the basePath has been normalized to use /\n  // 2. the incoming glob (id) matcher, also uses /\n  // otherwise Node will force backslash (\\) on windows\n  return posix.join(basePath, id);\n}\nconst createFilter = function createFilter(include, exclude, options) {\n  const resolutionBase = options && options.resolve;\n  const getMatcher = id => id instanceof RegExp ? id : {\n    test: what => {\n      // this refactor is a tad overly verbose but makes for easy debugging\n      const pattern = getMatcherString(id, resolutionBase);\n      const fn = pm(pattern, {\n        dot: true\n      });\n      const result = fn(what);\n      return result;\n    }\n  };\n  const includeMatchers = ensureArray(include).map(getMatcher);\n  const excludeMatchers = ensureArray(exclude).map(getMatcher);\n  return function result(id) {\n    if (typeof id !== 'string') return false;\n    if (/\\0/.test(id)) return false;\n    const pathId = id.split(sep).join('/');\n    for (let i = 0; i < excludeMatchers.length; ++i) {\n      const matcher = excludeMatchers[i];\n      if (matcher.test(pathId)) return false;\n    }\n    for (let i = 0; i < includeMatchers.length; ++i) {\n      const matcher = includeMatchers[i];\n      if (matcher.test(pathId)) return true;\n    }\n    return !includeMatchers.length;\n  };\n};\nconst reservedWords = 'break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public';\nconst builtins = 'arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl';\nconst forbiddenIdentifiers = new Set(`${reservedWords} ${builtins}`.split(' '));\nforbiddenIdentifiers.add('');\nconst makeLegalIdentifier = function makeLegalIdentifier(str) {\n  let identifier = str.replace(/-(\\w)/g, (_, letter) => letter.toUpperCase()).replace(/[^$_a-zA-Z0-9]/g, '_');\n  if (/\\d/.test(identifier[0]) || forbiddenIdentifiers.has(identifier)) {\n    identifier = `_${identifier}`;\n  }\n  return identifier || '_';\n};\nfunction stringify(obj) {\n  return (JSON.stringify(obj) || 'undefined').replace(/[\\u2028\\u2029]/g, char => `\\\\u${`000${char.charCodeAt(0).toString(16)}`.slice(-4)}`);\n}\nfunction serializeArray(arr, indent, baseIndent) {\n  let output = '[';\n  const separator = indent ? `\\n${baseIndent}${indent}` : '';\n  for (let i = 0; i < arr.length; i++) {\n    const key = arr[i];\n    output += `${i > 0 ? ',' : ''}${separator}${serialize(key, indent, baseIndent + indent)}`;\n  }\n  return `${output}${indent ? `\\n${baseIndent}` : ''}]`;\n}\nfunction serializeObject(obj, indent, baseIndent) {\n  let output = '{';\n  const separator = indent ? `\\n${baseIndent}${indent}` : '';\n  const entries = Object.entries(obj);\n  for (let i = 0; i < entries.length; i++) {\n    const [key, value] = entries[i];\n    const stringKey = makeLegalIdentifier(key) === key ? key : stringify(key);\n    output += `${i > 0 ? ',' : ''}${separator}${stringKey}:${indent ? ' ' : ''}${serialize(value, indent, baseIndent + indent)}`;\n  }\n  return `${output}${indent ? `\\n${baseIndent}` : ''}}`;\n}\nfunction serialize(obj, indent, baseIndent) {\n  if (obj === Infinity) return 'Infinity';\n  if (obj === -Infinity) return '-Infinity';\n  if (obj === 0 && 1 / obj === -Infinity) return '-0';\n  if (obj instanceof Date) return `new Date(${obj.getTime()})`;\n  if (obj instanceof RegExp) return obj.toString();\n  if (obj !== obj) return 'NaN'; // eslint-disable-line no-self-compare\n  if (Array.isArray(obj)) return serializeArray(obj, indent, baseIndent);\n  if (obj === null) return 'null';\n  if (typeof obj === 'object') return serializeObject(obj, indent, baseIndent);\n  return stringify(obj);\n}\nconst dataToEsm = function dataToEsm(data, options = {}) {\n  const t = options.compact ? '' : 'indent' in options ? options.indent : '\\t';\n  const _ = options.compact ? '' : ' ';\n  const n = options.compact ? '' : '\\n';\n  const declarationType = options.preferConst ? 'const' : 'var';\n  if (options.namedExports === false || typeof data !== 'object' || Array.isArray(data) || data instanceof Date || data instanceof RegExp || data === null) {\n    const code = serialize(data, options.compact ? null : t, '');\n    const magic = _ || (/^[{[\\-\\/]/.test(code) ? '' : ' '); // eslint-disable-line no-useless-escape\n    return `export default${magic}${code};`;\n  }\n  let namedExportCode = '';\n  const defaultExportRows = [];\n  for (const [key, value] of Object.entries(data)) {\n    if (key === makeLegalIdentifier(key)) {\n      if (options.objectShorthand) defaultExportRows.push(key);else defaultExportRows.push(`${key}:${_}${key}`);\n      namedExportCode += `export ${declarationType} ${key}${_}=${_}${serialize(value, options.compact ? null : t, '')};${n}`;\n    } else {\n      defaultExportRows.push(`${stringify(key)}:${_}${serialize(value, options.compact ? null : t, '')}`);\n    }\n  }\n  return `${namedExportCode}export default${_}{${n}${t}${defaultExportRows.join(`,${n}${t}`)}${n}};${n}`;\n};\n\n// TODO: remove this in next major\nvar index = {\n  addExtension,\n  attachScopes,\n  createFilter,\n  dataToEsm,\n  extractAssignedNames,\n  makeLegalIdentifier\n};\nexport default index;\nexport { addExtension, attachScopes, createFilter, dataToEsm, extractAssignedNames, makeLegalIdentifier };","map":{"version":3,"names":["extname","sep","resolve","posix","pm","addExtension","filename","ext","result","walk","ast","enter","leave","visit","should_skip","should_remove","replacement","context","skip","remove","replace","node","parent","prop","index","splice","_should_skip","_should_remove","_replacement","call","skipped","removed","key","value","Array","isArray","j","k","length","type","extractors","ArrayPattern","names","param","element","elements","AssignmentPattern","left","Identifier","push","name","MemberExpression","ObjectPattern","properties","RestElement","argument","extractAssignedNames","blockDeclarations","const","let","Scope","constructor","options","isBlockScope","block","declarations","Object","create","params","forEach","addDeclaration","isBlockDeclaration","isVar","id","contains","attachScopes","propertyName","scope","n","test","kind","parentType","declaration","newScope","func","defineProperty","configurable","arg","ensureArray","thing","getMatcherString","resolutionBase","basePath","split","join","createFilter","include","exclude","getMatcher","RegExp","what","pattern","fn","dot","includeMatchers","map","excludeMatchers","pathId","i","matcher","reservedWords","builtins","forbiddenIdentifiers","Set","add","makeLegalIdentifier","str","identifier","_","letter","toUpperCase","has","stringify","obj","JSON","char","charCodeAt","toString","slice","serializeArray","arr","indent","baseIndent","output","separator","serialize","serializeObject","entries","stringKey","Infinity","Date","getTime","dataToEsm","data","t","compact","declarationType","preferConst","namedExports","code","magic","namedExportCode","defaultExportRows","objectShorthand"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@rollup/pluginutils/dist/es/index.js"],"sourcesContent":["import { extname, sep, resolve, posix } from 'path';\nimport pm from 'picomatch';\n\nconst addExtension = function addExtension(filename, ext = '.js') {\n    let result = `${filename}`;\n    if (!extname(filename))\n        result += ext;\n    return result;\n};\n\nfunction walk(ast, { enter, leave }) {\n\treturn visit(ast, null, enter, leave);\n}\n\nlet should_skip = false;\nlet should_remove = false;\nlet replacement = null;\nconst context = {\n\tskip: () => should_skip = true,\n\tremove: () => should_remove = true,\n\treplace: (node) => replacement = node\n};\n\nfunction replace(parent, prop, index, node) {\n\tif (parent) {\n\t\tif (index !== null) {\n\t\t\tparent[prop][index] = node;\n\t\t} else {\n\t\t\tparent[prop] = node;\n\t\t}\n\t}\n}\n\nfunction remove(parent, prop, index) {\n\tif (parent) {\n\t\tif (index !== null) {\n\t\t\tparent[prop].splice(index, 1);\n\t\t} else {\n\t\t\tdelete parent[prop];\n\t\t}\n\t}\n}\n\nfunction visit(\n\tnode,\n\tparent,\n\tenter,\n\tleave,\n\tprop,\n\tindex\n) {\n\tif (node) {\n\t\tif (enter) {\n\t\t\tconst _should_skip = should_skip;\n\t\t\tconst _should_remove = should_remove;\n\t\t\tconst _replacement = replacement;\n\t\t\tshould_skip = false;\n\t\t\tshould_remove = false;\n\t\t\treplacement = null;\n\n\t\t\tenter.call(context, node, parent, prop, index);\n\n\t\t\tif (replacement) {\n\t\t\t\tnode = replacement;\n\t\t\t\treplace(parent, prop, index, node);\n\t\t\t}\n\n\t\t\tif (should_remove) {\n\t\t\t\tremove(parent, prop, index);\n\t\t\t}\n\n\t\t\tconst skipped = should_skip;\n\t\t\tconst removed = should_remove;\n\n\t\t\tshould_skip = _should_skip;\n\t\t\tshould_remove = _should_remove;\n\t\t\treplacement = _replacement;\n\n\t\t\tif (skipped) return node;\n\t\t\tif (removed) return null;\n\t\t}\n\n\t\tfor (const key in node) {\n\t\t\tconst value = (node )[key];\n\n\t\t\tif (typeof value !== 'object') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\telse if (Array.isArray(value)) {\n\t\t\t\tfor (let j = 0, k = 0; j < value.length; j += 1, k += 1) {\n\t\t\t\t\tif (value[j] !== null && typeof value[j].type === 'string') {\n\t\t\t\t\t\tif (!visit(value[j], node, enter, leave, key, k)) {\n\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\tj--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (value !== null && typeof value.type === 'string') {\n\t\t\t\tvisit(value, node, enter, leave, key, null);\n\t\t\t}\n\t\t}\n\n\t\tif (leave) {\n\t\t\tconst _replacement = replacement;\n\t\t\tconst _should_remove = should_remove;\n\t\t\treplacement = null;\n\t\t\tshould_remove = false;\n\n\t\t\tleave.call(context, node, parent, prop, index);\n\n\t\t\tif (replacement) {\n\t\t\t\tnode = replacement;\n\t\t\t\treplace(parent, prop, index, node);\n\t\t\t}\n\n\t\t\tif (should_remove) {\n\t\t\t\tremove(parent, prop, index);\n\t\t\t}\n\n\t\t\tconst removed = should_remove;\n\n\t\t\treplacement = _replacement;\n\t\t\tshould_remove = _should_remove;\n\n\t\t\tif (removed) return null;\n\t\t}\n\t}\n\n\treturn node;\n}\n\nconst extractors = {\n    ArrayPattern(names, param) {\n        for (const element of param.elements) {\n            if (element)\n                extractors[element.type](names, element);\n        }\n    },\n    AssignmentPattern(names, param) {\n        extractors[param.left.type](names, param.left);\n    },\n    Identifier(names, param) {\n        names.push(param.name);\n    },\n    MemberExpression() { },\n    ObjectPattern(names, param) {\n        for (const prop of param.properties) {\n            // @ts-ignore Typescript reports that this is not a valid type\n            if (prop.type === 'RestElement') {\n                extractors.RestElement(names, prop);\n            }\n            else {\n                extractors[prop.value.type](names, prop.value);\n            }\n        }\n    },\n    RestElement(names, param) {\n        extractors[param.argument.type](names, param.argument);\n    }\n};\nconst extractAssignedNames = function extractAssignedNames(param) {\n    const names = [];\n    extractors[param.type](names, param);\n    return names;\n};\n\nconst blockDeclarations = {\n    const: true,\n    let: true\n};\nclass Scope {\n    constructor(options = {}) {\n        this.parent = options.parent;\n        this.isBlockScope = !!options.block;\n        this.declarations = Object.create(null);\n        if (options.params) {\n            options.params.forEach((param) => {\n                extractAssignedNames(param).forEach((name) => {\n                    this.declarations[name] = true;\n                });\n            });\n        }\n    }\n    addDeclaration(node, isBlockDeclaration, isVar) {\n        if (!isBlockDeclaration && this.isBlockScope) {\n            // it's a `var` or function node, and this\n            // is a block scope, so we need to go up\n            this.parent.addDeclaration(node, isBlockDeclaration, isVar);\n        }\n        else if (node.id) {\n            extractAssignedNames(node.id).forEach((name) => {\n                this.declarations[name] = true;\n            });\n        }\n    }\n    contains(name) {\n        return this.declarations[name] || (this.parent ? this.parent.contains(name) : false);\n    }\n}\nconst attachScopes = function attachScopes(ast, propertyName = 'scope') {\n    let scope = new Scope();\n    walk(ast, {\n        enter(n, parent) {\n            const node = n;\n            // function foo () {...}\n            // class Foo {...}\n            if (/(Function|Class)Declaration/.test(node.type)) {\n                scope.addDeclaration(node, false, false);\n            }\n            // var foo = 1\n            if (node.type === 'VariableDeclaration') {\n                const { kind } = node;\n                const isBlockDeclaration = blockDeclarations[kind];\n                // don't add const/let declarations in the body of a for loop #113\n                const parentType = parent ? parent.type : '';\n                if (!(isBlockDeclaration && /ForOfStatement/.test(parentType))) {\n                    node.declarations.forEach((declaration) => {\n                        scope.addDeclaration(declaration, isBlockDeclaration, true);\n                    });\n                }\n            }\n            let newScope;\n            // create new function scope\n            if (/Function/.test(node.type)) {\n                const func = node;\n                newScope = new Scope({\n                    parent: scope,\n                    block: false,\n                    params: func.params\n                });\n                // named function expressions - the name is considered\n                // part of the function's scope\n                if (func.type === 'FunctionExpression' && func.id) {\n                    newScope.addDeclaration(func, false, false);\n                }\n            }\n            // create new block scope\n            if (node.type === 'BlockStatement' && !/Function/.test(parent.type)) {\n                newScope = new Scope({\n                    parent: scope,\n                    block: true\n                });\n            }\n            // catch clause has its own block scope\n            if (node.type === 'CatchClause') {\n                newScope = new Scope({\n                    parent: scope,\n                    params: node.param ? [node.param] : [],\n                    block: true\n                });\n            }\n            if (newScope) {\n                Object.defineProperty(node, propertyName, {\n                    value: newScope,\n                    configurable: true\n                });\n                scope = newScope;\n            }\n        },\n        leave(n) {\n            const node = n;\n            if (node[propertyName])\n                scope = scope.parent;\n        }\n    });\n    return scope;\n};\n\n// Helper since Typescript can't detect readonly arrays with Array.isArray\nfunction isArray(arg) {\n    return Array.isArray(arg);\n}\nfunction ensureArray(thing) {\n    if (isArray(thing))\n        return thing;\n    if (thing == null)\n        return [];\n    return [thing];\n}\n\nfunction getMatcherString(id, resolutionBase) {\n    if (resolutionBase === false) {\n        return id;\n    }\n    // resolve('') is valid and will default to process.cwd()\n    const basePath = resolve(resolutionBase || '')\n        .split(sep)\n        .join('/')\n        // escape all possible (posix + win) path characters that might interfere with regex\n        .replace(/[-^$*+?.()|[\\]{}]/g, '\\\\$&');\n    // Note that we use posix.join because:\n    // 1. the basePath has been normalized to use /\n    // 2. the incoming glob (id) matcher, also uses /\n    // otherwise Node will force backslash (\\) on windows\n    return posix.join(basePath, id);\n}\nconst createFilter = function createFilter(include, exclude, options) {\n    const resolutionBase = options && options.resolve;\n    const getMatcher = (id) => id instanceof RegExp\n        ? id\n        : {\n            test: (what) => {\n                // this refactor is a tad overly verbose but makes for easy debugging\n                const pattern = getMatcherString(id, resolutionBase);\n                const fn = pm(pattern, { dot: true });\n                const result = fn(what);\n                return result;\n            }\n        };\n    const includeMatchers = ensureArray(include).map(getMatcher);\n    const excludeMatchers = ensureArray(exclude).map(getMatcher);\n    return function result(id) {\n        if (typeof id !== 'string')\n            return false;\n        if (/\\0/.test(id))\n            return false;\n        const pathId = id.split(sep).join('/');\n        for (let i = 0; i < excludeMatchers.length; ++i) {\n            const matcher = excludeMatchers[i];\n            if (matcher.test(pathId))\n                return false;\n        }\n        for (let i = 0; i < includeMatchers.length; ++i) {\n            const matcher = includeMatchers[i];\n            if (matcher.test(pathId))\n                return true;\n        }\n        return !includeMatchers.length;\n    };\n};\n\nconst reservedWords = 'break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public';\nconst builtins = 'arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl';\nconst forbiddenIdentifiers = new Set(`${reservedWords} ${builtins}`.split(' '));\nforbiddenIdentifiers.add('');\nconst makeLegalIdentifier = function makeLegalIdentifier(str) {\n    let identifier = str\n        .replace(/-(\\w)/g, (_, letter) => letter.toUpperCase())\n        .replace(/[^$_a-zA-Z0-9]/g, '_');\n    if (/\\d/.test(identifier[0]) || forbiddenIdentifiers.has(identifier)) {\n        identifier = `_${identifier}`;\n    }\n    return identifier || '_';\n};\n\nfunction stringify(obj) {\n    return (JSON.stringify(obj) || 'undefined').replace(/[\\u2028\\u2029]/g, (char) => `\\\\u${`000${char.charCodeAt(0).toString(16)}`.slice(-4)}`);\n}\nfunction serializeArray(arr, indent, baseIndent) {\n    let output = '[';\n    const separator = indent ? `\\n${baseIndent}${indent}` : '';\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i];\n        output += `${i > 0 ? ',' : ''}${separator}${serialize(key, indent, baseIndent + indent)}`;\n    }\n    return `${output}${indent ? `\\n${baseIndent}` : ''}]`;\n}\nfunction serializeObject(obj, indent, baseIndent) {\n    let output = '{';\n    const separator = indent ? `\\n${baseIndent}${indent}` : '';\n    const entries = Object.entries(obj);\n    for (let i = 0; i < entries.length; i++) {\n        const [key, value] = entries[i];\n        const stringKey = makeLegalIdentifier(key) === key ? key : stringify(key);\n        output += `${i > 0 ? ',' : ''}${separator}${stringKey}:${indent ? ' ' : ''}${serialize(value, indent, baseIndent + indent)}`;\n    }\n    return `${output}${indent ? `\\n${baseIndent}` : ''}}`;\n}\nfunction serialize(obj, indent, baseIndent) {\n    if (obj === Infinity)\n        return 'Infinity';\n    if (obj === -Infinity)\n        return '-Infinity';\n    if (obj === 0 && 1 / obj === -Infinity)\n        return '-0';\n    if (obj instanceof Date)\n        return `new Date(${obj.getTime()})`;\n    if (obj instanceof RegExp)\n        return obj.toString();\n    if (obj !== obj)\n        return 'NaN'; // eslint-disable-line no-self-compare\n    if (Array.isArray(obj))\n        return serializeArray(obj, indent, baseIndent);\n    if (obj === null)\n        return 'null';\n    if (typeof obj === 'object')\n        return serializeObject(obj, indent, baseIndent);\n    return stringify(obj);\n}\nconst dataToEsm = function dataToEsm(data, options = {}) {\n    const t = options.compact ? '' : 'indent' in options ? options.indent : '\\t';\n    const _ = options.compact ? '' : ' ';\n    const n = options.compact ? '' : '\\n';\n    const declarationType = options.preferConst ? 'const' : 'var';\n    if (options.namedExports === false ||\n        typeof data !== 'object' ||\n        Array.isArray(data) ||\n        data instanceof Date ||\n        data instanceof RegExp ||\n        data === null) {\n        const code = serialize(data, options.compact ? null : t, '');\n        const magic = _ || (/^[{[\\-\\/]/.test(code) ? '' : ' '); // eslint-disable-line no-useless-escape\n        return `export default${magic}${code};`;\n    }\n    let namedExportCode = '';\n    const defaultExportRows = [];\n    for (const [key, value] of Object.entries(data)) {\n        if (key === makeLegalIdentifier(key)) {\n            if (options.objectShorthand)\n                defaultExportRows.push(key);\n            else\n                defaultExportRows.push(`${key}:${_}${key}`);\n            namedExportCode += `export ${declarationType} ${key}${_}=${_}${serialize(value, options.compact ? null : t, '')};${n}`;\n        }\n        else {\n            defaultExportRows.push(`${stringify(key)}:${_}${serialize(value, options.compact ? null : t, '')}`);\n        }\n    }\n    return `${namedExportCode}export default${_}{${n}${t}${defaultExportRows.join(`,${n}${t}`)}${n}};${n}`;\n};\n\n// TODO: remove this in next major\nvar index = {\n    addExtension,\n    attachScopes,\n    createFilter,\n    dataToEsm,\n    extractAssignedNames,\n    makeLegalIdentifier\n};\n\nexport default index;\nexport { addExtension, attachScopes, createFilter, dataToEsm, extractAssignedNames, makeLegalIdentifier };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}