{"ast":null,"code":"var everyValuesPair = require('./every-values-pair');\nvar hasInherit = require('./has-inherit');\nvar hasSameValues = require('./has-same-values');\nvar populateComponents = require('./populate-components');\nvar configuration = require('../../configuration');\nvar deepClone = require('../../clone').deep;\nvar restoreWithComponents = require('../restore-with-components');\nvar restoreFromOptimizing = require('../../restore-from-optimizing');\nvar wrapSingle = require('../../wrap-for-optimizing').single;\nvar serializeBody = require('../../../writer/one-time').body;\nvar Token = require('../../../tokenizer/token');\nfunction mergeIntoShorthands(properties, validator) {\n  var candidates = {};\n  var descriptor;\n  var componentOf;\n  var property;\n  var i, l;\n  var j, m;\n\n  // there is no shorthand property made up of less than 3 longhands\n  if (properties.length < 3) {\n    return;\n  }\n  for (i = 0, l = properties.length; i < l; i++) {\n    property = properties[i];\n    descriptor = configuration[property.name];\n    if (property.dynamic) {\n      continue;\n    }\n    if (property.unused) {\n      continue;\n    }\n    if (property.hack) {\n      continue;\n    }\n    if (property.block) {\n      continue;\n    }\n    if (descriptor && descriptor.singleTypeComponents && !hasSameValues(property)) {\n      continue;\n    }\n    invalidateOrCompact(properties, i, candidates, validator);\n    if (descriptor && descriptor.componentOf) {\n      for (j = 0, m = descriptor.componentOf.length; j < m; j++) {\n        componentOf = descriptor.componentOf[j];\n        candidates[componentOf] = candidates[componentOf] || {};\n        candidates[componentOf][property.name] = property;\n      }\n    }\n  }\n  invalidateOrCompact(properties, i, candidates, validator);\n}\nfunction invalidateOrCompact(properties, position, candidates, validator) {\n  var invalidatedBy = properties[position];\n  var shorthandName;\n  var shorthandDescriptor;\n  var candidateComponents;\n  var replacedCandidates = [];\n  var i;\n  for (shorthandName in candidates) {\n    if (undefined !== invalidatedBy && shorthandName == invalidatedBy.name) {\n      continue;\n    }\n    shorthandDescriptor = configuration[shorthandName];\n    candidateComponents = candidates[shorthandName];\n    if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {\n      delete candidates[shorthandName];\n      continue;\n    }\n    if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {\n      continue;\n    }\n    if (mixedImportance(candidateComponents)) {\n      continue;\n    }\n    if (!overridable(candidateComponents, shorthandName, validator)) {\n      continue;\n    }\n    if (!mergeable(candidateComponents)) {\n      continue;\n    }\n    if (mixedInherit(candidateComponents)) {\n      replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);\n    } else {\n      replaceWithShorthand(properties, candidateComponents, shorthandName, validator);\n    }\n    replacedCandidates.push(shorthandName);\n  }\n  for (i = replacedCandidates.length - 1; i >= 0; i--) {\n    delete candidates[replacedCandidates[i]];\n  }\n}\nfunction invalidates(candidates, shorthandName, invalidatedBy) {\n  var shorthandDescriptor = configuration[shorthandName];\n  var invalidatedByDescriptor = configuration[invalidatedBy.name];\n  var componentName;\n  if ('overridesShorthands' in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {\n    return true;\n  }\n  if (invalidatedByDescriptor && 'componentOf' in invalidatedByDescriptor) {\n    for (componentName in candidates[shorthandName]) {\n      if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction mixedImportance(components) {\n  var important;\n  var componentName;\n  for (componentName in components) {\n    if (undefined !== important && components[componentName].important != important) {\n      return true;\n    }\n    important = components[componentName].important;\n  }\n  return false;\n}\nfunction overridable(components, shorthandName, validator) {\n  var descriptor = configuration[shorthandName];\n  var newValuePlaceholder = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  var newProperty = wrapSingle(newValuePlaceholder);\n  var component;\n  var mayOverride;\n  var i, l;\n  populateComponents([newProperty], validator, []);\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n    mayOverride = configuration[component.name].canOverride || sameValue;\n    if (!everyValuesPair(mayOverride.bind(null, validator), newProperty.components[i], component)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction sameValue(_validator, value1, value2) {\n  return value1 === value2;\n}\nfunction mergeable(components) {\n  var lastCount = null;\n  var currentCount;\n  var componentName;\n  var component;\n  var descriptor;\n  var values;\n  for (componentName in components) {\n    component = components[componentName];\n    descriptor = configuration[componentName];\n    if (!('restore' in descriptor)) {\n      continue;\n    }\n    restoreFromOptimizing([component.all[component.position]], restoreWithComponents);\n    values = descriptor.restore(component, configuration);\n    currentCount = values.length;\n    if (lastCount !== null && currentCount !== lastCount) {\n      return false;\n    }\n    lastCount = currentCount;\n  }\n  return true;\n}\nfunction mixedInherit(components) {\n  var componentName;\n  var lastValue = null;\n  var currentValue;\n  for (componentName in components) {\n    currentValue = hasInherit(components[componentName]);\n    if (lastValue !== null && lastValue !== currentValue) {\n      return true;\n    }\n    lastValue = currentValue;\n  }\n  return false;\n}\nfunction replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator) {\n  var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);\n  var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);\n  var longhandTokensSequence = viaLonghands[0];\n  var shorthandTokensSequence = viaShorthand[0];\n  var isLonghandsShorter = serializeBody(longhandTokensSequence).length < serializeBody(shorthandTokensSequence).length;\n  var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;\n  var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];\n  var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];\n  var lastComponent = candidateComponents[Object.keys(candidateComponents).pop()];\n  var all = lastComponent.all;\n  var insertAt = lastComponent.position;\n  var componentName;\n  var oldComponent;\n  var newComponent;\n  var newToken;\n  newProperty.position = insertAt;\n  newProperty.shorthand = true;\n  newProperty.important = lastComponent.important;\n  newProperty.multiplex = false;\n  newProperty.dirty = true;\n  newProperty.all = all;\n  newProperty.all[insertAt] = newTokensSequence[0];\n  properties.splice(insertAt, 1, newProperty);\n  for (componentName in candidateComponents) {\n    oldComponent = candidateComponents[componentName];\n    oldComponent.unused = true;\n    newProperty.multiplex = newProperty.multiplex || oldComponent.multiplex;\n    if (oldComponent.name in newComponents) {\n      newComponent = newComponents[oldComponent.name];\n      newToken = findTokenIn(newTokensSequence, componentName);\n      newComponent.position = all.length;\n      newComponent.all = all;\n      newComponent.all.push(newToken);\n      properties.push(newComponent);\n    }\n  }\n}\nfunction buildSequenceWithInheritLonghands(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = configuration[shorthandName];\n  var shorthandToken = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var newComponent;\n  var nameMetadata;\n  var i, l;\n  populateComponents([newProperty], validator, []);\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n    if (hasInherit(component)) {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n      newComponent = deepClone(component);\n      newComponent.value = inferComponentValue(components, newComponent.name);\n      newProperty.components[i] = newComponent;\n      inheritComponents[component.name] = deepClone(component);\n    } else {\n      newComponent = deepClone(component);\n      newComponent.all = component.all;\n      newProperty.components[i] = newComponent;\n      nonInheritComponents[component.name] = component;\n    }\n  }\n  newProperty.important = components[Object.keys(components).pop()].important;\n  nameMetadata = joinMetadata(nonInheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n  restoreFromOptimizing([newProperty], restoreWithComponents);\n  shorthandToken = shorthandToken.slice(0, 2);\n  Array.prototype.push.apply(shorthandToken, newProperty.value);\n  tokensSequence.unshift(shorthandToken);\n  return [tokensSequence, newProperty, inheritComponents];\n}\nfunction inferComponentValue(components, propertyName) {\n  var descriptor = configuration[propertyName];\n  if ('oppositeTo' in descriptor) {\n    return components[descriptor.oppositeTo].value;\n  }\n  return [[Token.PROPERTY_VALUE, descriptor.defaultValue]];\n}\nfunction joinMetadata(components, at) {\n  var metadata = [];\n  var component;\n  var originalValue;\n  var componentMetadata;\n  var componentName;\n  for (componentName in components) {\n    component = components[componentName];\n    originalValue = component.all[component.position];\n    componentMetadata = originalValue[at][originalValue[at].length - 1];\n    Array.prototype.push.apply(metadata, componentMetadata);\n  }\n  return metadata.sort(metadataSorter);\n}\nfunction metadataSorter(metadata1, metadata2) {\n  var line1 = metadata1[0];\n  var line2 = metadata2[0];\n  var column1 = metadata1[1];\n  var column2 = metadata2[1];\n  if (line1 < line2) {\n    return -1;\n  }\n  if (line1 === line2) {\n    return column1 < column2 ? -1 : 1;\n  }\n  return 1;\n}\nfunction buildSequenceWithInheritShorthand(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = configuration[shorthandName];\n  var shorthandToken = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, 'inherit']];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var nameMetadata;\n  var valueMetadata;\n  var i, l;\n  populateComponents([newProperty], validator, []);\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n    if (hasInherit(component)) {\n      inheritComponents[component.name] = component;\n    } else {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n      nonInheritComponents[component.name] = deepClone(component);\n    }\n  }\n  nameMetadata = joinMetadata(inheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n  valueMetadata = joinMetadata(inheritComponents, 2);\n  shorthandToken[2].push(valueMetadata);\n  tokensSequence.unshift(shorthandToken);\n  return [tokensSequence, newProperty, nonInheritComponents];\n}\nfunction findTokenIn(tokens, componentName) {\n  var i, l;\n  for (i = 0, l = tokens.length; i < l; i++) {\n    if (tokens[i][1][1] == componentName) {\n      return tokens[i];\n    }\n  }\n}\nfunction replaceWithShorthand(properties, candidateComponents, shorthandName, validator) {\n  var descriptor = configuration[shorthandName];\n  var nameMetadata;\n  var valueMetadata;\n  var newValuePlaceholder = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  var all;\n  var insertAt = inferInsertAtFrom(properties, candidateComponents, shorthandName);\n  var newProperty = wrapSingle(newValuePlaceholder);\n  newProperty.shorthand = true;\n  newProperty.dirty = true;\n  newProperty.multiplex = false;\n  populateComponents([newProperty], validator, []);\n  for (var i = 0, l = descriptor.components.length; i < l; i++) {\n    var component = candidateComponents[descriptor.components[i]];\n    newProperty.components[i] = deepClone(component);\n    newProperty.important = component.important;\n    newProperty.multiplex = newProperty.multiplex || component.multiplex;\n    all = component.all;\n  }\n  for (var componentName in candidateComponents) {\n    candidateComponents[componentName].unused = true;\n  }\n  nameMetadata = joinMetadata(candidateComponents, 1);\n  newValuePlaceholder[1].push(nameMetadata);\n  valueMetadata = joinMetadata(candidateComponents, 2);\n  newValuePlaceholder[2].push(valueMetadata);\n  newProperty.position = insertAt;\n  newProperty.all = all;\n  newProperty.all[insertAt] = newValuePlaceholder;\n  properties.splice(insertAt, 1, newProperty);\n}\nfunction inferInsertAtFrom(properties, candidateComponents, shorthandName) {\n  var candidateComponentNames = Object.keys(candidateComponents);\n  var firstCandidatePosition = candidateComponents[candidateComponentNames[0]].position;\n  var lastCandidatePosition = candidateComponents[candidateComponentNames[candidateComponentNames.length - 1]].position;\n  if (shorthandName == 'border' && traversesVia(properties.slice(firstCandidatePosition, lastCandidatePosition), 'border-image')) {\n    return firstCandidatePosition;\n  }\n  return lastCandidatePosition;\n}\nfunction traversesVia(properties, propertyName) {\n  for (var i = properties.length - 1; i >= 0; i--) {\n    if (properties[i].name == propertyName) {\n      return true;\n    }\n  }\n  return false;\n}\nmodule.exports = mergeIntoShorthands;","map":{"version":3,"names":["everyValuesPair","require","hasInherit","hasSameValues","populateComponents","configuration","deepClone","deep","restoreWithComponents","restoreFromOptimizing","wrapSingle","single","serializeBody","body","Token","mergeIntoShorthands","properties","validator","candidates","descriptor","componentOf","property","i","l","j","m","length","name","dynamic","unused","hack","block","singleTypeComponents","invalidateOrCompact","position","invalidatedBy","shorthandName","shorthandDescriptor","candidateComponents","replacedCandidates","undefined","invalidates","components","Object","keys","mixedImportance","overridable","mergeable","mixedInherit","replaceWithInheritBestFit","replaceWithShorthand","push","invalidatedByDescriptor","componentName","overridesShorthands","indexOf","important","newValuePlaceholder","PROPERTY","PROPERTY_NAME","PROPERTY_VALUE","defaultValue","newProperty","component","mayOverride","canOverride","sameValue","bind","_validator","value1","value2","lastCount","currentCount","values","all","restore","lastValue","currentValue","viaLonghands","buildSequenceWithInheritLonghands","viaShorthand","buildSequenceWithInheritShorthand","longhandTokensSequence","shorthandTokensSequence","isLonghandsShorter","newTokensSequence","newComponents","lastComponent","pop","insertAt","oldComponent","newComponent","newToken","shorthand","multiplex","dirty","splice","findTokenIn","tokensSequence","inheritComponents","nonInheritComponents","shorthandToken","longhandToken","nameMetadata","slice","Array","prototype","apply","value","inferComponentValue","joinMetadata","unshift","propertyName","oppositeTo","at","metadata","originalValue","componentMetadata","sort","metadataSorter","metadata1","metadata2","line1","line2","column1","column2","valueMetadata","tokens","inferInsertAtFrom","candidateComponentNames","firstCandidatePosition","lastCandidatePosition","traversesVia","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js"],"sourcesContent":["var everyValuesPair = require('./every-values-pair');\nvar hasInherit = require('./has-inherit');\nvar hasSameValues = require('./has-same-values');\nvar populateComponents = require('./populate-components');\n\nvar configuration = require('../../configuration');\nvar deepClone = require('../../clone').deep;\nvar restoreWithComponents = require('../restore-with-components');\n\nvar restoreFromOptimizing = require('../../restore-from-optimizing');\nvar wrapSingle = require('../../wrap-for-optimizing').single;\n\nvar serializeBody = require('../../../writer/one-time').body;\nvar Token = require('../../../tokenizer/token');\n\nfunction mergeIntoShorthands(properties, validator) {\n  var candidates = {};\n  var descriptor;\n  var componentOf;\n  var property;\n  var i, l;\n  var j, m;\n\n  // there is no shorthand property made up of less than 3 longhands\n  if (properties.length < 3) {\n    return;\n  }\n\n  for (i = 0, l = properties.length; i < l; i++) {\n    property = properties[i];\n    descriptor = configuration[property.name];\n\n    if (property.dynamic) {\n      continue;\n    }\n\n    if (property.unused) {\n      continue;\n    }\n\n    if (property.hack) {\n      continue;\n    }\n\n    if (property.block) {\n      continue;\n    }\n\n    if (descriptor && descriptor.singleTypeComponents && !hasSameValues(property)) {\n      continue;\n    }\n\n    invalidateOrCompact(properties, i, candidates, validator);\n\n    if (descriptor && descriptor.componentOf) {\n      for (j = 0, m = descriptor.componentOf.length; j < m; j++) {\n        componentOf = descriptor.componentOf[j];\n\n        candidates[componentOf] = candidates[componentOf] || {};\n        candidates[componentOf][property.name] = property;\n      }\n    }\n  }\n\n  invalidateOrCompact(properties, i, candidates, validator);\n}\n\nfunction invalidateOrCompact(properties, position, candidates, validator) {\n  var invalidatedBy = properties[position];\n  var shorthandName;\n  var shorthandDescriptor;\n  var candidateComponents;\n  var replacedCandidates = [];\n  var i;\n\n  for (shorthandName in candidates) {\n    if (undefined !== invalidatedBy && shorthandName == invalidatedBy.name) {\n      continue;\n    }\n\n    shorthandDescriptor = configuration[shorthandName];\n    candidateComponents = candidates[shorthandName];\n    if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {\n      delete candidates[shorthandName];\n      continue;\n    }\n\n    if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {\n      continue;\n    }\n\n    if (mixedImportance(candidateComponents)) {\n      continue;\n    }\n\n    if (!overridable(candidateComponents, shorthandName, validator)) {\n      continue;\n    }\n\n    if (!mergeable(candidateComponents)) {\n      continue;\n    }\n\n    if (mixedInherit(candidateComponents)) {\n      replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);\n    } else {\n      replaceWithShorthand(properties, candidateComponents, shorthandName, validator);\n    }\n\n    replacedCandidates.push(shorthandName);\n  }\n\n  for (i = replacedCandidates.length - 1; i >= 0; i--) {\n    delete candidates[replacedCandidates[i]];\n  }\n}\n\nfunction invalidates(candidates, shorthandName, invalidatedBy) {\n  var shorthandDescriptor = configuration[shorthandName];\n  var invalidatedByDescriptor = configuration[invalidatedBy.name];\n  var componentName;\n\n  if ('overridesShorthands' in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {\n    return true;\n  }\n\n  if (invalidatedByDescriptor && 'componentOf' in invalidatedByDescriptor) {\n    for (componentName in candidates[shorthandName]) {\n      if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction mixedImportance(components) {\n  var important;\n  var componentName;\n\n  for (componentName in components) {\n    if (undefined !== important && components[componentName].important != important) {\n      return true;\n    }\n\n    important = components[componentName].important;\n  }\n\n  return false;\n}\n\nfunction overridable(components, shorthandName, validator) {\n  var descriptor = configuration[shorthandName];\n  var newValuePlaceholder = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, descriptor.defaultValue]\n  ];\n  var newProperty = wrapSingle(newValuePlaceholder);\n  var component;\n  var mayOverride;\n  var i, l;\n\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n    mayOverride = configuration[component.name].canOverride || sameValue;\n\n    if (!everyValuesPair(mayOverride.bind(null, validator), newProperty.components[i], component)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction sameValue(_validator, value1, value2) {\n  return value1 === value2;\n}\n\nfunction mergeable(components) {\n  var lastCount = null;\n  var currentCount;\n  var componentName;\n  var component;\n  var descriptor;\n  var values;\n\n  for (componentName in components) {\n    component = components[componentName];\n    descriptor = configuration[componentName];\n\n    if (!('restore' in descriptor)) {\n      continue;\n    }\n\n    restoreFromOptimizing([component.all[component.position]], restoreWithComponents);\n    values = descriptor.restore(component, configuration);\n\n    currentCount = values.length;\n\n    if (lastCount !== null && currentCount !== lastCount) {\n      return false;\n    }\n\n    lastCount = currentCount;\n  }\n\n  return true;\n}\n\nfunction mixedInherit(components) {\n  var componentName;\n  var lastValue = null;\n  var currentValue;\n\n  for (componentName in components) {\n    currentValue = hasInherit(components[componentName]);\n\n    if (lastValue !== null && lastValue !== currentValue) {\n      return true;\n    }\n\n    lastValue = currentValue;\n  }\n\n  return false;\n}\n\nfunction replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator) {\n  var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);\n  var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);\n  var longhandTokensSequence = viaLonghands[0];\n  var shorthandTokensSequence = viaShorthand[0];\n  var isLonghandsShorter = serializeBody(longhandTokensSequence).length < serializeBody(shorthandTokensSequence).length;\n  var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;\n  var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];\n  var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];\n  var lastComponent = candidateComponents[Object.keys(candidateComponents).pop()];\n  var all = lastComponent.all;\n  var insertAt = lastComponent.position;\n  var componentName;\n  var oldComponent;\n  var newComponent;\n  var newToken;\n\n  newProperty.position = insertAt;\n  newProperty.shorthand = true;\n  newProperty.important = lastComponent.important;\n  newProperty.multiplex = false;\n  newProperty.dirty = true;\n  newProperty.all = all;\n  newProperty.all[insertAt] = newTokensSequence[0];\n\n  properties.splice(insertAt, 1, newProperty);\n\n  for (componentName in candidateComponents) {\n    oldComponent = candidateComponents[componentName];\n    oldComponent.unused = true;\n\n    newProperty.multiplex = newProperty.multiplex || oldComponent.multiplex;\n\n    if (oldComponent.name in newComponents) {\n      newComponent = newComponents[oldComponent.name];\n      newToken = findTokenIn(newTokensSequence, componentName);\n\n      newComponent.position = all.length;\n      newComponent.all = all;\n      newComponent.all.push(newToken);\n\n      properties.push(newComponent);\n    }\n  }\n}\n\nfunction buildSequenceWithInheritLonghands(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = configuration[shorthandName];\n  var shorthandToken = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, descriptor.defaultValue]\n  ];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var newComponent;\n  var nameMetadata;\n  var i, l;\n\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n\n      newComponent = deepClone(component);\n      newComponent.value = inferComponentValue(components, newComponent.name);\n\n      newProperty.components[i] = newComponent;\n      inheritComponents[component.name] = deepClone(component);\n    } else {\n      newComponent = deepClone(component);\n      newComponent.all = component.all;\n      newProperty.components[i] = newComponent;\n\n      nonInheritComponents[component.name] = component;\n    }\n  }\n\n  newProperty.important = components[Object.keys(components).pop()].important;\n\n  nameMetadata = joinMetadata(nonInheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n\n  restoreFromOptimizing([newProperty], restoreWithComponents);\n\n  shorthandToken = shorthandToken.slice(0, 2);\n  Array.prototype.push.apply(shorthandToken, newProperty.value);\n\n  tokensSequence.unshift(shorthandToken);\n\n  return [tokensSequence, newProperty, inheritComponents];\n}\n\nfunction inferComponentValue(components, propertyName) {\n  var descriptor = configuration[propertyName];\n\n  if ('oppositeTo' in descriptor) {\n    return components[descriptor.oppositeTo].value;\n  }\n  return [[Token.PROPERTY_VALUE, descriptor.defaultValue]];\n}\n\nfunction joinMetadata(components, at) {\n  var metadata = [];\n  var component;\n  var originalValue;\n  var componentMetadata;\n  var componentName;\n\n  for (componentName in components) {\n    component = components[componentName];\n    originalValue = component.all[component.position];\n    componentMetadata = originalValue[at][originalValue[at].length - 1];\n\n    Array.prototype.push.apply(metadata, componentMetadata);\n  }\n\n  return metadata.sort(metadataSorter);\n}\n\nfunction metadataSorter(metadata1, metadata2) {\n  var line1 = metadata1[0];\n  var line2 = metadata2[0];\n  var column1 = metadata1[1];\n  var column2 = metadata2[1];\n\n  if (line1 < line2) {\n    return -1;\n  } if (line1 === line2) {\n    return column1 < column2 ? -1 : 1;\n  }\n  return 1;\n}\n\nfunction buildSequenceWithInheritShorthand(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = configuration[shorthandName];\n  var shorthandToken = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, 'inherit']\n  ];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var nameMetadata;\n  var valueMetadata;\n  var i, l;\n\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      inheritComponents[component.name] = component;\n    } else {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n\n      nonInheritComponents[component.name] = deepClone(component);\n    }\n  }\n\n  nameMetadata = joinMetadata(inheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n\n  valueMetadata = joinMetadata(inheritComponents, 2);\n  shorthandToken[2].push(valueMetadata);\n\n  tokensSequence.unshift(shorthandToken);\n\n  return [tokensSequence, newProperty, nonInheritComponents];\n}\n\nfunction findTokenIn(tokens, componentName) {\n  var i, l;\n\n  for (i = 0, l = tokens.length; i < l; i++) {\n    if (tokens[i][1][1] == componentName) {\n      return tokens[i];\n    }\n  }\n}\n\nfunction replaceWithShorthand(properties, candidateComponents, shorthandName, validator) {\n  var descriptor = configuration[shorthandName];\n  var nameMetadata;\n  var valueMetadata;\n  var newValuePlaceholder = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, descriptor.defaultValue]\n  ];\n  var all;\n  var insertAt = inferInsertAtFrom(properties, candidateComponents, shorthandName);\n\n  var newProperty = wrapSingle(newValuePlaceholder);\n  newProperty.shorthand = true;\n  newProperty.dirty = true;\n  newProperty.multiplex = false;\n\n  populateComponents([newProperty], validator, []);\n\n  for (var i = 0, l = descriptor.components.length; i < l; i++) {\n    var component = candidateComponents[descriptor.components[i]];\n\n    newProperty.components[i] = deepClone(component);\n    newProperty.important = component.important;\n    newProperty.multiplex = newProperty.multiplex || component.multiplex;\n\n    all = component.all;\n  }\n\n  for (var componentName in candidateComponents) {\n    candidateComponents[componentName].unused = true;\n  }\n\n  nameMetadata = joinMetadata(candidateComponents, 1);\n  newValuePlaceholder[1].push(nameMetadata);\n\n  valueMetadata = joinMetadata(candidateComponents, 2);\n  newValuePlaceholder[2].push(valueMetadata);\n\n  newProperty.position = insertAt;\n  newProperty.all = all;\n  newProperty.all[insertAt] = newValuePlaceholder;\n\n  properties.splice(insertAt, 1, newProperty);\n}\n\nfunction inferInsertAtFrom(properties, candidateComponents, shorthandName) {\n  var candidateComponentNames = Object.keys(candidateComponents);\n  var firstCandidatePosition = candidateComponents[candidateComponentNames[0]].position;\n  var lastCandidatePosition = candidateComponents[candidateComponentNames[candidateComponentNames.length - 1]].position;\n\n  if (shorthandName == 'border' && traversesVia(properties.slice(firstCandidatePosition, lastCandidatePosition), 'border-image')) {\n    return firstCandidatePosition;\n  }\n  return lastCandidatePosition;\n}\n\nfunction traversesVia(properties, propertyName) {\n  for (var i = properties.length - 1; i >= 0; i--) {\n    if (properties[i].name == propertyName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = mergeIntoShorthands;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}