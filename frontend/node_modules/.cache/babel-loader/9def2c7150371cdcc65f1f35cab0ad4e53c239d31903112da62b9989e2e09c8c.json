{"ast":null,"code":"'use strict';\n\nvar getFieldAsFn = require('./get-field-as-fn'),\n  CustomError = require('./get-error');\n\n/**\n * Locate the root for input sources using the given codec hash\n * @throws Error Where the given codec is missing an encode function\n * @this {object} A loader or compilation\n * @param {{encode:function}} codec A single codec with an `encode` function\n * @returns {function(string):string|Error} An encode function that takes an absolute path\n */\nfunction locateRootWith(codec) {\n  /* jshint validthis:true */\n  var context = this,\n    root = getFieldAsFn('root')(codec);\n  if (!root) {\n    return new CustomError('Specified format does not support encoding (it lacks a \"root\" function)');\n  } else {\n    return function locate() {\n      // call the root\n      var located;\n      try {\n        located = root.call(context);\n      } catch (exception) {\n        return getNamedError(exception);\n      }\n      return located;\n      function getNamedError(details) {\n        var name = codec.name || '(unnamed)',\n          message = ['Locating root with codec: ' + name, details && (details.stack ? details.stack : details)].filter(Boolean).join('\\n');\n        return new Error(message);\n      }\n    };\n  }\n}\nmodule.exports = locateRootWith;","map":{"version":3,"names":["getFieldAsFn","require","CustomError","locateRootWith","codec","context","root","locate","located","call","exception","getNamedError","details","name","message","stack","filter","Boolean","join","Error","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/adjust-sourcemap-loader/lib/process/locate-root-with.js"],"sourcesContent":["'use strict';\n\nvar getFieldAsFn = require('./get-field-as-fn'),\n    CustomError  = require('./get-error');\n\n/**\n * Locate the root for input sources using the given codec hash\n * @throws Error Where the given codec is missing an encode function\n * @this {object} A loader or compilation\n * @param {{encode:function}} codec A single codec with an `encode` function\n * @returns {function(string):string|Error} An encode function that takes an absolute path\n */\nfunction locateRootWith(codec) {\n  /* jshint validthis:true */\n  var context = this,\n      root    = getFieldAsFn('root')(codec);\n  if (!root) {\n    return new CustomError('Specified format does not support encoding (it lacks a \"root\" function)');\n  }\n  else {\n    return function locate() {\n\n      // call the root\n      var located;\n      try {\n        located = root.call(context);\n      }\n      catch (exception) {\n        return getNamedError(exception);\n      }\n      return located;\n\n      function getNamedError(details) {\n        var name    = codec.name || '(unnamed)',\n            message = [\n              'Locating root with codec: ' + name,\n              details && (details.stack ? details.stack : details)\n            ]\n              .filter(Boolean)\n              .join('\\n');\n        return new Error(message);\n      }\n    };\n  }\n}\n\nmodule.exports = locateRootWith;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,mBAAmB,CAAC;EAC3CC,WAAW,GAAID,OAAO,CAAC,aAAa,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAACC,KAAK,EAAE;EAC7B;EACA,IAAIC,OAAO,GAAG,IAAI;IACdC,IAAI,GAAMN,YAAY,CAAC,MAAM,CAAC,CAACI,KAAK,CAAC;EACzC,IAAI,CAACE,IAAI,EAAE;IACT,OAAO,IAAIJ,WAAW,CAAC,yEAAyE,CAAC;EACnG,CAAC,MACI;IACH,OAAO,SAASK,MAAMA,CAAA,EAAG;MAEvB;MACA,IAAIC,OAAO;MACX,IAAI;QACFA,OAAO,GAAGF,IAAI,CAACG,IAAI,CAACJ,OAAO,CAAC;MAC9B,CAAC,CACD,OAAOK,SAAS,EAAE;QAChB,OAAOC,aAAa,CAACD,SAAS,CAAC;MACjC;MACA,OAAOF,OAAO;MAEd,SAASG,aAAaA,CAACC,OAAO,EAAE;QAC9B,IAAIC,IAAI,GAAMT,KAAK,CAACS,IAAI,IAAI,WAAW;UACnCC,OAAO,GAAG,CACR,4BAA4B,GAAGD,IAAI,EACnCD,OAAO,KAAKA,OAAO,CAACG,KAAK,GAAGH,OAAO,CAACG,KAAK,GAAGH,OAAO,CAAC,CACrD,CACEI,MAAM,CAACC,OAAO,CAAC,CACfC,IAAI,CAAC,IAAI,CAAC;QACjB,OAAO,IAAIC,KAAK,CAACL,OAAO,CAAC;MAC3B;IACF,CAAC;EACH;AACF;AAEAM,MAAM,CAACC,OAAO,GAAGlB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}