{"ast":null,"code":"/**\n * Edge 16 & 17 do not infer function.name from variable assignment.\n * All other `function.name` behavior works fine, so we can skip most of @babel/transform-function-name.\n * @see https://kangax.github.io/compat-table/es6/#test-function_name_property_variables_(function)\n *\n * Note: contrary to various Github issues, Edge 16+ *does* correctly infer the name of Arrow Functions.\n * The variable declarator name inference issue only affects function expressions, so that's all we fix here.\n *\n * A Note on Minification: Terser undoes this transform *by default* unless `keep_fnames` is set to true.\n * There is by design - if Function.name is critical to your application, you must configure\n * your minifier to preserve function names.\n */\n\nexport default (({\n  types: t\n}) => ({\n  name: \"transform-edge-function-name\",\n  visitor: {\n    FunctionExpression: {\n      exit(path) {\n        if (!path.node.id && t.isIdentifier(path.parent.id)) {\n          const id = t.cloneNode(path.parent.id);\n          const binding = path.scope.getBinding(id.name);\n          // if the binding gets reassigned anywhere, rename it\n          if (binding?.constantViolations.length) {\n            path.scope.rename(id.name);\n          }\n          path.node.id = id;\n        }\n      }\n    }\n  }\n}));","map":{"version":3,"names":["types","t","name","visitor","FunctionExpression","exit","path","node","id","isIdentifier","parent","cloneNode","binding","scope","getBinding","constantViolations","length","rename"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@babel/preset-modules/src/plugins/transform-edge-function-name/index.js"],"sourcesContent":["/**\n * Edge 16 & 17 do not infer function.name from variable assignment.\n * All other `function.name` behavior works fine, so we can skip most of @babel/transform-function-name.\n * @see https://kangax.github.io/compat-table/es6/#test-function_name_property_variables_(function)\n *\n * Note: contrary to various Github issues, Edge 16+ *does* correctly infer the name of Arrow Functions.\n * The variable declarator name inference issue only affects function expressions, so that's all we fix here.\n *\n * A Note on Minification: Terser undoes this transform *by default* unless `keep_fnames` is set to true.\n * There is by design - if Function.name is critical to your application, you must configure\n * your minifier to preserve function names.\n */\n\nexport default ({ types: t }) => ({\n  name: \"transform-edge-function-name\",\n  visitor: {\n    FunctionExpression: {\n      exit(path) {\n        if (!path.node.id && t.isIdentifier(path.parent.id)) {\n          const id = t.cloneNode(path.parent.id);\n          const binding = path.scope.getBinding(id.name);\n          // if the binding gets reassigned anywhere, rename it\n          if (binding?.constantViolations.length) {\n            path.scope.rename(id.name);\n          }\n          path.node.id = id;\n        }\n      },\n    },\n  },\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAe,CAAC;EAAEA,KAAK,EAAEC;AAAE,CAAC,MAAM;EAChCC,IAAI,EAAE,8BAA8B;EACpCC,OAAO,EAAE;IACPC,kBAAkB,EAAE;MAClBC,IAAIA,CAACC,IAAI,EAAE;QACT,IAAI,CAACA,IAAI,CAACC,IAAI,CAACC,EAAE,IAAIP,CAAC,CAACQ,YAAY,CAACH,IAAI,CAACI,MAAM,CAACF,EAAE,CAAC,EAAE;UACnD,MAAMA,EAAE,GAAGP,CAAC,CAACU,SAAS,CAACL,IAAI,CAACI,MAAM,CAACF,EAAE,CAAC;UACtC,MAAMI,OAAO,GAAGN,IAAI,CAACO,KAAK,CAACC,UAAU,CAACN,EAAE,CAACN,IAAI,CAAC;UAC9C;UACA,IAAIU,OAAO,EAAEG,kBAAkB,CAACC,MAAM,EAAE;YACtCV,IAAI,CAACO,KAAK,CAACI,MAAM,CAACT,EAAE,CAACN,IAAI,CAAC;UAC5B;UACAI,IAAI,CAACC,IAAI,CAACC,EAAE,GAAGA,EAAE;QACnB;MACF;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}