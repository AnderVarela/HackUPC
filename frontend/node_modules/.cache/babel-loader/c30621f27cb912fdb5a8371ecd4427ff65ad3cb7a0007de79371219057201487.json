{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultMinimumDescriptionLength = void 0;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nexports.defaultMinimumDescriptionLength = 3;\nexports.default = util.createRule({\n  name: 'ban-ts-comment',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow `@ts-<directive>` comments or require descriptions after directives',\n      recommended: 'error'\n    },\n    messages: {\n      tsDirectiveComment: 'Do not use \"@ts-{{directive}}\" because it alters compilation errors.',\n      tsDirectiveCommentRequiresDescription: 'Include a description after the \"@ts-{{directive}}\" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.',\n      tsDirectiveCommentDescriptionNotMatchPattern: 'The description for the \"@ts-{{directive}}\" directive must match the {{format}} format.'\n    },\n    schema: {\n      $defs: {\n        directiveConfigSchema: {\n          oneOf: [{\n            type: 'boolean',\n            default: true\n          }, {\n            enum: ['allow-with-description']\n          }, {\n            type: 'object',\n            properties: {\n              descriptionFormat: {\n                type: 'string'\n              }\n            }\n          }]\n        }\n      },\n      prefixItems: [{\n        properties: {\n          'ts-expect-error': {\n            $ref: '#/$defs/directiveConfigSchema'\n          },\n          'ts-ignore': {\n            $ref: '#/$defs/directiveConfigSchema'\n          },\n          'ts-nocheck': {\n            $ref: '#/$defs/directiveConfigSchema'\n          },\n          'ts-check': {\n            $ref: '#/$defs/directiveConfigSchema'\n          },\n          minimumDescriptionLength: {\n            type: 'number',\n            default: exports.defaultMinimumDescriptionLength\n          }\n        },\n        additionalProperties: false\n      }],\n      type: 'array'\n    }\n  },\n  defaultOptions: [{\n    'ts-expect-error': 'allow-with-description',\n    'ts-ignore': true,\n    'ts-nocheck': true,\n    'ts-check': false,\n    minimumDescriptionLength: exports.defaultMinimumDescriptionLength\n  }],\n  create(context, [options]) {\n    /*\n      The regex used are taken from the ones used in the official TypeScript repo -\n      https://github.com/microsoft/TypeScript/blob/408c760fae66080104bc85c449282c2d207dfe8e/src/compiler/scanner.ts#L288-L296\n    */\n    const commentDirectiveRegExSingleLine = /^\\/*\\s*@ts-(?<directive>expect-error|ignore|check|nocheck)(?<description>.*)/;\n    const commentDirectiveRegExMultiLine = /^\\s*(?:\\/|\\*)*\\s*@ts-(?<directive>expect-error|ignore|check|nocheck)(?<description>.*)/;\n    const sourceCode = context.getSourceCode();\n    const descriptionFormats = new Map();\n    for (const directive of ['ts-expect-error', 'ts-ignore', 'ts-nocheck', 'ts-check']) {\n      const option = options[directive];\n      if (typeof option === 'object' && option.descriptionFormat) {\n        descriptionFormats.set(directive, new RegExp(option.descriptionFormat));\n      }\n    }\n    return {\n      Program() {\n        const comments = sourceCode.getAllComments();\n        comments.forEach(comment => {\n          const regExp = comment.type === utils_1.AST_TOKEN_TYPES.Line ? commentDirectiveRegExSingleLine : commentDirectiveRegExMultiLine;\n          const match = regExp.exec(comment.value);\n          if (!match) {\n            return;\n          }\n          const {\n            directive,\n            description\n          } = match.groups;\n          const fullDirective = `ts-${directive}`;\n          const option = options[fullDirective];\n          if (option === true) {\n            context.report({\n              data: {\n                directive\n              },\n              node: comment,\n              messageId: 'tsDirectiveComment'\n            });\n          }\n          if (option === 'allow-with-description' || typeof option === 'object' && option.descriptionFormat) {\n            const {\n              minimumDescriptionLength = exports.defaultMinimumDescriptionLength\n            } = options;\n            const format = descriptionFormats.get(fullDirective);\n            if (util.getStringLength(description.trim()) < minimumDescriptionLength) {\n              context.report({\n                data: {\n                  directive,\n                  minimumDescriptionLength\n                },\n                node: comment,\n                messageId: 'tsDirectiveCommentRequiresDescription'\n              });\n            } else if (format && !format.test(description)) {\n              context.report({\n                data: {\n                  directive,\n                  format: format.source\n                },\n                node: comment,\n                messageId: 'tsDirectiveCommentDescriptionNotMatchPattern'\n              });\n            }\n          }\n        });\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","exports","defaultMinimumDescriptionLength","default","createRule","name","meta","type","docs","description","recommended","messages","tsDirectiveComment","tsDirectiveCommentRequiresDescription","tsDirectiveCommentDescriptionNotMatchPattern","schema","$defs","directiveConfigSchema","oneOf","enum","properties","descriptionFormat","prefixItems","$ref","minimumDescriptionLength","additionalProperties","defaultOptions","create","context","options","commentDirectiveRegExSingleLine","commentDirectiveRegExMultiLine","sourceCode","getSourceCode","descriptionFormats","Map","directive","option","set","RegExp","Program","comments","getAllComments","forEach","comment","regExp","AST_TOKEN_TYPES","Line","match","exec","value","groups","fullDirective","report","data","node","messageId","format","get","getStringLength","trim","test","source"],"sources":["../../src/rules/ban-ts-comment.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AAeaG,OAAA,CAAAC,+BAA+B,GAAG,CAAC;AAOhDD,OAAA,CAAAE,OAAA,GAAeJ,IAAI,CAACK,UAAU,CAAwB;EACpDC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE;IACJC,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE;MACJC,WAAW,EACT,8EAA8E;MAChFC,WAAW,EAAE;KACd;IACDC,QAAQ,EAAE;MACRC,kBAAkB,EAChB,sEAAsE;MACxEC,qCAAqC,EACnC,6LAA6L;MAC/LC,4CAA4C,EAC1C;KACH;IACDC,MAAM,EAAE;MACNC,KAAK,EAAE;QACLC,qBAAqB,EAAE;UACrBC,KAAK,EAAE,CACL;YACEX,IAAI,EAAE,SAAS;YACfJ,OAAO,EAAE;WACV,EACD;YACEgB,IAAI,EAAE,CAAC,wBAAwB;WAChC,EACD;YACEZ,IAAI,EAAE,QAAQ;YACda,UAAU,EAAE;cACVC,iBAAiB,EAAE;gBAAEd,IAAI,EAAE;cAAQ;;WAEtC;;OAGN;MACDe,WAAW,EAAE,CACX;QACEF,UAAU,EAAE;UACV,iBAAiB,EAAE;YACjBG,IAAI,EAAE;WACP;UACD,WAAW,EAAE;YAAEA,IAAI,EAAE;UAA+B,CAAE;UACtD,YAAY,EAAE;YAAEA,IAAI,EAAE;UAA+B,CAAE;UACvD,UAAU,EAAE;YAAEA,IAAI,EAAE;UAA+B,CAAE;UACrDC,wBAAwB,EAAE;YACxBjB,IAAI,EAAE,QAAQ;YACdJ,OAAO,EAAEF,OAAA,CAAAC;;SAEZ;QACDuB,oBAAoB,EAAE;OACvB,CACF;MACDlB,IAAI,EAAE;;GAET;EACDmB,cAAc,EAAE,CACd;IACE,iBAAiB,EAAE,wBAAwB;IAC3C,WAAW,EAAE,IAAI;IACjB,YAAY,EAAE,IAAI;IAClB,UAAU,EAAE,KAAK;IACjBF,wBAAwB,EAAEvB,OAAA,CAAAC;GAC3B,CACF;EACDyB,MAAMA,CAACC,OAAO,EAAE,CAACC,OAAO,CAAC;IACvB;;;;IAIA,MAAMC,+BAA+B,GACnC,8EAA8E;IAChF,MAAMC,8BAA8B,GAClC,wFAAwF;IAC1F,MAAMC,UAAU,GAAGJ,OAAO,CAACK,aAAa,EAAE;IAE1C,MAAMC,kBAAkB,GAAG,IAAIC,GAAG,EAAkB;IACpD,KAAK,MAAMC,SAAS,IAAI,CACtB,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,UAAU,CACF,EAAE;MACV,MAAMC,MAAM,GAAGR,OAAO,CAACO,SAAS,CAAC;MACjC,IAAI,OAAOC,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAAChB,iBAAiB,EAAE;QAC1Da,kBAAkB,CAACI,GAAG,CAACF,SAAS,EAAE,IAAIG,MAAM,CAACF,MAAM,CAAChB,iBAAiB,CAAC,CAAC;;;IAI3E,OAAO;MACLmB,OAAOA,CAAA;QACL,MAAMC,QAAQ,GAAGT,UAAU,CAACU,cAAc,EAAE;QAE5CD,QAAQ,CAACE,OAAO,CAACC,OAAO,IAAG;UACzB,MAAMC,MAAM,GACVD,OAAO,CAACrC,IAAI,KAAKV,OAAA,CAAAiD,eAAe,CAACC,IAAI,GACjCjB,+BAA+B,GAC/BC,8BAA8B;UAEpC,MAAMiB,KAAK,GAAGH,MAAM,CAACI,IAAI,CAACL,OAAO,CAACM,KAAK,CAAC;UACxC,IAAI,CAACF,KAAK,EAAE;YACV;;UAEF,MAAM;YAAEZ,SAAS;YAAE3B;UAAW,CAAE,GAAGuC,KAAK,CAACG,MAAO;UAEhD,MAAMC,aAAa,GAAG,MAAMhB,SAAS,EAAmB;UAExD,MAAMC,MAAM,GAAGR,OAAO,CAACuB,aAAa,CAAC;UACrC,IAAIf,MAAM,KAAK,IAAI,EAAE;YACnBT,OAAO,CAACyB,MAAM,CAAC;cACbC,IAAI,EAAE;gBAAElB;cAAS,CAAE;cACnBmB,IAAI,EAAEX,OAAO;cACbY,SAAS,EAAE;aACZ,CAAC;;UAGJ,IACEnB,MAAM,KAAK,wBAAwB,IAClC,OAAOA,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAAChB,iBAAkB,EACxD;YACA,MAAM;cACJG,wBAAwB,GAAGvB,OAAA,CAAAC;YAA+B,CAC3D,GAAG2B,OAAO;YACX,MAAM4B,MAAM,GAAGvB,kBAAkB,CAACwB,GAAG,CAACN,aAAa,CAAC;YACpD,IACErD,IAAI,CAAC4D,eAAe,CAAClD,WAAW,CAACmD,IAAI,EAAE,CAAC,GACxCpC,wBAAwB,EACxB;cACAI,OAAO,CAACyB,MAAM,CAAC;gBACbC,IAAI,EAAE;kBAAElB,SAAS;kBAAEZ;gBAAwB,CAAE;gBAC7C+B,IAAI,EAAEX,OAAO;gBACbY,SAAS,EAAE;eACZ,CAAC;aACH,MAAM,IAAIC,MAAM,IAAI,CAACA,MAAM,CAACI,IAAI,CAACpD,WAAW,CAAC,EAAE;cAC9CmB,OAAO,CAACyB,MAAM,CAAC;gBACbC,IAAI,EAAE;kBAAElB,SAAS;kBAAEqB,MAAM,EAAEA,MAAM,CAACK;gBAAM,CAAE;gBAC1CP,IAAI,EAAEX,OAAO;gBACbY,SAAS,EAAE;eACZ,CAAC;;;QAGR,CAAC,CAAC;MACJ;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}