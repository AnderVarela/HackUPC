{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { encodeNode } from \"@webassemblyjs/wasm-gen\";\nimport { encodeU32 } from \"@webassemblyjs/wasm-gen/lib/encoder\";\nimport { isFunc, isGlobal, assertHasLoc, orderedInsertNode, getSectionMetadata, traverse, getEndOfSection } from \"@webassemblyjs/ast\";\nimport { resizeSectionByteSize, resizeSectionVecSize, createEmptySection, removeSections } from \"@webassemblyjs/helper-wasm-section\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\nfunction shiftLocNodeByDelta(node, delta) {\n  assertHasLoc(node); // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.start.column += delta; // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.end.column += delta;\n}\nfunction applyUpdate(ast, uint8Buffer, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    oldNode = _ref2[0],\n    newNode = _ref2[1];\n  var deltaElements = 0;\n  assertHasLoc(oldNode);\n  var sectionName = getSectionForNode(newNode);\n  var replacementByteArray = encodeNode(newNode);\n  /**\n   * Replace new node as bytes\n   */\n\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer,\n  // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column,\n  // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.end.column, replacementByteArray);\n  /**\n   * Update function body size if needed\n   */\n\n  if (sectionName === \"code\") {\n    // Find the parent func\n    traverse(ast, {\n      Func: function Func(_ref3) {\n        var node = _ref3.node;\n        var funcHasThisIntr = node.body.find(function (n) {\n          return n === newNode;\n        }) !== undefined; // Update func's body size if needed\n\n        if (funcHasThisIntr === true) {\n          // These are the old functions locations informations\n          assertHasLoc(node);\n          var oldNodeSize = encodeNode(oldNode).length;\n          var bodySizeDeltaBytes = replacementByteArray.length - oldNodeSize;\n          if (bodySizeDeltaBytes !== 0) {\n            var newValue = node.metadata.bodySize + bodySizeDeltaBytes;\n            var newByteArray = encodeU32(newValue); // function body size byte\n            // FIXME(sven): only handles one byte u32\n\n            var start = node.loc.start.column;\n            var end = start + 1;\n            uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newByteArray);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Update section size\n   */\n\n  var deltaBytes = replacementByteArray.length - (oldNode.loc.end.column - oldNode.loc.start.column); // Init location informations\n\n  newNode.loc = {\n    start: {\n      line: -1,\n      column: -1\n    },\n    end: {\n      line: -1,\n      column: -1\n    }\n  }; // Update new node end position\n  // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.start.column = oldNode.loc.start.column; // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.end.column =\n  // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column + replacementByteArray.length;\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\nfunction applyDelete(ast, uint8Buffer, node) {\n  var deltaElements = -1; // since we removed an element\n\n  assertHasLoc(node);\n  var sectionName = getSectionForNode(node);\n  if (sectionName === \"start\") {\n    var sectionMetadata = getSectionMetadata(ast, \"start\");\n    /**\n     * The start section only contains one element,\n     * we need to remove the whole section\n     */\n\n    uint8Buffer = removeSections(ast, uint8Buffer, \"start\");\n    var _deltaBytes = -(sectionMetadata.size.value + 1);\n    /* section id */\n\n    return {\n      uint8Buffer: uint8Buffer,\n      deltaBytes: _deltaBytes,\n      deltaElements: deltaElements\n    };\n  } // replacement is nothing\n\n  var replacement = [];\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer,\n  // $FlowIgnore: assertHasLoc ensures that\n  node.loc.start.column,\n  // $FlowIgnore: assertHasLoc ensures that\n  node.loc.end.column, replacement);\n  /**\n   * Update section\n   */\n  // $FlowIgnore: assertHasLoc ensures that\n\n  var deltaBytes = -(node.loc.end.column - node.loc.start.column);\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\nfunction applyAdd(ast, uint8Buffer, node) {\n  var deltaElements = +1; // since we added an element\n\n  var sectionName = getSectionForNode(node);\n  var sectionMetadata = getSectionMetadata(ast, sectionName); // Section doesn't exists, we create an empty one\n\n  if (typeof sectionMetadata === \"undefined\") {\n    var res = createEmptySection(ast, uint8Buffer, sectionName);\n    uint8Buffer = res.uint8Buffer;\n    sectionMetadata = res.sectionMetadata;\n  }\n  /**\n   * check that the expressions were ended\n   */\n\n  if (isFunc(node)) {\n    // $FlowIgnore\n    var body = node.body;\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n  if (isGlobal(node)) {\n    // $FlowIgnore\n    var body = node.init;\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n  /**\n   * Add nodes\n   */\n\n  var newByteArray = encodeNode(node); // The size of the section doesn't include the storage of the size itself\n  // we need to manually add it here\n\n  var start = getEndOfSection(sectionMetadata);\n  var end = start;\n  /**\n   * Update section\n   */\n\n  var deltaBytes = newByteArray.length;\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newByteArray);\n  node.loc = {\n    start: {\n      line: -1,\n      column: start\n    },\n    end: {\n      line: -1,\n      column: start + deltaBytes\n    }\n  }; // for func add the additional metadata in the AST\n\n  if (node.type === \"Func\") {\n    // the size is the first byte\n    // FIXME(sven): handle LEB128 correctly here\n    var bodySize = newByteArray[0];\n    node.metadata = {\n      bodySize: bodySize\n    };\n  }\n  if (node.type !== \"IndexInFuncSection\") {\n    orderedInsertNode(ast.body[0], node);\n  }\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\nexport function applyOperations(ast, uint8Buffer, ops) {\n  ops.forEach(function (op) {\n    var state;\n    var sectionName;\n    switch (op.kind) {\n      case \"update\":\n        state = applyUpdate(ast, uint8Buffer, [op.oldNode, op.node]);\n        sectionName = getSectionForNode(op.node);\n        break;\n      case \"delete\":\n        state = applyDelete(ast, uint8Buffer, op.node);\n        sectionName = getSectionForNode(op.node);\n        break;\n      case \"add\":\n        state = applyAdd(ast, uint8Buffer, op.node);\n        sectionName = getSectionForNode(op.node);\n        break;\n      default:\n        throw new Error(\"Unknown operation\");\n    }\n    /**\n     * Resize section vec size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the byte length of the section and the offset for nodes in the\n     * section. So we do this first before resizing section byte size\n     * or shifting following operations' nodes.\n     */\n\n    if (state.deltaElements !== 0 && sectionName !== \"start\") {\n      var oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = resizeSectionVecSize(ast, state.uint8Buffer, sectionName, state.deltaElements); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - oldBufferLength;\n    }\n    /**\n     * Resize section byte size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the offset for nodes in the section. So we do this before\n     * shifting following operations' nodes.\n     */\n\n    if (state.deltaBytes !== 0 && sectionName !== \"start\") {\n      var _oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = resizeSectionByteSize(ast, state.uint8Buffer, sectionName, state.deltaBytes); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - _oldBufferLength;\n    }\n    /**\n     * Shift following operation's nodes\n     */\n\n    if (state.deltaBytes !== 0) {\n      ops.forEach(function (op) {\n        // We don't need to handle add ops, they are positioning independent\n        switch (op.kind) {\n          case \"update\":\n            shiftLocNodeByDelta(op.oldNode, state.deltaBytes);\n            break;\n          case \"delete\":\n            shiftLocNodeByDelta(op.node, state.deltaBytes);\n            break;\n        }\n      });\n    }\n    uint8Buffer = state.uint8Buffer;\n  });\n  return uint8Buffer;\n}","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","encodeNode","encodeU32","isFunc","isGlobal","assertHasLoc","orderedInsertNode","getSectionMetadata","traverse","getEndOfSection","resizeSectionByteSize","resizeSectionVecSize","createEmptySection","removeSections","overrideBytesInBuffer","getSectionForNode","shiftLocNodeByDelta","node","delta","loc","start","column","end","applyUpdate","ast","uint8Buffer","_ref","_ref2","oldNode","newNode","deltaElements","sectionName","replacementByteArray","Func","_ref3","funcHasThisIntr","body","find","undefined","oldNodeSize","bodySizeDeltaBytes","newValue","metadata","bodySize","newByteArray","deltaBytes","line","applyDelete","sectionMetadata","_deltaBytes","size","replacement","applyAdd","res","id","Error","init","type","applyOperations","ops","forEach","op","state","kind","oldBufferLength","_oldBufferLength"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@webassemblyjs/wasm-edit/esm/apply.js"],"sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { encodeNode } from \"@webassemblyjs/wasm-gen\";\nimport { encodeU32 } from \"@webassemblyjs/wasm-gen/lib/encoder\";\nimport { isFunc, isGlobal, assertHasLoc, orderedInsertNode, getSectionMetadata, traverse, getEndOfSection } from \"@webassemblyjs/ast\";\nimport { resizeSectionByteSize, resizeSectionVecSize, createEmptySection, removeSections } from \"@webassemblyjs/helper-wasm-section\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\n\nfunction shiftLocNodeByDelta(node, delta) {\n  assertHasLoc(node); // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.start.column += delta; // $FlowIgnore: assertHasLoc ensures that\n\n  node.loc.end.column += delta;\n}\n\nfunction applyUpdate(ast, uint8Buffer, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      oldNode = _ref2[0],\n      newNode = _ref2[1];\n\n  var deltaElements = 0;\n  assertHasLoc(oldNode);\n  var sectionName = getSectionForNode(newNode);\n  var replacementByteArray = encodeNode(newNode);\n  /**\n   * Replace new node as bytes\n   */\n\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column, // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.end.column, replacementByteArray);\n  /**\n   * Update function body size if needed\n   */\n\n  if (sectionName === \"code\") {\n    // Find the parent func\n    traverse(ast, {\n      Func: function Func(_ref3) {\n        var node = _ref3.node;\n        var funcHasThisIntr = node.body.find(function (n) {\n          return n === newNode;\n        }) !== undefined; // Update func's body size if needed\n\n        if (funcHasThisIntr === true) {\n          // These are the old functions locations informations\n          assertHasLoc(node);\n          var oldNodeSize = encodeNode(oldNode).length;\n          var bodySizeDeltaBytes = replacementByteArray.length - oldNodeSize;\n\n          if (bodySizeDeltaBytes !== 0) {\n            var newValue = node.metadata.bodySize + bodySizeDeltaBytes;\n            var newByteArray = encodeU32(newValue); // function body size byte\n            // FIXME(sven): only handles one byte u32\n\n            var start = node.loc.start.column;\n            var end = start + 1;\n            uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newByteArray);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Update section size\n   */\n\n\n  var deltaBytes = replacementByteArray.length - (oldNode.loc.end.column - oldNode.loc.start.column); // Init location informations\n\n  newNode.loc = {\n    start: {\n      line: -1,\n      column: -1\n    },\n    end: {\n      line: -1,\n      column: -1\n    }\n  }; // Update new node end position\n  // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.start.column = oldNode.loc.start.column; // $FlowIgnore: assertHasLoc ensures that\n\n  newNode.loc.end.column = // $FlowIgnore: assertHasLoc ensures that\n  oldNode.loc.start.column + replacementByteArray.length;\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyDelete(ast, uint8Buffer, node) {\n  var deltaElements = -1; // since we removed an element\n\n  assertHasLoc(node);\n  var sectionName = getSectionForNode(node);\n\n  if (sectionName === \"start\") {\n    var sectionMetadata = getSectionMetadata(ast, \"start\");\n    /**\n     * The start section only contains one element,\n     * we need to remove the whole section\n     */\n\n    uint8Buffer = removeSections(ast, uint8Buffer, \"start\");\n\n    var _deltaBytes = -(sectionMetadata.size.value + 1);\n    /* section id */\n\n\n    return {\n      uint8Buffer: uint8Buffer,\n      deltaBytes: _deltaBytes,\n      deltaElements: deltaElements\n    };\n  } // replacement is nothing\n\n\n  var replacement = [];\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, // $FlowIgnore: assertHasLoc ensures that\n  node.loc.start.column, // $FlowIgnore: assertHasLoc ensures that\n  node.loc.end.column, replacement);\n  /**\n   * Update section\n   */\n  // $FlowIgnore: assertHasLoc ensures that\n\n  var deltaBytes = -(node.loc.end.column - node.loc.start.column);\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nfunction applyAdd(ast, uint8Buffer, node) {\n  var deltaElements = +1; // since we added an element\n\n  var sectionName = getSectionForNode(node);\n  var sectionMetadata = getSectionMetadata(ast, sectionName); // Section doesn't exists, we create an empty one\n\n  if (typeof sectionMetadata === \"undefined\") {\n    var res = createEmptySection(ast, uint8Buffer, sectionName);\n    uint8Buffer = res.uint8Buffer;\n    sectionMetadata = res.sectionMetadata;\n  }\n  /**\n   * check that the expressions were ended\n   */\n\n\n  if (isFunc(node)) {\n    // $FlowIgnore\n    var body = node.body;\n\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n\n  if (isGlobal(node)) {\n    // $FlowIgnore\n    var body = node.init;\n\n    if (body.length === 0 || body[body.length - 1].id !== \"end\") {\n      throw new Error(\"expressions must be ended\");\n    }\n  }\n  /**\n   * Add nodes\n   */\n\n\n  var newByteArray = encodeNode(node); // The size of the section doesn't include the storage of the size itself\n  // we need to manually add it here\n\n  var start = getEndOfSection(sectionMetadata);\n  var end = start;\n  /**\n   * Update section\n   */\n\n  var deltaBytes = newByteArray.length;\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, start, end, newByteArray);\n  node.loc = {\n    start: {\n      line: -1,\n      column: start\n    },\n    end: {\n      line: -1,\n      column: start + deltaBytes\n    }\n  }; // for func add the additional metadata in the AST\n\n  if (node.type === \"Func\") {\n    // the size is the first byte\n    // FIXME(sven): handle LEB128 correctly here\n    var bodySize = newByteArray[0];\n    node.metadata = {\n      bodySize: bodySize\n    };\n  }\n\n  if (node.type !== \"IndexInFuncSection\") {\n    orderedInsertNode(ast.body[0], node);\n  }\n\n  return {\n    uint8Buffer: uint8Buffer,\n    deltaBytes: deltaBytes,\n    deltaElements: deltaElements\n  };\n}\n\nexport function applyOperations(ast, uint8Buffer, ops) {\n  ops.forEach(function (op) {\n    var state;\n    var sectionName;\n\n    switch (op.kind) {\n      case \"update\":\n        state = applyUpdate(ast, uint8Buffer, [op.oldNode, op.node]);\n        sectionName = getSectionForNode(op.node);\n        break;\n\n      case \"delete\":\n        state = applyDelete(ast, uint8Buffer, op.node);\n        sectionName = getSectionForNode(op.node);\n        break;\n\n      case \"add\":\n        state = applyAdd(ast, uint8Buffer, op.node);\n        sectionName = getSectionForNode(op.node);\n        break;\n\n      default:\n        throw new Error(\"Unknown operation\");\n    }\n    /**\n     * Resize section vec size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the byte length of the section and the offset for nodes in the\n     * section. So we do this first before resizing section byte size\n     * or shifting following operations' nodes.\n     */\n\n\n    if (state.deltaElements !== 0 && sectionName !== \"start\") {\n      var oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = resizeSectionVecSize(ast, state.uint8Buffer, sectionName, state.deltaElements); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - oldBufferLength;\n    }\n    /**\n     * Resize section byte size.\n     * If the length of the LEB-encoded size changes, this can change\n     * the offset for nodes in the section. So we do this before\n     * shifting following operations' nodes.\n     */\n\n\n    if (state.deltaBytes !== 0 && sectionName !== \"start\") {\n      var _oldBufferLength = state.uint8Buffer.length;\n      state.uint8Buffer = resizeSectionByteSize(ast, state.uint8Buffer, sectionName, state.deltaBytes); // Infer bytes added/removed by comparing buffer lengths\n\n      state.deltaBytes += state.uint8Buffer.length - _oldBufferLength;\n    }\n    /**\n     * Shift following operation's nodes\n     */\n\n\n    if (state.deltaBytes !== 0) {\n      ops.forEach(function (op) {\n        // We don't need to handle add ops, they are positioning independent\n        switch (op.kind) {\n          case \"update\":\n            shiftLocNodeByDelta(op.oldNode, state.deltaBytes);\n            break;\n\n          case \"delete\":\n            shiftLocNodeByDelta(op.node, state.deltaBytes);\n            break;\n        }\n      });\n    }\n\n    uint8Buffer = state.uint8Buffer;\n  });\n  return uint8Buffer;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}