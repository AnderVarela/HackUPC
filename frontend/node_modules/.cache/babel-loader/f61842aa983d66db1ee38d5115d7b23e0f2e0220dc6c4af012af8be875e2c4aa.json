{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst formats_1 = require(\"./formats\");\nconst limit_1 = require(\"./limit\");\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\nconst fullName = new codegen_1.Name(\"fullFormats\");\nconst fastName = new codegen_1.Name(\"fastFormats\");\nconst formatsPlugin = (ajv, opts = {\n  keywords: true\n}) => {\n  if (Array.isArray(opts)) {\n    addFormats(ajv, opts, formats_1.fullFormats, fullName);\n    return ajv;\n  }\n  const [formats, exportName] = opts.mode === \"fast\" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];\n  const list = opts.formats || formats_1.formatNames;\n  addFormats(ajv, list, formats, exportName);\n  if (opts.keywords) limit_1.default(ajv);\n  return ajv;\n};\nformatsPlugin.get = (name, mode = \"full\") => {\n  const formats = mode === \"fast\" ? formats_1.fastFormats : formats_1.fullFormats;\n  const f = formats[name];\n  if (!f) throw new Error(`Unknown format \"${name}\"`);\n  return f;\n};\nfunction addFormats(ajv, list, fs, exportName) {\n  var _a;\n  var _b;\n  (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : _b.formats = codegen_1._`require(\"ajv-formats/dist/formats\").${exportName}`;\n  for (const f of list) ajv.addFormat(f, fs[f]);\n}\nmodule.exports = exports = formatsPlugin;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatsPlugin;","map":{"version":3,"names":["formats_1","require","limit_1","codegen_1","fullName","Name","fastName","formatsPlugin","ajv","opts","keywords","Array","isArray","addFormats","fullFormats","formats","exportName","mode","fastFormats","list","formatNames","default","get","name","f","Error","fs","_a","_b","code","_","addFormat","module","exports","Object","defineProperty","value"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\ajv-formats\\src\\index.ts"],"sourcesContent":["import {\n  DefinedFormats,\n  FormatMode,\n  FormatName,\n  formatNames,\n  fastFormats,\n  fullFormats,\n} from \"./formats\"\nimport formatLimit from \"./limit\"\nimport type Ajv from \"ajv\"\nimport type {Plugin, Format} from \"ajv\"\nimport {_, Name} from \"ajv/dist/compile/codegen\"\n\nexport {FormatMode, FormatName} from \"./formats\"\nexport {LimitFormatError} from \"./limit\"\nexport interface FormatOptions {\n  mode?: FormatMode\n  formats?: FormatName[]\n  keywords?: boolean\n}\n\nexport type FormatsPluginOptions = FormatName[] | FormatOptions\n\nexport interface FormatsPlugin extends Plugin<FormatsPluginOptions> {\n  get: (format: FormatName, mode?: FormatMode) => Format\n}\n\nconst fullName = new Name(\"fullFormats\")\nconst fastName = new Name(\"fastFormats\")\n\nconst formatsPlugin: FormatsPlugin = (\n  ajv: Ajv,\n  opts: FormatsPluginOptions = {keywords: true}\n): Ajv => {\n  if (Array.isArray(opts)) {\n    addFormats(ajv, opts, fullFormats, fullName)\n    return ajv\n  }\n  const [formats, exportName] =\n    opts.mode === \"fast\" ? [fastFormats, fastName] : [fullFormats, fullName]\n  const list = opts.formats || formatNames\n  addFormats(ajv, list, formats, exportName)\n  if (opts.keywords) formatLimit(ajv)\n  return ajv\n}\n\nformatsPlugin.get = (name: FormatName, mode: FormatMode = \"full\"): Format => {\n  const formats = mode === \"fast\" ? fastFormats : fullFormats\n  const f = formats[name]\n  if (!f) throw new Error(`Unknown format \"${name}\"`)\n  return f\n}\n\nfunction addFormats(ajv: Ajv, list: FormatName[], fs: DefinedFormats, exportName: Name): void {\n  ajv.opts.code.formats ??= _`require(\"ajv-formats/dist/formats\").${exportName}`\n  for (const f of list) ajv.addFormat(f, fs[f])\n}\n\nmodule.exports = exports = formatsPlugin\nObject.defineProperty(exports, \"__esModule\", {value: true})\n\nexport default formatsPlugin\n"],"mappings":";;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAQA,MAAAC,OAAA,GAAAD,OAAA;AAGA,MAAAE,SAAA,GAAAF,OAAA;AAgBA,MAAMG,QAAQ,GAAG,IAAID,SAAA,CAAAE,IAAI,CAAC,aAAa,CAAC;AACxC,MAAMC,QAAQ,GAAG,IAAIH,SAAA,CAAAE,IAAI,CAAC,aAAa,CAAC;AAExC,MAAME,aAAa,GAAkBA,CACnCC,GAAQ,EACRC,IAAA,GAA6B;EAACC,QAAQ,EAAE;AAAI,CAAC,KACtC;EACP,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;IACvBI,UAAU,CAACL,GAAG,EAAEC,IAAI,EAAET,SAAA,CAAAc,WAAW,EAAEV,QAAQ,CAAC;IAC5C,OAAOI,GAAG;;EAEZ,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GACzBP,IAAI,CAACQ,IAAI,KAAK,MAAM,GAAG,CAACjB,SAAA,CAAAkB,WAAW,EAAEZ,QAAQ,CAAC,GAAG,CAACN,SAAA,CAAAc,WAAW,EAAEV,QAAQ,CAAC;EAC1E,MAAMe,IAAI,GAAGV,IAAI,CAACM,OAAO,IAAIf,SAAA,CAAAoB,WAAW;EACxCP,UAAU,CAACL,GAAG,EAAEW,IAAI,EAAEJ,OAAO,EAAEC,UAAU,CAAC;EAC1C,IAAIP,IAAI,CAACC,QAAQ,EAAER,OAAA,CAAAmB,OAAW,CAACb,GAAG,CAAC;EACnC,OAAOA,GAAG;AACZ,CAAC;AAEDD,aAAa,CAACe,GAAG,GAAG,CAACC,IAAgB,EAAEN,IAAA,GAAmB,MAAM,KAAY;EAC1E,MAAMF,OAAO,GAAGE,IAAI,KAAK,MAAM,GAAGjB,SAAA,CAAAkB,WAAW,GAAGlB,SAAA,CAAAc,WAAW;EAC3D,MAAMU,CAAC,GAAGT,OAAO,CAACQ,IAAI,CAAC;EACvB,IAAI,CAACC,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,mBAAmBF,IAAI,GAAG,CAAC;EACnD,OAAOC,CAAC;AACV,CAAC;AAED,SAASX,UAAUA,CAACL,GAAQ,EAAEW,IAAkB,EAAEO,EAAkB,EAAEV,UAAgB;;;EACpF,CAAAW,EAAA,IAAAC,EAAA,GAAApB,GAAG,CAACC,IAAI,CAACoB,IAAI,EAACd,OAAO,cAAAY,EAAA,cAAAA,EAAA,GAAAC,EAAA,CAAPb,OAAO,GAAKZ,SAAA,CAAA2B,CAAC,uCAAuCd,UAAU,EAAE;EAC9E,KAAK,MAAMQ,CAAC,IAAIL,IAAI,EAAEX,GAAG,CAACuB,SAAS,CAACP,CAAC,EAAEE,EAAE,CAACF,CAAC,CAAC,CAAC;AAC/C;AAEAQ,MAAM,CAACC,OAAO,GAAGA,OAAO,GAAG1B,aAAa;AACxC2B,MAAM,CAACC,cAAc,CAACF,OAAO,EAAE,YAAY,EAAE;EAACG,KAAK,EAAE;AAAI,CAAC,CAAC;AAE3DH,OAAA,CAAAZ,OAAA,GAAed,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}