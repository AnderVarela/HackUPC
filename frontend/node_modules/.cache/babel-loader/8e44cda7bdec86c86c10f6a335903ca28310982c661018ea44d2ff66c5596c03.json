{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\nfunction getDef() {\n  return {\n    keyword: \"deepRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    code(ctx) {\n      const {\n        schema,\n        data\n      } = ctx;\n      const props = schema.map(jp => (0, codegen_1._)`(${getData(jp)}) === undefined`);\n      ctx.fail((0, codegen_1.or)(...props));\n      function getData(jsonPointer) {\n        if (jsonPointer === \"\") throw new Error(\"empty JSON pointer not allowed\");\n        const segments = jsonPointer.split(\"/\");\n        let x = data;\n        const xs = segments.map((s, i) => i ? x = (0, codegen_1._)`${x}${(0, codegen_1.getProperty)(unescapeJPSegment(s))}` : x);\n        return (0, codegen_1.and)(...xs);\n      }\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\",\n        format: \"json-pointer\"\n      }\n    }\n  };\n}\nexports.default = getDef;\nfunction unescapeJPSegment(s) {\n  return s.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nmodule.exports = getDef;","map":{"version":3,"names":["codegen_1","require","getDef","keyword","type","schemaType","code","ctx","schema","data","props","map","jp","_","getData","fail","or","jsonPointer","Error","segments","split","x","xs","s","i","getProperty","unescapeJPSegment","and","metaSchema","items","format","exports","default","replace","module"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\css-minimizer-webpack-plugin\\node_modules\\ajv-keywords\\src\\definitions\\deepRequired.ts"],"sourcesContent":["import type {CodeKeywordDefinition, KeywordCxt} from \"ajv\"\nimport {_, or, and, getProperty, Code} from \"ajv/dist/compile/codegen\"\n\nexport default function getDef(): CodeKeywordDefinition {\n  return {\n    keyword: \"deepRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    code(ctx: KeywordCxt) {\n      const {schema, data} = ctx\n      const props = (schema as string[]).map((jp: string) => _`(${getData(jp)}) === undefined`)\n      ctx.fail(or(...props))\n\n      function getData(jsonPointer: string): Code {\n        if (jsonPointer === \"\") throw new Error(\"empty JSON pointer not allowed\")\n        const segments = jsonPointer.split(\"/\")\n        let x: Code = data\n        const xs = segments.map((s, i) =>\n          i ? (x = _`${x}${getProperty(unescapeJPSegment(s))}`) : x\n        )\n        return and(...xs)\n      }\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {type: \"string\", format: \"json-pointer\"},\n    },\n  }\n}\n\nfunction unescapeJPSegment(s: string): string {\n  return s.replace(/~1/g, \"/\").replace(/~0/g, \"~\")\n}\n\nmodule.exports = getDef\n"],"mappings":";;;;;AACA,MAAAA,SAAA,GAAAC,OAAA;AAEA,SAAwBC,MAAMA,CAAA;EAC5B,OAAO;IACLC,OAAO,EAAE,cAAc;IACvBC,IAAI,EAAE,QAAQ;IACdC,UAAU,EAAE,OAAO;IACnBC,IAAIA,CAACC,GAAe;MAClB,MAAM;QAACC,MAAM;QAAEC;MAAI,CAAC,GAAGF,GAAG;MAC1B,MAAMG,KAAK,GAAIF,MAAmB,CAACG,GAAG,CAAEC,EAAU,IAAK,IAAAZ,SAAA,CAAAa,CAAC,KAAIC,OAAO,CAACF,EAAE,CAAC,iBAAiB,CAAC;MACzFL,GAAG,CAACQ,IAAI,CAAC,IAAAf,SAAA,CAAAgB,EAAE,EAAC,GAAGN,KAAK,CAAC,CAAC;MAEtB,SAASI,OAAOA,CAACG,WAAmB;QAClC,IAAIA,WAAW,KAAK,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;QACzE,MAAMC,QAAQ,GAAGF,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC;QACvC,IAAIC,CAAC,GAASZ,IAAI;QAClB,MAAMa,EAAE,GAAGH,QAAQ,CAACR,GAAG,CAAC,CAACY,CAAC,EAAEC,CAAC,KAC3BA,CAAC,GAAIH,CAAC,GAAG,IAAArB,SAAA,CAAAa,CAAC,IAAGQ,CAAC,GAAG,IAAArB,SAAA,CAAAyB,WAAW,EAACC,iBAAiB,CAACH,CAAC,CAAC,CAAC,EAAE,GAAIF,CAAC,CAC1D;QACD,OAAO,IAAArB,SAAA,CAAA2B,GAAG,EAAC,GAAGL,EAAE,CAAC;MACnB;IACF,CAAC;IACDM,UAAU,EAAE;MACVxB,IAAI,EAAE,OAAO;MACbyB,KAAK,EAAE;QAACzB,IAAI,EAAE,QAAQ;QAAE0B,MAAM,EAAE;MAAc;;GAEjD;AACH;AAzBAC,OAAA,CAAAC,OAAA,GAAA9B,MAAA;AA2BA,SAASwB,iBAAiBA,CAACH,CAAS;EAClC,OAAOA,CAAC,CAACU,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AAClD;AAEAC,MAAM,CAACH,OAAO,GAAG7B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}