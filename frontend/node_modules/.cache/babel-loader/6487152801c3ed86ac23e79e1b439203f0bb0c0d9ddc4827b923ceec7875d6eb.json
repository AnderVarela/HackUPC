{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTypeFlagSet = exports.getTypeFlags = void 0;\nconst tsutils_1 = require(\"tsutils\");\nconst ts = __importStar(require(\"typescript\"));\nconst ANY_OR_UNKNOWN = ts.TypeFlags.Any | ts.TypeFlags.Unknown;\n/**\n * Gets all of the type flags in a type, iterating through unions automatically.\n */\nfunction getTypeFlags(type) {\n  // @ts-expect-error Since typescript 5.0, this is invalid, but uses 0 as the default value of TypeFlags.\n  let flags = 0;\n  for (const t of (0, tsutils_1.unionTypeParts)(type)) {\n    flags |= t.flags;\n  }\n  return flags;\n}\nexports.getTypeFlags = getTypeFlags;\n/**\n * @param flagsToCheck The composition of one or more `ts.TypeFlags`.\n * @param isReceiver Whether the type is a receiving type (e.g. the type of a\n * called function's parameter).\n * @remarks\n * Note that if the type is a union, this function will decompose it into the\n * parts and get the flags of every union constituent. If this is not desired,\n * use the `isTypeFlag` function from tsutils.\n */\nfunction isTypeFlagSet(type, flagsToCheck, isReceiver) {\n  const flags = getTypeFlags(type);\n  if (isReceiver && flags & ANY_OR_UNKNOWN) {\n    return true;\n  }\n  return (flags & flagsToCheck) !== 0;\n}\nexports.isTypeFlagSet = isTypeFlagSet;","map":{"version":3,"names":["tsutils_1","require","ts","__importStar","ANY_OR_UNKNOWN","TypeFlags","Any","Unknown","getTypeFlags","type","flags","t","unionTypeParts","exports","isTypeFlagSet","flagsToCheck","isReceiver"],"sources":["../src/typeFlagUtils.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,EAAA,GAAAC,YAAA,CAAAF,OAAA;AAEA,MAAMG,cAAc,GAAGF,EAAE,CAACG,SAAS,CAACC,GAAG,GAAGJ,EAAE,CAACG,SAAS,CAACE,OAAO;AAE9D;;;AAGA,SAAgBC,YAAYA,CAACC,IAAa;EACxC;EACA,IAAIC,KAAK,GAAiB,CAAC;EAC3B,KAAK,MAAMC,CAAC,IAAI,IAAAX,SAAA,CAAAY,cAAc,EAACH,IAAI,CAAC,EAAE;IACpCC,KAAK,IAAIC,CAAC,CAACD,KAAK;;EAElB,OAAOA,KAAK;AACd;AAPAG,OAAA,CAAAL,YAAA,GAAAA,YAAA;AASA;;;;;;;;;AASA,SAAgBM,aAAaA,CAC3BL,IAAa,EACbM,YAA0B,EAC1BC,UAAoB;EAEpB,MAAMN,KAAK,GAAGF,YAAY,CAACC,IAAI,CAAC;EAEhC,IAAIO,UAAU,IAAIN,KAAK,GAAGN,cAAc,EAAE;IACxC,OAAO,IAAI;;EAGb,OAAO,CAACM,KAAK,GAAGK,YAAY,MAAM,CAAC;AACrC;AAZAF,OAAA,CAAAC,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}