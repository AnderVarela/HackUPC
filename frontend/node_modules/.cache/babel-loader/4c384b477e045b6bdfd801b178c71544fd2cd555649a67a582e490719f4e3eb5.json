{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alloc = alloc;\nexports.free = free;\nexports.resize = resize;\nexports.readInt = readInt;\nexports.readUInt = readUInt;\nexports.writeInt64 = writeInt64;\nexports.writeUInt64 = writeUInt64;\n// Copyright 2012 The Obvious Corporation.\n\n/*\n * bufs: Buffer utilities.\n */\n\n/*\n * Module variables\n */\n\n/** Pool of buffers, where `bufPool[x].length === x`. */\nvar bufPool = [];\n/** Maximum length of kept temporary buffers. */\n\nvar TEMP_BUF_MAXIMUM_LENGTH = 20;\n/** Minimum exactly-representable 64-bit int. */\n\nvar MIN_EXACT_INT64 = -0x8000000000000000;\n/** Maximum exactly-representable 64-bit int. */\n\nvar MAX_EXACT_INT64 = 0x7ffffffffffffc00;\n/** Maximum exactly-representable 64-bit uint. */\n\nvar MAX_EXACT_UINT64 = 0xfffffffffffff800;\n/**\n * The int value consisting just of a 1 in bit #32 (that is, one more\n * than the maximum 32-bit unsigned value).\n */\n\nvar BIT_32 = 0x100000000;\n/**\n * The int value consisting just of a 1 in bit #64 (that is, one more\n * than the maximum 64-bit unsigned value).\n */\n\nvar BIT_64 = 0x10000000000000000;\n/*\n * Helper functions\n */\n\n/**\n * Masks off all but the lowest bit set of the given number.\n */\n\nfunction lowestBit(num) {\n  return num & -num;\n}\n/**\n * Gets whether trying to add the second number to the first is lossy\n * (inexact). The first number is meant to be an accumulated result.\n */\n\nfunction isLossyToAdd(accum, num) {\n  if (num === 0) {\n    return false;\n  }\n  var lowBit = lowestBit(num);\n  var added = accum + lowBit;\n  if (added === accum) {\n    return true;\n  }\n  if (added - lowBit !== accum) {\n    return true;\n  }\n  return false;\n}\n/*\n * Exported functions\n */\n\n/**\n * Allocates a buffer of the given length, which is initialized\n * with all zeroes. This returns a buffer from the pool if it is\n * available, or a freshly-allocated buffer if not.\n */\n\nfunction alloc(length) {\n  var result = bufPool[length];\n  if (result) {\n    bufPool[length] = undefined;\n  } else {\n    result = new Buffer(length);\n  }\n  result.fill(0);\n  return result;\n}\n/**\n * Releases a buffer back to the pool.\n */\n\nfunction free(buffer) {\n  var length = buffer.length;\n  if (length < TEMP_BUF_MAXIMUM_LENGTH) {\n    bufPool[length] = buffer;\n  }\n}\n/**\n * Resizes a buffer, returning a new buffer. Returns the argument if\n * the length wouldn't actually change. This function is only safe to\n * use if the given buffer was allocated within this module (since\n * otherwise the buffer might possibly be shared externally).\n */\n\nfunction resize(buffer, length) {\n  if (length === buffer.length) {\n    return buffer;\n  }\n  var newBuf = alloc(length);\n  buffer.copy(newBuf);\n  free(buffer);\n  return newBuf;\n}\n/**\n * Reads an arbitrary signed int from a buffer.\n */\n\nfunction readInt(buffer) {\n  var length = buffer.length;\n  var positive = buffer[length - 1] < 0x80;\n  var result = positive ? 0 : -1;\n  var lossy = false; // Note: We can't use bit manipulation here, since that stops\n  // working if the result won't fit in a 32-bit int.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (because the result has\n    // no more than 48 bits, and loss only happens with 54 or more).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i = length - 1; _i >= 0; _i--) {\n      var one = buffer[_i];\n      result *= 0x100;\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n      result += one;\n    }\n  }\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Reads an arbitrary unsigned int from a buffer.\n */\n\nfunction readUInt(buffer) {\n  var length = buffer.length;\n  var result = 0;\n  var lossy = false; // Note: See above in re bit manipulation.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (see above).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i2 = length - 1; _i2 >= 0; _i2--) {\n      var one = buffer[_i2];\n      result *= 0x100;\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n      result += one;\n    }\n  }\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Writes a little-endian 64-bit signed int into a buffer.\n */\n\nfunction writeInt64(value, buffer) {\n  if (value < MIN_EXACT_INT64 || value > MAX_EXACT_INT64) {\n    throw new Error(\"Value out of range.\");\n  }\n  if (value < 0) {\n    value += BIT_64;\n  }\n  writeUInt64(value, buffer);\n}\n/**\n * Writes a little-endian 64-bit unsigned int into a buffer.\n */\n\nfunction writeUInt64(value, buffer) {\n  if (value < 0 || value > MAX_EXACT_UINT64) {\n    throw new Error(\"Value out of range.\");\n  }\n  var lowWord = value % BIT_32;\n  var highWord = Math.floor(value / BIT_32);\n  buffer.writeUInt32LE(lowWord, 0);\n  buffer.writeUInt32LE(highWord, 4);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","alloc","free","resize","readInt","readUInt","writeInt64","writeUInt64","bufPool","TEMP_BUF_MAXIMUM_LENGTH","MIN_EXACT_INT64","MAX_EXACT_INT64","MAX_EXACT_UINT64","BIT_32","BIT_64","lowestBit","num","isLossyToAdd","accum","lowBit","added","length","result","undefined","Buffer","fill","buffer","newBuf","copy","positive","lossy","i","_i","one","_i2","Error","lowWord","highWord","Math","floor","writeUInt32LE"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@webassemblyjs/leb128/lib/bufs.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alloc = alloc;\nexports.free = free;\nexports.resize = resize;\nexports.readInt = readInt;\nexports.readUInt = readUInt;\nexports.writeInt64 = writeInt64;\nexports.writeUInt64 = writeUInt64;\n// Copyright 2012 The Obvious Corporation.\n\n/*\n * bufs: Buffer utilities.\n */\n\n/*\n * Module variables\n */\n\n/** Pool of buffers, where `bufPool[x].length === x`. */\nvar bufPool = [];\n/** Maximum length of kept temporary buffers. */\n\nvar TEMP_BUF_MAXIMUM_LENGTH = 20;\n/** Minimum exactly-representable 64-bit int. */\n\nvar MIN_EXACT_INT64 = -0x8000000000000000;\n/** Maximum exactly-representable 64-bit int. */\n\nvar MAX_EXACT_INT64 = 0x7ffffffffffffc00;\n/** Maximum exactly-representable 64-bit uint. */\n\nvar MAX_EXACT_UINT64 = 0xfffffffffffff800;\n/**\n * The int value consisting just of a 1 in bit #32 (that is, one more\n * than the maximum 32-bit unsigned value).\n */\n\nvar BIT_32 = 0x100000000;\n/**\n * The int value consisting just of a 1 in bit #64 (that is, one more\n * than the maximum 64-bit unsigned value).\n */\n\nvar BIT_64 = 0x10000000000000000;\n/*\n * Helper functions\n */\n\n/**\n * Masks off all but the lowest bit set of the given number.\n */\n\nfunction lowestBit(num) {\n  return num & -num;\n}\n/**\n * Gets whether trying to add the second number to the first is lossy\n * (inexact). The first number is meant to be an accumulated result.\n */\n\n\nfunction isLossyToAdd(accum, num) {\n  if (num === 0) {\n    return false;\n  }\n\n  var lowBit = lowestBit(num);\n  var added = accum + lowBit;\n\n  if (added === accum) {\n    return true;\n  }\n\n  if (added - lowBit !== accum) {\n    return true;\n  }\n\n  return false;\n}\n/*\n * Exported functions\n */\n\n/**\n * Allocates a buffer of the given length, which is initialized\n * with all zeroes. This returns a buffer from the pool if it is\n * available, or a freshly-allocated buffer if not.\n */\n\n\nfunction alloc(length) {\n  var result = bufPool[length];\n\n  if (result) {\n    bufPool[length] = undefined;\n  } else {\n    result = new Buffer(length);\n  }\n\n  result.fill(0);\n  return result;\n}\n/**\n * Releases a buffer back to the pool.\n */\n\n\nfunction free(buffer) {\n  var length = buffer.length;\n\n  if (length < TEMP_BUF_MAXIMUM_LENGTH) {\n    bufPool[length] = buffer;\n  }\n}\n/**\n * Resizes a buffer, returning a new buffer. Returns the argument if\n * the length wouldn't actually change. This function is only safe to\n * use if the given buffer was allocated within this module (since\n * otherwise the buffer might possibly be shared externally).\n */\n\n\nfunction resize(buffer, length) {\n  if (length === buffer.length) {\n    return buffer;\n  }\n\n  var newBuf = alloc(length);\n  buffer.copy(newBuf);\n  free(buffer);\n  return newBuf;\n}\n/**\n * Reads an arbitrary signed int from a buffer.\n */\n\n\nfunction readInt(buffer) {\n  var length = buffer.length;\n  var positive = buffer[length - 1] < 0x80;\n  var result = positive ? 0 : -1;\n  var lossy = false; // Note: We can't use bit manipulation here, since that stops\n  // working if the result won't fit in a 32-bit int.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (because the result has\n    // no more than 48 bits, and loss only happens with 54 or more).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i = length - 1; _i >= 0; _i--) {\n      var one = buffer[_i];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Reads an arbitrary unsigned int from a buffer.\n */\n\n\nfunction readUInt(buffer) {\n  var length = buffer.length;\n  var result = 0;\n  var lossy = false; // Note: See above in re bit manipulation.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (see above).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i2 = length - 1; _i2 >= 0; _i2--) {\n      var one = buffer[_i2];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\n * Writes a little-endian 64-bit signed int into a buffer.\n */\n\n\nfunction writeInt64(value, buffer) {\n  if (value < MIN_EXACT_INT64 || value > MAX_EXACT_INT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  if (value < 0) {\n    value += BIT_64;\n  }\n\n  writeUInt64(value, buffer);\n}\n/**\n * Writes a little-endian 64-bit unsigned int into a buffer.\n */\n\n\nfunction writeUInt64(value, buffer) {\n  if (value < 0 || value > MAX_EXACT_UINT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  var lowWord = value % BIT_32;\n  var highWord = Math.floor(value / BIT_32);\n  buffer.writeUInt32LE(lowWord, 0);\n  buffer.writeUInt32LE(highWord, 4);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}