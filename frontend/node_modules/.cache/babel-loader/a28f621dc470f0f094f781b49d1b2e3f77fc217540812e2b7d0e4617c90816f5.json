{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv = void 0;\nconst core_1 = require(\"./core\");\nconst jtd_1 = require(\"./vocabularies/jtd\");\nconst jtd_schema_1 = require(\"./refs/jtd-schema\");\nconst serialize_1 = require(\"./compile/jtd/serialize\");\nconst parse_1 = require(\"./compile/jtd/parse\");\nconst META_SCHEMA_ID = \"JTD-meta-schema\";\nclass Ajv extends core_1.default {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      jtd: true\n    });\n  }\n  _addVocabularies() {\n    super._addVocabularies();\n    this.addVocabulary(jtd_1.default);\n  }\n  _addDefaultMetaSchema() {\n    super._addDefaultMetaSchema();\n    if (!this.opts.meta) return;\n    this.addMetaSchema(jtd_schema_1.default, META_SCHEMA_ID, false);\n  }\n  defaultMeta() {\n    return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);\n  }\n  compileSerializer(schema) {\n    const sch = this._addSchema(schema);\n    return sch.serialize || this._compileSerializer(sch);\n  }\n  compileParser(schema) {\n    const sch = this._addSchema(schema);\n    return sch.parse || this._compileParser(sch);\n  }\n  _compileSerializer(sch) {\n    serialize_1.default.call(this, sch, sch.schema.definitions || {});\n    /* istanbul ignore if */\n    if (!sch.serialize) throw new Error(\"ajv implementation error\");\n    return sch.serialize;\n  }\n  _compileParser(sch) {\n    parse_1.default.call(this, sch, sch.schema.definitions || {});\n    /* istanbul ignore if */\n    if (!sch.parse) throw new Error(\"ajv implementation error\");\n    return sch.parse;\n  }\n}\nexports.Ajv = Ajv;\nmodule.exports = exports = Ajv;\nmodule.exports.Ajv = Ajv;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Ajv;\nvar validate_1 = require(\"./compile/validate\");\nObject.defineProperty(exports, \"KeywordCxt\", {\n  enumerable: true,\n  get: function () {\n    return validate_1.KeywordCxt;\n  }\n});\nvar codegen_1 = require(\"./compile/codegen\");\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.str;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.stringify;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.nil;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.Name;\n  }\n});\nObject.defineProperty(exports, \"CodeGen\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.CodeGen;\n  }\n});\nvar validation_error_1 = require(\"./runtime/validation_error\");\nObject.defineProperty(exports, \"ValidationError\", {\n  enumerable: true,\n  get: function () {\n    return validation_error_1.default;\n  }\n});\nvar ref_error_1 = require(\"./compile/ref_error\");\nObject.defineProperty(exports, \"MissingRefError\", {\n  enumerable: true,\n  get: function () {\n    return ref_error_1.default;\n  }\n});","map":{"version":3,"names":["core_1","require","jtd_1","jtd_schema_1","serialize_1","parse_1","META_SCHEMA_ID","Ajv","default","constructor","opts","jtd","_addVocabularies","addVocabulary","_addDefaultMetaSchema","meta","addMetaSchema","defaultMeta","getSchema","undefined","compileSerializer","schema","sch","_addSchema","serialize","_compileSerializer","compileParser","parse","_compileParser","call","definitions","Error","exports","module","Object","defineProperty","value","validate_1","enumerable","get","KeywordCxt","codegen_1","_","str","stringify","nil","Name","CodeGen","validation_error_1","ref_error_1"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\jtd.ts"],"sourcesContent":["import type {AnySchemaObject, SchemaObject, JTDParser} from \"./types\"\nimport type {JTDSchemaType, SomeJTDSchemaType, JTDDataType} from \"./types/jtd-schema\"\nimport AjvCore, {CurrentOptions} from \"./core\"\nimport jtdVocabulary from \"./vocabularies/jtd\"\nimport jtdMetaSchema from \"./refs/jtd-schema\"\nimport compileSerializer from \"./compile/jtd/serialize\"\nimport compileParser from \"./compile/jtd/parse\"\nimport {SchemaEnv} from \"./compile\"\n\nconst META_SCHEMA_ID = \"JTD-meta-schema\"\n\ntype JTDOptions = CurrentOptions & {\n  // strict mode options not supported with JTD:\n  strict?: never\n  allowMatchingProperties?: never\n  allowUnionTypes?: never\n  validateFormats?: never\n  // validation and reporting options not supported with JTD:\n  $data?: never\n  verbose?: boolean\n  $comment?: never\n  formats?: never\n  loadSchema?: never\n  // options to modify validated data:\n  useDefaults?: never\n  coerceTypes?: never\n  // advanced options:\n  next?: never\n  unevaluated?: never\n  dynamicRef?: never\n  meta?: boolean\n  defaultMeta?: never\n  inlineRefs?: boolean\n  loopRequired?: never\n  multipleOfPrecision?: never\n}\n\nexport class Ajv extends AjvCore {\n  constructor(opts: JTDOptions = {}) {\n    super({\n      ...opts,\n      jtd: true,\n    })\n  }\n\n  _addVocabularies(): void {\n    super._addVocabularies()\n    this.addVocabulary(jtdVocabulary)\n  }\n\n  _addDefaultMetaSchema(): void {\n    super._addDefaultMetaSchema()\n    if (!this.opts.meta) return\n    this.addMetaSchema(jtdMetaSchema, META_SCHEMA_ID, false)\n  }\n\n  defaultMeta(): string | AnySchemaObject | undefined {\n    return (this.opts.defaultMeta =\n      super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined))\n  }\n\n  compileSerializer<T = unknown>(schema: SchemaObject): (data: T) => string\n  // Separated for type inference to work\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  compileSerializer<T = unknown>(schema: JTDSchemaType<T>): (data: T) => string\n  compileSerializer<T = unknown>(schema: SchemaObject): (data: T) => string {\n    const sch = this._addSchema(schema)\n    return sch.serialize || this._compileSerializer(sch)\n  }\n\n  compileParser<T = unknown>(schema: SchemaObject): JTDParser<T>\n  // Separated for type inference to work\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  compileParser<T = unknown>(schema: JTDSchemaType<T>): JTDParser<T>\n  compileParser<T = unknown>(schema: SchemaObject): JTDParser<T> {\n    const sch = this._addSchema(schema)\n    return (sch.parse || this._compileParser(sch)) as JTDParser<T>\n  }\n\n  private _compileSerializer<T>(sch: SchemaEnv): (data: T) => string {\n    compileSerializer.call(this, sch, (sch.schema as AnySchemaObject).definitions || {})\n    /* istanbul ignore if */\n    if (!sch.serialize) throw new Error(\"ajv implementation error\")\n    return sch.serialize\n  }\n\n  private _compileParser(sch: SchemaEnv): JTDParser {\n    compileParser.call(this, sch, (sch.schema as AnySchemaObject).definitions || {})\n    /* istanbul ignore if */\n    if (!sch.parse) throw new Error(\"ajv implementation error\")\n    return sch.parse\n  }\n}\n\nmodule.exports = exports = Ajv\nmodule.exports.Ajv = Ajv\nObject.defineProperty(exports, \"__esModule\", {value: true})\n\nexport default Ajv\n\nexport {\n  Format,\n  FormatDefinition,\n  AsyncFormatDefinition,\n  KeywordDefinition,\n  KeywordErrorDefinition,\n  CodeKeywordDefinition,\n  MacroKeywordDefinition,\n  FuncKeywordDefinition,\n  Vocabulary,\n  Schema,\n  SchemaObject,\n  AnySchemaObject,\n  AsyncSchema,\n  AnySchema,\n  ValidateFunction,\n  AsyncValidateFunction,\n  ErrorObject,\n  ErrorNoParams,\n  JTDParser,\n} from \"./types\"\n\nexport {Plugin, Options, CodeOptions, InstanceOptions, Logger, ErrorsTextOptions} from \"./core\"\nexport {SchemaCxt, SchemaObjCxt} from \"./compile\"\nexport {KeywordCxt} from \"./compile/validate\"\nexport {JTDErrorObject} from \"./vocabularies/jtd\"\nexport {_, str, stringify, nil, Name, Code, CodeGen, CodeGenOptions} from \"./compile/codegen\"\n\nexport {JTDSchemaType, SomeJTDSchemaType, JTDDataType}\nexport {JTDOptions}\nexport {default as ValidationError} from \"./runtime/validation_error\"\nexport {default as MissingRefError} from \"./compile/ref_error\"\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}