{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearGlobResolutionCache = exports.resolveProjectList = exports.clearGlobCache = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globby_1 = require(\"globby\");\nconst is_glob_1 = __importDefault(require(\"is-glob\"));\nconst shared_1 = require(\"../create-program/shared\");\nconst ExpiringCache_1 = require(\"./ExpiringCache\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:parser:parseSettings:resolveProjectList');\nlet RESOLUTION_CACHE = null;\nfunction clearGlobCache() {\n  RESOLUTION_CACHE === null || RESOLUTION_CACHE === void 0 ? void 0 : RESOLUTION_CACHE.clear();\n}\nexports.clearGlobCache = clearGlobCache;\n/**\n * Normalizes, sanitizes, resolves and filters the provided project paths\n */\nfunction resolveProjectList(options) {\n  var _a, _b, _c;\n  const sanitizedProjects = [];\n  // Normalize and sanitize the project paths\n  if (typeof options.project === 'string') {\n    sanitizedProjects.push(options.project);\n  } else if (Array.isArray(options.project)) {\n    for (const project of options.project) {\n      if (typeof project === 'string') {\n        sanitizedProjects.push(project);\n      }\n    }\n  }\n  if (sanitizedProjects.length === 0) {\n    return [];\n  }\n  const projectFolderIgnoreList = ((_a = options.projectFolderIgnoreList) !== null && _a !== void 0 ? _a : ['**/node_modules/**']).reduce((acc, folder) => {\n    if (typeof folder === 'string') {\n      acc.push(folder);\n    }\n    return acc;\n  }, [])\n  // prefix with a ! for not match glob\n  .map(folder => folder.startsWith('!') ? folder : `!${folder}`);\n  const cacheKey = getHash({\n    project: sanitizedProjects,\n    projectFolderIgnoreList,\n    tsconfigRootDir: options.tsconfigRootDir\n  });\n  if (RESOLUTION_CACHE == null) {\n    // note - we initialize the global cache based on the first config we encounter.\n    //        this does mean that you can't have multiple lifetimes set per folder\n    //        I doubt that anyone will really bother reconfiguring this, let alone\n    //        try to do complicated setups, so we'll deal with this later if ever.\n    RESOLUTION_CACHE = new ExpiringCache_1.ExpiringCache(options.singleRun ? 'Infinity' : (_c = (_b = options.cacheLifetime) === null || _b === void 0 ? void 0 : _b.glob) !== null && _c !== void 0 ? _c : ExpiringCache_1.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS);\n  } else {\n    const cached = RESOLUTION_CACHE.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n  }\n  // Transform glob patterns into paths\n  const nonGlobProjects = sanitizedProjects.filter(project => !(0, is_glob_1.default)(project));\n  const globProjects = sanitizedProjects.filter(project => (0, is_glob_1.default)(project));\n  const uniqueCanonicalProjectPaths = new Set(nonGlobProjects.concat(globProjects.length === 0 ? [] : (0, globby_1.sync)([...globProjects, ...projectFolderIgnoreList], {\n    cwd: options.tsconfigRootDir\n  })).map(project => (0, shared_1.getCanonicalFileName)((0, shared_1.ensureAbsolutePath)(project, options.tsconfigRootDir))));\n  log('parserOptions.project (excluding ignored) matched projects: %s', uniqueCanonicalProjectPaths);\n  const returnValue = Array.from(uniqueCanonicalProjectPaths);\n  RESOLUTION_CACHE.set(cacheKey, returnValue);\n  return returnValue;\n}\nexports.resolveProjectList = resolveProjectList;\nfunction getHash({\n  project,\n  projectFolderIgnoreList,\n  tsconfigRootDir\n}) {\n  // create a stable representation of the config\n  const hashObject = {\n    tsconfigRootDir,\n    // the project order does matter and can impact the resolved globs\n    project,\n    // the ignore order won't doesn't ever matter\n    projectFolderIgnoreList: [...projectFolderIgnoreList].sort()\n  };\n  return (0, shared_1.createHash)(JSON.stringify(hashObject));\n}\n/**\n * Exported for testing purposes only\n * @internal\n */\nfunction clearGlobResolutionCache() {\n  RESOLUTION_CACHE === null || RESOLUTION_CACHE === void 0 ? void 0 : RESOLUTION_CACHE.clear();\n  RESOLUTION_CACHE = null;\n}\nexports.clearGlobResolutionCache = clearGlobResolutionCache;","map":{"version":3,"names":["debug_1","__importDefault","require","globby_1","is_glob_1","shared_1","ExpiringCache_1","log","default","RESOLUTION_CACHE","clearGlobCache","clear","exports","resolveProjectList","options","sanitizedProjects","project","push","Array","isArray","length","projectFolderIgnoreList","_a","reduce","acc","folder","map","startsWith","cacheKey","getHash","tsconfigRootDir","ExpiringCache","singleRun","_c","_b","cacheLifetime","glob","DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS","cached","get","nonGlobProjects","filter","globProjects","uniqueCanonicalProjectPaths","Set","concat","sync","cwd","getCanonicalFileName","ensureAbsolutePath","returnValue","from","set","hashObject","sort","createHash","JSON","stringify","clearGlobResolutionCache"],"sources":["../../src/parseSettings/resolveProjectList.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}