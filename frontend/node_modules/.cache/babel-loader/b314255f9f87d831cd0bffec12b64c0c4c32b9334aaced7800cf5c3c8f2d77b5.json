{"ast":null,"code":"/**\n * @fileoverview Config file operations. This file must be usable in the browser,\n * so no Node-specific code can be here.\n * @author Nicholas C. Zakas\n */\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\nconst RULE_SEVERITY_STRINGS = [\"off\", \"warn\", \"error\"],\n  RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {\n    map[value] = index;\n    return map;\n  }, {}),\n  VALID_SEVERITIES = [0, 1, 2, \"off\", \"warn\", \"error\"];\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Normalizes the severity value of a rule's configuration to a number\n * @param {(number|string|[number, ...*]|[string, ...*])} ruleConfig A rule's configuration value, generally\n * received from the user. A valid config value is either 0, 1, 2, the string \"off\" (treated the same as 0),\n * the string \"warn\" (treated the same as 1), the string \"error\" (treated the same as 2), or an array\n * whose first element is one of the above values. Strings are matched case-insensitively.\n * @returns {(0|1|2)} The numeric severity value if the config value was valid, otherwise 0.\n */\nfunction getRuleSeverity(ruleConfig) {\n  const severityValue = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n  if (severityValue === 0 || severityValue === 1 || severityValue === 2) {\n    return severityValue;\n  }\n  if (typeof severityValue === \"string\") {\n    return RULE_SEVERITY[severityValue.toLowerCase()] || 0;\n  }\n  return 0;\n}\n\n/**\n * Converts old-style severity settings (0, 1, 2) into new-style\n * severity settings (off, warn, error) for all rules. Assumption is that severity\n * values have already been validated as correct.\n * @param {Object} config The config object to normalize.\n * @returns {void}\n */\nfunction normalizeToStrings(config) {\n  if (config.rules) {\n    Object.keys(config.rules).forEach(ruleId => {\n      const ruleConfig = config.rules[ruleId];\n      if (typeof ruleConfig === \"number\") {\n        config.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];\n      } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"number\") {\n        ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];\n      }\n    });\n  }\n}\n\n/**\n * Determines if the severity for the given rule configuration represents an error.\n * @param {int|string|Array} ruleConfig The configuration for an individual rule.\n * @returns {boolean} True if the rule represents an error, false if not.\n */\nfunction isErrorSeverity(ruleConfig) {\n  return getRuleSeverity(ruleConfig) === 2;\n}\n\n/**\n * Checks whether a given config has valid severity or not.\n * @param {number|string|Array} ruleConfig The configuration for an individual rule.\n * @returns {boolean} `true` if the configuration has valid severity.\n */\nfunction isValidSeverity(ruleConfig) {\n  let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n  if (typeof severity === \"string\") {\n    severity = severity.toLowerCase();\n  }\n  return VALID_SEVERITIES.indexOf(severity) !== -1;\n}\n\n/**\n * Checks whether every rule of a given config has valid severity or not.\n * @param {Object} config The configuration for rules.\n * @returns {boolean} `true` if the configuration has valid severity.\n */\nfunction isEverySeverityValid(config) {\n  return Object.keys(config).every(ruleId => isValidSeverity(config[ruleId]));\n}\n\n/**\n * Normalizes a value for a global in a config\n * @param {(boolean|string|null)} configuredValue The value given for a global in configuration or in\n * a global directive comment\n * @returns {(\"readable\"|\"writeable\"|\"off\")} The value normalized as a string\n * @throws Error if global value is invalid\n */\nfunction normalizeConfigGlobal(configuredValue) {\n  switch (configuredValue) {\n    case \"off\":\n      return \"off\";\n    case true:\n    case \"true\":\n    case \"writeable\":\n    case \"writable\":\n      return \"writable\";\n    case null:\n    case false:\n    case \"false\":\n    case \"readable\":\n    case \"readonly\":\n      return \"readonly\";\n    default:\n      throw new Error(`'${configuredValue}' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`);\n  }\n}\nexport { getRuleSeverity, normalizeToStrings, isErrorSeverity, isValidSeverity, isEverySeverityValid, normalizeConfigGlobal };","map":{"version":3,"names":["RULE_SEVERITY_STRINGS","RULE_SEVERITY","reduce","map","value","index","VALID_SEVERITIES","getRuleSeverity","ruleConfig","severityValue","Array","isArray","toLowerCase","normalizeToStrings","config","rules","Object","keys","forEach","ruleId","isErrorSeverity","isValidSeverity","severity","indexOf","isEverySeverityValid","every","normalizeConfigGlobal","configuredValue","Error"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@eslint/eslintrc/lib/shared/config-ops.js"],"sourcesContent":["/**\n * @fileoverview Config file operations. This file must be usable in the browser,\n * so no Node-specific code can be here.\n * @author Nicholas C. Zakas\n */\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\nconst RULE_SEVERITY_STRINGS = [\"off\", \"warn\", \"error\"],\n    RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {\n        map[value] = index;\n        return map;\n    }, {}),\n    VALID_SEVERITIES = [0, 1, 2, \"off\", \"warn\", \"error\"];\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Normalizes the severity value of a rule's configuration to a number\n * @param {(number|string|[number, ...*]|[string, ...*])} ruleConfig A rule's configuration value, generally\n * received from the user. A valid config value is either 0, 1, 2, the string \"off\" (treated the same as 0),\n * the string \"warn\" (treated the same as 1), the string \"error\" (treated the same as 2), or an array\n * whose first element is one of the above values. Strings are matched case-insensitively.\n * @returns {(0|1|2)} The numeric severity value if the config value was valid, otherwise 0.\n */\nfunction getRuleSeverity(ruleConfig) {\n    const severityValue = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n\n    if (severityValue === 0 || severityValue === 1 || severityValue === 2) {\n        return severityValue;\n    }\n\n    if (typeof severityValue === \"string\") {\n        return RULE_SEVERITY[severityValue.toLowerCase()] || 0;\n    }\n\n    return 0;\n}\n\n/**\n * Converts old-style severity settings (0, 1, 2) into new-style\n * severity settings (off, warn, error) for all rules. Assumption is that severity\n * values have already been validated as correct.\n * @param {Object} config The config object to normalize.\n * @returns {void}\n */\nfunction normalizeToStrings(config) {\n\n    if (config.rules) {\n        Object.keys(config.rules).forEach(ruleId => {\n            const ruleConfig = config.rules[ruleId];\n\n            if (typeof ruleConfig === \"number\") {\n                config.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];\n            } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"number\") {\n                ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];\n            }\n        });\n    }\n}\n\n/**\n * Determines if the severity for the given rule configuration represents an error.\n * @param {int|string|Array} ruleConfig The configuration for an individual rule.\n * @returns {boolean} True if the rule represents an error, false if not.\n */\nfunction isErrorSeverity(ruleConfig) {\n    return getRuleSeverity(ruleConfig) === 2;\n}\n\n/**\n * Checks whether a given config has valid severity or not.\n * @param {number|string|Array} ruleConfig The configuration for an individual rule.\n * @returns {boolean} `true` if the configuration has valid severity.\n */\nfunction isValidSeverity(ruleConfig) {\n    let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n\n    if (typeof severity === \"string\") {\n        severity = severity.toLowerCase();\n    }\n    return VALID_SEVERITIES.indexOf(severity) !== -1;\n}\n\n/**\n * Checks whether every rule of a given config has valid severity or not.\n * @param {Object} config The configuration for rules.\n * @returns {boolean} `true` if the configuration has valid severity.\n */\nfunction isEverySeverityValid(config) {\n    return Object.keys(config).every(ruleId => isValidSeverity(config[ruleId]));\n}\n\n/**\n * Normalizes a value for a global in a config\n * @param {(boolean|string|null)} configuredValue The value given for a global in configuration or in\n * a global directive comment\n * @returns {(\"readable\"|\"writeable\"|\"off\")} The value normalized as a string\n * @throws Error if global value is invalid\n */\nfunction normalizeConfigGlobal(configuredValue) {\n    switch (configuredValue) {\n        case \"off\":\n            return \"off\";\n\n        case true:\n        case \"true\":\n        case \"writeable\":\n        case \"writable\":\n            return \"writable\";\n\n        case null:\n        case false:\n        case \"false\":\n        case \"readable\":\n        case \"readonly\":\n            return \"readonly\";\n\n        default:\n            throw new Error(`'${configuredValue}' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`);\n    }\n}\n\nexport {\n    getRuleSeverity,\n    normalizeToStrings,\n    isErrorSeverity,\n    isValidSeverity,\n    isEverySeverityValid,\n    normalizeConfigGlobal\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}