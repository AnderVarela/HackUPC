{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearParseAndGenerateServicesCalls = exports.clearProgramCache = exports.parseWithNodeMaps = exports.parseAndGenerateServices = exports.parse = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst ast_converter_1 = require(\"./ast-converter\");\nconst convert_1 = require(\"./convert\");\nconst createDefaultProgram_1 = require(\"./create-program/createDefaultProgram\");\nconst createIsolatedProgram_1 = require(\"./create-program/createIsolatedProgram\");\nconst createProjectProgram_1 = require(\"./create-program/createProjectProgram\");\nconst createSourceFile_1 = require(\"./create-program/createSourceFile\");\nconst useProvidedPrograms_1 = require(\"./create-program/useProvidedPrograms\");\nconst createParseSettings_1 = require(\"./parseSettings/createParseSettings\");\nconst semantic_or_syntactic_errors_1 = require(\"./semantic-or-syntactic-errors\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:parser');\n/**\n * Cache existing programs for the single run use-case.\n *\n * clearProgramCache() is only intended to be used in testing to ensure the parser is clean between tests.\n */\nconst existingPrograms = new Map();\nfunction clearProgramCache() {\n  existingPrograms.clear();\n}\nexports.clearProgramCache = clearProgramCache;\n/**\n * @param parseSettings Internal settings for parsing the file\n * @param shouldProvideParserServices True if the program should be attempted to be calculated from provided tsconfig files\n * @returns Returns a source file and program corresponding to the linted code\n */\nfunction getProgramAndAST(parseSettings, shouldProvideParserServices) {\n  return parseSettings.programs && (0, useProvidedPrograms_1.useProvidedPrograms)(parseSettings.programs, parseSettings) || shouldProvideParserServices && (0, createProjectProgram_1.createProjectProgram)(parseSettings) || shouldProvideParserServices && parseSettings.createDefaultProgram && (0, createDefaultProgram_1.createDefaultProgram)(parseSettings) || (0, createIsolatedProgram_1.createIsolatedProgram)(parseSettings);\n}\nfunction parse(code, options) {\n  const {\n    ast\n  } = parseWithNodeMapsInternal(code, options, false);\n  return ast;\n}\nexports.parse = parse;\nfunction parseWithNodeMapsInternal(code, options, shouldPreserveNodeMaps) {\n  /**\n   * Reset the parse configuration\n   */\n  const parseSettings = (0, createParseSettings_1.createParseSettings)(code, options);\n  /**\n   * Ensure users do not attempt to use parse() when they need parseAndGenerateServices()\n   */\n  if (options === null || options === void 0 ? void 0 : options.errorOnTypeScriptSyntacticAndSemanticIssues) {\n    throw new Error(`\"errorOnTypeScriptSyntacticAndSemanticIssues\" is only supported for parseAndGenerateServices()`);\n  }\n  /**\n   * Create a ts.SourceFile directly, no ts.Program is needed for a simple parse\n   */\n  const ast = (0, createSourceFile_1.createSourceFile)(parseSettings);\n  /**\n   * Convert the TypeScript AST to an ESTree-compatible one\n   */\n  const {\n    estree,\n    astMaps\n  } = (0, ast_converter_1.astConverter)(ast, parseSettings, shouldPreserveNodeMaps);\n  return {\n    ast: estree,\n    esTreeNodeToTSNodeMap: astMaps.esTreeNodeToTSNodeMap,\n    tsNodeToESTreeNodeMap: astMaps.tsNodeToESTreeNodeMap\n  };\n}\nfunction parseWithNodeMaps(code, options) {\n  return parseWithNodeMapsInternal(code, options, true);\n}\nexports.parseWithNodeMaps = parseWithNodeMaps;\nlet parseAndGenerateServicesCalls = {};\n// Privately exported utility intended for use in typescript-eslint unit tests only\nfunction clearParseAndGenerateServicesCalls() {\n  parseAndGenerateServicesCalls = {};\n}\nexports.clearParseAndGenerateServicesCalls = clearParseAndGenerateServicesCalls;\nfunction parseAndGenerateServices(code, options) {\n  var _a, _b;\n  /**\n   * Reset the parse configuration\n   */\n  const parseSettings = (0, createParseSettings_1.createParseSettings)(code, options);\n  if (options !== undefined) {\n    if (typeof options.errorOnTypeScriptSyntacticAndSemanticIssues === 'boolean' && options.errorOnTypeScriptSyntacticAndSemanticIssues) {\n      parseSettings.errorOnTypeScriptSyntacticAndSemanticIssues = true;\n    }\n  }\n  /**\n   * If this is a single run in which the user has not provided any existing programs but there\n   * are programs which need to be created from the provided \"project\" option,\n   * create an Iterable which will lazily create the programs as needed by the iteration logic\n   */\n  if (parseSettings.singleRun && !parseSettings.programs && ((_a = parseSettings.projects) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n    parseSettings.programs = {\n      *[Symbol.iterator]() {\n        for (const configFile of parseSettings.projects) {\n          const existingProgram = existingPrograms.get(configFile);\n          if (existingProgram) {\n            yield existingProgram;\n          } else {\n            log('Detected single-run/CLI usage, creating Program once ahead of time for project: %s', configFile);\n            const newProgram = (0, useProvidedPrograms_1.createProgramFromConfigFile)(configFile);\n            existingPrograms.set(configFile, newProgram);\n            yield newProgram;\n          }\n        }\n      }\n    };\n  }\n  /**\n   * Generate a full ts.Program or offer provided instances in order to be able to provide parser services, such as type-checking\n   */\n  const shouldProvideParserServices = parseSettings.programs != null || ((_b = parseSettings.projects) === null || _b === void 0 ? void 0 : _b.length) > 0;\n  /**\n   * If we are in singleRun mode but the parseAndGenerateServices() function has been called more than once for the current file,\n   * it must mean that we are in the middle of an ESLint automated fix cycle (in which parsing can be performed up to an additional\n   * 10 times in order to apply all possible fixes for the file).\n   *\n   * In this scenario we cannot rely upon the singleRun AOT compiled programs because the SourceFiles will not contain the source\n   * with the latest fixes applied. Therefore we fallback to creating the quickest possible isolated program from the updated source.\n   */\n  if (parseSettings.singleRun && options.filePath) {\n    parseAndGenerateServicesCalls[options.filePath] = (parseAndGenerateServicesCalls[options.filePath] || 0) + 1;\n  }\n  const {\n    ast,\n    program\n  } = parseSettings.singleRun && options.filePath && parseAndGenerateServicesCalls[options.filePath] > 1 ? (0, createIsolatedProgram_1.createIsolatedProgram)(parseSettings) : getProgramAndAST(parseSettings, shouldProvideParserServices);\n  /**\n   * Convert the TypeScript AST to an ESTree-compatible one, and optionally preserve\n   * mappings between converted and original AST nodes\n   */\n  const shouldPreserveNodeMaps = typeof parseSettings.preserveNodeMaps === 'boolean' ? parseSettings.preserveNodeMaps : true;\n  const {\n    estree,\n    astMaps\n  } = (0, ast_converter_1.astConverter)(ast, parseSettings, shouldPreserveNodeMaps);\n  /**\n   * Even if TypeScript parsed the source code ok, and we had no problems converting the AST,\n   * there may be other syntactic or semantic issues in the code that we can optionally report on.\n   */\n  if (program && parseSettings.errorOnTypeScriptSyntacticAndSemanticIssues) {\n    const error = (0, semantic_or_syntactic_errors_1.getFirstSemanticOrSyntacticError)(program, ast);\n    if (error) {\n      throw (0, convert_1.convertError)(error);\n    }\n  }\n  /**\n   * Return the converted AST and additional parser services\n   */\n  return {\n    ast: estree,\n    services: {\n      hasFullTypeInformation: shouldProvideParserServices,\n      program,\n      esTreeNodeToTSNodeMap: astMaps.esTreeNodeToTSNodeMap,\n      tsNodeToESTreeNodeMap: astMaps.tsNodeToESTreeNodeMap\n    }\n  };\n}\nexports.parseAndGenerateServices = parseAndGenerateServices;","map":{"version":3,"names":["debug_1","__importDefault","require","ast_converter_1","convert_1","createDefaultProgram_1","createIsolatedProgram_1","createProjectProgram_1","createSourceFile_1","useProvidedPrograms_1","createParseSettings_1","semantic_or_syntactic_errors_1","log","default","existingPrograms","Map","clearProgramCache","clear","exports","getProgramAndAST","parseSettings","shouldProvideParserServices","programs","useProvidedPrograms","createProjectProgram","createDefaultProgram","createIsolatedProgram","parse","code","options","ast","parseWithNodeMapsInternal","shouldPreserveNodeMaps","createParseSettings","errorOnTypeScriptSyntacticAndSemanticIssues","Error","createSourceFile","estree","astMaps","astConverter","esTreeNodeToTSNodeMap","tsNodeToESTreeNodeMap","parseWithNodeMaps","parseAndGenerateServicesCalls","clearParseAndGenerateServicesCalls","parseAndGenerateServices","undefined","singleRun","_a","projects","length","Symbol","iterator","configFile","existingProgram","get","newProgram","createProgramFromConfigFile","set","_b","filePath","program","preserveNodeMaps","error","getFirstSemanticOrSyntacticError","convertError","services","hasFullTypeInformation"],"sources":["../src/parser.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}