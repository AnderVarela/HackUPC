{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __assign, __rest, __spreadArray } from \"tslib\";\nimport { createIntl as coreCreateIntl, formatMessage as coreFormatMessage } from '@formatjs/intl';\nimport * as React from 'react';\nimport { DEFAULT_INTL_CONFIG, assignUniqueKeysToParts } from '../utils';\nimport { isFormatXMLElementFn } from 'intl-messageformat';\nfunction assignUniqueKeysToFormatXMLElementFnArgument(values) {\n  if (!values) {\n    return values;\n  }\n  return Object.keys(values).reduce(function (acc, k) {\n    var v = values[k];\n    acc[k] = isFormatXMLElementFn(v) ? assignUniqueKeysToParts(v) : v;\n    return acc;\n  }, {});\n}\nvar formatMessage = function (config, formatters, descriptor, rawValues) {\n  var rest = [];\n  for (var _i = 4; _i < arguments.length; _i++) {\n    rest[_i - 4] = arguments[_i];\n  }\n  var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);\n  var chunks = coreFormatMessage.apply(void 0, __spreadArray([config, formatters, descriptor, values], rest, false));\n  if (Array.isArray(chunks)) {\n    return React.Children.toArray(chunks);\n  }\n  return chunks;\n};\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport var createIntl = function (_a, cache) {\n  var rawDefaultRichTextElements = _a.defaultRichTextElements,\n    config = __rest(_a, [\"defaultRichTextElements\"]);\n  var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);\n  var coreIntl = coreCreateIntl(__assign(__assign(__assign({}, DEFAULT_INTL_CONFIG), config), {\n    defaultRichTextElements: defaultRichTextElements\n  }), cache);\n  var resolvedConfig = {\n    locale: coreIntl.locale,\n    timeZone: coreIntl.timeZone,\n    fallbackOnEmptyString: coreIntl.fallbackOnEmptyString,\n    formats: coreIntl.formats,\n    defaultLocale: coreIntl.defaultLocale,\n    defaultFormats: coreIntl.defaultFormats,\n    messages: coreIntl.messages,\n    onError: coreIntl.onError,\n    defaultRichTextElements: defaultRichTextElements\n  };\n  return __assign(__assign({}, coreIntl), {\n    formatMessage: formatMessage.bind(null, resolvedConfig,\n    // @ts-expect-error fix this\n    coreIntl.formatters),\n    // @ts-expect-error fix this\n    $t: formatMessage.bind(null, resolvedConfig, coreIntl.formatters)\n  });\n};","map":{"version":3,"names":["__assign","__rest","__spreadArray","createIntl","coreCreateIntl","formatMessage","coreFormatMessage","React","DEFAULT_INTL_CONFIG","assignUniqueKeysToParts","isFormatXMLElementFn","assignUniqueKeysToFormatXMLElementFnArgument","values","Object","keys","reduce","acc","k","v","config","formatters","descriptor","rawValues","rest","_i","arguments","length","chunks","apply","Array","isArray","Children","toArray","_a","cache","rawDefaultRichTextElements","defaultRichTextElements","coreIntl","resolvedConfig","locale","timeZone","fallbackOnEmptyString","formats","defaultLocale","defaultFormats","messages","onError","bind","$t"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/react-intl/lib/src/components/createIntl.js"],"sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __assign, __rest, __spreadArray } from \"tslib\";\nimport { createIntl as coreCreateIntl, formatMessage as coreFormatMessage, } from '@formatjs/intl';\nimport * as React from 'react';\nimport { DEFAULT_INTL_CONFIG, assignUniqueKeysToParts } from '../utils';\nimport { isFormatXMLElementFn, } from 'intl-messageformat';\nfunction assignUniqueKeysToFormatXMLElementFnArgument(values) {\n    if (!values) {\n        return values;\n    }\n    return Object.keys(values).reduce(function (acc, k) {\n        var v = values[k];\n        acc[k] = isFormatXMLElementFn(v)\n            ? assignUniqueKeysToParts(v)\n            : v;\n        return acc;\n    }, {});\n}\nvar formatMessage = function (config, formatters, descriptor, rawValues) {\n    var rest = [];\n    for (var _i = 4; _i < arguments.length; _i++) {\n        rest[_i - 4] = arguments[_i];\n    }\n    var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);\n    var chunks = coreFormatMessage.apply(void 0, __spreadArray([config,\n        formatters,\n        descriptor,\n        values], rest, false));\n    if (Array.isArray(chunks)) {\n        return React.Children.toArray(chunks);\n    }\n    return chunks;\n};\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport var createIntl = function (_a, cache) {\n    var rawDefaultRichTextElements = _a.defaultRichTextElements, config = __rest(_a, [\"defaultRichTextElements\"]);\n    var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);\n    var coreIntl = coreCreateIntl(__assign(__assign(__assign({}, DEFAULT_INTL_CONFIG), config), { defaultRichTextElements: defaultRichTextElements }), cache);\n    var resolvedConfig = {\n        locale: coreIntl.locale,\n        timeZone: coreIntl.timeZone,\n        fallbackOnEmptyString: coreIntl.fallbackOnEmptyString,\n        formats: coreIntl.formats,\n        defaultLocale: coreIntl.defaultLocale,\n        defaultFormats: coreIntl.defaultFormats,\n        messages: coreIntl.messages,\n        onError: coreIntl.onError,\n        defaultRichTextElements: defaultRichTextElements,\n    };\n    return __assign(__assign({}, coreIntl), { formatMessage: formatMessage.bind(null, resolvedConfig, \n        // @ts-expect-error fix this\n        coreIntl.formatters), \n        // @ts-expect-error fix this\n        $t: formatMessage.bind(null, resolvedConfig, coreIntl.formatters) });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}