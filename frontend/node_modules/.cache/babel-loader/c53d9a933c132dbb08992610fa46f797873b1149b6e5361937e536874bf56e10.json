{"ast":null,"code":"/**\n * @filedescription Merge Strategy\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\n/**\n * Container class for several different merge strategies.\n */\nclass MergeStrategy {\n  /**\n   * Merges two keys by overwriting the first with the second.\n   * @param {*} value1 The value from the first object key. \n   * @param {*} value2 The value from the second object key.\n   * @returns {*} The second value.\n   */\n  static overwrite(value1, value2) {\n    return value2;\n  }\n\n  /**\n   * Merges two keys by replacing the first with the second only if the\n   * second is defined.\n   * @param {*} value1 The value from the first object key. \n   * @param {*} value2 The value from the second object key.\n   * @returns {*} The second value if it is defined.\n   */\n  static replace(value1, value2) {\n    if (typeof value2 !== \"undefined\") {\n      return value2;\n    }\n    return value1;\n  }\n\n  /**\n   * Merges two properties by assigning properties from the second to the first.\n   * @param {*} value1 The value from the first object key.\n   * @param {*} value2 The value from the second object key.\n   * @returns {*} A new object containing properties from both value1 and\n   *      value2.\n   */\n  static assign(value1, value2) {\n    return Object.assign({}, value1, value2);\n  }\n}\nexports.MergeStrategy = MergeStrategy;","map":{"version":3,"names":["MergeStrategy","overwrite","value1","value2","replace","assign","Object","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@humanwhocodes/object-schema/src/merge-strategy.js"],"sourcesContent":["/**\n * @filedescription Merge Strategy\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\n/**\n * Container class for several different merge strategies.\n */\nclass MergeStrategy {\n\n    /**\n     * Merges two keys by overwriting the first with the second.\n     * @param {*} value1 The value from the first object key. \n     * @param {*} value2 The value from the second object key.\n     * @returns {*} The second value.\n     */\n    static overwrite(value1, value2) {\n        return value2;\n    }\n\n    /**\n     * Merges two keys by replacing the first with the second only if the\n     * second is defined.\n     * @param {*} value1 The value from the first object key. \n     * @param {*} value2 The value from the second object key.\n     * @returns {*} The second value if it is defined.\n     */\n    static replace(value1, value2) {\n        if (typeof value2 !== \"undefined\") {\n            return value2;\n        }\n\n        return value1;\n    }\n\n    /**\n     * Merges two properties by assigning properties from the second to the first.\n     * @param {*} value1 The value from the first object key.\n     * @param {*} value2 The value from the second object key.\n     * @returns {*} A new object containing properties from both value1 and\n     *      value2.\n     */\n    static assign(value1, value2) {\n        return Object.assign({}, value1, value2);\n    }\n}\n\nexports.MergeStrategy = MergeStrategy;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,aAAa,CAAC;EAEhB;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOC,SAASA,CAACC,MAAM,EAAEC,MAAM,EAAE;IAC7B,OAAOA,MAAM;EACjB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,OAAOA,CAACF,MAAM,EAAEC,MAAM,EAAE;IAC3B,IAAI,OAAOA,MAAM,KAAK,WAAW,EAAE;MAC/B,OAAOA,MAAM;IACjB;IAEA,OAAOD,MAAM;EACjB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,MAAMA,CAACH,MAAM,EAAEC,MAAM,EAAE;IAC1B,OAAOG,MAAM,CAACD,MAAM,CAAC,CAAC,CAAC,EAAEH,MAAM,EAAEC,MAAM,CAAC;EAC5C;AACJ;AAEAI,OAAO,CAACP,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}