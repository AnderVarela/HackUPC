{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Make sure to run node with --expose-gc option!\n\n// The times are reliable if about 1% relative mean error if you run it:\n\n// * immediately after restart\n// * with 100% battery charge\n// * not connected to network\n\n/* eslint import/no-extraneous-dependencies: \"off\" */\n\nconst Benchmark = require('benchmark');\nconst diffBaseline = require('diff').diffLines;\nconst diffImproved = require('../build/index.js').default;\nconst testBaseline = (a, b) => {\n  const benchmark = new Benchmark({\n    fn() {\n      diffBaseline(a, b);\n    },\n    name: 'baseline',\n    onCycle() {\n      global.gc(); // after run cycle\n    },\n    onStart() {\n      global.gc(); // when benchmark starts\n    }\n  });\n  benchmark.run({\n    async: false\n  });\n  return benchmark.stats;\n};\nconst testImproved = function (a, b) {\n  const benchmark = new Benchmark({\n    fn() {\n      // Split string arguments to make fair comparison with baseline.\n      const aItems = a.split('\\n');\n      const bItems = b.split('\\n');\n      const isCommon = (aIndex, bIndex) => aItems[aIndex] === bItems[bIndex];\n\n      // This callback obviously does less than baseline `diff` package,\n      // but avoiding double work and memory churn is the goal.\n      // For example, `jest-diff` has had to split strings that `diff` joins.\n      const foundSubsequence = () => {};\n      diffImproved(aItems.length, bItems.length, isCommon, foundSubsequence);\n    },\n    name: 'improved',\n    onCycle() {\n      global.gc(); // after run cycle\n    },\n    onStart() {\n      global.gc(); // when benchmark starts\n    }\n  });\n  benchmark.run({\n    async: false\n  });\n  return benchmark.stats;\n};\nconst writeHeading2 = () => {\n  console.log('## Benchmark time for `diff-sequences` versus `diff`\\n');\n  console.log('A ratio less than 1.0 means `diff-sequences` is faster.');\n};\nconst writeHeading3 = n => {\n  console.log(`\\n### n = ${n}\\n`);\n  console.log('| name | % | ratio | improved | rme | baseline | rme |');\n  console.log('| :--- | ---: | :--- | :--- | ---: | :--- | ---: |');\n};\nconst writeRow = (name, percent, statsImproved, statsBaseline) => {\n  const {\n    mean: meanImproved,\n    rme: rmeImproved\n  } = statsImproved;\n  const {\n    mean: meanBaseline,\n    rme: rmeBaseline\n  } = statsBaseline;\n  const ratio = meanImproved / meanBaseline;\n  console.log(`| ${name} | ${percent}% | ${ratio.toFixed(4)} | ${meanImproved.toExponential(4)} | ${rmeImproved.toFixed(2)}% | ${meanBaseline.toExponential(4)} | ${rmeBaseline.toFixed(2)}% |`);\n};\nconst testDeleteInsert = (tenths, more, less) => {\n  // For improved `diff-sequences` package, delete is often slower than insert.\n  const statsDeleteImproved = testImproved(more, less);\n  const statsDeleteBaseline = testBaseline(more, less);\n  writeRow('delete', tenths * 10, statsDeleteImproved, statsDeleteBaseline);\n\n  // For baseline `diff` package, many insertions is serious perf problem.\n  // However, the benchmark package cannot accurately measure for large n.\n  const statsInsertBaseline = testBaseline(less, more);\n  const statsInsertImproved = testImproved(less, more);\n  writeRow('insert', tenths * 10, statsInsertImproved, statsInsertBaseline);\n};\nconst testChange = (tenths, expected, received) => {\n  const statsImproved = testImproved(expected, received);\n  const statsBaseline = testBaseline(expected, received);\n  writeRow('change', tenths * 10, statsImproved, statsBaseline);\n};\nconst getItems = (n, callback) => {\n  const items = [];\n  for (let i = 0; i !== n; i += 1) {\n    const item = callback(i);\n    if (typeof item === 'string') {\n      items.push(item);\n    }\n  }\n  return items.join('\\n');\n};\n\n// Simulate change of property name which is usually not same line.\n// Expected: 0 1 2 3 4 5 6 7 8 9 and so on\n// Received: 1 2 3 4 x0 5 6 7 8 9 and so on\nconst change2 = i => {\n  const j = i % 10;\n  return j === 4 ? `x${i - 4}` : j < 4 ? `${i + 1}` : `${i}`;\n};\nconst testLength = n => {\n  const all = getItems(n, i => `${i}`);\n  writeHeading3(n);\n  [2, 4, 8].forEach(tenth => {\n    testDeleteInsert(tenth, all, getItems(n, i => i % 10 >= tenth && `${i}`));\n  });\n  testChange(1, all, getItems(n, i => i % 10 === 0 ? `x${i}` : `${i}`));\n  testChange(2, all, getItems(n, change2));\n  testChange(5, all, getItems(n, i => i % 2 === 0 ? `x${i}` : `${i}`));\n  testChange(10, all, getItems(n, i => `x${i}`)); // simulate TDD\n};\nwriteHeading2();\ntestLength(20);\ntestLength(200);\ntestLength(2000);","map":{"version":3,"names":["Benchmark","require","diffBaseline","diffLines","diffImproved","default","testBaseline","a","b","benchmark","fn","name","onCycle","global","gc","onStart","run","async","stats","testImproved","aItems","split","bItems","isCommon","aIndex","bIndex","foundSubsequence","length","writeHeading2","console","log","writeHeading3","n","writeRow","percent","statsImproved","statsBaseline","mean","meanImproved","rme","rmeImproved","meanBaseline","rmeBaseline","ratio","toFixed","toExponential","testDeleteInsert","tenths","more","less","statsDeleteImproved","statsDeleteBaseline","statsInsertBaseline","statsInsertImproved","testChange","expected","received","getItems","callback","items","i","item","push","join","change2","j","testLength","all","forEach","tenth"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@jest/globals/node_modules/diff-sequences/perf/index.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Make sure to run node with --expose-gc option!\n\n// The times are reliable if about 1% relative mean error if you run it:\n\n// * immediately after restart\n// * with 100% battery charge\n// * not connected to network\n\n/* eslint import/no-extraneous-dependencies: \"off\" */\n\nconst Benchmark = require('benchmark');\nconst diffBaseline = require('diff').diffLines;\nconst diffImproved = require('../build/index.js').default;\n\nconst testBaseline = (a, b) => {\n  const benchmark = new Benchmark({\n    fn() {\n      diffBaseline(a, b);\n    },\n    name: 'baseline',\n    onCycle() {\n      global.gc(); // after run cycle\n    },\n    onStart() {\n      global.gc(); // when benchmark starts\n    },\n  });\n\n  benchmark.run({async: false});\n\n  return benchmark.stats;\n};\n\nconst testImproved = function (a, b) {\n  const benchmark = new Benchmark({\n    fn() {\n      // Split string arguments to make fair comparison with baseline.\n      const aItems = a.split('\\n');\n      const bItems = b.split('\\n');\n\n      const isCommon = (aIndex, bIndex) => aItems[aIndex] === bItems[bIndex];\n\n      // This callback obviously does less than baseline `diff` package,\n      // but avoiding double work and memory churn is the goal.\n      // For example, `jest-diff` has had to split strings that `diff` joins.\n      const foundSubsequence = () => {};\n\n      diffImproved(aItems.length, bItems.length, isCommon, foundSubsequence);\n    },\n    name: 'improved',\n    onCycle() {\n      global.gc(); // after run cycle\n    },\n    onStart() {\n      global.gc(); // when benchmark starts\n    },\n  });\n\n  benchmark.run({async: false});\n\n  return benchmark.stats;\n};\n\nconst writeHeading2 = () => {\n  console.log('## Benchmark time for `diff-sequences` versus `diff`\\n');\n  console.log('A ratio less than 1.0 means `diff-sequences` is faster.');\n};\n\nconst writeHeading3 = n => {\n  console.log(`\\n### n = ${n}\\n`);\n  console.log('| name | % | ratio | improved | rme | baseline | rme |');\n  console.log('| :--- | ---: | :--- | :--- | ---: | :--- | ---: |');\n};\n\nconst writeRow = (name, percent, statsImproved, statsBaseline) => {\n  const {mean: meanImproved, rme: rmeImproved} = statsImproved;\n  const {mean: meanBaseline, rme: rmeBaseline} = statsBaseline;\n  const ratio = meanImproved / meanBaseline;\n\n  console.log(\n    `| ${name} | ${percent}% | ${ratio.toFixed(\n      4,\n    )} | ${meanImproved.toExponential(4)} | ${rmeImproved.toFixed(\n      2,\n    )}% | ${meanBaseline.toExponential(4)} | ${rmeBaseline.toFixed(2)}% |`,\n  );\n};\n\nconst testDeleteInsert = (tenths, more, less) => {\n  // For improved `diff-sequences` package, delete is often slower than insert.\n  const statsDeleteImproved = testImproved(more, less);\n  const statsDeleteBaseline = testBaseline(more, less);\n  writeRow('delete', tenths * 10, statsDeleteImproved, statsDeleteBaseline);\n\n  // For baseline `diff` package, many insertions is serious perf problem.\n  // However, the benchmark package cannot accurately measure for large n.\n  const statsInsertBaseline = testBaseline(less, more);\n  const statsInsertImproved = testImproved(less, more);\n  writeRow('insert', tenths * 10, statsInsertImproved, statsInsertBaseline);\n};\n\nconst testChange = (tenths, expected, received) => {\n  const statsImproved = testImproved(expected, received);\n  const statsBaseline = testBaseline(expected, received);\n  writeRow('change', tenths * 10, statsImproved, statsBaseline);\n};\n\nconst getItems = (n, callback) => {\n  const items = [];\n\n  for (let i = 0; i !== n; i += 1) {\n    const item = callback(i);\n    if (typeof item === 'string') {\n      items.push(item);\n    }\n  }\n\n  return items.join('\\n');\n};\n\n// Simulate change of property name which is usually not same line.\n// Expected: 0 1 2 3 4 5 6 7 8 9 and so on\n// Received: 1 2 3 4 x0 5 6 7 8 9 and so on\nconst change2 = i => {\n  const j = i % 10;\n  return j === 4 ? `x${i - 4}` : j < 4 ? `${i + 1}` : `${i}`;\n};\n\nconst testLength = n => {\n  const all = getItems(n, i => `${i}`);\n\n  writeHeading3(n);\n\n  [2, 4, 8].forEach(tenth => {\n    testDeleteInsert(\n      tenth,\n      all,\n      getItems(n, i => i % 10 >= tenth && `${i}`),\n    );\n  });\n  testChange(\n    1,\n    all,\n    getItems(n, i => (i % 10 === 0 ? `x${i}` : `${i}`)),\n  );\n  testChange(2, all, getItems(n, change2));\n  testChange(\n    5,\n    all,\n    getItems(n, i => (i % 2 === 0 ? `x${i}` : `${i}`)),\n  );\n  testChange(\n    10,\n    all,\n    getItems(n, i => `x${i}`),\n  ); // simulate TDD\n};\n\nwriteHeading2();\n\ntestLength(20);\ntestLength(200);\ntestLength(2000);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}