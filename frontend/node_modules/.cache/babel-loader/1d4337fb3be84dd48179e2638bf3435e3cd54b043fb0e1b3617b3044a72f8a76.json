{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar INVALID_NUMBER_REPRESENTATION = 'Invalid number representation';\nvar INVALID_RADIX = 'Invalid radix';\nvar $RangeError = RangeError;\nvar $SyntaxError = SyntaxError;\nvar $TypeError = TypeError;\nvar $parseInt = parseInt;\nvar pow = Math.pow;\nvar valid = /^[\\d.a-z]+$/;\nvar charAt = uncurryThis(''.charAt);\nvar exec = uncurryThis(valid.exec);\nvar numberToString = uncurryThis(1.0.toString);\nvar stringSlice = uncurryThis(''.slice);\nvar split = uncurryThis(''.split);\n\n// `Number.fromString` method\n// https://github.com/tc39/proposal-number-fromstring\n$({\n  target: 'Number',\n  stat: true,\n  forced: true\n}, {\n  fromString: function fromString(string, radix) {\n    var sign = 1;\n    if (typeof string != 'string') throw new $TypeError(INVALID_NUMBER_REPRESENTATION);\n    if (!string.length) throw new $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    if (charAt(string, 0) === '-') {\n      sign = -1;\n      string = stringSlice(string, 1);\n      if (!string.length) throw new $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    }\n    var R = radix === undefined ? 10 : toIntegerOrInfinity(radix);\n    if (R < 2 || R > 36) throw new $RangeError(INVALID_RADIX);\n    if (!exec(valid, string)) throw new $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    var parts = split(string, '.');\n    var mathNum = $parseInt(parts[0], R);\n    if (parts.length > 1) mathNum += $parseInt(parts[1], R) / pow(R, parts[1].length);\n    if (R === 10 && numberToString(mathNum, R) !== string) throw new $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    return sign * mathNum;\n  }\n});","map":{"version":3,"names":["$","require","uncurryThis","toIntegerOrInfinity","INVALID_NUMBER_REPRESENTATION","INVALID_RADIX","$RangeError","RangeError","$SyntaxError","SyntaxError","$TypeError","TypeError","$parseInt","parseInt","pow","Math","valid","charAt","exec","numberToString","toString","stringSlice","slice","split","target","stat","forced","fromString","string","radix","sign","length","R","undefined","parts","mathNum"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/core-js/modules/esnext.number.from-string.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar INVALID_NUMBER_REPRESENTATION = 'Invalid number representation';\nvar INVALID_RADIX = 'Invalid radix';\nvar $RangeError = RangeError;\nvar $SyntaxError = SyntaxError;\nvar $TypeError = TypeError;\nvar $parseInt = parseInt;\nvar pow = Math.pow;\nvar valid = /^[\\d.a-z]+$/;\nvar charAt = uncurryThis(''.charAt);\nvar exec = uncurryThis(valid.exec);\nvar numberToString = uncurryThis(1.0.toString);\nvar stringSlice = uncurryThis(''.slice);\nvar split = uncurryThis(''.split);\n\n// `Number.fromString` method\n// https://github.com/tc39/proposal-number-fromstring\n$({ target: 'Number', stat: true, forced: true }, {\n  fromString: function fromString(string, radix) {\n    var sign = 1;\n    if (typeof string != 'string') throw new $TypeError(INVALID_NUMBER_REPRESENTATION);\n    if (!string.length) throw new $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    if (charAt(string, 0) === '-') {\n      sign = -1;\n      string = stringSlice(string, 1);\n      if (!string.length) throw new $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    }\n    var R = radix === undefined ? 10 : toIntegerOrInfinity(radix);\n    if (R < 2 || R > 36) throw new $RangeError(INVALID_RADIX);\n    if (!exec(valid, string)) throw new $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    var parts = split(string, '.');\n    var mathNum = $parseInt(parts[0], R);\n    if (parts.length > 1) mathNum += $parseInt(parts[1], R) / pow(R, parts[1].length);\n    if (R === 10 && numberToString(mathNum, R) !== string) throw new $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    return sign * mathNum;\n  }\n});\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtC,IAAIC,WAAW,GAAGD,OAAO,CAAC,oCAAoC,CAAC;AAC/D,IAAIE,mBAAmB,GAAGF,OAAO,CAAC,qCAAqC,CAAC;AAExE,IAAIG,6BAA6B,GAAG,+BAA+B;AACnE,IAAIC,aAAa,GAAG,eAAe;AACnC,IAAIC,WAAW,GAAGC,UAAU;AAC5B,IAAIC,YAAY,GAAGC,WAAW;AAC9B,IAAIC,UAAU,GAAGC,SAAS;AAC1B,IAAIC,SAAS,GAAGC,QAAQ;AACxB,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAG;AAClB,IAAIE,KAAK,GAAG,aAAa;AACzB,IAAIC,MAAM,GAAGf,WAAW,CAAC,EAAE,CAACe,MAAM,CAAC;AACnC,IAAIC,IAAI,GAAGhB,WAAW,CAACc,KAAK,CAACE,IAAI,CAAC;AAClC,IAAIC,cAAc,GAAGjB,WAAW,CAAC,GAAG,CAACkB,QAAQ,CAAC;AAC9C,IAAIC,WAAW,GAAGnB,WAAW,CAAC,EAAE,CAACoB,KAAK,CAAC;AACvC,IAAIC,KAAK,GAAGrB,WAAW,CAAC,EAAE,CAACqB,KAAK,CAAC;;AAEjC;AACA;AACAvB,CAAC,CAAC;EAAEwB,MAAM,EAAE,QAAQ;EAAEC,IAAI,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAK,CAAC,EAAE;EAChDC,UAAU,EAAE,SAASA,UAAUA,CAACC,MAAM,EAAEC,KAAK,EAAE;IAC7C,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAI,OAAOF,MAAM,IAAI,QAAQ,EAAE,MAAM,IAAIlB,UAAU,CAACN,6BAA6B,CAAC;IAClF,IAAI,CAACwB,MAAM,CAACG,MAAM,EAAE,MAAM,IAAIvB,YAAY,CAACJ,6BAA6B,CAAC;IACzE,IAAIa,MAAM,CAACW,MAAM,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;MAC7BE,IAAI,GAAG,CAAC,CAAC;MACTF,MAAM,GAAGP,WAAW,CAACO,MAAM,EAAE,CAAC,CAAC;MAC/B,IAAI,CAACA,MAAM,CAACG,MAAM,EAAE,MAAM,IAAIvB,YAAY,CAACJ,6BAA6B,CAAC;IAC3E;IACA,IAAI4B,CAAC,GAAGH,KAAK,KAAKI,SAAS,GAAG,EAAE,GAAG9B,mBAAmB,CAAC0B,KAAK,CAAC;IAC7D,IAAIG,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG,EAAE,EAAE,MAAM,IAAI1B,WAAW,CAACD,aAAa,CAAC;IACzD,IAAI,CAACa,IAAI,CAACF,KAAK,EAAEY,MAAM,CAAC,EAAE,MAAM,IAAIpB,YAAY,CAACJ,6BAA6B,CAAC;IAC/E,IAAI8B,KAAK,GAAGX,KAAK,CAACK,MAAM,EAAE,GAAG,CAAC;IAC9B,IAAIO,OAAO,GAAGvB,SAAS,CAACsB,KAAK,CAAC,CAAC,CAAC,EAAEF,CAAC,CAAC;IACpC,IAAIE,KAAK,CAACH,MAAM,GAAG,CAAC,EAAEI,OAAO,IAAIvB,SAAS,CAACsB,KAAK,CAAC,CAAC,CAAC,EAAEF,CAAC,CAAC,GAAGlB,GAAG,CAACkB,CAAC,EAAEE,KAAK,CAAC,CAAC,CAAC,CAACH,MAAM,CAAC;IACjF,IAAIC,CAAC,KAAK,EAAE,IAAIb,cAAc,CAACgB,OAAO,EAAEH,CAAC,CAAC,KAAKJ,MAAM,EAAE,MAAM,IAAIpB,YAAY,CAACJ,6BAA6B,CAAC;IAC5G,OAAO0B,IAAI,GAAGK,OAAO;EACvB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}