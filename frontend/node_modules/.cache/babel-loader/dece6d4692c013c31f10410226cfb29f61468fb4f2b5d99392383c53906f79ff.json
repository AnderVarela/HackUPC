{"ast":null,"code":"const path = require('path');\n\n/**\n * @callback MatchObject\n * @param {string} [str]\n * @returns {boolean}\n */\n\n/**\n * @typedef {Object} InjectLoaderOptions\n * @property {MatchObject} match A function to include/exclude files to be processed.\n * @property {import('../../loader/types').ReactRefreshLoaderOptions} [options] Options passed to the loader.\n */\n\nconst resolvedLoader = require.resolve('../../loader');\nconst reactRefreshPath = path.dirname(require.resolve('react-refresh'));\nconst refreshUtilsPath = path.join(__dirname, '../runtime/RefreshUtils');\n\n/**\n * Injects refresh loader to all JavaScript-like and user-specified files.\n * @param {*} moduleData Module factory creation data.\n * @param {InjectLoaderOptions} injectOptions Options to alter how the loader is injected.\n * @returns {*} The injected module factory creation data.\n */\nfunction injectRefreshLoader(moduleData, injectOptions) {\n  const {\n    match,\n    options\n  } = injectOptions;\n\n  // Include and exclude user-specified files\n  if (!match(moduleData.matchResource || moduleData.resource)) return moduleData;\n  // Include and exclude dynamically generated modules from other loaders\n  if (moduleData.matchResource && !match(moduleData.request)) return moduleData;\n  // Exclude files referenced as assets\n  if (moduleData.type.includes('asset')) return moduleData;\n  // Check to prevent double injection\n  if (moduleData.loaders.find(({\n    loader\n  }) => loader === resolvedLoader)) return moduleData;\n  // Skip react-refresh and the plugin's runtime utils to prevent self-referencing -\n  // this is useful when using the plugin as a direct dependency,\n  // or when node_modules are specified to be processed.\n  if (moduleData.resource.includes(reactRefreshPath) || moduleData.resource.includes(refreshUtilsPath)) {\n    return moduleData;\n  }\n\n  // As we inject runtime code for each module,\n  // it is important to run the injected loader after everything.\n  // This way we can ensure that all code-processing have been done,\n  // and we won't risk breaking tools like Flow or ESLint.\n  moduleData.loaders.unshift({\n    loader: resolvedLoader,\n    options\n  });\n  return moduleData;\n}\nmodule.exports = injectRefreshLoader;","map":{"version":3,"names":["path","require","resolvedLoader","resolve","reactRefreshPath","dirname","refreshUtilsPath","join","__dirname","injectRefreshLoader","moduleData","injectOptions","match","options","matchResource","resource","request","type","includes","loaders","find","loader","unshift","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/utils/injectRefreshLoader.js"],"sourcesContent":["const path = require('path');\n\n/**\n * @callback MatchObject\n * @param {string} [str]\n * @returns {boolean}\n */\n\n/**\n * @typedef {Object} InjectLoaderOptions\n * @property {MatchObject} match A function to include/exclude files to be processed.\n * @property {import('../../loader/types').ReactRefreshLoaderOptions} [options] Options passed to the loader.\n */\n\nconst resolvedLoader = require.resolve('../../loader');\nconst reactRefreshPath = path.dirname(require.resolve('react-refresh'));\nconst refreshUtilsPath = path.join(__dirname, '../runtime/RefreshUtils');\n\n/**\n * Injects refresh loader to all JavaScript-like and user-specified files.\n * @param {*} moduleData Module factory creation data.\n * @param {InjectLoaderOptions} injectOptions Options to alter how the loader is injected.\n * @returns {*} The injected module factory creation data.\n */\nfunction injectRefreshLoader(moduleData, injectOptions) {\n  const { match, options } = injectOptions;\n\n  // Include and exclude user-specified files\n  if (!match(moduleData.matchResource || moduleData.resource)) return moduleData;\n  // Include and exclude dynamically generated modules from other loaders\n  if (moduleData.matchResource && !match(moduleData.request)) return moduleData;\n  // Exclude files referenced as assets\n  if (moduleData.type.includes('asset')) return moduleData;\n  // Check to prevent double injection\n  if (moduleData.loaders.find(({ loader }) => loader === resolvedLoader)) return moduleData;\n  // Skip react-refresh and the plugin's runtime utils to prevent self-referencing -\n  // this is useful when using the plugin as a direct dependency,\n  // or when node_modules are specified to be processed.\n  if (\n    moduleData.resource.includes(reactRefreshPath) ||\n    moduleData.resource.includes(refreshUtilsPath)\n  ) {\n    return moduleData;\n  }\n\n  // As we inject runtime code for each module,\n  // it is important to run the injected loader after everything.\n  // This way we can ensure that all code-processing have been done,\n  // and we won't risk breaking tools like Flow or ESLint.\n  moduleData.loaders.unshift({\n    loader: resolvedLoader,\n    options,\n  });\n\n  return moduleData;\n}\n\nmodule.exports = injectRefreshLoader;\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAGD,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC;AACtD,MAAMC,gBAAgB,GAAGJ,IAAI,CAACK,OAAO,CAACJ,OAAO,CAACE,OAAO,CAAC,eAAe,CAAC,CAAC;AACvE,MAAMG,gBAAgB,GAAGN,IAAI,CAACO,IAAI,CAACC,SAAS,EAAE,yBAAyB,CAAC;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,UAAU,EAAEC,aAAa,EAAE;EACtD,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGF,aAAa;;EAExC;EACA,IAAI,CAACC,KAAK,CAACF,UAAU,CAACI,aAAa,IAAIJ,UAAU,CAACK,QAAQ,CAAC,EAAE,OAAOL,UAAU;EAC9E;EACA,IAAIA,UAAU,CAACI,aAAa,IAAI,CAACF,KAAK,CAACF,UAAU,CAACM,OAAO,CAAC,EAAE,OAAON,UAAU;EAC7E;EACA,IAAIA,UAAU,CAACO,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAOR,UAAU;EACxD;EACA,IAAIA,UAAU,CAACS,OAAO,CAACC,IAAI,CAAC,CAAC;IAAEC;EAAO,CAAC,KAAKA,MAAM,KAAKnB,cAAc,CAAC,EAAE,OAAOQ,UAAU;EACzF;EACA;EACA;EACA,IACEA,UAAU,CAACK,QAAQ,CAACG,QAAQ,CAACd,gBAAgB,CAAC,IAC9CM,UAAU,CAACK,QAAQ,CAACG,QAAQ,CAACZ,gBAAgB,CAAC,EAC9C;IACA,OAAOI,UAAU;EACnB;;EAEA;EACA;EACA;EACA;EACAA,UAAU,CAACS,OAAO,CAACG,OAAO,CAAC;IACzBD,MAAM,EAAEnB,cAAc;IACtBW;EACF,CAAC,CAAC;EAEF,OAAOH,UAAU;AACnB;AAEAa,MAAM,CAACC,OAAO,GAAGf,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}