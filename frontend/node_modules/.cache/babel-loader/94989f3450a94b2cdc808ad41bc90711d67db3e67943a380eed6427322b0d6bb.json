{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNodeWithName = exports.isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned = exports.isNormalObjectPropertyWithAnonymousExpressionAssigned = exports.isNormalVariableDeclaratorWithAnonymousExpressionAssigned = exports.isNormalAssignmentPatternWithAnonymousExpressionAssigned = exports.isNormalVariableDeclarator = exports.isNormalObjectProperty = exports.isNormalMethodDefinition = exports.isNormalClassPropertyDefinition = exports.isNormalAssignmentPattern = exports.isNormalAnonymousExpression = exports.isFunctionExpressionWithName = exports.isClassExpressionWithName = exports.isStringLiteral = exports.isPropertyNameNonComputed = exports.isNumberLiteral = exports.isFunctionDeclarationWithName = exports.isClassPropertyNameNonComputed = exports.isClassDeclarationWithName = exports.isVariableDeclarator = exports.isTSTypeAliasDeclaration = exports.isTSQualifiedName = exports.isTSModuleDeclaration = exports.isTSInterfaceDeclaration = exports.isTSEnumDeclaration = exports.isPropertyDefinition = exports.isProperty = exports.isPrivateIdentifier = exports.isObjectExpression = exports.isMethodDefinition = exports.isLiteral = exports.isIdentifier = exports.isFunctionExpression = exports.isFunctionDeclaration = exports.isExpression = exports.isExportDefaultDeclaration = exports.isClassExpression = exports.isClassDeclaration = exports.isAssignmentPattern = exports.isArrowFunctionExpression = exports.isArrayExpression = void 0;\nfunction isArrayExpression(node) {\n  return node.type === 'ArrayExpression';\n}\nexports.isArrayExpression = isArrayExpression;\nfunction isArrowFunctionExpression(node) {\n  return node.type === 'ArrowFunctionExpression';\n}\nexports.isArrowFunctionExpression = isArrowFunctionExpression;\n/** default parameters */\nfunction isAssignmentPattern(node) {\n  return node.type === 'AssignmentPattern';\n}\nexports.isAssignmentPattern = isAssignmentPattern;\nfunction isClassDeclaration(node) {\n  return node.type === 'ClassDeclaration';\n}\nexports.isClassDeclaration = isClassDeclaration;\nfunction isClassExpression(node) {\n  return node.type === 'ClassExpression';\n}\nexports.isClassExpression = isClassExpression;\nfunction isExportDefaultDeclaration(node) {\n  return node.type === 'ExportDefaultDeclaration';\n}\nexports.isExportDefaultDeclaration = isExportDefaultDeclaration;\nfunction isExpression(node) {\n  return node.type.includes('Expression');\n}\nexports.isExpression = isExpression;\nfunction isFunctionDeclaration(node) {\n  return node.type === 'FunctionDeclaration';\n}\nexports.isFunctionDeclaration = isFunctionDeclaration;\nfunction isFunctionExpression(node) {\n  return node.type === 'FunctionExpression';\n}\nexports.isFunctionExpression = isFunctionExpression;\nfunction isIdentifier(node) {\n  return node.type === 'Identifier';\n}\nexports.isIdentifier = isIdentifier;\nfunction isLiteral(node) {\n  return node.type === 'Literal';\n}\nexports.isLiteral = isLiteral;\nfunction isMethodDefinition(node) {\n  return node.type === 'MethodDefinition';\n}\nexports.isMethodDefinition = isMethodDefinition;\nfunction isObjectExpression(node) {\n  return node.type === 'ObjectExpression';\n}\nexports.isObjectExpression = isObjectExpression;\nfunction isPrivateIdentifier(node) {\n  return node.type === 'PrivateIdentifier';\n}\nexports.isPrivateIdentifier = isPrivateIdentifier;\nfunction isProperty(node) {\n  return node.type === 'Property';\n}\nexports.isProperty = isProperty;\nfunction isPropertyDefinition(node) {\n  return node.type === 'PropertyDefinition';\n}\nexports.isPropertyDefinition = isPropertyDefinition;\nfunction isTSEnumDeclaration(node) {\n  return node.type === 'TSEnumDeclaration';\n}\nexports.isTSEnumDeclaration = isTSEnumDeclaration;\nfunction isTSInterfaceDeclaration(node) {\n  return node.type === 'TSInterfaceDeclaration';\n}\nexports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;\nfunction isTSModuleDeclaration(node) {\n  return node.type === 'TSModuleDeclaration';\n}\nexports.isTSModuleDeclaration = isTSModuleDeclaration;\nfunction isTSQualifiedName(node) {\n  return node.type === 'TSQualifiedName';\n}\nexports.isTSQualifiedName = isTSQualifiedName;\nfunction isTSTypeAliasDeclaration(node) {\n  return node.type === 'TSTypeAliasDeclaration';\n}\nexports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;\nfunction isVariableDeclarator(node) {\n  return node.type === 'VariableDeclarator';\n}\nexports.isVariableDeclarator = isVariableDeclarator;\n// Compound Type Guards for @typescript-eslint/types ast-spec compound types\nfunction isClassDeclarationWithName(node) {\n  return isClassDeclaration(node) && node.id !== null;\n}\nexports.isClassDeclarationWithName = isClassDeclarationWithName;\nfunction isClassPropertyNameNonComputed(node) {\n  return isPrivateIdentifier(node) || isPropertyNameNonComputed(node);\n}\nexports.isClassPropertyNameNonComputed = isClassPropertyNameNonComputed;\nfunction isFunctionDeclarationWithName(node) {\n  return isFunctionDeclaration(node) && node.id !== null;\n}\nexports.isFunctionDeclarationWithName = isFunctionDeclarationWithName;\nfunction isNumberLiteral(node) {\n  return isLiteral(node) && typeof node.value === 'number';\n}\nexports.isNumberLiteral = isNumberLiteral;\nfunction isPropertyNameNonComputed(node) {\n  return isIdentifier(node) || isNumberLiteral(node) || isStringLiteral(node);\n}\nexports.isPropertyNameNonComputed = isPropertyNameNonComputed;\nfunction isStringLiteral(node) {\n  return isLiteral(node) && typeof node.value === 'string';\n}\nexports.isStringLiteral = isStringLiteral;\nfunction isClassExpressionWithName(node) {\n  return isClassExpression(node) && node.id !== null;\n}\nexports.isClassExpressionWithName = isClassExpressionWithName;\nfunction isFunctionExpressionWithName(node) {\n  return isFunctionExpression(node) && node.id !== null;\n}\nexports.isFunctionExpressionWithName = isFunctionExpressionWithName;\nfunction isNormalAnonymousExpression(node) {\n  const ANONYMOUS_EXPRESSION_GUARDS = [isArrowFunctionExpression, isClassExpression, isFunctionExpression, isObjectExpression];\n  return ANONYMOUS_EXPRESSION_GUARDS.some(guard => guard(node));\n}\nexports.isNormalAnonymousExpression = isNormalAnonymousExpression;\nfunction isNormalAssignmentPattern(node) {\n  return isAssignmentPattern(node) && isIdentifier(node.left);\n}\nexports.isNormalAssignmentPattern = isNormalAssignmentPattern;\nfunction isNormalClassPropertyDefinition(node) {\n  return isPropertyDefinition(node) && (isIdentifier(node.key) || isPrivateIdentifier(node.key)) && node.value !== null;\n}\nexports.isNormalClassPropertyDefinition = isNormalClassPropertyDefinition;\nfunction isNormalMethodDefinition(node) {\n  return isMethodDefinition(node) && (isIdentifier(node.key) || isPrivateIdentifier(node.key));\n}\nexports.isNormalMethodDefinition = isNormalMethodDefinition;\nfunction isNormalObjectProperty(node) {\n  return isProperty(node) && (isIdentifier(node.key) || isPrivateIdentifier(node.key));\n}\nexports.isNormalObjectProperty = isNormalObjectProperty;\nfunction isNormalVariableDeclarator(node) {\n  return isVariableDeclarator(node) && isIdentifier(node.id) && node.init !== null;\n}\nexports.isNormalVariableDeclarator = isNormalVariableDeclarator;\nfunction isNormalAssignmentPatternWithAnonymousExpressionAssigned(node) {\n  return isNormalAssignmentPattern(node) && isNormalAnonymousExpression(node.right);\n}\nexports.isNormalAssignmentPatternWithAnonymousExpressionAssigned = isNormalAssignmentPatternWithAnonymousExpressionAssigned;\nfunction isNormalVariableDeclaratorWithAnonymousExpressionAssigned(node) {\n  return isNormalVariableDeclarator(node) && isNormalAnonymousExpression(node.init);\n}\nexports.isNormalVariableDeclaratorWithAnonymousExpressionAssigned = isNormalVariableDeclaratorWithAnonymousExpressionAssigned;\nfunction isNormalObjectPropertyWithAnonymousExpressionAssigned(node) {\n  return isNormalObjectProperty(node) && isNormalAnonymousExpression(node.value);\n}\nexports.isNormalObjectPropertyWithAnonymousExpressionAssigned = isNormalObjectPropertyWithAnonymousExpressionAssigned;\nfunction isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned(node) {\n  return isNormalClassPropertyDefinition(node) && isNormalAnonymousExpression(node.value);\n}\nexports.isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned = isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned;\nfunction isNodeWithName(node) {\n  return isClassDeclarationWithName(node) || isFunctionDeclarationWithName(node) || isClassExpressionWithName(node) || isFunctionExpressionWithName(node) || isNormalVariableDeclaratorWithAnonymousExpressionAssigned(node) || isNormalObjectPropertyWithAnonymousExpressionAssigned(node) || isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned(node) || isNormalAssignmentPatternWithAnonymousExpressionAssigned(node) || isNormalMethodDefinition(node) || isTSEnumDeclaration(node) || isTSInterfaceDeclaration(node) || isTSTypeAliasDeclaration(node);\n}\nexports.isNodeWithName = isNodeWithName;","map":{"version":3,"names":["isArrayExpression","node","type","exports","isArrowFunctionExpression","isAssignmentPattern","isClassDeclaration","isClassExpression","isExportDefaultDeclaration","isExpression","includes","isFunctionDeclaration","isFunctionExpression","isIdentifier","isLiteral","isMethodDefinition","isObjectExpression","isPrivateIdentifier","isProperty","isPropertyDefinition","isTSEnumDeclaration","isTSInterfaceDeclaration","isTSModuleDeclaration","isTSQualifiedName","isTSTypeAliasDeclaration","isVariableDeclarator","isClassDeclarationWithName","id","isClassPropertyNameNonComputed","isPropertyNameNonComputed","isFunctionDeclarationWithName","isNumberLiteral","value","isStringLiteral","isClassExpressionWithName","isFunctionExpressionWithName","isNormalAnonymousExpression","ANONYMOUS_EXPRESSION_GUARDS","some","guard","isNormalAssignmentPattern","left","isNormalClassPropertyDefinition","key","isNormalMethodDefinition","isNormalObjectProperty","isNormalVariableDeclarator","init","isNormalAssignmentPatternWithAnonymousExpressionAssigned","right","isNormalVariableDeclaratorWithAnonymousExpressionAssigned","isNormalObjectPropertyWithAnonymousExpressionAssigned","isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned","isNodeWithName"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@rushstack\\eslint-patch\\src\\eslint-bulk-suppressions\\ast-guards.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { TSESTree } from '@typescript-eslint/types';\n\nexport function isArrayExpression(node: TSESTree.Node): node is TSESTree.ArrayExpression {\n  return node.type === 'ArrayExpression';\n}\n\nexport function isArrowFunctionExpression(node: TSESTree.Node): node is TSESTree.ArrowFunctionExpression {\n  return node.type === 'ArrowFunctionExpression';\n}\n\n/** default parameters */\nexport function isAssignmentPattern(node: TSESTree.Node): node is TSESTree.AssignmentPattern {\n  return node.type === 'AssignmentPattern';\n}\n\nexport function isClassDeclaration(node: TSESTree.Node): node is TSESTree.ClassDeclaration {\n  return node.type === 'ClassDeclaration';\n}\n\nexport function isClassExpression(node: TSESTree.Node): node is TSESTree.ClassExpression {\n  return node.type === 'ClassExpression';\n}\n\nexport function isExportDefaultDeclaration(node: TSESTree.Node): node is TSESTree.ExportDefaultDeclaration {\n  return node.type === 'ExportDefaultDeclaration';\n}\n\nexport function isExpression(node: TSESTree.Node): node is TSESTree.Expression {\n  return node.type.includes('Expression');\n}\n\nexport function isFunctionDeclaration(node: TSESTree.Node): node is TSESTree.FunctionDeclaration {\n  return node.type === 'FunctionDeclaration';\n}\n\nexport function isFunctionExpression(node: TSESTree.Node): node is TSESTree.FunctionExpression {\n  return node.type === 'FunctionExpression';\n}\n\nexport function isIdentifier(node: TSESTree.Node): node is TSESTree.Identifier {\n  return node.type === 'Identifier';\n}\n\nexport function isLiteral(node: TSESTree.Node): node is TSESTree.Literal {\n  return node.type === 'Literal';\n}\n\nexport function isMethodDefinition(node: TSESTree.Node): node is TSESTree.MethodDefinition {\n  return node.type === 'MethodDefinition';\n}\n\nexport function isObjectExpression(node: TSESTree.Node): node is TSESTree.ObjectExpression {\n  return node.type === 'ObjectExpression';\n}\n\nexport function isPrivateIdentifier(node: TSESTree.Node): node is TSESTree.PrivateIdentifier {\n  return node.type === 'PrivateIdentifier';\n}\n\nexport function isProperty(node: TSESTree.Node): node is TSESTree.Property {\n  return node.type === 'Property';\n}\n\nexport function isPropertyDefinition(node: TSESTree.Node): node is TSESTree.PropertyDefinition {\n  return node.type === 'PropertyDefinition';\n}\n\nexport function isTSEnumDeclaration(node: TSESTree.Node): node is TSESTree.TSEnumDeclaration {\n  return node.type === 'TSEnumDeclaration';\n}\n\nexport function isTSInterfaceDeclaration(node: TSESTree.Node): node is TSESTree.TSInterfaceDeclaration {\n  return node.type === 'TSInterfaceDeclaration';\n}\n\nexport function isTSModuleDeclaration(node: TSESTree.Node): node is TSESTree.TSModuleDeclaration {\n  return node.type === 'TSModuleDeclaration';\n}\n\nexport function isTSQualifiedName(node: TSESTree.Node): node is TSESTree.TSQualifiedName {\n  return node.type === 'TSQualifiedName';\n}\n\nexport function isTSTypeAliasDeclaration(node: TSESTree.Node): node is TSESTree.TSTypeAliasDeclaration {\n  return node.type === 'TSTypeAliasDeclaration';\n}\n\nexport function isVariableDeclarator(node: TSESTree.Node): node is TSESTree.VariableDeclarator {\n  return node.type === 'VariableDeclarator';\n}\n\n// Compound Type Guards for @typescript-eslint/types ast-spec compound types\nexport function isClassDeclarationWithName(node: TSESTree.Node): node is TSESTree.ClassDeclarationWithName {\n  return isClassDeclaration(node) && node.id !== null;\n}\n\nexport function isClassPropertyNameNonComputed(\n  node: TSESTree.Node\n): node is TSESTree.ClassPropertyNameNonComputed {\n  return isPrivateIdentifier(node) || isPropertyNameNonComputed(node);\n}\n\nexport function isFunctionDeclarationWithName(\n  node: TSESTree.Node\n): node is TSESTree.FunctionDeclarationWithName {\n  return isFunctionDeclaration(node) && node.id !== null;\n}\n\nexport function isNumberLiteral(node: TSESTree.Node): node is TSESTree.NumberLiteral {\n  return isLiteral(node) && typeof node.value === 'number';\n}\n\nexport function isPropertyNameNonComputed(node: TSESTree.Node): node is TSESTree.PropertyNameNonComputed {\n  return isIdentifier(node) || isNumberLiteral(node) || isStringLiteral(node);\n}\n\nexport function isStringLiteral(node: TSESTree.Node): node is TSESTree.StringLiteral {\n  return isLiteral(node) && typeof node.value === 'string';\n}\n\n// Custom compound types\nexport interface IClassExpressionWithName extends TSESTree.ClassExpression {\n  id: TSESTree.Identifier;\n}\n\nexport function isClassExpressionWithName(node: TSESTree.Node): node is IClassExpressionWithName {\n  return isClassExpression(node) && node.id !== null;\n}\nexport interface IFunctionExpressionWithName extends TSESTree.FunctionExpression {\n  id: TSESTree.Identifier;\n}\n\nexport function isFunctionExpressionWithName(node: TSESTree.Node): node is IFunctionExpressionWithName {\n  return isFunctionExpression(node) && node.id !== null;\n}\n\nexport type NormalAnonymousExpression =\n  | TSESTree.ArrowFunctionExpression\n  | TSESTree.ClassExpression\n  | TSESTree.FunctionExpression\n  | TSESTree.ObjectExpression;\n\nexport function isNormalAnonymousExpression(node: TSESTree.Node): node is NormalAnonymousExpression {\n  const ANONYMOUS_EXPRESSION_GUARDS: ((node: TSESTree.Node) => boolean)[] = [\n    isArrowFunctionExpression,\n    isClassExpression,\n    isFunctionExpression,\n    isObjectExpression\n  ];\n  return ANONYMOUS_EXPRESSION_GUARDS.some((guard) => guard(node));\n}\n\nexport interface INormalAssignmentPattern extends TSESTree.AssignmentPattern {\n  left: TSESTree.Identifier;\n}\n\nexport function isNormalAssignmentPattern(node: TSESTree.Node): node is INormalAssignmentPattern {\n  return isAssignmentPattern(node) && isIdentifier(node.left);\n}\n\nexport interface INormalClassPropertyDefinition extends TSESTree.PropertyDefinitionNonComputedName {\n  key: TSESTree.PrivateIdentifier | TSESTree.Identifier;\n  value: TSESTree.Expression;\n}\n\nexport function isNormalClassPropertyDefinition(node: TSESTree.Node): node is INormalClassPropertyDefinition {\n  return (\n    isPropertyDefinition(node) &&\n    (isIdentifier(node.key) || isPrivateIdentifier(node.key)) &&\n    node.value !== null\n  );\n}\n\nexport interface INormalMethodDefinition extends TSESTree.MethodDefinitionNonComputedName {\n  key: TSESTree.PrivateIdentifier | TSESTree.Identifier;\n}\n\nexport function isNormalMethodDefinition(node: TSESTree.Node): node is INormalMethodDefinition {\n  return isMethodDefinition(node) && (isIdentifier(node.key) || isPrivateIdentifier(node.key));\n}\n\nexport interface INormalObjectProperty extends TSESTree.PropertyNonComputedName {\n  key: TSESTree.Identifier;\n}\n\nexport function isNormalObjectProperty(node: TSESTree.Node): node is INormalObjectProperty {\n  return isProperty(node) && (isIdentifier(node.key) || isPrivateIdentifier(node.key));\n}\n\nexport interface INormalVariableDeclarator extends TSESTree.VariableDeclarator {\n  id: TSESTree.Identifier;\n  init: TSESTree.Expression;\n}\n\nexport function isNormalVariableDeclarator(node: TSESTree.Node): node is INormalVariableDeclarator {\n  return isVariableDeclarator(node) && isIdentifier(node.id) && node.init !== null;\n}\n\nexport interface INormalAssignmentPatternWithAnonymousExpressionAssigned extends INormalAssignmentPattern {\n  right: NormalAnonymousExpression;\n}\n\nexport function isNormalAssignmentPatternWithAnonymousExpressionAssigned(\n  node: TSESTree.Node\n): node is INormalAssignmentPatternWithAnonymousExpressionAssigned {\n  return isNormalAssignmentPattern(node) && isNormalAnonymousExpression(node.right);\n}\n\nexport interface INormalVariableDeclaratorWithAnonymousExpressionAssigned extends INormalVariableDeclarator {\n  init: NormalAnonymousExpression;\n}\n\nexport function isNormalVariableDeclaratorWithAnonymousExpressionAssigned(\n  node: TSESTree.Node\n): node is INormalVariableDeclaratorWithAnonymousExpressionAssigned {\n  return isNormalVariableDeclarator(node) && isNormalAnonymousExpression(node.init);\n}\n\nexport interface INormalObjectPropertyWithAnonymousExpressionAssigned extends INormalObjectProperty {\n  value: NormalAnonymousExpression;\n}\n\nexport function isNormalObjectPropertyWithAnonymousExpressionAssigned(\n  node: TSESTree.Node\n): node is INormalObjectPropertyWithAnonymousExpressionAssigned {\n  return isNormalObjectProperty(node) && isNormalAnonymousExpression(node.value);\n}\n\nexport interface INormalClassPropertyDefinitionWithAnonymousExpressionAssigned\n  extends INormalClassPropertyDefinition {\n  value: NormalAnonymousExpression;\n}\n\nexport function isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned(\n  node: TSESTree.Node\n): node is INormalClassPropertyDefinitionWithAnonymousExpressionAssigned {\n  return isNormalClassPropertyDefinition(node) && isNormalAnonymousExpression(node.value);\n}\n\nexport type NodeWithName =\n  | TSESTree.ClassDeclarationWithName\n  | TSESTree.FunctionDeclarationWithName\n  | IClassExpressionWithName\n  | IFunctionExpressionWithName\n  | INormalVariableDeclaratorWithAnonymousExpressionAssigned\n  | INormalObjectPropertyWithAnonymousExpressionAssigned\n  | INormalClassPropertyDefinitionWithAnonymousExpressionAssigned\n  | INormalAssignmentPatternWithAnonymousExpressionAssigned\n  | INormalMethodDefinition\n  | TSESTree.TSEnumDeclaration\n  | TSESTree.TSInterfaceDeclaration\n  | TSESTree.TSTypeAliasDeclaration;\n\nexport function isNodeWithName(node: TSESTree.Node): node is NodeWithName {\n  return (\n    isClassDeclarationWithName(node) ||\n    isFunctionDeclarationWithName(node) ||\n    isClassExpressionWithName(node) ||\n    isFunctionExpressionWithName(node) ||\n    isNormalVariableDeclaratorWithAnonymousExpressionAssigned(node) ||\n    isNormalObjectPropertyWithAnonymousExpressionAssigned(node) ||\n    isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned(node) ||\n    isNormalAssignmentPatternWithAnonymousExpressionAssigned(node) ||\n    isNormalMethodDefinition(node) ||\n    isTSEnumDeclaration(node) ||\n    isTSInterfaceDeclaration(node) ||\n    isTSTypeAliasDeclaration(node)\n  );\n}\n"],"mappings":";;AAAA;AACA;;;;;AAIA,SAAgBA,iBAAiBA,CAACC,IAAmB;EACnD,OAAOA,IAAI,CAACC,IAAI,KAAK,iBAAiB;AACxC;AAFAC,OAAA,CAAAH,iBAAA,GAAAA,iBAAA;AAIA,SAAgBI,yBAAyBA,CAACH,IAAmB;EAC3D,OAAOA,IAAI,CAACC,IAAI,KAAK,yBAAyB;AAChD;AAFAC,OAAA,CAAAC,yBAAA,GAAAA,yBAAA;AAIA;AACA,SAAgBC,mBAAmBA,CAACJ,IAAmB;EACrD,OAAOA,IAAI,CAACC,IAAI,KAAK,mBAAmB;AAC1C;AAFAC,OAAA,CAAAE,mBAAA,GAAAA,mBAAA;AAIA,SAAgBC,kBAAkBA,CAACL,IAAmB;EACpD,OAAOA,IAAI,CAACC,IAAI,KAAK,kBAAkB;AACzC;AAFAC,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;AAIA,SAAgBC,iBAAiBA,CAACN,IAAmB;EACnD,OAAOA,IAAI,CAACC,IAAI,KAAK,iBAAiB;AACxC;AAFAC,OAAA,CAAAI,iBAAA,GAAAA,iBAAA;AAIA,SAAgBC,0BAA0BA,CAACP,IAAmB;EAC5D,OAAOA,IAAI,CAACC,IAAI,KAAK,0BAA0B;AACjD;AAFAC,OAAA,CAAAK,0BAAA,GAAAA,0BAAA;AAIA,SAAgBC,YAAYA,CAACR,IAAmB;EAC9C,OAAOA,IAAI,CAACC,IAAI,CAACQ,QAAQ,CAAC,YAAY,CAAC;AACzC;AAFAP,OAAA,CAAAM,YAAA,GAAAA,YAAA;AAIA,SAAgBE,qBAAqBA,CAACV,IAAmB;EACvD,OAAOA,IAAI,CAACC,IAAI,KAAK,qBAAqB;AAC5C;AAFAC,OAAA,CAAAQ,qBAAA,GAAAA,qBAAA;AAIA,SAAgBC,oBAAoBA,CAACX,IAAmB;EACtD,OAAOA,IAAI,CAACC,IAAI,KAAK,oBAAoB;AAC3C;AAFAC,OAAA,CAAAS,oBAAA,GAAAA,oBAAA;AAIA,SAAgBC,YAAYA,CAACZ,IAAmB;EAC9C,OAAOA,IAAI,CAACC,IAAI,KAAK,YAAY;AACnC;AAFAC,OAAA,CAAAU,YAAA,GAAAA,YAAA;AAIA,SAAgBC,SAASA,CAACb,IAAmB;EAC3C,OAAOA,IAAI,CAACC,IAAI,KAAK,SAAS;AAChC;AAFAC,OAAA,CAAAW,SAAA,GAAAA,SAAA;AAIA,SAAgBC,kBAAkBA,CAACd,IAAmB;EACpD,OAAOA,IAAI,CAACC,IAAI,KAAK,kBAAkB;AACzC;AAFAC,OAAA,CAAAY,kBAAA,GAAAA,kBAAA;AAIA,SAAgBC,kBAAkBA,CAACf,IAAmB;EACpD,OAAOA,IAAI,CAACC,IAAI,KAAK,kBAAkB;AACzC;AAFAC,OAAA,CAAAa,kBAAA,GAAAA,kBAAA;AAIA,SAAgBC,mBAAmBA,CAAChB,IAAmB;EACrD,OAAOA,IAAI,CAACC,IAAI,KAAK,mBAAmB;AAC1C;AAFAC,OAAA,CAAAc,mBAAA,GAAAA,mBAAA;AAIA,SAAgBC,UAAUA,CAACjB,IAAmB;EAC5C,OAAOA,IAAI,CAACC,IAAI,KAAK,UAAU;AACjC;AAFAC,OAAA,CAAAe,UAAA,GAAAA,UAAA;AAIA,SAAgBC,oBAAoBA,CAAClB,IAAmB;EACtD,OAAOA,IAAI,CAACC,IAAI,KAAK,oBAAoB;AAC3C;AAFAC,OAAA,CAAAgB,oBAAA,GAAAA,oBAAA;AAIA,SAAgBC,mBAAmBA,CAACnB,IAAmB;EACrD,OAAOA,IAAI,CAACC,IAAI,KAAK,mBAAmB;AAC1C;AAFAC,OAAA,CAAAiB,mBAAA,GAAAA,mBAAA;AAIA,SAAgBC,wBAAwBA,CAACpB,IAAmB;EAC1D,OAAOA,IAAI,CAACC,IAAI,KAAK,wBAAwB;AAC/C;AAFAC,OAAA,CAAAkB,wBAAA,GAAAA,wBAAA;AAIA,SAAgBC,qBAAqBA,CAACrB,IAAmB;EACvD,OAAOA,IAAI,CAACC,IAAI,KAAK,qBAAqB;AAC5C;AAFAC,OAAA,CAAAmB,qBAAA,GAAAA,qBAAA;AAIA,SAAgBC,iBAAiBA,CAACtB,IAAmB;EACnD,OAAOA,IAAI,CAACC,IAAI,KAAK,iBAAiB;AACxC;AAFAC,OAAA,CAAAoB,iBAAA,GAAAA,iBAAA;AAIA,SAAgBC,wBAAwBA,CAACvB,IAAmB;EAC1D,OAAOA,IAAI,CAACC,IAAI,KAAK,wBAAwB;AAC/C;AAFAC,OAAA,CAAAqB,wBAAA,GAAAA,wBAAA;AAIA,SAAgBC,oBAAoBA,CAACxB,IAAmB;EACtD,OAAOA,IAAI,CAACC,IAAI,KAAK,oBAAoB;AAC3C;AAFAC,OAAA,CAAAsB,oBAAA,GAAAA,oBAAA;AAIA;AACA,SAAgBC,0BAA0BA,CAACzB,IAAmB;EAC5D,OAAOK,kBAAkB,CAACL,IAAI,CAAC,IAAIA,IAAI,CAAC0B,EAAE,KAAK,IAAI;AACrD;AAFAxB,OAAA,CAAAuB,0BAAA,GAAAA,0BAAA;AAIA,SAAgBE,8BAA8BA,CAC5C3B,IAAmB;EAEnB,OAAOgB,mBAAmB,CAAChB,IAAI,CAAC,IAAI4B,yBAAyB,CAAC5B,IAAI,CAAC;AACrE;AAJAE,OAAA,CAAAyB,8BAAA,GAAAA,8BAAA;AAMA,SAAgBE,6BAA6BA,CAC3C7B,IAAmB;EAEnB,OAAOU,qBAAqB,CAACV,IAAI,CAAC,IAAIA,IAAI,CAAC0B,EAAE,KAAK,IAAI;AACxD;AAJAxB,OAAA,CAAA2B,6BAAA,GAAAA,6BAAA;AAMA,SAAgBC,eAAeA,CAAC9B,IAAmB;EACjD,OAAOa,SAAS,CAACb,IAAI,CAAC,IAAI,OAAOA,IAAI,CAAC+B,KAAK,KAAK,QAAQ;AAC1D;AAFA7B,OAAA,CAAA4B,eAAA,GAAAA,eAAA;AAIA,SAAgBF,yBAAyBA,CAAC5B,IAAmB;EAC3D,OAAOY,YAAY,CAACZ,IAAI,CAAC,IAAI8B,eAAe,CAAC9B,IAAI,CAAC,IAAIgC,eAAe,CAAChC,IAAI,CAAC;AAC7E;AAFAE,OAAA,CAAA0B,yBAAA,GAAAA,yBAAA;AAIA,SAAgBI,eAAeA,CAAChC,IAAmB;EACjD,OAAOa,SAAS,CAACb,IAAI,CAAC,IAAI,OAAOA,IAAI,CAAC+B,KAAK,KAAK,QAAQ;AAC1D;AAFA7B,OAAA,CAAA8B,eAAA,GAAAA,eAAA;AASA,SAAgBC,yBAAyBA,CAACjC,IAAmB;EAC3D,OAAOM,iBAAiB,CAACN,IAAI,CAAC,IAAIA,IAAI,CAAC0B,EAAE,KAAK,IAAI;AACpD;AAFAxB,OAAA,CAAA+B,yBAAA,GAAAA,yBAAA;AAOA,SAAgBC,4BAA4BA,CAAClC,IAAmB;EAC9D,OAAOW,oBAAoB,CAACX,IAAI,CAAC,IAAIA,IAAI,CAAC0B,EAAE,KAAK,IAAI;AACvD;AAFAxB,OAAA,CAAAgC,4BAAA,GAAAA,4BAAA;AAUA,SAAgBC,2BAA2BA,CAACnC,IAAmB;EAC7D,MAAMoC,2BAA2B,GAAyC,CACxEjC,yBAAyB,EACzBG,iBAAiB,EACjBK,oBAAoB,EACpBI,kBAAkB,CACnB;EACD,OAAOqB,2BAA2B,CAACC,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACtC,IAAI,CAAC,CAAC;AACjE;AARAE,OAAA,CAAAiC,2BAAA,GAAAA,2BAAA;AAcA,SAAgBI,yBAAyBA,CAACvC,IAAmB;EAC3D,OAAOI,mBAAmB,CAACJ,IAAI,CAAC,IAAIY,YAAY,CAACZ,IAAI,CAACwC,IAAI,CAAC;AAC7D;AAFAtC,OAAA,CAAAqC,yBAAA,GAAAA,yBAAA;AASA,SAAgBE,+BAA+BA,CAACzC,IAAmB;EACjE,OACEkB,oBAAoB,CAAClB,IAAI,CAAC,KACzBY,YAAY,CAACZ,IAAI,CAAC0C,GAAG,CAAC,IAAI1B,mBAAmB,CAAChB,IAAI,CAAC0C,GAAG,CAAC,CAAC,IACzD1C,IAAI,CAAC+B,KAAK,KAAK,IAAI;AAEvB;AANA7B,OAAA,CAAAuC,+BAAA,GAAAA,+BAAA;AAYA,SAAgBE,wBAAwBA,CAAC3C,IAAmB;EAC1D,OAAOc,kBAAkB,CAACd,IAAI,CAAC,KAAKY,YAAY,CAACZ,IAAI,CAAC0C,GAAG,CAAC,IAAI1B,mBAAmB,CAAChB,IAAI,CAAC0C,GAAG,CAAC,CAAC;AAC9F;AAFAxC,OAAA,CAAAyC,wBAAA,GAAAA,wBAAA;AAQA,SAAgBC,sBAAsBA,CAAC5C,IAAmB;EACxD,OAAOiB,UAAU,CAACjB,IAAI,CAAC,KAAKY,YAAY,CAACZ,IAAI,CAAC0C,GAAG,CAAC,IAAI1B,mBAAmB,CAAChB,IAAI,CAAC0C,GAAG,CAAC,CAAC;AACtF;AAFAxC,OAAA,CAAA0C,sBAAA,GAAAA,sBAAA;AASA,SAAgBC,0BAA0BA,CAAC7C,IAAmB;EAC5D,OAAOwB,oBAAoB,CAACxB,IAAI,CAAC,IAAIY,YAAY,CAACZ,IAAI,CAAC0B,EAAE,CAAC,IAAI1B,IAAI,CAAC8C,IAAI,KAAK,IAAI;AAClF;AAFA5C,OAAA,CAAA2C,0BAAA,GAAAA,0BAAA;AAQA,SAAgBE,wDAAwDA,CACtE/C,IAAmB;EAEnB,OAAOuC,yBAAyB,CAACvC,IAAI,CAAC,IAAImC,2BAA2B,CAACnC,IAAI,CAACgD,KAAK,CAAC;AACnF;AAJA9C,OAAA,CAAA6C,wDAAA,GAAAA,wDAAA;AAUA,SAAgBE,yDAAyDA,CACvEjD,IAAmB;EAEnB,OAAO6C,0BAA0B,CAAC7C,IAAI,CAAC,IAAImC,2BAA2B,CAACnC,IAAI,CAAC8C,IAAI,CAAC;AACnF;AAJA5C,OAAA,CAAA+C,yDAAA,GAAAA,yDAAA;AAUA,SAAgBC,qDAAqDA,CACnElD,IAAmB;EAEnB,OAAO4C,sBAAsB,CAAC5C,IAAI,CAAC,IAAImC,2BAA2B,CAACnC,IAAI,CAAC+B,KAAK,CAAC;AAChF;AAJA7B,OAAA,CAAAgD,qDAAA,GAAAA,qDAAA;AAWA,SAAgBC,8DAA8DA,CAC5EnD,IAAmB;EAEnB,OAAOyC,+BAA+B,CAACzC,IAAI,CAAC,IAAImC,2BAA2B,CAACnC,IAAI,CAAC+B,KAAK,CAAC;AACzF;AAJA7B,OAAA,CAAAiD,8DAAA,GAAAA,8DAAA;AAoBA,SAAgBC,cAAcA,CAACpD,IAAmB;EAChD,OACEyB,0BAA0B,CAACzB,IAAI,CAAC,IAChC6B,6BAA6B,CAAC7B,IAAI,CAAC,IACnCiC,yBAAyB,CAACjC,IAAI,CAAC,IAC/BkC,4BAA4B,CAAClC,IAAI,CAAC,IAClCiD,yDAAyD,CAACjD,IAAI,CAAC,IAC/DkD,qDAAqD,CAAClD,IAAI,CAAC,IAC3DmD,8DAA8D,CAACnD,IAAI,CAAC,IACpE+C,wDAAwD,CAAC/C,IAAI,CAAC,IAC9D2C,wBAAwB,CAAC3C,IAAI,CAAC,IAC9BmB,mBAAmB,CAACnB,IAAI,CAAC,IACzBoB,wBAAwB,CAACpB,IAAI,CAAC,IAC9BuB,wBAAwB,CAACvB,IAAI,CAAC;AAElC;AAfAE,OAAA,CAAAkD,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}