{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'no-misused-new',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Enforce valid definition of `new` and `constructor`',\n      recommended: 'error'\n    },\n    schema: [],\n    messages: {\n      errorMessageInterface: 'Interfaces cannot be constructed, only classes.',\n      errorMessageClass: 'Class cannot have method named `new`.'\n    }\n  },\n  defaultOptions: [],\n  create(context) {\n    /**\n     * @param node type to be inspected.\n     * @returns name of simple type or null\n     */\n    function getTypeReferenceName(node) {\n      if (node) {\n        switch (node.type) {\n          case utils_1.AST_NODE_TYPES.TSTypeAnnotation:\n            return getTypeReferenceName(node.typeAnnotation);\n          case utils_1.AST_NODE_TYPES.TSTypeReference:\n            return getTypeReferenceName(node.typeName);\n          case utils_1.AST_NODE_TYPES.Identifier:\n            return node.name;\n          default:\n            break;\n        }\n      }\n      return null;\n    }\n    /**\n     * @param parent parent node.\n     * @param returnType type to be compared\n     */\n    function isMatchingParentType(parent, returnType) {\n      if (parent && 'id' in parent && parent.id && parent.id.type === utils_1.AST_NODE_TYPES.Identifier) {\n        return getTypeReferenceName(returnType) === parent.id.name;\n      }\n      return false;\n    }\n    return {\n      'TSInterfaceBody > TSConstructSignatureDeclaration'(node) {\n        if (isMatchingParentType(node.parent.parent, node.returnType)) {\n          // constructor\n          context.report({\n            node,\n            messageId: 'errorMessageInterface'\n          });\n        }\n      },\n      \"TSMethodSignature[key.name='constructor']\"(node) {\n        context.report({\n          node,\n          messageId: 'errorMessageInterface'\n        });\n      },\n      \"ClassBody > MethodDefinition[key.name='new']\"(node) {\n        if (node.value.type === utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression) {\n          if (node.parent && isMatchingParentType(node.parent.parent, node.value.returnType)) {\n            context.report({\n              node,\n              messageId: 'errorMessageClass'\n            });\n          }\n        }\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","exports","default","createRule","name","meta","type","docs","description","recommended","schema","messages","errorMessageInterface","errorMessageClass","defaultOptions","create","context","getTypeReferenceName","node","AST_NODE_TYPES","TSTypeAnnotation","typeAnnotation","TSTypeReference","typeName","Identifier","isMatchingParentType","parent","returnType","id","TSInterfaceBody > TSConstructSignatureDeclaration","report","messageId","TSMethodSignature[key.name='constructor']","ClassBody > MethodDefinition[key.name='new']","value","TSEmptyBodyFunctionExpression"],"sources":["../../src/rules/no-misused-new.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AAEAG,OAAA,CAAAC,OAAA,GAAeH,IAAI,CAACI,UAAU,CAAC;EAC7BC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE;IACJC,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE;MACJC,WAAW,EAAE,qDAAqD;MAClEC,WAAW,EAAE;KACd;IACDC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE;MACRC,qBAAqB,EAAE,iDAAiD;MACxEC,iBAAiB,EAAE;;GAEtB;EACDC,cAAc,EAAE,EAAE;EAClBC,MAAMA,CAACC,OAAO;IACZ;;;;IAIA,SAASC,oBAAoBA,CAC3BC,IAIa;MAEb,IAAIA,IAAI,EAAE;QACR,QAAQA,IAAI,CAACZ,IAAI;UACf,KAAKT,OAAA,CAAAsB,cAAc,CAACC,gBAAgB;YAClC,OAAOH,oBAAoB,CAACC,IAAI,CAACG,cAAc,CAAC;UAClD,KAAKxB,OAAA,CAAAsB,cAAc,CAACG,eAAe;YACjC,OAAOL,oBAAoB,CAACC,IAAI,CAACK,QAAQ,CAAC;UAC5C,KAAK1B,OAAA,CAAAsB,cAAc,CAACK,UAAU;YAC5B,OAAON,IAAI,CAACd,IAAI;UAClB;YACE;;;MAGN,OAAO,IAAI;IACb;IAEA;;;;IAIA,SAASqB,oBAAoBA,CAC3BC,MAAiC,EACjCC,UAAiD;MAEjD,IACED,MAAM,IACN,IAAI,IAAIA,MAAM,IACdA,MAAM,CAACE,EAAE,IACTF,MAAM,CAACE,EAAE,CAACtB,IAAI,KAAKT,OAAA,CAAAsB,cAAc,CAACK,UAAU,EAC5C;QACA,OAAOP,oBAAoB,CAACU,UAAU,CAAC,KAAKD,MAAM,CAACE,EAAE,CAACxB,IAAI;;MAE5D,OAAO,KAAK;IACd;IAEA,OAAO;MACL,mDAAmDyB,CACjDX,IAA8C;QAE9C,IACEO,oBAAoB,CAClBP,IAAI,CAACQ,MAAO,CAACA,MAAyC,EACtDR,IAAI,CAACS,UAAU,CAChB,EACD;UACA;UACAX,OAAO,CAACc,MAAM,CAAC;YACbZ,IAAI;YACJa,SAAS,EAAE;WACZ,CAAC;;MAEN,CAAC;MACD,2CAA2CC,CACzCd,IAAgC;QAEhCF,OAAO,CAACc,MAAM,CAAC;UACbZ,IAAI;UACJa,SAAS,EAAE;SACZ,CAAC;MACJ,CAAC;MACD,8CAA8CE,CAC5Cf,IAA+B;QAE/B,IAAIA,IAAI,CAACgB,KAAK,CAAC5B,IAAI,KAAKT,OAAA,CAAAsB,cAAc,CAACgB,6BAA6B,EAAE;UACpE,IACEjB,IAAI,CAACQ,MAAM,IACXD,oBAAoB,CAACP,IAAI,CAACQ,MAAM,CAACA,MAAM,EAAER,IAAI,CAACgB,KAAK,CAACP,UAAU,CAAC,EAC/D;YACAX,OAAO,CAACc,MAAM,CAAC;cACbZ,IAAI;cACJa,SAAS,EAAE;aACZ,CAAC;;;MAGR;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}