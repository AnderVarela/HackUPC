{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getConstrainedTypeAtLocation = void 0;\n/**\n * Resolves the given node's type. Will resolve to the type's generic constraint, if it has one.\n */\nfunction getConstrainedTypeAtLocation(checker, node) {\n  const nodeType = checker.getTypeAtLocation(node);\n  const constrained = checker.getBaseConstraintOfType(nodeType);\n  return constrained !== null && constrained !== void 0 ? constrained : nodeType;\n}\nexports.getConstrainedTypeAtLocation = getConstrainedTypeAtLocation;","map":{"version":3,"names":["getConstrainedTypeAtLocation","checker","node","nodeType","getTypeAtLocation","constrained","getBaseConstraintOfType","exports"],"sources":["../src/getConstrainedTypeAtLocation.ts"],"sourcesContent":[null],"mappings":";;;;;;AAEA;;;AAGA,SAAgBA,4BAA4BA,CAC1CC,OAAuB,EACvBC,IAAa;EAEb,MAAMC,QAAQ,GAAGF,OAAO,CAACG,iBAAiB,CAACF,IAAI,CAAC;EAChD,MAAMG,WAAW,GAAGJ,OAAO,CAACK,uBAAuB,CAACH,QAAQ,CAAC;EAE7D,OAAOE,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAIF,QAAQ;AAChC;AARAI,OAAA,CAAAP,4BAAA,GAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}