{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'prefer-as-const',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Enforce the use of `as const` over literal type',\n      recommended: 'error'\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    messages: {\n      preferConstAssertion: 'Expected a `const` instead of a literal type assertion.',\n      variableConstAssertion: 'Expected a `const` assertion instead of a literal type annotation.',\n      variableSuggest: 'You should use `as const` instead of type annotation.'\n    },\n    schema: []\n  },\n  defaultOptions: [],\n  create(context) {\n    function compareTypes(valueNode, typeNode, canFix) {\n      if (valueNode.type === utils_1.AST_NODE_TYPES.Literal && typeNode.type === utils_1.AST_NODE_TYPES.TSLiteralType && 'raw' in typeNode.literal && valueNode.raw === typeNode.literal.raw) {\n        if (canFix) {\n          context.report({\n            node: typeNode,\n            messageId: 'preferConstAssertion',\n            fix: fixer => fixer.replaceText(typeNode, 'const')\n          });\n        } else {\n          context.report({\n            node: typeNode,\n            messageId: 'variableConstAssertion',\n            suggest: [{\n              messageId: 'variableSuggest',\n              fix: fixer => [fixer.remove(typeNode.parent), fixer.insertTextAfter(valueNode, ' as const')]\n            }]\n          });\n        }\n      }\n    }\n    return {\n      TSAsExpression(node) {\n        compareTypes(node.expression, node.typeAnnotation, true);\n      },\n      TSTypeAssertion(node) {\n        compareTypes(node.expression, node.typeAnnotation, true);\n      },\n      PropertyDefinition(node) {\n        if (node.value && node.typeAnnotation) {\n          compareTypes(node.value, node.typeAnnotation.typeAnnotation, false);\n        }\n      },\n      VariableDeclarator(node) {\n        if (node.init && node.id.typeAnnotation) {\n          compareTypes(node.init, node.id.typeAnnotation.typeAnnotation, false);\n        }\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","exports","default","createRule","name","meta","type","docs","description","recommended","fixable","hasSuggestions","messages","preferConstAssertion","variableConstAssertion","variableSuggest","schema","defaultOptions","create","context","compareTypes","valueNode","typeNode","canFix","AST_NODE_TYPES","Literal","TSLiteralType","literal","raw","report","node","messageId","fix","fixer","replaceText","suggest","remove","parent","insertTextAfter","TSAsExpression","expression","typeAnnotation","TSTypeAssertion","PropertyDefinition","value","VariableDeclarator","init","id"],"sources":["../../src/rules/prefer-as-const.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AAEAG,OAAA,CAAAC,OAAA,GAAeH,IAAI,CAACI,UAAU,CAAC;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,IAAI,EAAE;IACJC,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE;MACJC,WAAW,EAAE,iDAAiD;MAC9DC,WAAW,EAAE;KACd;IACDC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE,IAAI;IACpBC,QAAQ,EAAE;MACRC,oBAAoB,EAClB,yDAAyD;MAC3DC,sBAAsB,EACpB,oEAAoE;MACtEC,eAAe,EAAE;KAClB;IACDC,MAAM,EAAE;GACT;EACDC,cAAc,EAAE,EAAE;EAClBC,MAAMA,CAACC,OAAO;IACZ,SAASC,YAAYA,CACnBC,SAA8B,EAC9BC,QAA2B,EAC3BC,MAAe;MAEf,IACEF,SAAS,CAACf,IAAI,KAAKT,OAAA,CAAA2B,cAAc,CAACC,OAAO,IACzCH,QAAQ,CAAChB,IAAI,KAAKT,OAAA,CAAA2B,cAAc,CAACE,aAAa,IAC9C,KAAK,IAAIJ,QAAQ,CAACK,OAAO,IACzBN,SAAS,CAACO,GAAG,KAAKN,QAAQ,CAACK,OAAO,CAACC,GAAG,EACtC;QACA,IAAIL,MAAM,EAAE;UACVJ,OAAO,CAACU,MAAM,CAAC;YACbC,IAAI,EAAER,QAAQ;YACdS,SAAS,EAAE,sBAAsB;YACjCC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,WAAW,CAACZ,QAAQ,EAAE,OAAO;WAClD,CAAC;SACH,MAAM;UACLH,OAAO,CAACU,MAAM,CAAC;YACbC,IAAI,EAAER,QAAQ;YACdS,SAAS,EAAE,wBAAwB;YACnCI,OAAO,EAAE,CACP;cACEJ,SAAS,EAAE,iBAAiB;cAC5BC,GAAG,EAAGC,KAAK,IAAyB,CAClCA,KAAK,CAACG,MAAM,CAACd,QAAQ,CAACe,MAAO,CAAC,EAC9BJ,KAAK,CAACK,eAAe,CAACjB,SAAS,EAAE,WAAW,CAAC;aAEhD;WAEJ,CAAC;;;IAGR;IAEA,OAAO;MACLkB,cAAcA,CAACT,IAAI;QACjBV,YAAY,CAACU,IAAI,CAACU,UAAU,EAAEV,IAAI,CAACW,cAAc,EAAE,IAAI,CAAC;MAC1D,CAAC;MACDC,eAAeA,CAACZ,IAAI;QAClBV,YAAY,CAACU,IAAI,CAACU,UAAU,EAAEV,IAAI,CAACW,cAAc,EAAE,IAAI,CAAC;MAC1D,CAAC;MACDE,kBAAkBA,CAACb,IAAI;QACrB,IAAIA,IAAI,CAACc,KAAK,IAAId,IAAI,CAACW,cAAc,EAAE;UACrCrB,YAAY,CAACU,IAAI,CAACc,KAAK,EAAEd,IAAI,CAACW,cAAc,CAACA,cAAc,EAAE,KAAK,CAAC;;MAEvE,CAAC;MACDI,kBAAkBA,CAACf,IAAI;QACrB,IAAIA,IAAI,CAACgB,IAAI,IAAIhB,IAAI,CAACiB,EAAE,CAACN,cAAc,EAAE;UACvCrB,YAAY,CAACU,IAAI,CAACgB,IAAI,EAAEhB,IAAI,CAACiB,EAAE,CAACN,cAAc,CAACA,cAAc,EAAE,KAAK,CAAC;;MAEzE;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}