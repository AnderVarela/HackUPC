{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _Reference_flag, _Reference_referenceType;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReferenceTypeFlag = exports.ReferenceFlag = exports.Reference = void 0;\nconst ID_1 = require(\"../ID\");\nvar ReferenceFlag;\n(function (ReferenceFlag) {\n  ReferenceFlag[ReferenceFlag[\"Read\"] = 1] = \"Read\";\n  ReferenceFlag[ReferenceFlag[\"Write\"] = 2] = \"Write\";\n  ReferenceFlag[ReferenceFlag[\"ReadWrite\"] = 3] = \"ReadWrite\";\n})(ReferenceFlag || (exports.ReferenceFlag = ReferenceFlag = {}));\nconst generator = (0, ID_1.createIdGenerator)();\nvar ReferenceTypeFlag;\n(function (ReferenceTypeFlag) {\n  ReferenceTypeFlag[ReferenceTypeFlag[\"Value\"] = 1] = \"Value\";\n  ReferenceTypeFlag[ReferenceTypeFlag[\"Type\"] = 2] = \"Type\";\n})(ReferenceTypeFlag || (exports.ReferenceTypeFlag = ReferenceTypeFlag = {}));\n/**\n * A Reference represents a single occurrence of an identifier in code.\n */\nclass Reference {\n  /**\n   * True if this reference can reference types\n   */\n  get isTypeReference() {\n    return (__classPrivateFieldGet(this, _Reference_referenceType, \"f\") & ReferenceTypeFlag.Type) !== 0;\n  }\n  /**\n   * True if this reference can reference values\n   */\n  get isValueReference() {\n    return (__classPrivateFieldGet(this, _Reference_referenceType, \"f\") & ReferenceTypeFlag.Value) !== 0;\n  }\n  constructor(identifier, scope, flag, writeExpr, maybeImplicitGlobal, init, referenceType = ReferenceTypeFlag.Value) {\n    /**\n     * A unique ID for this instance - primarily used to help debugging and testing\n     */\n    this.$id = generator();\n    /**\n     * The read-write mode of the reference.\n     */\n    _Reference_flag.set(this, void 0);\n    /**\n     * In some cases, a reference may be a type, value or both a type and value reference.\n     */\n    _Reference_referenceType.set(this, void 0);\n    this.identifier = identifier;\n    this.from = scope;\n    this.resolved = null;\n    __classPrivateFieldSet(this, _Reference_flag, flag, \"f\");\n    if (this.isWrite()) {\n      this.writeExpr = writeExpr;\n      this.init = init;\n    }\n    this.maybeImplicitGlobal = maybeImplicitGlobal;\n    __classPrivateFieldSet(this, _Reference_referenceType, referenceType, \"f\");\n  }\n  /**\n   * Whether the reference is writeable.\n   * @public\n   */\n  isWrite() {\n    return !!(__classPrivateFieldGet(this, _Reference_flag, \"f\") & ReferenceFlag.Write);\n  }\n  /**\n   * Whether the reference is readable.\n   * @public\n   */\n  isRead() {\n    return !!(__classPrivateFieldGet(this, _Reference_flag, \"f\") & ReferenceFlag.Read);\n  }\n  /**\n   * Whether the reference is read-only.\n   * @public\n   */\n  isReadOnly() {\n    return __classPrivateFieldGet(this, _Reference_flag, \"f\") === ReferenceFlag.Read;\n  }\n  /**\n   * Whether the reference is write-only.\n   * @public\n   */\n  isWriteOnly() {\n    return __classPrivateFieldGet(this, _Reference_flag, \"f\") === ReferenceFlag.Write;\n  }\n  /**\n   * Whether the reference is read-write.\n   * @public\n   */\n  isReadWrite() {\n    return __classPrivateFieldGet(this, _Reference_flag, \"f\") === ReferenceFlag.ReadWrite;\n  }\n}\nexports.Reference = Reference;\n_Reference_flag = new WeakMap(), _Reference_referenceType = new WeakMap();","map":{"version":3,"names":["ID_1","require","ReferenceFlag","exports","generator","createIdGenerator","ReferenceTypeFlag","Reference","isTypeReference","__classPrivateFieldGet","_Reference_referenceType","Type","isValueReference","Value","constructor","identifier","scope","flag","writeExpr","maybeImplicitGlobal","init","referenceType","$id","_Reference_flag","set","from","resolved","__classPrivateFieldSet","isWrite","Write","isRead","Read","isReadOnly","isWriteOnly","isReadWrite","ReadWrite"],"sources":["../../src/referencer/Reference.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;AAEA,MAAAA,IAAA,GAAAC,OAAA;AAIA,IAAKC,aAIJ;AAJD,WAAKA,aAAa;EAChBA,aAAA,CAAAA,aAAA,sBAAU;EACVA,aAAA,CAAAA,aAAA,wBAAW;EACXA,aAAA,CAAAA,aAAA,gCAAe;AACjB,CAAC,EAJIA,aAAa,KAAAC,OAAA,CAAAD,aAAA,GAAbA,aAAa;AAYlB,MAAME,SAAS,GAAG,IAAAJ,IAAA,CAAAK,iBAAiB,GAAE;AAErC,IAAKC,iBAGJ;AAHD,WAAKA,iBAAiB;EACpBA,iBAAA,CAAAA,iBAAA,wBAAW;EACXA,iBAAA,CAAAA,iBAAA,sBAAU;AACZ,CAAC,EAHIA,iBAAiB,KAAAH,OAAA,CAAAG,iBAAA,GAAjBA,iBAAiB;AAKtB;;;AAGA,MAAMC,SAAS;EA0Cb;;;EAGA,IAAWC,eAAeA,CAAA;IACxB,OAAO,CAACC,sBAAA,KAAI,EAAAC,wBAAA,MAAe,GAAGJ,iBAAiB,CAACK,IAAI,MAAM,CAAC;EAC7D;EAEA;;;EAGA,IAAWC,gBAAgBA,CAAA;IACzB,OAAO,CAACH,sBAAA,KAAI,EAAAC,wBAAA,MAAe,GAAGJ,iBAAiB,CAACO,KAAK,MAAM,CAAC;EAC9D;EAEAC,YACEC,UAAwD,EACxDC,KAAY,EACZC,IAAmB,EACnBC,SAAgC,EAChCC,mBAAoD,EACpDC,IAAc,EACdC,aAAa,GAAGf,iBAAiB,CAACO,KAAK;IA9DzC;;;IAGgB,KAAAS,GAAG,GAAWlB,SAAS,EAAE;IACzC;;;IAGSmB,eAAA,CAAAC,GAAA;IA6BT;;;IAGSd,wBAAA,CAAAc,GAAA;IAyBP,IAAI,CAACT,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACU,IAAI,GAAGT,KAAK;IACjB,IAAI,CAACU,QAAQ,GAAG,IAAI;IACpBC,sBAAA,KAAI,EAAAJ,eAAA,EAASN,IAAI;IAEjB,IAAI,IAAI,CAACW,OAAO,EAAE,EAAE;MAClB,IAAI,CAACV,SAAS,GAAGA,SAAS;MAC1B,IAAI,CAACE,IAAI,GAAGA,IAAI;;IAGlB,IAAI,CAACD,mBAAmB,GAAGA,mBAAmB;IAC9CQ,sBAAA,KAAI,EAAAjB,wBAAA,EAAkBW,aAAa;EACrC;EAEA;;;;EAIOO,OAAOA,CAAA;IACZ,OAAO,CAAC,EAAEnB,sBAAA,KAAI,EAAAc,eAAA,MAAM,GAAGrB,aAAa,CAAC2B,KAAK,CAAC;EAC7C;EAEA;;;;EAIOC,MAAMA,CAAA;IACX,OAAO,CAAC,EAAErB,sBAAA,KAAI,EAAAc,eAAA,MAAM,GAAGrB,aAAa,CAAC6B,IAAI,CAAC;EAC5C;EAEA;;;;EAIOC,UAAUA,CAAA;IACf,OAAOvB,sBAAA,KAAI,EAAAc,eAAA,MAAM,KAAKrB,aAAa,CAAC6B,IAAI;EAC1C;EAEA;;;;EAIOE,WAAWA,CAAA;IAChB,OAAOxB,sBAAA,KAAI,EAAAc,eAAA,MAAM,KAAKrB,aAAa,CAAC2B,KAAK;EAC3C;EAEA;;;;EAIOK,WAAWA,CAAA;IAChB,OAAOzB,sBAAA,KAAI,EAAAc,eAAA,MAAM,KAAKrB,aAAa,CAACiC,SAAS;EAC/C;;AAGOhC,OAAA,CAAAI,SAAA,GAAAA,SAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}