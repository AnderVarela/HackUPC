{"ast":null,"code":"import stripAnsi from 'strip-ansi';\nimport eastAsianWidth from 'eastasianwidth';\nimport emojiRegex from 'emoji-regex';\nexport default function stringWidth(string, options = {}) {\n  if (typeof string !== 'string' || string.length === 0) {\n    return 0;\n  }\n  options = {\n    ambiguousIsNarrow: true,\n    ...options\n  };\n  string = stripAnsi(string);\n  if (string.length === 0) {\n    return 0;\n  }\n  string = string.replace(emojiRegex(), '  ');\n  const ambiguousCharacterWidth = options.ambiguousIsNarrow ? 1 : 2;\n  let width = 0;\n  for (const character of string) {\n    const codePoint = character.codePointAt(0);\n\n    // Ignore control characters\n    if (codePoint <= 0x1F || codePoint >= 0x7F && codePoint <= 0x9F) {\n      continue;\n    }\n\n    // Ignore combining characters\n    if (codePoint >= 0x300 && codePoint <= 0x36F) {\n      continue;\n    }\n    const code = eastAsianWidth.eastAsianWidth(character);\n    switch (code) {\n      case 'F':\n      case 'W':\n        width += 2;\n        break;\n      case 'A':\n        width += ambiguousCharacterWidth;\n        break;\n      default:\n        width += 1;\n    }\n  }\n  return width;\n}","map":{"version":3,"names":["stripAnsi","eastAsianWidth","emojiRegex","stringWidth","string","options","length","ambiguousIsNarrow","replace","ambiguousCharacterWidth","width","character","codePoint","codePointAt","code"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@isaacs/cliui/node_modules/string-width/index.js"],"sourcesContent":["import stripAnsi from 'strip-ansi';\nimport eastAsianWidth from 'eastasianwidth';\nimport emojiRegex from 'emoji-regex';\n\nexport default function stringWidth(string, options = {}) {\n\tif (typeof string !== 'string' || string.length === 0) {\n\t\treturn 0;\n\t}\n\n\toptions = {\n\t\tambiguousIsNarrow: true,\n\t\t...options\n\t};\n\n\tstring = stripAnsi(string);\n\n\tif (string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = string.replace(emojiRegex(), '  ');\n\n\tconst ambiguousCharacterWidth = options.ambiguousIsNarrow ? 1 : 2;\n\tlet width = 0;\n\n\tfor (const character of string) {\n\t\tconst codePoint = character.codePointAt(0);\n\n\t\t// Ignore control characters\n\t\tif (codePoint <= 0x1F || (codePoint >= 0x7F && codePoint <= 0x9F)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ignore combining characters\n\t\tif (codePoint >= 0x300 && codePoint <= 0x36F) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst code = eastAsianWidth.eastAsianWidth(character);\n\t\tswitch (code) {\n\t\t\tcase 'F':\n\t\t\tcase 'W':\n\t\t\t\twidth += 2;\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\twidth += ambiguousCharacterWidth;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\twidth += 1;\n\t\t}\n\t}\n\n\treturn width;\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,UAAU,MAAM,aAAa;AAEpC,eAAe,SAASC,WAAWA,CAACC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACzD,IAAI,OAAOD,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;IACtD,OAAO,CAAC;EACT;EAEAD,OAAO,GAAG;IACTE,iBAAiB,EAAE,IAAI;IACvB,GAAGF;EACJ,CAAC;EAEDD,MAAM,GAAGJ,SAAS,CAACI,MAAM,CAAC;EAE1B,IAAIA,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;IACxB,OAAO,CAAC;EACT;EAEAF,MAAM,GAAGA,MAAM,CAACI,OAAO,CAACN,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;EAE3C,MAAMO,uBAAuB,GAAGJ,OAAO,CAACE,iBAAiB,GAAG,CAAC,GAAG,CAAC;EACjE,IAAIG,KAAK,GAAG,CAAC;EAEb,KAAK,MAAMC,SAAS,IAAIP,MAAM,EAAE;IAC/B,MAAMQ,SAAS,GAAGD,SAAS,CAACE,WAAW,CAAC,CAAC,CAAC;;IAE1C;IACA,IAAID,SAAS,IAAI,IAAI,IAAKA,SAAS,IAAI,IAAI,IAAIA,SAAS,IAAI,IAAK,EAAE;MAClE;IACD;;IAEA;IACA,IAAIA,SAAS,IAAI,KAAK,IAAIA,SAAS,IAAI,KAAK,EAAE;MAC7C;IACD;IAEA,MAAME,IAAI,GAAGb,cAAc,CAACA,cAAc,CAACU,SAAS,CAAC;IACrD,QAAQG,IAAI;MACX,KAAK,GAAG;MACR,KAAK,GAAG;QACPJ,KAAK,IAAI,CAAC;QACV;MACD,KAAK,GAAG;QACPA,KAAK,IAAID,uBAAuB;QAChC;MACD;QACCC,KAAK,IAAI,CAAC;IACZ;EACD;EAEA,OAAOA,KAAK;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}