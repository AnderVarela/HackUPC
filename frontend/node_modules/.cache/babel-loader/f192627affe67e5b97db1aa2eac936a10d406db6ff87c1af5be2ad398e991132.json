{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst ts = __importStar(require(\"typescript\"));\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'no-throw-literal',\n  meta: {\n    type: 'problem',\n    docs: {\n      description: 'Disallow throwing literals as exceptions',\n      recommended: 'strict',\n      extendsBaseRule: true,\n      requiresTypeChecking: true\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        allowThrowingAny: {\n          type: 'boolean'\n        },\n        allowThrowingUnknown: {\n          type: 'boolean'\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      object: 'Expected an error object to be thrown.',\n      undef: 'Do not throw undefined.'\n    }\n  },\n  defaultOptions: [{\n    allowThrowingAny: true,\n    allowThrowingUnknown: true\n  }],\n  create(context, [options]) {\n    const parserServices = util.getParserServices(context);\n    const program = parserServices.program;\n    const checker = program.getTypeChecker();\n    function isErrorLike(type) {\n      var _a;\n      if (type.isIntersection()) {\n        return type.types.some(isErrorLike);\n      }\n      if (type.isUnion()) {\n        return type.types.every(isErrorLike);\n      }\n      const symbol = type.getSymbol();\n      if (!symbol) {\n        return false;\n      }\n      if (symbol.getName() === 'Error') {\n        const declarations = (_a = symbol.getDeclarations()) !== null && _a !== void 0 ? _a : [];\n        for (const declaration of declarations) {\n          const sourceFile = declaration.getSourceFile();\n          if (program.isSourceFileDefaultLibrary(sourceFile)) {\n            return true;\n          }\n        }\n      }\n      if (symbol.flags & (ts.SymbolFlags.Class | ts.SymbolFlags.Interface)) {\n        for (const baseType of checker.getBaseTypes(type)) {\n          if (isErrorLike(baseType)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    function checkThrowArgument(node) {\n      if (node.type === utils_1.AST_NODE_TYPES.AwaitExpression || node.type === utils_1.AST_NODE_TYPES.YieldExpression) {\n        return;\n      }\n      const tsNode = parserServices.esTreeNodeToTSNodeMap.get(node);\n      const type = checker.getTypeAtLocation(tsNode);\n      if (type.flags & ts.TypeFlags.Undefined) {\n        context.report({\n          node,\n          messageId: 'undef'\n        });\n        return;\n      }\n      if (options.allowThrowingAny && util.isTypeAnyType(type)) {\n        return;\n      }\n      if (options.allowThrowingUnknown && util.isTypeUnknownType(type)) {\n        return;\n      }\n      if (isErrorLike(type)) {\n        return;\n      }\n      context.report({\n        node,\n        messageId: 'object'\n      });\n    }\n    return {\n      ThrowStatement(node) {\n        if (node.argument) {\n          checkThrowArgument(node.argument);\n        }\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","ts","__importStar","util","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","requiresTypeChecking","schema","properties","allowThrowingAny","allowThrowingUnknown","additionalProperties","messages","object","undef","defaultOptions","create","context","options","parserServices","getParserServices","program","checker","getTypeChecker","isErrorLike","isIntersection","types","some","isUnion","every","symbol","getSymbol","getName","declarations","_a","getDeclarations","declaration","sourceFile","getSourceFile","isSourceFileDefaultLibrary","flags","SymbolFlags","Class","Interface","baseType","getBaseTypes","checkThrowArgument","node","AST_NODE_TYPES","AwaitExpression","YieldExpression","tsNode","esTreeNodeToTSNodeMap","get","getTypeAtLocation","TypeFlags","Undefined","report","messageId","isTypeAnyType","isTypeUnknownType","ThrowStatement","argument"],"sources":["../../src/rules/no-throw-literal.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}