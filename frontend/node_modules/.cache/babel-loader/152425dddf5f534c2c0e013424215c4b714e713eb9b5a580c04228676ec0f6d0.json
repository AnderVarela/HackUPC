{"ast":null,"code":"import e from \"postcss-value-parser\";\nvar l = new Map([[\"block,flow\", \"block\"], [\"block,flow-root\", \"flow-root\"], [\"inline,flow\", \"inline\"], [\"inline,flow-root\", \"inline-block\"], [\"run-in,flow\", \"run-in\"], [\"list-item,block,flow\", \"list-item\"], [\"inline,flow,list-item\", \"inline list-item\"], [\"block,flex\", \"flex\"], [\"inline,flex\", \"inline-flex\"], [\"block,grid\", \"grid\"], [\"inline,grid\", \"inline-grid\"], [\"inline,ruby\", \"ruby\"], [\"block,table\", \"table\"], [\"inline,table\", \"inline-table\"], [\"table-cell,flow\", \"table-cell\"], [\"table-caption,flow\", \"table-caption\"], [\"ruby-base,flow\", \"ruby-base\"], [\"ruby-text,flow\", \"ruby-text\"]]);\nconst n = n => {\n  const o = !(\"preserve\" in Object(n)) || Boolean(n.preserve);\n  return {\n    postcssPlugin: \"postcss-normalize-display-values\",\n    prepare() {\n      const n = new Map();\n      return {\n        Declaration(t) {\n          if (\"display\" !== t.prop.toLowerCase()) return;\n          const i = t.value;\n          if (!i) return;\n          if (n.has(i)) return void (t.value !== n.get(i) && (t.cloneBefore({\n            value: n.get(i)\n          }), o || t.remove()));\n          const r = function (n) {\n            const {\n              nodes: o\n            } = e(n);\n            if (1 === o.length) return n;\n            const t = o.filter(e => \"word\" === e.type).map(e => e.value.toLowerCase());\n            if (t.length <= 1) return n;\n            return l.get(t.join(\",\")) || n;\n          }(i);\n          n.set(i, r), t.value !== r && (t.cloneBefore({\n            value: r\n          }), o || t.remove());\n        }\n      };\n    }\n  };\n};\nn.postcss = !0;\nexport { n as default };","map":{"version":3,"names":["e","l","Map","n","o","Object","Boolean","preserve","postcssPlugin","prepare","Declaration","t","prop","toLowerCase","i","value","has","get","cloneBefore","remove","r","nodes","length","filter","type","map","join","set","postcss","default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@csstools/postcss-normalize-display-values/dist/index.mjs"],"sourcesContent":["import e from\"postcss-value-parser\";var l=new Map([[\"block,flow\",\"block\"],[\"block,flow-root\",\"flow-root\"],[\"inline,flow\",\"inline\"],[\"inline,flow-root\",\"inline-block\"],[\"run-in,flow\",\"run-in\"],[\"list-item,block,flow\",\"list-item\"],[\"inline,flow,list-item\",\"inline list-item\"],[\"block,flex\",\"flex\"],[\"inline,flex\",\"inline-flex\"],[\"block,grid\",\"grid\"],[\"inline,grid\",\"inline-grid\"],[\"inline,ruby\",\"ruby\"],[\"block,table\",\"table\"],[\"inline,table\",\"inline-table\"],[\"table-cell,flow\",\"table-cell\"],[\"table-caption,flow\",\"table-caption\"],[\"ruby-base,flow\",\"ruby-base\"],[\"ruby-text,flow\",\"ruby-text\"]]);const n=n=>{const o=!(\"preserve\"in Object(n))||Boolean(n.preserve);return{postcssPlugin:\"postcss-normalize-display-values\",prepare(){const n=new Map;return{Declaration(t){if(\"display\"!==t.prop.toLowerCase())return;const i=t.value;if(!i)return;if(n.has(i))return void(t.value!==n.get(i)&&(t.cloneBefore({value:n.get(i)}),o||t.remove()));const r=function(n){const{nodes:o}=e(n);if(1===o.length)return n;const t=o.filter((e=>\"word\"===e.type)).map((e=>e.value.toLowerCase()));if(t.length<=1)return n;return l.get(t.join(\",\"))||n}(i);n.set(i,r),t.value!==r&&(t.cloneBefore({value:r}),o||t.remove())}}}}};n.postcss=!0;export{n as default};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}