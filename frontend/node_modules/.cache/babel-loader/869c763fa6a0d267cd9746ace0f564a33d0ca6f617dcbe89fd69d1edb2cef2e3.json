{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n  name: 'prefer-readonly-parameter-types',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs',\n      recommended: false,\n      requiresTypeChecking: true\n    },\n    schema: [{\n      type: 'object',\n      additionalProperties: false,\n      properties: Object.assign({\n        checkParameterProperties: {\n          type: 'boolean'\n        },\n        ignoreInferredTypes: {\n          type: 'boolean'\n        }\n      }, util.readonlynessOptionsSchema.properties)\n    }],\n    messages: {\n      shouldBeReadonly: 'Parameter should be a read only type.'\n    }\n  },\n  defaultOptions: [Object.assign({\n    checkParameterProperties: true,\n    ignoreInferredTypes: false\n  }, util.readonlynessOptionsDefaults)],\n  create(context, [{\n    checkParameterProperties,\n    ignoreInferredTypes,\n    treatMethodsAsReadonly\n  }]) {\n    const {\n      esTreeNodeToTSNodeMap,\n      program\n    } = util.getParserServices(context);\n    const checker = program.getTypeChecker();\n    return {\n      [[utils_1.AST_NODE_TYPES.ArrowFunctionExpression, utils_1.AST_NODE_TYPES.FunctionDeclaration, utils_1.AST_NODE_TYPES.FunctionExpression, utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration, utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, utils_1.AST_NODE_TYPES.TSDeclareFunction, utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, utils_1.AST_NODE_TYPES.TSFunctionType, utils_1.AST_NODE_TYPES.TSMethodSignature].join(', ')](node) {\n        for (const param of node.params) {\n          if (!checkParameterProperties && param.type === utils_1.AST_NODE_TYPES.TSParameterProperty) {\n            continue;\n          }\n          const actualParam = param.type === utils_1.AST_NODE_TYPES.TSParameterProperty ? param.parameter : param;\n          if (ignoreInferredTypes && actualParam.typeAnnotation == null) {\n            continue;\n          }\n          const tsNode = esTreeNodeToTSNodeMap.get(actualParam);\n          const type = checker.getTypeAtLocation(tsNode);\n          const isReadOnly = util.isTypeReadonly(checker, type, {\n            treatMethodsAsReadonly: treatMethodsAsReadonly\n          });\n          if (!isReadOnly) {\n            context.report({\n              node: actualParam,\n              messageId: 'shouldBeReadonly'\n            });\n          }\n        }\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","exports","default","createRule","name","meta","type","docs","description","recommended","requiresTypeChecking","schema","additionalProperties","properties","Object","assign","checkParameterProperties","ignoreInferredTypes","readonlynessOptionsSchema","messages","shouldBeReadonly","defaultOptions","readonlynessOptionsDefaults","create","context","treatMethodsAsReadonly","esTreeNodeToTSNodeMap","program","getParserServices","checker","getTypeChecker","AST_NODE_TYPES","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression","TSCallSignatureDeclaration","TSConstructSignatureDeclaration","TSDeclareFunction","TSEmptyBodyFunctionExpression","TSFunctionType","TSMethodSignature","join","node","param","params","TSParameterProperty","actualParam","parameter","typeAnnotation","tsNode","get","getTypeAtLocation","isReadOnly","isTypeReadonly","report","messageId"],"sources":["../../src/rules/prefer-readonly-parameter-types.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,IAAA,GAAAC,YAAA,CAAAF,OAAA;AAUAG,OAAA,CAAAC,OAAA,GAAeH,IAAI,CAACI,UAAU,CAAsB;EAClDC,IAAI,EAAE,iCAAiC;EACvCC,IAAI,EAAE;IACJC,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE;MACJC,WAAW,EACT,gGAAgG;MAClGC,WAAW,EAAE,KAAK;MAClBC,oBAAoB,EAAE;KACvB;IACDC,MAAM,EAAE,CACN;MACEL,IAAI,EAAE,QAAQ;MACdM,oBAAoB,EAAE,KAAK;MAC3BC,UAAU,EAAAC,MAAA,CAAAC,MAAA;QACRC,wBAAwB,EAAE;UACxBV,IAAI,EAAE;SACP;QACDW,mBAAmB,EAAE;UACnBX,IAAI,EAAE;;MACP,GACEP,IAAI,CAACmB,yBAAyB,CAACL,UAAU;KAE/C,CACF;IACDM,QAAQ,EAAE;MACRC,gBAAgB,EAAE;;GAErB;EACDC,cAAc,EAAE,C;IAEZL,wBAAwB,EAAE,IAAI;IAC9BC,mBAAmB,EAAE;EAAK,GACvBlB,IAAI,CAACuB,2BAA2B,EAEtC;EACDC,MAAMA,CACJC,OAAO,EACP,CAAC;IAAER,wBAAwB;IAAEC,mBAAmB;IAAEQ;EAAsB,CAAE,CAAC;IAE3E,MAAM;MAAEC,qBAAqB;MAAEC;IAAO,CAAE,GAAG5B,IAAI,CAAC6B,iBAAiB,CAACJ,OAAO,CAAC;IAC1E,MAAMK,OAAO,GAAGF,OAAO,CAACG,cAAc,EAAE;IAExC,OAAO;MACL,CAAC,CACCjC,OAAA,CAAAkC,cAAc,CAACC,uBAAuB,EACtCnC,OAAA,CAAAkC,cAAc,CAACE,mBAAmB,EAClCpC,OAAA,CAAAkC,cAAc,CAACG,kBAAkB,EACjCrC,OAAA,CAAAkC,cAAc,CAACI,0BAA0B,EACzCtC,OAAA,CAAAkC,cAAc,CAACK,+BAA+B,EAC9CvC,OAAA,CAAAkC,cAAc,CAACM,iBAAiB,EAChCxC,OAAA,CAAAkC,cAAc,CAACO,6BAA6B,EAC5CzC,OAAA,CAAAkC,cAAc,CAACQ,cAAc,EAC7B1C,OAAA,CAAAkC,cAAc,CAACS,iBAAiB,CACjC,CAACC,IAAI,CAAC,IAAI,CAAC,EACVC,IAS8B;QAE9B,KAAK,MAAMC,KAAK,IAAID,IAAI,CAACE,MAAM,EAAE;UAC/B,IACE,CAAC5B,wBAAwB,IACzB2B,KAAK,CAACrC,IAAI,KAAKT,OAAA,CAAAkC,cAAc,CAACc,mBAAmB,EACjD;YACA;;UAGF,MAAMC,WAAW,GACfH,KAAK,CAACrC,IAAI,KAAKT,OAAA,CAAAkC,cAAc,CAACc,mBAAmB,GAC7CF,KAAK,CAACI,SAAS,GACfJ,KAAK;UAEX,IAAI1B,mBAAmB,IAAI6B,WAAW,CAACE,cAAc,IAAI,IAAI,EAAE;YAC7D;;UAGF,MAAMC,MAAM,GAAGvB,qBAAqB,CAACwB,GAAG,CAACJ,WAAW,CAAC;UACrD,MAAMxC,IAAI,GAAGuB,OAAO,CAACsB,iBAAiB,CAACF,MAAM,CAAC;UAC9C,MAAMG,UAAU,GAAGrD,IAAI,CAACsD,cAAc,CAACxB,OAAO,EAAEvB,IAAI,EAAE;YACpDmB,sBAAsB,EAAEA;WACzB,CAAC;UAEF,IAAI,CAAC2B,UAAU,EAAE;YACf5B,OAAO,CAAC8B,MAAM,CAAC;cACbZ,IAAI,EAAEI,WAAW;cACjBS,SAAS,EAAE;aACZ,CAAC;;;MAGR;KACD;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}