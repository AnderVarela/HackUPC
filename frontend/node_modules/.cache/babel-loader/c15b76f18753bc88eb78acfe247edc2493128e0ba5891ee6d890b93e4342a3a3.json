{"ast":null,"code":";\n(function (sax) {\n  // wrapper for non-node envs\n  sax.parser = function (strict, opt) {\n    return new SAXParser(strict, opt);\n  };\n  sax.SAXParser = SAXParser;\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024;\n  var buffers = ['comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype', 'procInstName', 'procInstBody', 'entity', 'attribName', 'attribValue', 'cdata', 'script'];\n  sax.EVENTS = ['text', 'processinginstruction', 'sgmldeclaration', 'doctype', 'comment', 'opentagstart', 'attribute', 'opentag', 'closetag', 'opencdata', 'cdata', 'closecdata', 'error', 'end', 'ready', 'script', 'opennamespace', 'closenamespace'];\n  function SAXParser(strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt);\n    }\n    var parser = this;\n    clearBuffers(parser);\n    parser.q = parser.c = '';\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n    parser.opt = opt || {};\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';\n    parser.tags = [];\n    parser.closed = parser.closedRoot = parser.sawRoot = false;\n    parser.tag = parser.error = null;\n    parser.strict = !!strict;\n    parser.noscript = !!(strict || parser.opt.noscript);\n    parser.state = S.BEGIN;\n    parser.strictEntities = parser.opt.strictEntities;\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);\n    parser.attribList = [];\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS);\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false;\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0;\n    }\n    emit(parser, 'onready');\n  }\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F() {}\n      F.prototype = o;\n      var newf = new F();\n      return newf;\n    };\n  }\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = [];\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i);\n      return a;\n    };\n  }\n  function checkBufferLength(parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n    var maxActual = 0;\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length;\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser);\n            break;\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata);\n            parser.cdata = '';\n            break;\n          case 'script':\n            emitNode(parser, 'onscript', parser.script);\n            parser.script = '';\n            break;\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i]);\n        }\n      }\n      maxActual = Math.max(maxActual, len);\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual;\n    parser.bufferCheckPosition = m + parser.position;\n  }\n  function clearBuffers(parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = '';\n    }\n  }\n  function flushBuffers(parser) {\n    closeText(parser);\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata);\n      parser.cdata = '';\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script);\n      parser.script = '';\n    }\n  }\n  SAXParser.prototype = {\n    end: function () {\n      end(this);\n    },\n    write: write,\n    resume: function () {\n      this.error = null;\n      return this;\n    },\n    close: function () {\n      return this.write(null);\n    },\n    flush: function () {\n      flushBuffers(this);\n    }\n  };\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA[';\n  var DOCTYPE = 'DOCTYPE';\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';\n  var rootNS = {\n    xml: XML_NAMESPACE,\n    xmlns: XMLNS_NAMESPACE\n  };\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n  function isWhitespace(c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t';\n  }\n  function isQuote(c) {\n    return c === '\"' || c === '\\'';\n  }\n  function isAttribEnd(c) {\n    return c === '>' || isWhitespace(c);\n  }\n  function isMatch(regex, c) {\n    return regex.test(c);\n  }\n  function notMatch(regex, c) {\n    return !isMatch(regex, c);\n  }\n  var S = 0;\n  sax.STATE = {\n    BEGIN: S++,\n    // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++,\n    // leading whitespace\n    TEXT: S++,\n    // general stuff\n    TEXT_ENTITY: S++,\n    // &amp and such.\n    OPEN_WAKA: S++,\n    // <\n    SGML_DECL: S++,\n    // <!BLARG\n    SGML_DECL_QUOTED: S++,\n    // <!BLARG foo \"bar\n    DOCTYPE: S++,\n    // <!DOCTYPE\n    DOCTYPE_QUOTED: S++,\n    // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++,\n    // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++,\n    // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++,\n    // <!-\n    COMMENT: S++,\n    // <!--\n    COMMENT_ENDING: S++,\n    // <!-- blah -\n    COMMENT_ENDED: S++,\n    // <!-- blah --\n    CDATA: S++,\n    // <![CDATA[ something\n    CDATA_ENDING: S++,\n    // ]\n    CDATA_ENDING_2: S++,\n    // ]]\n    PROC_INST: S++,\n    // <?hi\n    PROC_INST_BODY: S++,\n    // <?hi there\n    PROC_INST_ENDING: S++,\n    // <?hi \"there\" ?\n    OPEN_TAG: S++,\n    // <strong\n    OPEN_TAG_SLASH: S++,\n    // <strong /\n    ATTRIB: S++,\n    // <a\n    ATTRIB_NAME: S++,\n    // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++,\n    // <a foo _\n    ATTRIB_VALUE: S++,\n    // <a foo=\n    ATTRIB_VALUE_QUOTED: S++,\n    // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++,\n    // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++,\n    // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++,\n    // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++,\n    // <foo bar=&quot\n    CLOSE_TAG: S++,\n    // </a\n    CLOSE_TAG_SAW_WHITE: S++,\n    // </a   >\n    SCRIPT: S++,\n    // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  };\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  };\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  };\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key];\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e;\n    sax.ENTITIES[key] = s;\n  });\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s;\n  }\n\n  // shorthand\n  S = sax.STATE;\n  function emit(parser, event, data) {\n    parser[event] && parser[event](data);\n  }\n  function emitNode(parser, nodeType, data) {\n    if (parser.textNode) closeText(parser);\n    emit(parser, nodeType, data);\n  }\n  function closeText(parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode);\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode);\n    parser.textNode = '';\n  }\n  function textopts(opt, text) {\n    if (opt.trim) text = text.trim();\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ');\n    return text;\n  }\n  function error(parser, reason) {\n    closeText(parser);\n    const message = reason + '\\nLine: ' + parser.line + '\\nColumn: ' + parser.column + '\\nChar: ' + parser.c;\n    const error = new Error(message);\n    error.reason = reason;\n    error.line = parser.line;\n    error.column = parser.column;\n    parser.error = error;\n    emit(parser, 'onerror', error);\n    return parser;\n  }\n  function end(parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');\n    if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n      error(parser, 'Unexpected end');\n    }\n    closeText(parser);\n    parser.c = '';\n    parser.closed = true;\n    emit(parser, 'onend');\n    SAXParser.call(parser, parser.strict, parser.opt);\n    return parser;\n  }\n  function strictFail(parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail');\n    }\n    if (parser.strict) {\n      error(parser, message);\n    }\n  }\n  function newTag(parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n    var parent = parser.tags[parser.tags.length - 1] || parser;\n    var tag = parser.tag = {\n      name: parser.tagName,\n      attributes: {}\n    };\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns;\n    }\n    parser.attribList.length = 0;\n    emitNode(parser, 'onopentagstart', tag);\n  }\n  function qname(name, attribute) {\n    var i = name.indexOf(':');\n    var qualName = i < 0 ? ['', name] : name.split(':');\n    var prefix = qualName[0];\n    var local = qualName[1];\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns';\n      local = '';\n    }\n    return {\n      prefix: prefix,\n      local: local\n    };\n  }\n  function attrib(parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]();\n    }\n    if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = '';\n      return;\n    }\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true);\n      var prefix = qn.prefix;\n      var local = qn.local;\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser, 'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' + 'Actual: ' + parser.attribValue);\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser, 'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' + 'Actual: ' + parser.attribValue);\n        } else {\n          var tag = parser.tag;\n          var parent = parser.tags[parser.tags.length - 1] || parser;\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns);\n          }\n          tag.ns[local] = parser.attribValue;\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue]);\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue;\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      });\n    }\n    parser.attribName = parser.attribValue = '';\n  }\n  function openTag(parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag;\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName);\n      tag.prefix = qn.prefix;\n      tag.local = qn.local;\n      tag.uri = tag.ns[qn.prefix] || '';\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(parser.tagName));\n        tag.uri = qn.prefix;\n      }\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          });\n        });\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i];\n        var name = nv[0];\n        var value = nv[1];\n        var qualName = qname(name, true);\n        var prefix = qualName.prefix;\n        var local = qualName.local;\n        var uri = prefix === '' ? '' : tag.ns[prefix] || '';\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        };\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(prefix));\n          a.uri = prefix;\n        }\n        parser.tag.attributes[name] = a;\n        emitNode(parser, 'onattribute', a);\n      }\n      parser.attribList.length = 0;\n    }\n    parser.tag.isSelfClosing = !!selfClosing;\n\n    // process the tag\n    parser.sawRoot = true;\n    parser.tags.push(parser.tag);\n    emitNode(parser, 'onopentag', parser.tag);\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT;\n      } else {\n        parser.state = S.TEXT;\n      }\n      parser.tag = null;\n      parser.tagName = '';\n    }\n    parser.attribName = parser.attribValue = '';\n    parser.attribList.length = 0;\n  }\n  function closeTag(parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.');\n      parser.textNode += '</>';\n      parser.state = S.TEXT;\n      return;\n    }\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>';\n        parser.tagName = '';\n        parser.state = S.SCRIPT;\n        return;\n      }\n      emitNode(parser, 'onscript', parser.script);\n      parser.script = '';\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length;\n    var tagName = parser.tagName;\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]();\n    }\n    var closeTo = tagName;\n    while (t--) {\n      var close = parser.tags[t];\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag');\n      } else {\n        break;\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);\n      parser.textNode += '</' + parser.tagName + '>';\n      parser.state = S.TEXT;\n      return;\n    }\n    parser.tagName = tagName;\n    var s = parser.tags.length;\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop();\n      parser.tagName = parser.tag.name;\n      emitNode(parser, 'onclosetag', parser.tagName);\n      var x = {};\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i];\n      }\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p];\n          emitNode(parser, 'onclosenamespace', {\n            prefix: p,\n            uri: n\n          });\n        });\n      }\n    }\n    if (t === 0) parser.closedRoot = true;\n    parser.tagName = parser.attribValue = parser.attribName = '';\n    parser.attribList.length = 0;\n    parser.state = S.TEXT;\n  }\n  function parseEntity(parser) {\n    var entity = parser.entity;\n    var entityLC = entity.toLowerCase();\n    var num;\n    var numStr = '';\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity];\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC];\n    }\n    entity = entityLC;\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2);\n        num = parseInt(entity, 16);\n        numStr = num.toString(16);\n      } else {\n        entity = entity.slice(1);\n        num = parseInt(entity, 10);\n        numStr = num.toString(10);\n      }\n    }\n    entity = entity.replace(/^0+/, '');\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity');\n      return '&' + parser.entity + ';';\n    }\n    return String.fromCodePoint(num);\n  }\n  function beginWhiteSpace(parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA;\n      parser.startTagPosition = parser.position;\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.');\n      parser.textNode = c;\n      parser.state = S.TEXT;\n    }\n  }\n  function charAt(chunk, i) {\n    var result = '';\n    if (i < chunk.length) {\n      result = chunk.charAt(i);\n    }\n    return result;\n  }\n  function write(chunk) {\n    var parser = this;\n    if (this.error) {\n      throw this.error;\n    }\n    if (parser.closed) {\n      return error(parser, 'Cannot write after close. Assign an onready handler.');\n    }\n    if (chunk === null) {\n      return end(parser);\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString();\n    }\n    var i = 0;\n    var c = '';\n    while (true) {\n      c = charAt(chunk, i++);\n      parser.c = c;\n      if (!c) {\n        break;\n      }\n      if (parser.trackPosition) {\n        parser.position++;\n        if (c === '\\n') {\n          parser.line++;\n          parser.column = 0;\n        } else {\n          parser.column++;\n        }\n      }\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE;\n          if (c === '\\uFEFF') {\n            continue;\n          }\n          beginWhiteSpace(parser, c);\n          continue;\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c);\n          continue;\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1;\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++);\n              if (c && parser.trackPosition) {\n                parser.position++;\n                if (c === '\\n') {\n                  parser.line++;\n                  parser.column = 0;\n                } else {\n                  parser.column++;\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1);\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.');\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY;\n            } else {\n              parser.textNode += c;\n            }\n          }\n          continue;\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING;\n          } else {\n            parser.script += c;\n          }\n          continue;\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG;\n          } else {\n            parser.script += '<' + c;\n            parser.state = S.SCRIPT;\n          }\n          continue;\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL;\n            parser.sgmlDecl = '';\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG;\n            parser.tagName = c;\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG;\n            parser.tagName = '';\n          } else if (c === '?') {\n            parser.state = S.PROC_INST;\n            parser.procInstName = parser.procInstBody = '';\n          } else {\n            strictFail(parser, 'Unencoded <');\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition;\n              c = new Array(pad).join(' ') + c;\n            }\n            parser.textNode += '<' + c;\n            parser.state = S.TEXT;\n          }\n          continue;\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata');\n            parser.state = S.CDATA;\n            parser.sgmlDecl = '';\n            parser.cdata = '';\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT;\n            parser.comment = '';\n            parser.sgmlDecl = '';\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE;\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser, 'Inappropriately located doctype declaration');\n            }\n            parser.doctype = '';\n            parser.sgmlDecl = '';\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);\n            parser.sgmlDecl = '';\n            parser.state = S.TEXT;\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED;\n            parser.sgmlDecl += c;\n          } else {\n            parser.sgmlDecl += c;\n          }\n          continue;\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL;\n            parser.q = '';\n          }\n          parser.sgmlDecl += c;\n          continue;\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT;\n            emitNode(parser, 'ondoctype', parser.doctype);\n            parser.doctype = true; // just remember that we saw it.\n          } else {\n            parser.doctype += c;\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD;\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED;\n              parser.q = c;\n            }\n          }\n          continue;\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c;\n          if (c === parser.q) {\n            parser.q = '';\n            parser.state = S.DOCTYPE;\n          }\n          continue;\n        case S.DOCTYPE_DTD:\n          parser.doctype += c;\n          if (c === ']') {\n            parser.state = S.DOCTYPE;\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED;\n            parser.q = c;\n          }\n          continue;\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c;\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD;\n            parser.q = '';\n          }\n          continue;\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING;\n          } else {\n            parser.comment += c;\n          }\n          continue;\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED;\n            parser.comment = textopts(parser.opt, parser.comment);\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment);\n            }\n            parser.comment = '';\n          } else {\n            parser.comment += '-' + c;\n            parser.state = S.COMMENT;\n          }\n          continue;\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment');\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c;\n            parser.state = S.COMMENT;\n          } else {\n            parser.state = S.TEXT;\n          }\n          continue;\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING;\n          } else {\n            parser.cdata += c;\n          }\n          continue;\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2;\n          } else {\n            parser.cdata += ']' + c;\n            parser.state = S.CDATA;\n          }\n          continue;\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata);\n            }\n            emitNode(parser, 'onclosecdata');\n            parser.cdata = '';\n            parser.state = S.TEXT;\n          } else if (c === ']') {\n            parser.cdata += ']';\n          } else {\n            parser.cdata += ']]' + c;\n            parser.state = S.CDATA;\n          }\n          continue;\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING;\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY;\n          } else {\n            parser.procInstName += c;\n          }\n          continue;\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue;\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING;\n          } else {\n            parser.procInstBody += c;\n          }\n          continue;\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            });\n            parser.procInstName = parser.procInstBody = '';\n            parser.state = S.TEXT;\n          } else {\n            parser.procInstBody += '?' + c;\n            parser.state = S.PROC_INST_BODY;\n          }\n          continue;\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c;\n          } else {\n            newTag(parser);\n            if (c === '>') {\n              openTag(parser);\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH;\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name');\n              }\n              parser.state = S.ATTRIB;\n            }\n          }\n          continue;\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true);\n            closeTag(parser);\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >');\n            parser.state = S.ATTRIB;\n          }\n          continue;\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue;\n          } else if (c === '>') {\n            openTag(parser);\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH;\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c;\n            parser.attribValue = '';\n            parser.state = S.ATTRIB_NAME;\n          } else {\n            strictFail(parser, 'Invalid attribute name');\n          }\n          continue;\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE;\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value');\n            parser.attribValue = parser.attribName;\n            attrib(parser);\n            openTag(parser);\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE;\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c;\n          } else {\n            strictFail(parser, 'Invalid attribute name');\n          }\n          continue;\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE;\n          } else if (isWhitespace(c)) {\n            continue;\n          } else {\n            strictFail(parser, 'Attribute without value');\n            parser.tag.attributes[parser.attribName] = '';\n            parser.attribValue = '';\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            });\n            parser.attribName = '';\n            if (c === '>') {\n              openTag(parser);\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c;\n              parser.state = S.ATTRIB_NAME;\n            } else {\n              strictFail(parser, 'Invalid attribute name');\n              parser.state = S.ATTRIB;\n            }\n          }\n          continue;\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue;\n          } else if (isQuote(c)) {\n            parser.q = c;\n            parser.state = S.ATTRIB_VALUE_QUOTED;\n          } else {\n            strictFail(parser, 'Unquoted attribute value');\n            parser.state = S.ATTRIB_VALUE_UNQUOTED;\n            parser.attribValue = c;\n          }\n          continue;\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n            } else {\n              parser.attribValue += c;\n            }\n            continue;\n          }\n          attrib(parser);\n          parser.q = '';\n          parser.state = S.ATTRIB_VALUE_CLOSED;\n          continue;\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB;\n          } else if (c === '>') {\n            openTag(parser);\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH;\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes');\n            parser.attribName = c;\n            parser.attribValue = '';\n            parser.state = S.ATTRIB_NAME;\n          } else {\n            strictFail(parser, 'Invalid attribute name');\n          }\n          continue;\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U;\n            } else {\n              parser.attribValue += c;\n            }\n            continue;\n          }\n          attrib(parser);\n          if (c === '>') {\n            openTag(parser);\n          } else {\n            parser.state = S.ATTRIB;\n          }\n          continue;\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue;\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c;\n                parser.state = S.SCRIPT;\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.');\n              }\n            } else {\n              parser.tagName = c;\n            }\n          } else if (c === '>') {\n            closeTag(parser);\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c;\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName;\n            parser.tagName = '';\n            parser.state = S.SCRIPT;\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag');\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE;\n          }\n          continue;\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue;\n          }\n          if (c === '>') {\n            closeTag(parser);\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag');\n          }\n          continue;\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState;\n          var buffer;\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT;\n              buffer = 'textNode';\n              break;\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED;\n              buffer = 'attribValue';\n              break;\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED;\n              buffer = 'attribValue';\n              break;\n          }\n          if (c === ';') {\n            var parsedEntity = parseEntity(parser);\n\n            // Custom entities can contain tags, so we potentially need to parse the result\n            if (parser.state === S.TEXT_ENTITY && !sax.ENTITIES[parser.entity] && parsedEntity !== '&' + parser.entity + ';') {\n              chunk = chunk.slice(0, i) + parsedEntity + chunk.slice(i);\n            } else {\n              parser[buffer] += parsedEntity;\n            }\n            parser.entity = '';\n            parser.state = returnState;\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c;\n          } else {\n            strictFail(parser, 'Invalid character in entity name');\n            parser[buffer] += '&' + parser.entity + c;\n            parser.entity = '';\n            parser.state = returnState;\n          }\n          continue;\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state);\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser);\n    }\n    return parser;\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports);","map":{"version":3,"names":["sax","parser","strict","opt","SAXParser","MAX_BUFFER_LENGTH","buffers","EVENTS","clearBuffers","q","c","bufferCheckPosition","lowercase","lowercasetags","looseCase","tags","closed","closedRoot","sawRoot","tag","error","noscript","state","S","BEGIN","strictEntities","ENTITIES","Object","create","XML_ENTITIES","attribList","xmlns","ns","rootNS","trackPosition","position","line","column","emit","o","F","prototype","newf","keys","a","i","hasOwnProperty","push","checkBufferLength","maxAllowed","Math","max","maxActual","l","length","len","closeText","emitNode","cdata","script","m","flushBuffers","end","write","resume","close","flush","CDATA","DOCTYPE","XML_NAMESPACE","XMLNS_NAMESPACE","xml","nameStart","nameBody","entityStart","entityBody","isWhitespace","isQuote","isAttribEnd","isMatch","regex","test","notMatch","STATE","BEGIN_WHITESPACE","TEXT","TEXT_ENTITY","OPEN_WAKA","SGML_DECL","SGML_DECL_QUOTED","DOCTYPE_QUOTED","DOCTYPE_DTD","DOCTYPE_DTD_QUOTED","COMMENT_STARTING","COMMENT","COMMENT_ENDING","COMMENT_ENDED","CDATA_ENDING","CDATA_ENDING_2","PROC_INST","PROC_INST_BODY","PROC_INST_ENDING","OPEN_TAG","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG","CLOSE_TAG_SAW_WHITE","SCRIPT","SCRIPT_ENDING","forEach","key","e","s","String","fromCharCode","event","data","nodeType","textNode","textopts","text","trim","normalize","replace","reason","message","Error","strictFail","call","newTag","tagName","parent","name","attributes","qname","attribute","indexOf","qualName","split","prefix","local","attrib","attribName","attribValue","qn","value","openTag","selfClosing","uri","JSON","stringify","p","nv","isSelfClosing","toLowerCase","closeTag","t","closeTo","pop","x","n","parseEntity","entity","entityLC","num","numStr","charAt","slice","parseInt","toString","isNaN","fromCodePoint","beginWhiteSpace","startTagPosition","chunk","result","starti","substring","sgmlDecl","procInstName","procInstBody","pad","Array","join","toUpperCase","comment","doctype","body","returnState","buffer","parsedEntity","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@trysound/sax/lib/sax.js"],"sourcesContent":[";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, reason) {\n    closeText(parser)\n    const message = reason +\n      '\\nLine: ' + parser.line +\n      '\\nColumn: ' + parser.column +\n      '\\nChar: ' + parser.c\n    const error = new Error(message)\n    error.reason = reason\n    error.line = parser.line\n    error.column = parser.column\n    parser.error = error\n    emit(parser, 'onerror', error)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            var parsedEntity = parseEntity(parser)\n\n            // Custom entities can contain tags, so we potentially need to parse the result\n            if (parser.state === S.TEXT_ENTITY && !sax.ENTITIES[parser.entity] && parsedEntity !== '&' + parser.entity + ';') {\n              chunk = chunk.slice(0, i) + parsedEntity + chunk.slice(i)\n            } else {\n              parser[buffer] += parsedEntity\n            }\n\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}