{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shrinkPaddedLEB128 = shrinkPaddedLEB128;\nvar _ast = require(\"@webassemblyjs/ast\");\nvar _encoder = require(\"@webassemblyjs/wasm-gen/lib/encoder\");\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section;\n  // Once we hit our section every that is after needs to be shifted by the delta\n  var encounteredSection = false;\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n      if (encounteredSection === true) {\n        (0, _ast.shiftSection)(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\nfunction shrinkPaddedLEB128(ast, uint8Buffer) {\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n\n      /**\n       * Section size\n       */\n      {\n        var newu32Encoded = (0, _encoder.encodeU32)(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","shrinkPaddedLEB128","_ast","require","_encoder","_helperBuffer","shiftFollowingSections","ast","_ref","deltaInSizeEncoding","section","encounteredSection","traverse","SectionMetadata","path","node","shiftSection","uint8Buffer","_ref2","newu32Encoded","encodeU32","size","newu32EncodedLen","length","start","loc","column","end","oldu32EncodedLen","overrideBytesInBuffer"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@webassemblyjs/wasm-opt/lib/leb128.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shrinkPaddedLEB128 = shrinkPaddedLEB128;\n\nvar _ast = require(\"@webassemblyjs/ast\");\n\nvar _encoder = require(\"@webassemblyjs/wasm-gen/lib/encoder\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section;\n  // Once we hit our section every that is after needs to be shifted by the delta\n  var encounteredSection = false;\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        (0, _ast.shiftSection)(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\n\nfunction shrinkPaddedLEB128(ast, uint8Buffer) {\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n\n      /**\n       * Section size\n       */\n      {\n        var newu32Encoded = (0, _encoder.encodeU32)(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAE/C,IAAIC,IAAI,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAExC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,qCAAqC,CAAC;AAE7D,IAAIE,aAAa,GAAGF,OAAO,CAAC,8BAA8B,CAAC;AAE3D,SAASG,sBAAsBA,CAACC,GAAG,EAAEC,IAAI,EAAEC,mBAAmB,EAAE;EAC9D,IAAIC,OAAO,GAAGF,IAAI,CAACE,OAAO;EAC1B;EACA,IAAIC,kBAAkB,GAAG,KAAK;EAC9B,CAAC,CAAC,EAAET,IAAI,CAACU,QAAQ,EAAEL,GAAG,EAAE;IACtBM,eAAe,EAAE,SAASA,eAAeA,CAACC,IAAI,EAAE;MAC9C,IAAIA,IAAI,CAACC,IAAI,CAACL,OAAO,KAAKA,OAAO,EAAE;QACjCC,kBAAkB,GAAG,IAAI;QACzB;MACF;MAEA,IAAIA,kBAAkB,KAAK,IAAI,EAAE;QAC/B,CAAC,CAAC,EAAET,IAAI,CAACc,YAAY,EAAET,GAAG,EAAEO,IAAI,CAACC,IAAI,EAAEN,mBAAmB,CAAC;MAC7D;IACF;EACF,CAAC,CAAC;AACJ;AAEA,SAASR,kBAAkBA,CAACM,GAAG,EAAEU,WAAW,EAAE;EAC5C,CAAC,CAAC,EAAEf,IAAI,CAACU,QAAQ,EAAEL,GAAG,EAAE;IACtBM,eAAe,EAAE,SAASA,eAAeA,CAACK,KAAK,EAAE;MAC/C,IAAIH,IAAI,GAAGG,KAAK,CAACH,IAAI;;MAErB;AACN;AACA;MACM;QACE,IAAII,aAAa,GAAG,CAAC,CAAC,EAAEf,QAAQ,CAACgB,SAAS,EAAEL,IAAI,CAACM,IAAI,CAACrB,KAAK,CAAC;QAC5D,IAAIsB,gBAAgB,GAAGH,aAAa,CAACI,MAAM;QAC3C,IAAIC,KAAK,GAAGT,IAAI,CAACM,IAAI,CAACI,GAAG,CAACD,KAAK,CAACE,MAAM;QACtC,IAAIC,GAAG,GAAGZ,IAAI,CAACM,IAAI,CAACI,GAAG,CAACE,GAAG,CAACD,MAAM;QAClC,IAAIE,gBAAgB,GAAGD,GAAG,GAAGH,KAAK;QAElC,IAAIF,gBAAgB,KAAKM,gBAAgB,EAAE;UACzC,IAAInB,mBAAmB,GAAGmB,gBAAgB,GAAGN,gBAAgB;UAC7DL,WAAW,GAAG,CAAC,CAAC,EAAEZ,aAAa,CAACwB,qBAAqB,EAAEZ,WAAW,EAAEO,KAAK,EAAEG,GAAG,EAAER,aAAa,CAAC;UAC9Fb,sBAAsB,CAACC,GAAG,EAAEQ,IAAI,EAAE,CAACN,mBAAmB,CAAC;QACzD;MACF;IACF;EACF,CAAC,CAAC;EACF,OAAOQ,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}