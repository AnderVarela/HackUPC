{"ast":null,"code":"import e from \"postcss-value-parser\";\nconst o = [\"woff\", \"truetype\", \"opentype\", \"woff2\", \"embedded-opentype\", \"collection\", \"svg\"],\n  t = t => {\n    const r = \"preserve\" in Object(t) && Boolean(t.preserve);\n    return {\n      postcssPlugin: \"postcss-font-format-keywords\",\n      AtRule(t) {\n        \"font-face\" === t.name.toLowerCase() && t.walkDecls(t => {\n          if (\"src\" !== t.prop.toLowerCase()) return;\n          if (!t.value.toLowerCase().includes(\"format(\")) return;\n          const s = e(t.value);\n          s.walk(t => {\n            \"function\" === t.type && \"format\" === t.value.toLowerCase() && t.nodes.forEach(t => {\n              \"word\" === t.type && o.includes(t.value.toLowerCase()) && (t.value = e.stringify({\n                type: \"string\",\n                value: t.value,\n                quote: '\"'\n              }));\n            });\n          }), s.toString() !== t.value && (t.cloneBefore({\n            value: s.toString()\n          }), r || t.remove());\n        });\n      }\n    };\n  };\nt.postcss = !0;\nexport { t as default };","map":{"version":3,"names":["e","o","t","r","Object","Boolean","preserve","postcssPlugin","AtRule","name","toLowerCase","walkDecls","prop","value","includes","s","walk","type","nodes","forEach","stringify","quote","toString","cloneBefore","remove","postcss","default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@csstools/postcss-font-format-keywords/dist/index.mjs"],"sourcesContent":["import e from\"postcss-value-parser\";const o=[\"woff\",\"truetype\",\"opentype\",\"woff2\",\"embedded-opentype\",\"collection\",\"svg\"],t=t=>{const r=\"preserve\"in Object(t)&&Boolean(t.preserve);return{postcssPlugin:\"postcss-font-format-keywords\",AtRule(t){\"font-face\"===t.name.toLowerCase()&&t.walkDecls((t=>{if(\"src\"!==t.prop.toLowerCase())return;if(!t.value.toLowerCase().includes(\"format(\"))return;const s=e(t.value);s.walk((t=>{\"function\"===t.type&&\"format\"===t.value.toLowerCase()&&t.nodes.forEach((t=>{\"word\"===t.type&&o.includes(t.value.toLowerCase())&&(t.value=e.stringify({type:\"string\",value:t.value,quote:'\"'}))}))})),s.toString()!==t.value&&(t.cloneBefore({value:s.toString()}),r||t.remove())}))}}};t.postcss=!0;export{t as default};\n"],"mappings":"AAAA,OAAOA,CAAC,MAAK,sBAAsB;AAAC,MAAMC,CAAC,GAAC,CAAC,MAAM,EAAC,UAAU,EAAC,UAAU,EAAC,OAAO,EAAC,mBAAmB,EAAC,YAAY,EAAC,KAAK,CAAC;EAACC,CAAC,GAACA,CAAC,IAAE;IAAC,MAAMC,CAAC,GAAC,UAAU,IAAGC,MAAM,CAACF,CAAC,CAAC,IAAEG,OAAO,CAACH,CAAC,CAACI,QAAQ,CAAC;IAAC,OAAM;MAACC,aAAa,EAAC,8BAA8B;MAACC,MAAMA,CAACN,CAAC,EAAC;QAAC,WAAW,KAAGA,CAAC,CAACO,IAAI,CAACC,WAAW,CAAC,CAAC,IAAER,CAAC,CAACS,SAAS,CAAET,CAAC,IAAE;UAAC,IAAG,KAAK,KAAGA,CAAC,CAACU,IAAI,CAACF,WAAW,CAAC,CAAC,EAAC;UAAO,IAAG,CAACR,CAAC,CAACW,KAAK,CAACH,WAAW,CAAC,CAAC,CAACI,QAAQ,CAAC,SAAS,CAAC,EAAC;UAAO,MAAMC,CAAC,GAACf,CAAC,CAACE,CAAC,CAACW,KAAK,CAAC;UAACE,CAAC,CAACC,IAAI,CAAEd,CAAC,IAAE;YAAC,UAAU,KAAGA,CAAC,CAACe,IAAI,IAAE,QAAQ,KAAGf,CAAC,CAACW,KAAK,CAACH,WAAW,CAAC,CAAC,IAAER,CAAC,CAACgB,KAAK,CAACC,OAAO,CAAEjB,CAAC,IAAE;cAAC,MAAM,KAAGA,CAAC,CAACe,IAAI,IAAEhB,CAAC,CAACa,QAAQ,CAACZ,CAAC,CAACW,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,KAAGR,CAAC,CAACW,KAAK,GAACb,CAAC,CAACoB,SAAS,CAAC;gBAACH,IAAI,EAAC,QAAQ;gBAACJ,KAAK,EAACX,CAAC,CAACW,KAAK;gBAACQ,KAAK,EAAC;cAAG,CAAC,CAAC,CAAC;YAAA,CAAE,CAAC;UAAA,CAAE,CAAC,EAACN,CAAC,CAACO,QAAQ,CAAC,CAAC,KAAGpB,CAAC,CAACW,KAAK,KAAGX,CAAC,CAACqB,WAAW,CAAC;YAACV,KAAK,EAACE,CAAC,CAACO,QAAQ,CAAC;UAAC,CAAC,CAAC,EAACnB,CAAC,IAAED,CAAC,CAACsB,MAAM,CAAC,CAAC,CAAC;QAAA,CAAE,CAAC;MAAA;IAAC,CAAC;EAAA,CAAC;AAACtB,CAAC,CAACuB,OAAO,GAAC,CAAC,CAAC;AAAC,SAAOvB,CAAC,IAAIwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}