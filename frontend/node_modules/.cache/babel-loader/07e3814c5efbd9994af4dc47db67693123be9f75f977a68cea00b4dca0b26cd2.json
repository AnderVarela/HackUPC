{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _eachSeries = require('./eachSeries.js');\nvar _eachSeries2 = _interopRequireDefault(_eachSeries);\nvar _wrapAsync = require('./internal/wrapAsync.js');\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\nvar _awaitify = require('./internal/awaitify.js');\nvar _awaitify2 = _interopRequireDefault(_awaitify);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n  var error = null;\n  var result;\n  return (0, _eachSeries2.default)(tasks, (task, taskCb) => {\n    (0, _wrapAsync2.default)(task)((err, ...args) => {\n      if (err === false) return taskCb(err);\n      if (args.length < 2) {\n        [result] = args;\n      } else {\n        result = args;\n      }\n      error = err;\n      taskCb(err ? null : {});\n    });\n  }, () => callback(error, result));\n}\nexports.default = (0, _awaitify2.default)(tryEach);\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","_eachSeries","require","_eachSeries2","_interopRequireDefault","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","__esModule","default","tryEach","tasks","callback","error","result","task","taskCb","err","args","length","module"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/async/tryEach.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _eachSeries = require('./eachSeries.js');\n\nvar _eachSeries2 = _interopRequireDefault(_eachSeries);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return (0, _eachSeries2.default)(tasks, (task, taskCb) => {\n        (0, _wrapAsync2.default)(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nexports.default = (0, _awaitify2.default)(tryEach);\nmodule.exports = exports.default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AAEF,IAAIC,WAAW,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAE5C,IAAIC,YAAY,GAAGC,sBAAsB,CAACH,WAAW,CAAC;AAEtD,IAAII,UAAU,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AAEnD,IAAII,WAAW,GAAGF,sBAAsB,CAACC,UAAU,CAAC;AAEpD,IAAIE,SAAS,GAAGL,OAAO,CAAC,wBAAwB,CAAC;AAEjD,IAAIM,UAAU,GAAGJ,sBAAsB,CAACG,SAAS,CAAC;AAElD,SAASH,sBAAsBA,CAACK,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,OAAOA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC9B,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAIC,MAAM;EACV,OAAO,CAAC,CAAC,EAAEb,YAAY,CAACQ,OAAO,EAAEE,KAAK,EAAE,CAACI,IAAI,EAAEC,MAAM,KAAK;IACtD,CAAC,CAAC,EAAEZ,WAAW,CAACK,OAAO,EAAEM,IAAI,CAAC,CAAC,CAACE,GAAG,EAAE,GAAGC,IAAI,KAAK;MAC7C,IAAID,GAAG,KAAK,KAAK,EAAE,OAAOD,MAAM,CAACC,GAAG,CAAC;MAErC,IAAIC,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACjB,CAACL,MAAM,CAAC,GAAGI,IAAI;MACnB,CAAC,MAAM;QACHJ,MAAM,GAAGI,IAAI;MACjB;MACAL,KAAK,GAAGI,GAAG;MACXD,MAAM,CAACC,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC,EAAE,MAAML,QAAQ,CAACC,KAAK,EAAEC,MAAM,CAAC,CAAC;AACrC;AAEAjB,OAAO,CAACY,OAAO,GAAG,CAAC,CAAC,EAAEH,UAAU,CAACG,OAAO,EAAEC,OAAO,CAAC;AAClDU,MAAM,CAACvB,OAAO,GAAGA,OAAO,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}