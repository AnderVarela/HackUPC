{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultOrder = void 0;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst natural_compare_lite_1 = __importDefault(require(\"natural-compare-lite\"));\nconst util = __importStar(require(\"../util\"));\nconst neverConfig = {\n  type: 'string',\n  enum: ['never']\n};\nconst arrayConfig = memberTypes => ({\n  type: 'array',\n  items: {\n    oneOf: [{\n      enum: memberTypes\n    }, {\n      type: 'array',\n      items: {\n        enum: memberTypes\n      }\n    }]\n  }\n});\nconst objectConfig = memberTypes => ({\n  type: 'object',\n  properties: {\n    memberTypes: {\n      oneOf: [arrayConfig(memberTypes), neverConfig]\n    },\n    order: {\n      type: 'string',\n      enum: ['alphabetically', 'alphabetically-case-insensitive', 'as-written', 'natural', 'natural-case-insensitive']\n    },\n    optionalityOrder: {\n      type: 'string',\n      enum: ['optional-first', 'required-first']\n    }\n  },\n  additionalProperties: false\n});\nexports.defaultOrder = [\n// Index signature\n'signature', 'call-signature',\n// Fields\n'public-static-field', 'protected-static-field', 'private-static-field', '#private-static-field', 'public-decorated-field', 'protected-decorated-field', 'private-decorated-field', 'public-instance-field', 'protected-instance-field', 'private-instance-field', '#private-instance-field', 'public-abstract-field', 'protected-abstract-field', 'public-field', 'protected-field', 'private-field', '#private-field', 'static-field', 'instance-field', 'abstract-field', 'decorated-field', 'field',\n// Static initialization\n'static-initialization',\n// Constructors\n'public-constructor', 'protected-constructor', 'private-constructor', 'constructor',\n// Getters\n'public-static-get', 'protected-static-get', 'private-static-get', '#private-static-get', 'public-decorated-get', 'protected-decorated-get', 'private-decorated-get', 'public-instance-get', 'protected-instance-get', 'private-instance-get', '#private-instance-get', 'public-abstract-get', 'protected-abstract-get', 'public-get', 'protected-get', 'private-get', '#private-get', 'static-get', 'instance-get', 'abstract-get', 'decorated-get', 'get',\n// Setters\n'public-static-set', 'protected-static-set', 'private-static-set', '#private-static-set', 'public-decorated-set', 'protected-decorated-set', 'private-decorated-set', 'public-instance-set', 'protected-instance-set', 'private-instance-set', '#private-instance-set', 'public-abstract-set', 'protected-abstract-set', 'public-set', 'protected-set', 'private-set', '#private-set', 'static-set', 'instance-set', 'abstract-set', 'decorated-set', 'set',\n// Methods\n'public-static-method', 'protected-static-method', 'private-static-method', '#private-static-method', 'public-decorated-method', 'protected-decorated-method', 'private-decorated-method', 'public-instance-method', 'protected-instance-method', 'private-instance-method', '#private-instance-method', 'public-abstract-method', 'protected-abstract-method', 'public-method', 'protected-method', 'private-method', '#private-method', 'static-method', 'instance-method', 'abstract-method', 'decorated-method', 'method'];\nconst allMemberTypes = Array.from(['readonly-signature', 'signature', 'readonly-field', 'field', 'method', 'call-signature', 'constructor', 'get', 'set', 'static-initialization'].reduce((all, type) => {\n  all.add(type);\n  ['public', 'protected', 'private', '#private'].forEach(accessibility => {\n    if (type !== 'readonly-signature' && type !== 'signature' && type !== 'static-initialization' && type !== 'call-signature' && !(type === 'constructor' && accessibility === '#private')) {\n      all.add(`${accessibility}-${type}`); // e.g. `public-field`\n    }\n    // Only class instance fields, methods, get and set can have decorators attached to them\n    if (accessibility !== '#private' && (type === 'readonly-field' || type === 'field' || type === 'method' || type === 'get' || type === 'set')) {\n      all.add(`${accessibility}-decorated-${type}`);\n      all.add(`decorated-${type}`);\n    }\n    if (type !== 'constructor' && type !== 'readonly-signature' && type !== 'signature' && type !== 'call-signature') {\n      // There is no `static-constructor` or `instance-constructor` or `abstract-constructor`\n      if (accessibility === '#private' || accessibility === 'private') {\n        ['static', 'instance'].forEach(scope => {\n          all.add(`${scope}-${type}`);\n          all.add(`${accessibility}-${scope}-${type}`);\n        });\n      } else {\n        ['static', 'instance', 'abstract'].forEach(scope => {\n          all.add(`${scope}-${type}`);\n          all.add(`${accessibility}-${scope}-${type}`);\n        });\n      }\n    }\n  });\n  return all;\n}, new Set()));\nconst functionExpressions = [utils_1.AST_NODE_TYPES.FunctionExpression, utils_1.AST_NODE_TYPES.ArrowFunctionExpression];\n/**\n * Gets the node type.\n *\n * @param node the node to be evaluated.\n */\nfunction getNodeType(node) {\n  switch (node.type) {\n    case utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition:\n    case utils_1.AST_NODE_TYPES.MethodDefinition:\n      return node.kind;\n    case utils_1.AST_NODE_TYPES.TSMethodSignature:\n      return 'method';\n    case utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration:\n      return 'call-signature';\n    case utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration:\n      return 'constructor';\n    case utils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition:\n      return node.readonly ? 'readonly-field' : 'field';\n    case utils_1.AST_NODE_TYPES.PropertyDefinition:\n      return node.value && functionExpressions.includes(node.value.type) ? 'method' : node.readonly ? 'readonly-field' : 'field';\n    case utils_1.AST_NODE_TYPES.TSPropertySignature:\n      return node.readonly ? 'readonly-field' : 'field';\n    case utils_1.AST_NODE_TYPES.TSIndexSignature:\n      return node.readonly ? 'readonly-signature' : 'signature';\n    case utils_1.AST_NODE_TYPES.StaticBlock:\n      return 'static-initialization';\n    default:\n      return null;\n  }\n}\n/**\n * Gets the raw string value of a member's name\n */\nfunction getMemberRawName(member, sourceCode) {\n  const {\n    name,\n    type\n  } = util.getNameFromMember(member, sourceCode);\n  if (type === util.MemberNameType.Quoted) {\n    return name.slice(1, -1);\n  }\n  if (type === util.MemberNameType.Private) {\n    return name.slice(1);\n  }\n  return name;\n}\n/**\n * Gets the member name based on the member type.\n *\n * @param node the node to be evaluated.\n * @param sourceCode\n */\nfunction getMemberName(node, sourceCode) {\n  switch (node.type) {\n    case utils_1.AST_NODE_TYPES.TSPropertySignature:\n    case utils_1.AST_NODE_TYPES.TSMethodSignature:\n    case utils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition:\n    case utils_1.AST_NODE_TYPES.PropertyDefinition:\n      return getMemberRawName(node, sourceCode);\n    case utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition:\n    case utils_1.AST_NODE_TYPES.MethodDefinition:\n      return node.kind === 'constructor' ? 'constructor' : getMemberRawName(node, sourceCode);\n    case utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration:\n      return 'new';\n    case utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration:\n      return 'call';\n    case utils_1.AST_NODE_TYPES.TSIndexSignature:\n      return util.getNameFromIndexSignature(node);\n    case utils_1.AST_NODE_TYPES.StaticBlock:\n      return 'static block';\n    default:\n      return null;\n  }\n}\n/**\n * Returns true if the member is optional based on the member type.\n *\n * @param node the node to be evaluated.\n *\n * @returns Whether the member is optional, or false if it cannot be optional at all.\n */\nfunction isMemberOptional(node) {\n  switch (node.type) {\n    case utils_1.AST_NODE_TYPES.TSPropertySignature:\n    case utils_1.AST_NODE_TYPES.TSMethodSignature:\n    case utils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition:\n    case utils_1.AST_NODE_TYPES.PropertyDefinition:\n    case utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition:\n    case utils_1.AST_NODE_TYPES.MethodDefinition:\n      return !!node.optional;\n  }\n  return false;\n}\n/**\n * Gets the calculated rank using the provided method definition.\n * The algorithm is as follows:\n * - Get the rank based on the accessibility-scope-type name, e.g. public-instance-field\n * - If there is no order for accessibility-scope-type, then strip out the accessibility.\n * - If there is no order for scope-type, then strip out the scope.\n * - If there is no order for type, then return -1\n * @param memberGroups the valid names to be validated.\n * @param orderConfig the current order to be validated.\n *\n * @return Index of the matching member type in the order configuration.\n */\nfunction getRankOrder(memberGroups, orderConfig) {\n  let rank = -1;\n  const stack = memberGroups.slice(); // Get a copy of the member groups\n  while (stack.length > 0 && rank === -1) {\n    const memberGroup = stack.shift();\n    rank = orderConfig.findIndex(memberType => Array.isArray(memberType) ? memberType.includes(memberGroup) : memberType === memberGroup);\n  }\n  return rank;\n}\nfunction getAccessibility(node) {\n  var _a;\n  if ('accessibility' in node && node.accessibility) {\n    return node.accessibility;\n  }\n  if ('key' in node && ((_a = node.key) === null || _a === void 0 ? void 0 : _a.type) === utils_1.AST_NODE_TYPES.PrivateIdentifier) {\n    return '#private';\n  }\n  return 'public';\n}\n/**\n * Gets the rank of the node given the order.\n * @param node the node to be evaluated.\n * @param orderConfig the current order to be validated.\n * @param supportsModifiers a flag indicating whether the type supports modifiers (scope or accessibility) or not.\n */\nfunction getRank(node, orderConfig, supportsModifiers) {\n  const type = getNodeType(node);\n  if (type == null) {\n    // shouldn't happen but just in case, put it on the end\n    return orderConfig.length - 1;\n  }\n  const abstract = node.type === utils_1.AST_NODE_TYPES.TSAbstractPropertyDefinition || node.type === utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition;\n  const scope = 'static' in node && node.static ? 'static' : abstract ? 'abstract' : 'instance';\n  const accessibility = getAccessibility(node);\n  // Collect all existing member groups that apply to this node...\n  // (e.g. 'public-instance-field', 'instance-field', 'public-field', 'constructor' etc.)\n  const memberGroups = [];\n  if (supportsModifiers) {\n    const decorated = 'decorators' in node && node.decorators.length > 0;\n    if (decorated && (type === 'readonly-field' || type === 'field' || type === 'method' || type === 'get' || type === 'set')) {\n      memberGroups.push(`${accessibility}-decorated-${type}`);\n      memberGroups.push(`decorated-${type}`);\n      if (type === 'readonly-field') {\n        memberGroups.push(`${accessibility}-decorated-field`);\n        memberGroups.push(`decorated-field`);\n      }\n    }\n    if (type !== 'readonly-signature' && type !== 'signature' && type !== 'static-initialization') {\n      if (type !== 'constructor') {\n        // Constructors have no scope\n        memberGroups.push(`${accessibility}-${scope}-${type}`);\n        memberGroups.push(`${scope}-${type}`);\n        if (type === 'readonly-field') {\n          memberGroups.push(`${accessibility}-${scope}-field`);\n          memberGroups.push(`${scope}-field`);\n        }\n      }\n      memberGroups.push(`${accessibility}-${type}`);\n      if (type === 'readonly-field') {\n        memberGroups.push(`${accessibility}-field`);\n      }\n    }\n  }\n  memberGroups.push(type);\n  if (type === 'readonly-signature') {\n    memberGroups.push('signature');\n  } else if (type === 'readonly-field') {\n    memberGroups.push('field');\n  }\n  // ...then get the rank order for those member groups based on the node\n  return getRankOrder(memberGroups, orderConfig);\n}\n/**\n * Gets the lowest possible rank(s) higher than target.\n * e.g. given the following order:\n *   ...\n *   public-static-method\n *   protected-static-method\n *   private-static-method\n *   public-instance-method\n *   protected-instance-method\n *   private-instance-method\n *   ...\n * and considering that a public-instance-method has already been declared, so ranks contains\n * public-instance-method, then the lowest possible rank for public-static-method is\n * public-instance-method.\n * If a lowest possible rank is a member group, a comma separated list of ranks is returned.\n * @param ranks the existing ranks in the object.\n * @param target the target rank.\n * @param order the current order to be validated.\n * @returns the name(s) of the lowest possible rank without dashes (-).\n */\nfunction getLowestRank(ranks, target, order) {\n  let lowest = ranks[ranks.length - 1];\n  ranks.forEach(rank => {\n    if (rank > target) {\n      lowest = Math.min(lowest, rank);\n    }\n  });\n  const lowestRank = order[lowest];\n  const lowestRanks = Array.isArray(lowestRank) ? lowestRank : [lowestRank];\n  return lowestRanks.map(rank => rank.replace(/-/g, ' ')).join(', ');\n}\nexports.default = util.createRule({\n  name: 'member-ordering',\n  meta: {\n    type: 'suggestion',\n    docs: {\n      description: 'Require a consistent member declaration order',\n      recommended: false\n    },\n    messages: {\n      incorrectOrder: 'Member {{member}} should be declared before member {{beforeMember}}.',\n      incorrectGroupOrder: 'Member {{name}} should be declared before all {{rank}} definitions.',\n      incorrectRequiredMembersOrder: `Member {{member}} should be declared after all {{optionalOrRequired}} members.`\n    },\n    schema: [{\n      type: 'object',\n      properties: {\n        default: {\n          oneOf: [neverConfig, arrayConfig(allMemberTypes), objectConfig(allMemberTypes)]\n        },\n        classes: {\n          oneOf: [neverConfig, arrayConfig(allMemberTypes), objectConfig(allMemberTypes)]\n        },\n        classExpressions: {\n          oneOf: [neverConfig, arrayConfig(allMemberTypes), objectConfig(allMemberTypes)]\n        },\n        interfaces: {\n          oneOf: [neverConfig, arrayConfig(['readonly-signature', 'signature', 'readonly-field', 'field', 'method', 'constructor']), objectConfig(['readonly-signature', 'signature', 'readonly-field', 'field', 'method', 'constructor'])]\n        },\n        typeLiterals: {\n          oneOf: [neverConfig, arrayConfig(['readonly-signature', 'signature', 'readonly-field', 'field', 'method', 'constructor']), objectConfig(['readonly-signature', 'signature', 'readonly-field', 'field', 'method', 'constructor'])]\n        }\n      },\n      additionalProperties: false\n    }]\n  },\n  defaultOptions: [{\n    default: exports.defaultOrder\n  }],\n  create(context, [options]) {\n    /**\n     * Checks if the member groups are correctly sorted.\n     *\n     * @param members Members to be validated.\n     * @param groupOrder Group order to be validated.\n     * @param supportsModifiers A flag indicating whether the type supports modifiers (scope or accessibility) or not.\n     *\n     * @return Array of member groups or null if one of the groups is not correctly sorted.\n     */\n    function checkGroupSort(members, groupOrder, supportsModifiers) {\n      const previousRanks = [];\n      const memberGroups = [];\n      let isCorrectlySorted = true;\n      // Find first member which isn't correctly sorted\n      members.forEach(member => {\n        const rank = getRank(member, groupOrder, supportsModifiers);\n        const name = getMemberName(member, context.getSourceCode());\n        const rankLastMember = previousRanks[previousRanks.length - 1];\n        if (rank === -1) {\n          return;\n        }\n        // Works for 1st item because x < undefined === false for any x (typeof string)\n        if (rank < rankLastMember) {\n          context.report({\n            node: member,\n            messageId: 'incorrectGroupOrder',\n            data: {\n              name,\n              rank: getLowestRank(previousRanks, rank, groupOrder)\n            }\n          });\n          isCorrectlySorted = false;\n        } else if (rank === rankLastMember) {\n          // Same member group --> Push to existing member group array\n          memberGroups[memberGroups.length - 1].push(member);\n        } else {\n          // New member group --> Create new member group array\n          previousRanks.push(rank);\n          memberGroups.push([member]);\n        }\n      });\n      return isCorrectlySorted ? memberGroups : null;\n    }\n    /**\n     * Checks if the members are alphabetically sorted.\n     *\n     * @param members Members to be validated.\n     * @param caseSensitive indicates if the alpha ordering is case sensitive or not.\n     *\n     * @return True if all members are correctly sorted.\n     */\n    function checkAlphaSort(members, order) {\n      let previousName = '';\n      let isCorrectlySorted = true;\n      // Find first member which isn't correctly sorted\n      members.forEach(member => {\n        const name = getMemberName(member, context.getSourceCode());\n        // Note: Not all members have names\n        if (name) {\n          if (naturalOutOfOrder(name, previousName, order)) {\n            context.report({\n              node: member,\n              messageId: 'incorrectOrder',\n              data: {\n                member: name,\n                beforeMember: previousName\n              }\n            });\n            isCorrectlySorted = false;\n          }\n          previousName = name;\n        }\n      });\n      return isCorrectlySorted;\n    }\n    function naturalOutOfOrder(name, previousName, order) {\n      switch (order) {\n        case 'alphabetically':\n          return name < previousName;\n        case 'alphabetically-case-insensitive':\n          return name.toLowerCase() < previousName.toLowerCase();\n        case 'natural':\n          return (0, natural_compare_lite_1.default)(name, previousName) !== 1;\n        case 'natural-case-insensitive':\n          return (0, natural_compare_lite_1.default)(name.toLowerCase(), previousName.toLowerCase()) !== 1;\n      }\n    }\n    /**\n     * Checks if the order of optional and required members is correct based\n     * on the given 'required' parameter.\n     *\n     * @param members Members to be validated.\n     * @param optionalityOrder Where to place optional members, if not intermixed.\n     *\n     * @return True if all required and optional members are correctly sorted.\n     */\n    function checkRequiredOrder(members, optionalityOrder) {\n      const switchIndex = members.findIndex((member, i) => i && isMemberOptional(member) !== isMemberOptional(members[i - 1]));\n      const report = member => context.report({\n        messageId: 'incorrectRequiredMembersOrder',\n        loc: member.loc,\n        data: {\n          member: getMemberName(member, context.getSourceCode()),\n          optionalOrRequired: optionalityOrder === 'required-first' ? 'required' : 'optional'\n        }\n      });\n      // if the optionality of the first item is correct (based on optionalityOrder)\n      // then the first 0 inclusive to switchIndex exclusive members all\n      // have the correct optionality\n      if (isMemberOptional(members[0]) !== (optionalityOrder === 'optional-first')) {\n        report(members[0]);\n        return false;\n      }\n      for (let i = switchIndex + 1; i < members.length; i++) {\n        if (isMemberOptional(members[i]) !== isMemberOptional(members[switchIndex])) {\n          report(members[switchIndex]);\n          return false;\n        }\n      }\n      return true;\n    }\n    /**\n     * Validates if all members are correctly sorted.\n     *\n     * @param members Members to be validated.\n     * @param orderConfig Order config to be validated.\n     * @param supportsModifiers A flag indicating whether the type supports modifiers (scope or accessibility) or not.\n     */\n    function validateMembersOrder(members, orderConfig, supportsModifiers) {\n      if (orderConfig === 'never') {\n        return;\n      }\n      // Standardize config\n      let order;\n      let memberTypes;\n      let optionalityOrder;\n      // returns true if everything is good and false if an error was reported\n      const checkOrder = memberSet => {\n        const hasAlphaSort = !!(order && order !== 'as-written');\n        // Check order\n        if (Array.isArray(memberTypes)) {\n          const grouped = checkGroupSort(memberSet, memberTypes, supportsModifiers);\n          if (grouped == null) {\n            return false;\n          }\n          if (hasAlphaSort) {\n            return !grouped.some(groupMember => !checkAlphaSort(groupMember, order));\n          }\n        } else if (hasAlphaSort) {\n          return checkAlphaSort(memberSet, order);\n        }\n        return true;\n      };\n      if (Array.isArray(orderConfig)) {\n        memberTypes = orderConfig;\n      } else {\n        order = orderConfig.order;\n        memberTypes = orderConfig.memberTypes;\n        optionalityOrder = orderConfig.optionalityOrder;\n      }\n      if (!optionalityOrder) {\n        checkOrder(members);\n        return;\n      }\n      const switchIndex = members.findIndex((member, i) => i && isMemberOptional(member) !== isMemberOptional(members[i - 1]));\n      if (switchIndex !== -1) {\n        if (!checkRequiredOrder(members, optionalityOrder)) {\n          return;\n        }\n        checkOrder(members.slice(0, switchIndex));\n        checkOrder(members.slice(switchIndex));\n      } else {\n        checkOrder(members);\n      }\n    }\n    return {\n      ClassDeclaration(node) {\n        var _a;\n        validateMembersOrder(node.body.body, (_a = options.classes) !== null && _a !== void 0 ? _a : options.default, true);\n      },\n      ClassExpression(node) {\n        var _a;\n        validateMembersOrder(node.body.body, (_a = options.classExpressions) !== null && _a !== void 0 ? _a : options.default, true);\n      },\n      TSInterfaceDeclaration(node) {\n        var _a;\n        validateMembersOrder(node.body.body, (_a = options.interfaces) !== null && _a !== void 0 ? _a : options.default, false);\n      },\n      TSTypeLiteral(node) {\n        var _a;\n        validateMembersOrder(node.members, (_a = options.typeLiterals) !== null && _a !== void 0 ? _a : options.default, false);\n      }\n    };\n  }\n});","map":{"version":3,"names":["utils_1","require","natural_compare_lite_1","__importDefault","util","__importStar","neverConfig","type","enum","arrayConfig","memberTypes","items","oneOf","objectConfig","properties","order","optionalityOrder","additionalProperties","exports","defaultOrder","allMemberTypes","Array","from","reduce","all","add","forEach","accessibility","scope","Set","functionExpressions","AST_NODE_TYPES","FunctionExpression","ArrowFunctionExpression","getNodeType","node","TSAbstractMethodDefinition","MethodDefinition","kind","TSMethodSignature","TSCallSignatureDeclaration","TSConstructSignatureDeclaration","TSAbstractPropertyDefinition","readonly","PropertyDefinition","value","includes","TSPropertySignature","TSIndexSignature","StaticBlock","getMemberRawName","member","sourceCode","name","getNameFromMember","MemberNameType","Quoted","slice","Private","getMemberName","getNameFromIndexSignature","isMemberOptional","optional","getRankOrder","memberGroups","orderConfig","rank","stack","length","memberGroup","shift","findIndex","memberType","isArray","getAccessibility","_a","key","PrivateIdentifier","getRank","supportsModifiers","abstract","static","decorated","decorators","push","getLowestRank","ranks","target","lowest","Math","min","lowestRank","lowestRanks","map","replace","join","default","createRule","meta","docs","description","recommended","messages","incorrectOrder","incorrectGroupOrder","incorrectRequiredMembersOrder","schema","classes","classExpressions","interfaces","typeLiterals","defaultOptions","create","context","options","checkGroupSort","members","groupOrder","previousRanks","isCorrectlySorted","getSourceCode","rankLastMember","report","messageId","data","checkAlphaSort","previousName","naturalOutOfOrder","beforeMember","toLowerCase","checkRequiredOrder","switchIndex","i","loc","optionalOrRequired","validateMembersOrder","checkOrder","memberSet","hasAlphaSort","grouped","some","groupMember","ClassDeclaration","body","ClassExpression","TSInterfaceDeclaration","TSTypeLiteral"],"sources":["../../src/rules/member-ordering.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}