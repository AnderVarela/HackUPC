{"ast":null,"code":"'use strict';\n\nconst assert = require('chai').assert;\nconst modulePath = '../../src/error';\nsuite('error:', () => {\n  let log;\n  setup(() => {\n    log = {};\n  });\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath);\n    });\n  });\n  test('require returns object', () => {\n    assert.isObject(require(modulePath));\n  });\n  suite('require:', () => {\n    let error;\n    setup(() => {\n      error = require(modulePath);\n    });\n    test('error has create method', () => {\n      assert.isFunction(error.create);\n    });\n    test('error has no other methods', () => {\n      assert.lengthOf(Object.keys(error), 1);\n    });\n    test('create expects four arguments', () => {\n      assert.lengthOf(error.create, 4);\n    });\n    test('create does not throw', () => {\n      assert.doesNotThrow(() => {\n        error.create();\n      });\n    });\n    test('create returns Error', () => {\n      assert.instanceOf(error.create(), Error);\n    });\n    suite('create:', () => {\n      let created;\n      setup(() => {\n        created = error.create('foo', 'bar', 'baz', 'qux');\n      });\n      test('created has correct actual property', () => {\n        assert.strictEqual(created.actual, 'foo');\n      });\n      test('created has correct expected property', () => {\n        assert.strictEqual(created.expected, 'bar');\n      });\n      test('created has correct lineNumber property', () => {\n        assert.strictEqual(created.lineNumber, 'baz');\n      });\n      test('created has correct columnNumber property', () => {\n        assert.strictEqual(created.columnNumber, 'qux');\n      });\n      test('created has correct message property', () => {\n        assert.strictEqual(created.message, 'JSON error: encountered `foo` at line baz, column qux where `bar` was expected.');\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","modulePath","suite","log","setup","test","doesNotThrow","isObject","error","isFunction","create","lengthOf","Object","keys","instanceOf","Error","created","strictEqual","actual","expected","lineNumber","columnNumber","message"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/bfj/test/unit/error.js"],"sourcesContent":["'use strict'\n\nconst assert = require('chai').assert\nconst modulePath = '../../src/error'\n\nsuite('error:', () => {\n  let log\n\n  setup(() => {\n    log = {}\n  })\n\n  test('require does not throw', () => {\n    assert.doesNotThrow(() => {\n      require(modulePath)\n    })\n  })\n\n  test('require returns object', () => {\n    assert.isObject(require(modulePath))\n  })\n\n  suite('require:', () => {\n    let error\n\n    setup(() => {\n      error = require(modulePath)\n    })\n\n    test('error has create method', () => {\n      assert.isFunction(error.create)\n    })\n\n    test('error has no other methods', () => {\n      assert.lengthOf(Object.keys(error), 1)\n    })\n\n    test('create expects four arguments', () => {\n      assert.lengthOf(error.create, 4)\n    })\n\n    test('create does not throw', () => {\n      assert.doesNotThrow(() => {\n        error.create()\n      })\n    })\n\n    test('create returns Error', () => {\n      assert.instanceOf(error.create(), Error)\n    })\n\n    suite('create:', () => {\n      let created\n\n      setup(() => {\n        created = error.create('foo', 'bar', 'baz', 'qux')\n      })\n\n      test('created has correct actual property', () => {\n        assert.strictEqual(created.actual, 'foo')\n      })\n\n      test('created has correct expected property', () => {\n        assert.strictEqual(created.expected, 'bar')\n      })\n\n      test('created has correct lineNumber property', () => {\n        assert.strictEqual(created.lineNumber, 'baz')\n      })\n\n      test('created has correct columnNumber property', () => {\n        assert.strictEqual(created.columnNumber, 'qux')\n      })\n\n      test('created has correct message property', () => {\n        assert.strictEqual(created.message, 'JSON error: encountered `foo` at line baz, column qux where `bar` was expected.')\n      })\n    })\n  })\n})\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC,CAACD,MAAM;AACrC,MAAME,UAAU,GAAG,iBAAiB;AAEpCC,KAAK,CAAC,QAAQ,EAAE,MAAM;EACpB,IAAIC,GAAG;EAEPC,KAAK,CAAC,MAAM;IACVD,GAAG,GAAG,CAAC,CAAC;EACV,CAAC,CAAC;EAEFE,IAAI,CAAC,wBAAwB,EAAE,MAAM;IACnCN,MAAM,CAACO,YAAY,CAAC,MAAM;MACxBN,OAAO,CAACC,UAAU,CAAC;IACrB,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFI,IAAI,CAAC,wBAAwB,EAAE,MAAM;IACnCN,MAAM,CAACQ,QAAQ,CAACP,OAAO,CAACC,UAAU,CAAC,CAAC;EACtC,CAAC,CAAC;EAEFC,KAAK,CAAC,UAAU,EAAE,MAAM;IACtB,IAAIM,KAAK;IAETJ,KAAK,CAAC,MAAM;MACVI,KAAK,GAAGR,OAAO,CAACC,UAAU,CAAC;IAC7B,CAAC,CAAC;IAEFI,IAAI,CAAC,yBAAyB,EAAE,MAAM;MACpCN,MAAM,CAACU,UAAU,CAACD,KAAK,CAACE,MAAM,CAAC;IACjC,CAAC,CAAC;IAEFL,IAAI,CAAC,4BAA4B,EAAE,MAAM;MACvCN,MAAM,CAACY,QAAQ,CAACC,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC,CAAC;IAEFH,IAAI,CAAC,+BAA+B,EAAE,MAAM;MAC1CN,MAAM,CAACY,QAAQ,CAACH,KAAK,CAACE,MAAM,EAAE,CAAC,CAAC;IAClC,CAAC,CAAC;IAEFL,IAAI,CAAC,uBAAuB,EAAE,MAAM;MAClCN,MAAM,CAACO,YAAY,CAAC,MAAM;QACxBE,KAAK,CAACE,MAAM,CAAC,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFL,IAAI,CAAC,sBAAsB,EAAE,MAAM;MACjCN,MAAM,CAACe,UAAU,CAACN,KAAK,CAACE,MAAM,CAAC,CAAC,EAAEK,KAAK,CAAC;IAC1C,CAAC,CAAC;IAEFb,KAAK,CAAC,SAAS,EAAE,MAAM;MACrB,IAAIc,OAAO;MAEXZ,KAAK,CAAC,MAAM;QACVY,OAAO,GAAGR,KAAK,CAACE,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;MACpD,CAAC,CAAC;MAEFL,IAAI,CAAC,qCAAqC,EAAE,MAAM;QAChDN,MAAM,CAACkB,WAAW,CAACD,OAAO,CAACE,MAAM,EAAE,KAAK,CAAC;MAC3C,CAAC,CAAC;MAEFb,IAAI,CAAC,uCAAuC,EAAE,MAAM;QAClDN,MAAM,CAACkB,WAAW,CAACD,OAAO,CAACG,QAAQ,EAAE,KAAK,CAAC;MAC7C,CAAC,CAAC;MAEFd,IAAI,CAAC,yCAAyC,EAAE,MAAM;QACpDN,MAAM,CAACkB,WAAW,CAACD,OAAO,CAACI,UAAU,EAAE,KAAK,CAAC;MAC/C,CAAC,CAAC;MAEFf,IAAI,CAAC,2CAA2C,EAAE,MAAM;QACtDN,MAAM,CAACkB,WAAW,CAACD,OAAO,CAACK,YAAY,EAAE,KAAK,CAAC;MACjD,CAAC,CAAC;MAEFhB,IAAI,CAAC,sCAAsC,EAAE,MAAM;QACjDN,MAAM,CAACkB,WAAW,CAACD,OAAO,CAACM,OAAO,EAAE,iFAAiF,CAAC;MACxH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}