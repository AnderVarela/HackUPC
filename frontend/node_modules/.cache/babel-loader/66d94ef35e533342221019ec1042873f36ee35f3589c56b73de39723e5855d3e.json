{"ast":null,"code":"import { filterProps } from './utils';\nimport { FormatError, ErrorCode } from 'intl-messageformat';\nimport { IntlFormatError } from './error';\nvar DISPLAY_NAMES_OPTONS = ['style', 'type', 'fallback', 'languageDisplay'];\nexport function formatDisplayName(_a, getDisplayNames, value, options) {\n  var locale = _a.locale,\n    onError = _a.onError;\n  var DisplayNames = Intl.DisplayNames;\n  if (!DisplayNames) {\n    onError(new FormatError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\", ErrorCode.MISSING_INTL_API));\n  }\n  var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);\n  try {\n    return getDisplayNames(locale, filteredOptions).of(value);\n  } catch (e) {\n    onError(new IntlFormatError('Error formatting display name.', locale, e));\n  }\n}","map":{"version":3,"names":["filterProps","FormatError","ErrorCode","IntlFormatError","DISPLAY_NAMES_OPTONS","formatDisplayName","_a","getDisplayNames","value","options","locale","onError","DisplayNames","Intl","MISSING_INTL_API","filteredOptions","of","e"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@formatjs/intl/lib/src/displayName.js"],"sourcesContent":["import { filterProps } from './utils';\nimport { FormatError, ErrorCode } from 'intl-messageformat';\nimport { IntlFormatError } from './error';\nvar DISPLAY_NAMES_OPTONS = [\n    'style',\n    'type',\n    'fallback',\n    'languageDisplay',\n];\nexport function formatDisplayName(_a, getDisplayNames, value, options) {\n    var locale = _a.locale, onError = _a.onError;\n    var DisplayNames = Intl.DisplayNames;\n    if (!DisplayNames) {\n        onError(new FormatError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\", ErrorCode.MISSING_INTL_API));\n    }\n    var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);\n    try {\n        return getDisplayNames(locale, filteredOptions).of(value);\n    }\n    catch (e) {\n        onError(new IntlFormatError('Error formatting display name.', locale, e));\n    }\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,SAAS;AACrC,SAASC,WAAW,EAAEC,SAAS,QAAQ,oBAAoB;AAC3D,SAASC,eAAe,QAAQ,SAAS;AACzC,IAAIC,oBAAoB,GAAG,CACvB,OAAO,EACP,MAAM,EACN,UAAU,EACV,iBAAiB,CACpB;AACD,OAAO,SAASC,iBAAiBA,CAACC,EAAE,EAAEC,eAAe,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACnE,IAAIC,MAAM,GAAGJ,EAAE,CAACI,MAAM;IAAEC,OAAO,GAAGL,EAAE,CAACK,OAAO;EAC5C,IAAIC,YAAY,GAAGC,IAAI,CAACD,YAAY;EACpC,IAAI,CAACA,YAAY,EAAE;IACfD,OAAO,CAAC,IAAIV,WAAW,CAAC,qHAAqH,EAAEC,SAAS,CAACY,gBAAgB,CAAC,CAAC;EAC/K;EACA,IAAIC,eAAe,GAAGf,WAAW,CAACS,OAAO,EAAEL,oBAAoB,CAAC;EAChE,IAAI;IACA,OAAOG,eAAe,CAACG,MAAM,EAAEK,eAAe,CAAC,CAACC,EAAE,CAACR,KAAK,CAAC;EAC7D,CAAC,CACD,OAAOS,CAAC,EAAE;IACNN,OAAO,CAAC,IAAIR,eAAe,CAAC,gCAAgC,EAAEO,MAAM,EAAEO,CAAC,CAAC,CAAC;EAC7E;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}