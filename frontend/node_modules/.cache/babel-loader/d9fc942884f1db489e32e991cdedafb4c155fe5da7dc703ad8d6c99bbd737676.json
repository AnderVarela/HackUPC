{"ast":null,"code":"let Prefixer = require('./prefixer');\nlet OldValue = require('./old-value');\nlet vendor = require('./vendor');\nlet utils = require('./utils');\nclass Value extends Prefixer {\n  /**\n   * Clone decl for each prefixed values\n   */\n  static save(prefixes, decl) {\n    let prop = decl.prop;\n    let result = [];\n    for (let prefix in decl._autoprefixerValues) {\n      let value = decl._autoprefixerValues[prefix];\n      if (value === decl.value) {\n        continue;\n      }\n      let item;\n      let propPrefix = vendor.prefix(prop);\n      if (propPrefix === '-pie-') {\n        continue;\n      }\n      if (propPrefix === prefix) {\n        item = decl.value = value;\n        result.push(item);\n        continue;\n      }\n      let prefixed = prefixes.prefixed(prop, prefix);\n      let rule = decl.parent;\n      if (!rule.every(i => i.prop !== prefixed)) {\n        result.push(item);\n        continue;\n      }\n      let trimmed = value.replace(/\\s+/, ' ');\n      let already = rule.some(i => i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed);\n      if (already) {\n        result.push(item);\n        continue;\n      }\n      let cloned = this.clone(decl, {\n        value\n      });\n      item = decl.parent.insertBefore(decl, cloned);\n      result.push(item);\n    }\n    return result;\n  }\n\n  /**\n   * Save values with next prefixed token\n   */\n  add(decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {};\n    }\n    let value = decl._autoprefixerValues[prefix] || this.value(decl);\n    let before;\n    do {\n      before = value;\n      value = this.replace(value, prefix);\n      if (value === false) return;\n    } while (value !== before);\n    decl._autoprefixerValues[prefix] = value;\n  }\n\n  /**\n   * Is declaration need to be prefixed\n   */\n  check(decl) {\n    let value = decl.value;\n    if (!value.includes(this.name)) {\n      return false;\n    }\n    return !!value.match(this.regexp());\n  }\n\n  /**\n   * Return function to fast find prefixed value\n   */\n  old(prefix) {\n    return new OldValue(this.name, prefix + this.name);\n  }\n\n  /**\n   * Lazy regexp loading\n   */\n  regexp() {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name));\n  }\n\n  /**\n   * Add prefix to values in string\n   */\n  replace(string, prefix) {\n    return string.replace(this.regexp(), `$1${prefix}$2`);\n  }\n\n  /**\n   * Get value with comments if it was not changed\n   */\n  value(decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw;\n    } else {\n      return decl.value;\n    }\n  }\n}\nmodule.exports = Value;","map":{"version":3,"names":["Prefixer","require","OldValue","vendor","utils","Value","save","prefixes","decl","prop","result","prefix","_autoprefixerValues","value","item","propPrefix","push","prefixed","rule","parent","every","i","trimmed","replace","already","some","cloned","clone","insertBefore","add","before","check","includes","name","match","regexp","old","regexpCache","string","raws","raw","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/autoprefixer/lib/value.js"],"sourcesContent":["let Prefixer = require('./prefixer')\nlet OldValue = require('./old-value')\nlet vendor = require('./vendor')\nlet utils = require('./utils')\n\nclass Value extends Prefixer {\n  /**\n   * Clone decl for each prefixed values\n   */\n  static save(prefixes, decl) {\n    let prop = decl.prop\n    let result = []\n\n    for (let prefix in decl._autoprefixerValues) {\n      let value = decl._autoprefixerValues[prefix]\n\n      if (value === decl.value) {\n        continue\n      }\n\n      let item\n      let propPrefix = vendor.prefix(prop)\n\n      if (propPrefix === '-pie-') {\n        continue\n      }\n\n      if (propPrefix === prefix) {\n        item = decl.value = value\n        result.push(item)\n        continue\n      }\n\n      let prefixed = prefixes.prefixed(prop, prefix)\n      let rule = decl.parent\n\n      if (!rule.every(i => i.prop !== prefixed)) {\n        result.push(item)\n        continue\n      }\n\n      let trimmed = value.replace(/\\s+/, ' ')\n      let already = rule.some(\n        i => i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed\n      )\n\n      if (already) {\n        result.push(item)\n        continue\n      }\n\n      let cloned = this.clone(decl, { value })\n      item = decl.parent.insertBefore(decl, cloned)\n\n      result.push(item)\n    }\n\n    return result\n  }\n\n  /**\n   * Save values with next prefixed token\n   */\n  add(decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {}\n    }\n    let value = decl._autoprefixerValues[prefix] || this.value(decl)\n\n    let before\n    do {\n      before = value\n      value = this.replace(value, prefix)\n      if (value === false) return\n    } while (value !== before)\n\n    decl._autoprefixerValues[prefix] = value\n  }\n\n  /**\n   * Is declaration need to be prefixed\n   */\n  check(decl) {\n    let value = decl.value\n    if (!value.includes(this.name)) {\n      return false\n    }\n\n    return !!value.match(this.regexp())\n  }\n\n  /**\n   * Return function to fast find prefixed value\n   */\n  old(prefix) {\n    return new OldValue(this.name, prefix + this.name)\n  }\n\n  /**\n   * Lazy regexp loading\n   */\n  regexp() {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name))\n  }\n\n  /**\n   * Add prefix to values in string\n   */\n  replace(string, prefix) {\n    return string.replace(this.regexp(), `$1${prefix}$2`)\n  }\n\n  /**\n   * Get value with comments if it was not changed\n   */\n  value(decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw\n    } else {\n      return decl.value\n    }\n  }\n}\n\nmodule.exports = Value\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}