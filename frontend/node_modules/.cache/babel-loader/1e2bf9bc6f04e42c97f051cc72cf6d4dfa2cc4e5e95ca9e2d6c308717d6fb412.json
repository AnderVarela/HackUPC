{"ast":null,"code":"'use strict';\n\nvar common = require('./common');\n\n// get snippet for a single line, respecting maxLength\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n  };\n}\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n  if (!mark.buffer) return null;\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent !== 'number') options.indent = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter !== 'number') options.linesAfter = 2;\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [0];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n  while (match = re.exec(mark.buffer)) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n  var result = '',\n    i,\n    line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n' + result;\n  }\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  }\n  return result.replace(/\\n$/, '');\n}\nmodule.exports = makeSnippet;","map":{"version":3,"names":["common","require","getLine","buffer","lineStart","lineEnd","position","maxLineLength","head","tail","maxHalfLength","Math","floor","length","str","slice","replace","pos","padStart","string","max","repeat","makeSnippet","mark","options","Object","create","maxLength","indent","linesBefore","linesAfter","re","lineStarts","lineEnds","match","foundLineNo","exec","push","index","result","i","line","lineNoLength","min","toString","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@eslint/eslintrc/node_modules/js-yaml/lib/snippet.js"],"sourcesContent":["'use strict';\n\n\nvar common = require('./common');\n\n\n// get snippet for a single line, respecting maxLength\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n  };\n}\n\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n\n  if (!mark.buffer) return null;\n\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent      !== 'number') options.indent      = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\n\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [ 0 ];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while ((match = re.exec(mark.buffer))) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n\n  var result = '', i, line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo - i],\n      lineEnds[foundLineNo - i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),\n      maxLineLength\n    );\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +\n    ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo + i],\n      lineEnds[foundLineNo + i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),\n      maxLineLength\n    );\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\n\nmodule.exports = makeSnippet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}