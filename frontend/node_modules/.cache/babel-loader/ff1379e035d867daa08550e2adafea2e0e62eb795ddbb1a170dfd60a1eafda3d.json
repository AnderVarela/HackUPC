{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.async = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /**\n   * Creates a continuation function with some arguments already applied.\n   *\n   * Useful as a shorthand when combined with other control flow functions. Any\n   * arguments passed to the returned function are added to the arguments\n   * originally passed to apply.\n   *\n   * @name apply\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {Function} fn - The function you want to eventually apply all\n   * arguments to. Invokes with (arguments...).\n   * @param {...*} arguments... - Any number of arguments to automatically apply\n   * when the continuation is called.\n   * @returns {Function} the partially-applied function\n   * @example\n   *\n   * // using apply\n   * async.parallel([\n   *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n   *     async.apply(fs.writeFile, 'testfile2', 'test2')\n   * ]);\n   *\n   *\n   * // the same process without using apply\n   * async.parallel([\n   *     function(callback) {\n   *         fs.writeFile('testfile1', 'test1', callback);\n   *     },\n   *     function(callback) {\n   *         fs.writeFile('testfile2', 'test2', callback);\n   *     }\n   * ]);\n   *\n   * // It's possible to pass any number of additional arguments when calling the\n   * // continuation:\n   *\n   * node> var fn = async.apply(sys.puts, 'one');\n   * node> fn('two', 'three');\n   * one\n   * two\n   * three\n   */\n  function apply(fn, ...args) {\n    return (...callArgs) => fn(...args, ...callArgs);\n  }\n  function initialParams(fn) {\n    return function (...args /*, callback*/) {\n      var callback = args.pop();\n      return fn.call(this, args, callback);\n    };\n  }\n\n  /* istanbul ignore file */\n\n  var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\n  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n  function fallback(fn) {\n    setTimeout(fn, 0);\n  }\n  function wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n  }\n  var _defer$1;\n  if (hasQueueMicrotask) {\n    _defer$1 = queueMicrotask;\n  } else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n  } else if (hasNextTick) {\n    _defer$1 = process.nextTick;\n  } else {\n    _defer$1 = fallback;\n  }\n  var setImmediate$1 = wrap(_defer$1);\n\n  /**\n   * Take a sync function and make it async, passing its return value to a\n   * callback. This is useful for plugging sync functions into a waterfall,\n   * series, or other async functions. Any arguments passed to the generated\n   * function will be passed to the wrapped function (except for the final\n   * callback argument). Errors thrown will be passed to the callback.\n   *\n   * If the function passed to `asyncify` returns a Promise, that promises's\n   * resolved/rejected state will be used to call the callback, rather than simply\n   * the synchronous return value.\n   *\n   * This also means you can asyncify ES2017 `async` functions.\n   *\n   * @name asyncify\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @alias wrapSync\n   * @category Util\n   * @param {Function} func - The synchronous function, or Promise-returning\n   * function to convert to an {@link AsyncFunction}.\n   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n   * invoked with `(args..., callback)`.\n   * @example\n   *\n   * // passing a regular synchronous function\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(JSON.parse),\n   *     function (data, next) {\n   *         // data is the result of parsing the text.\n   *         // If there was a parsing error, it would have been caught.\n   *     }\n   * ], callback);\n   *\n   * // passing a function returning a promise\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(function (contents) {\n   *         return db.model.create(contents);\n   *     }),\n   *     function (model, next) {\n   *         // `model` is the instantiated model object.\n   *         // If there was an error, this function would be skipped.\n   *     }\n   * ], callback);\n   *\n   * // es2017 example, though `asyncify` is not needed if your JS environment\n   * // supports async functions out of the box\n   * var q = async.queue(async.asyncify(async function(file) {\n   *     var intermediateStep = await processFile(file);\n   *     return await somePromise(intermediateStep)\n   * }));\n   *\n   * q.push(files);\n   */\n  function asyncify(func) {\n    if (isAsync(func)) {\n      return function (...args /*, callback*/) {\n        const callback = args.pop();\n        const promise = func.apply(this, args);\n        return handlePromise(promise, callback);\n      };\n    }\n    return initialParams(function (args, callback) {\n      var result;\n      try {\n        result = func.apply(this, args);\n      } catch (e) {\n        return callback(e);\n      }\n      // if result is Promise object\n      if (result && typeof result.then === 'function') {\n        return handlePromise(result, callback);\n      } else {\n        callback(null, result);\n      }\n    });\n  }\n  function handlePromise(promise, callback) {\n    return promise.then(value => {\n      invokeCallback(callback, null, value);\n    }, err => {\n      invokeCallback(callback, err && (err instanceof Error || err.message) ? err : new Error(err));\n    });\n  }\n  function invokeCallback(callback, error, value) {\n    try {\n      callback(error, value);\n    } catch (err) {\n      setImmediate$1(e => {\n        throw e;\n      }, err);\n    }\n  }\n  function isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n  }\n  function isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n  }\n  function isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n  }\n  function wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function');\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n  }\n\n  // conditionally promisify a function.\n  // only return a promise if a callback is omitted\n  function awaitify(asyncFn, arity) {\n    if (!arity) arity = asyncFn.length;\n    if (!arity) throw new Error('arity is undefined');\n    function awaitable(...args) {\n      if (typeof args[arity - 1] === 'function') {\n        return asyncFn.apply(this, args);\n      }\n      return new Promise((resolve, reject) => {\n        args[arity - 1] = (err, ...cbArgs) => {\n          if (err) return reject(err);\n          resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n        };\n        asyncFn.apply(this, args);\n      });\n    }\n    return awaitable;\n  }\n  function applyEach$1(eachfn) {\n    return function applyEach(fns, ...callArgs) {\n      const go = awaitify(function (callback) {\n        var that = this;\n        return eachfn(fns, (fn, cb) => {\n          wrapAsync(fn).apply(that, callArgs.concat(cb));\n        }, callback);\n      });\n      return go;\n    };\n  }\n  function _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n    return eachfn(arr, (value, _, iterCb) => {\n      var index = counter++;\n      _iteratee(value, (err, v) => {\n        results[index] = v;\n        iterCb(err);\n      });\n    }, err => {\n      callback(err, results);\n    });\n  }\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n  }\n\n  // A temporary value used to identify if the loop should be broken.\n  // See #1064, #1293\n  const breakLoop = {};\n  var breakLoop$1 = breakLoop;\n  function once(fn) {\n    function wrapper(...args) {\n      if (fn === null) return;\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper;\n  }\n  function getIterator(coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n  }\n  function createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n      return ++i < len ? {\n        value: coll[i],\n        key: i\n      } : null;\n    };\n  }\n  function createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n      var item = iterator.next();\n      if (item.done) return null;\n      i++;\n      return {\n        value: item.value,\n        key: i\n      };\n    };\n  }\n  function createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n      var key = okeys[++i];\n      if (key === '__proto__') {\n        return next();\n      }\n      return i < len ? {\n        value: obj[key],\n        key\n      } : null;\n    };\n  }\n  function createIterator(coll) {\n    if (isArrayLike(coll)) {\n      return createArrayIterator(coll);\n    }\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n  }\n  function onlyOnce(fn) {\n    return function (...args) {\n      if (fn === null) throw new Error(\"Callback was already called.\");\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, args);\n    };\n  }\n\n  // for async generators\n  function asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n    function replenish() {\n      //console.log('replenish')\n      if (running >= limit || awaiting || done) return;\n      //console.log('replenish awaiting')\n      awaiting = true;\n      generator.next().then(({\n        value,\n        done: iterDone\n      }) => {\n        //console.log('got value', value)\n        if (canceled || done) return;\n        awaiting = false;\n        if (iterDone) {\n          done = true;\n          if (running <= 0) {\n            //console.log('done nextCb')\n            callback(null);\n          }\n          return;\n        }\n        running++;\n        iteratee(value, idx, iterateeCallback);\n        idx++;\n        replenish();\n      }).catch(handleError);\n    }\n    function iterateeCallback(err, result) {\n      //console.log('iterateeCallback')\n      running -= 1;\n      if (canceled) return;\n      if (err) return handleError(err);\n      if (err === false) {\n        done = true;\n        canceled = true;\n        return;\n      }\n      if (result === breakLoop$1 || done && running <= 0) {\n        done = true;\n        //console.log('done iterCb')\n        return callback(null);\n      }\n      replenish();\n    }\n    function handleError(err) {\n      if (canceled) return;\n      awaiting = false;\n      done = true;\n      callback(err);\n    }\n    replenish();\n  }\n  var eachOfLimit$2 = limit => {\n    return (obj, iteratee, callback) => {\n      callback = once(callback);\n      if (limit <= 0) {\n        throw new RangeError('concurrency limit cannot be less than 1');\n      }\n      if (!obj) {\n        return callback(null);\n      }\n      if (isAsyncGenerator(obj)) {\n        return asyncEachOfLimit(obj, limit, iteratee, callback);\n      }\n      if (isAsyncIterable(obj)) {\n        return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback);\n      }\n      var nextElem = createIterator(obj);\n      var done = false;\n      var canceled = false;\n      var running = 0;\n      var looping = false;\n      function iterateeCallback(err, value) {\n        if (canceled) return;\n        running -= 1;\n        if (err) {\n          done = true;\n          callback(err);\n        } else if (err === false) {\n          done = true;\n          canceled = true;\n        } else if (value === breakLoop$1 || done && running <= 0) {\n          done = true;\n          return callback(null);\n        } else if (!looping) {\n          replenish();\n        }\n      }\n      function replenish() {\n        looping = true;\n        while (running < limit && !done) {\n          var elem = nextElem();\n          if (elem === null) {\n            done = true;\n            if (running <= 0) {\n              callback(null);\n            }\n            return;\n          }\n          running += 1;\n          iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n        }\n        looping = false;\n      }\n      replenish();\n    };\n  };\n\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name eachOfLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`. The `key` is the item's key, or index in the case of an\n   * array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function eachOfLimit(coll, limit, iteratee, callback) {\n    return eachOfLimit$2(limit)(coll, wrapAsync(iteratee), callback);\n  }\n  var eachOfLimit$1 = awaitify(eachOfLimit, 4);\n\n  // eachOf implementation optimized for array-likes\n  function eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n      completed = 0,\n      {\n        length\n      } = coll,\n      canceled = false;\n    if (length === 0) {\n      callback(null);\n    }\n    function iteratorCallback(err, value) {\n      if (err === false) {\n        canceled = true;\n      }\n      if (canceled === true) return;\n      if (err) {\n        callback(err);\n      } else if (++completed === length || value === breakLoop$1) {\n        callback(null);\n      }\n    }\n    for (; index < length; index++) {\n      iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n  }\n\n  // a generic version of eachOf which can handle array, object, and iterator cases.\n  function eachOfGeneric(coll, iteratee, callback) {\n    return eachOfLimit$1(coll, Infinity, iteratee, callback);\n  }\n\n  /**\n   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n   * to the iteratee.\n   *\n   * @name eachOf\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEachOf\n   * @category Collection\n   * @see [async.each]{@link module:Collections.each}\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each\n   * item in `coll`.\n   * The `key` is the item's key, or index in the case of an array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * // dev.json is a file containing a valid json object config for dev environment\n   * // dev.json is a file containing a valid json object config for test environment\n   * // prod.json is a file containing a valid json object config for prod environment\n   * // invalid.json is a file with a malformed json object\n   *\n   * let configs = {}; //global variable\n   * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n   * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n   *\n   * // asynchronous function that reads a json file and parses the contents as json object\n   * function parseFile(file, key, callback) {\n   *     fs.readFile(file, \"utf8\", function(err, data) {\n   *         if (err) return calback(err);\n   *         try {\n   *             configs[key] = JSON.parse(data);\n   *         } catch (e) {\n   *             return callback(e);\n   *         }\n   *         callback();\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n   *     if (err) {\n   *         console.error(err);\n   *     } else {\n   *         console.log(configs);\n   *         // configs is now a map of JSON data, e.g.\n   *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n   *     }\n   * });\n   *\n   * //Error handing\n   * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n   *     if (err) {\n   *         console.error(err);\n   *         // JSON parse error exception\n   *     } else {\n   *         console.log(configs);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.forEachOf(validConfigFileMap, parseFile)\n   * .then( () => {\n   *     console.log(configs);\n   *     // configs is now a map of JSON data, e.g.\n   *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n   * }).catch( err => {\n   *     console.error(err);\n   * });\n   *\n   * //Error handing\n   * async.forEachOf(invalidConfigFileMap, parseFile)\n   * .then( () => {\n   *     console.log(configs);\n   * }).catch( err => {\n   *     console.error(err);\n   *     // JSON parse error exception\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n   *         console.log(configs);\n   *         // configs is now a map of JSON data, e.g.\n   *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * //Error handing\n   * async () => {\n   *     try {\n   *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n   *         console.log(configs);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // JSON parse error exception\n   *     }\n   * }\n   *\n   */\n  function eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n  }\n  var eachOf$1 = awaitify(eachOf, 3);\n\n  /**\n   * Produces a new collection of values by mapping each value in `coll` through\n   * the `iteratee` function. The `iteratee` is called with an item from `coll`\n   * and a callback for when it has finished processing. Each of these callbacks\n   * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n   * `iteratee` passes an error to its callback, the main `callback` (for the\n   * `map` function) is immediately called with the error.\n   *\n   * Note, that since this function applies the `iteratee` to each item in\n   * parallel, there is no guarantee that the `iteratee` functions will complete\n   * in order. However, the results array will be in the same order as the\n   * original `coll`.\n   *\n   * If `map` is passed an Object, the results will be an Array.  The results\n   * will roughly be in the order of the original Objects' keys (but this can\n   * vary across JavaScript engines).\n   *\n   * @name map\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an Array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   * // file4.txt does not exist\n   *\n   * const fileList = ['file1.txt','file2.txt','file3.txt'];\n   * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n   *\n   * // asynchronous function that returns the file size in bytes\n   * function getFileSizeInBytes(file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.map(fileList, getFileSizeInBytes, function(err, results) {\n   *     if (err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(results);\n   *         // results is now an array of the file size in bytes for each file, e.g.\n   *         // [ 1000, 2000, 3000]\n   *     }\n   * });\n   *\n   * // Error Handling\n   * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n   *     if (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     } else {\n   *         console.log(results);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.map(fileList, getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   *     // results is now an array of the file size in bytes for each file, e.g.\n   *     // [ 1000, 2000, 3000]\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.map(withMissingFileList, getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.map(fileList, getFileSizeInBytes);\n   *         console.log(results);\n   *         // results is now an array of the file size in bytes for each file, e.g.\n   *         // [ 1000, 2000, 3000]\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n   *         console.log(results);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n  function map(coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback);\n  }\n  var map$1 = awaitify(map, 3);\n\n  /**\n   * Applies the provided arguments to each function in the array, calling\n   * `callback` after all functions have completed. If you only provide the first\n   * argument, `fns`, then it will return a function which lets you pass in the\n   * arguments as if it were a single function call. If more arguments are\n   * provided, `callback` is required while `args` is still optional. The results\n   * for each of the applied async functions are passed to the final callback\n   * as an array.\n   *\n   * @name applyEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n   * to all call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {AsyncFunction} - Returns a function that takes no args other than\n   * an optional callback, that is the result of applying the `args` to each\n   * of the functions.\n   * @example\n   *\n   * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n   *\n   * appliedFn((err, results) => {\n   *     // results[0] is the results for `enableSearch`\n   *     // results[1] is the results for `updateSchema`\n   * });\n   *\n   * // partial application example:\n   * async.each(\n   *     buckets,\n   *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n   *     callback\n   * );\n   */\n  var applyEach = applyEach$1(map$1);\n\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n   *\n   * @name eachOfSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$1(coll, 1, iteratee, callback);\n  }\n  var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n   *\n   * @name mapSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function mapSeries(coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var mapSeries$1 = awaitify(mapSeries, 3);\n\n  /**\n   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n   *\n   * @name applyEachSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n   * call with the same arguments\n   * @param {...*} [args] - any number of separate arguments to pass to the\n   * function.\n   * @param {Function} [callback] - the final argument should be the callback,\n   * called when all functions have completed processing.\n   * @returns {AsyncFunction} - A function, that when called, is the result of\n   * appling the `args` to the list of functions.  It takes no args, other than\n   * a callback.\n   */\n  var applyEachSeries = applyEach$1(mapSeries$1);\n  const PROMISE_SYMBOL = Symbol('promiseCallback');\n  function promiseCallback() {\n    let resolve, reject;\n    function callback(err, ...args) {\n      if (err) return reject(err);\n      resolve(args.length > 1 ? args : args[0]);\n    }\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n      resolve = res, reject = rej;\n    });\n    return callback;\n  }\n\n  /**\n   * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n   * their requirements. Each function can optionally depend on other functions\n   * being completed first, and each function is run as soon as its requirements\n   * are satisfied.\n   *\n   * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n   * will stop. Further tasks will not execute (so any other functions depending\n   * on it will not run), and the main `callback` is immediately called with the\n   * error.\n   *\n   * {@link AsyncFunction}s also receive an object containing the results of functions which\n   * have completed so far as the first argument, if they have dependencies. If a\n   * task function has no dependencies, it will only be passed a callback.\n   *\n   * @name auto\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Object} tasks - An object. Each of its properties is either a\n   * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n   * in the array. The object's key of a property serves as the name of the task\n   * defined by that property, i.e. can be used when specifying requirements for\n   * other tasks. The function receives one or two arguments:\n   * * a `results` object, containing the results of the previously executed\n   *   functions, only passed if the task has any dependencies,\n   * * a `callback(err, result)` function, which must be called when finished,\n   *   passing an `error` (which can be `null`) and the result of the function's\n   *   execution.\n   * @param {number} [concurrency=Infinity] - An optional `integer` for\n   * determining the maximum number of tasks that can be run in parallel. By\n   * default, as many as possible.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback. Results are always returned; however, if an\n   * error occurs, no further `tasks` will be performed, and the results object\n   * will only contain partial results. Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   * @example\n   *\n   * //Using Callbacks\n   * async.auto({\n   *     get_data: function(callback) {\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(results, callback) {\n   *         // once the file is written let's email a link to it...\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *     }]\n   * }, function(err, results) {\n   *     if (err) {\n   *         console.log('err = ', err);\n   *     }\n   *     console.log('results = ', results);\n   *     // results = {\n   *     //     get_data: ['data', 'converted to array']\n   *     //     make_folder; 'folder',\n   *     //     write_file: 'filename'\n   *     //     email_link: { file: 'filename', email: 'user@example.com' }\n   *     // }\n   * });\n   *\n   * //Using Promises\n   * async.auto({\n   *     get_data: function(callback) {\n   *         console.log('in get_data');\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         console.log('in make_folder');\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(results, callback) {\n   *         // once the file is written let's email a link to it...\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *     }]\n   * }).then(results => {\n   *     console.log('results = ', results);\n   *     // results = {\n   *     //     get_data: ['data', 'converted to array']\n   *     //     make_folder; 'folder',\n   *     //     write_file: 'filename'\n   *     //     email_link: { file: 'filename', email: 'user@example.com' }\n   *     // }\n   * }).catch(err => {\n   *     console.log('err = ', err);\n   * });\n   *\n   * //Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.auto({\n   *             get_data: function(callback) {\n   *                 // async code to get some data\n   *                 callback(null, 'data', 'converted to array');\n   *             },\n   *             make_folder: function(callback) {\n   *                 // async code to create a directory to store a file in\n   *                 // this is run at the same time as getting the data\n   *                 callback(null, 'folder');\n   *             },\n   *             write_file: ['get_data', 'make_folder', function(results, callback) {\n   *                 // once there is some data and the directory exists,\n   *                 // write the data to a file in the directory\n   *                 callback(null, 'filename');\n   *             }],\n   *             email_link: ['write_file', function(results, callback) {\n   *                 // once the file is written let's email a link to it...\n   *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n   *             }]\n   *         });\n   *         console.log('results = ', results);\n   *         // results = {\n   *         //     get_data: ['data', 'converted to array']\n   *         //     make_folder; 'folder',\n   *         //     write_file: 'filename'\n   *         //     email_link: { file: 'filename', email: 'user@example.com' }\n   *         // }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n      // concurrency is optional, shift the args.\n      callback = concurrency;\n      concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n      return callback(null);\n    }\n    if (!concurrency) {\n      concurrency = numTasks;\n    }\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n    var listeners = Object.create(null);\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n    Object.keys(tasks).forEach(key => {\n      var task = tasks[key];\n      if (!Array.isArray(task)) {\n        // no dependencies\n        enqueueTask(key, [task]);\n        readyToCheck.push(key);\n        return;\n      }\n      var dependencies = task.slice(0, task.length - 1);\n      var remainingDependencies = dependencies.length;\n      if (remainingDependencies === 0) {\n        enqueueTask(key, task);\n        readyToCheck.push(key);\n        return;\n      }\n      uncheckedDependencies[key] = remainingDependencies;\n      dependencies.forEach(dependencyName => {\n        if (!tasks[dependencyName]) {\n          throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n        }\n        addListener(dependencyName, () => {\n          remainingDependencies--;\n          if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n          }\n        });\n      });\n    });\n    checkForDeadlocks();\n    processQueue();\n    function enqueueTask(key, task) {\n      readyTasks.push(() => runTask(key, task));\n    }\n    function processQueue() {\n      if (canceled) return;\n      if (readyTasks.length === 0 && runningTasks === 0) {\n        return callback(null, results);\n      }\n      while (readyTasks.length && runningTasks < concurrency) {\n        var run = readyTasks.shift();\n        run();\n      }\n    }\n    function addListener(taskName, fn) {\n      var taskListeners = listeners[taskName];\n      if (!taskListeners) {\n        taskListeners = listeners[taskName] = [];\n      }\n      taskListeners.push(fn);\n    }\n    function taskComplete(taskName) {\n      var taskListeners = listeners[taskName] || [];\n      taskListeners.forEach(fn => fn());\n      processQueue();\n    }\n    function runTask(key, task) {\n      if (hasError) return;\n      var taskCallback = onlyOnce((err, ...result) => {\n        runningTasks--;\n        if (err === false) {\n          canceled = true;\n          return;\n        }\n        if (result.length < 2) {\n          [result] = result;\n        }\n        if (err) {\n          var safeResults = {};\n          Object.keys(results).forEach(rkey => {\n            safeResults[rkey] = results[rkey];\n          });\n          safeResults[key] = result;\n          hasError = true;\n          listeners = Object.create(null);\n          if (canceled) return;\n          callback(err, safeResults);\n        } else {\n          results[key] = result;\n          taskComplete(key);\n        }\n      });\n      runningTasks++;\n      var taskFn = wrapAsync(task[task.length - 1]);\n      if (task.length > 1) {\n        taskFn(results, taskCallback);\n      } else {\n        taskFn(taskCallback);\n      }\n    }\n    function checkForDeadlocks() {\n      // Kahn's algorithm\n      // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n      // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n      var currentTask;\n      var counter = 0;\n      while (readyToCheck.length) {\n        currentTask = readyToCheck.pop();\n        counter++;\n        getDependents(currentTask).forEach(dependent => {\n          if (--uncheckedDependencies[dependent] === 0) {\n            readyToCheck.push(dependent);\n          }\n        });\n      }\n      if (counter !== numTasks) {\n        throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n      }\n    }\n    function getDependents(taskName) {\n      var result = [];\n      Object.keys(tasks).forEach(key => {\n        const task = tasks[key];\n        if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n          result.push(key);\n        }\n      });\n      return result;\n    }\n    return callback[PROMISE_SYMBOL];\n  }\n  var FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\n  var ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\n  var FN_ARG_SPLIT = /,/;\n  var FN_ARG = /(=.+)?(\\s*)$/;\n  function stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n      if (string[index] === '/' && string[index + 1] === '/') {\n        // inline comment\n        let endIndex = string.indexOf('\\n', index);\n        index = endIndex === -1 ? string.length : endIndex;\n      } else if (endBlockComment !== -1 && string[index] === '/' && string[index + 1] === '*') {\n        // block comment\n        let endIndex = string.indexOf('*/', index);\n        if (endIndex !== -1) {\n          index = endIndex + 2;\n          endBlockComment = string.indexOf('*/', index);\n        } else {\n          stripped += string[index];\n          index++;\n        }\n      } else {\n        stripped += string[index];\n        index++;\n      }\n    }\n    return stripped;\n  }\n  function parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n      match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src);\n    let [, args] = match;\n    return args.replace(/\\s/g, '').split(FN_ARG_SPLIT).map(arg => arg.replace(FN_ARG, '').trim());\n  }\n\n  /**\n   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n   * tasks are specified as parameters to the function, after the usual callback\n   * parameter, with the parameter names matching the names of the tasks it\n   * depends on. This can provide even more readable task graphs which can be\n   * easier to maintain.\n   *\n   * If a final callback is specified, the task results are similarly injected,\n   * specified as named parameters after the initial error parameter.\n   *\n   * The autoInject function is purely syntactic sugar and its semantics are\n   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n   *\n   * @name autoInject\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.auto]{@link module:ControlFlow.auto}\n   * @category Control Flow\n   * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n   * the form 'func([dependencies...], callback). The object's key of a property\n   * serves as the name of the task defined by that property, i.e. can be used\n   * when specifying requirements for other tasks.\n   * * The `callback` parameter is a `callback(err, result)` which must be called\n   *   when finished, passing an `error` (which can be `null`) and the result of\n   *   the function's execution. The remaining parameters name other tasks on\n   *   which the task is dependent, and the results from those tasks are the\n   *   arguments of those parameters.\n   * @param {Function} [callback] - An optional callback which is called when all\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\n   * pass an error to their callback, and a `results` object with any completed\n   * task results, similar to `auto`.\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * //  The example from `auto` can be rewritten as follows:\n   * async.autoInject({\n   *     get_data: function(callback) {\n   *         // async code to get some data\n   *         callback(null, 'data', 'converted to array');\n   *     },\n   *     make_folder: function(callback) {\n   *         // async code to create a directory to store a file in\n   *         // this is run at the same time as getting the data\n   *         callback(null, 'folder');\n   *     },\n   *     write_file: function(get_data, make_folder, callback) {\n   *         // once there is some data and the directory exists,\n   *         // write the data to a file in the directory\n   *         callback(null, 'filename');\n   *     },\n   *     email_link: function(write_file, callback) {\n   *         // once the file is written let's email a link to it...\n   *         // write_file contains the filename returned by write_file.\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   *\n   * // If you are using a JS minifier that mangles parameter names, `autoInject`\n   * // will not work with plain functions, since the parameter names will be\n   * // collapsed to a single letter identifier.  To work around this, you can\n   * // explicitly specify the names of the parameters your task function needs\n   * // in an array, similar to Angular.js dependency injection.\n   *\n   * // This still has an advantage over plain `auto`, since the results a task\n   * // depends on are still spread into arguments.\n   * async.autoInject({\n   *     //...\n   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n   *         callback(null, 'filename');\n   *     }],\n   *     email_link: ['write_file', function(write_file, callback) {\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\n   *     }]\n   *     //...\n   * }, function(err, results) {\n   *     console.log('err = ', err);\n   *     console.log('email_link = ', results.email_link);\n   * });\n   */\n  function autoInject(tasks, callback) {\n    var newTasks = {};\n    Object.keys(tasks).forEach(key => {\n      var taskFn = tasks[key];\n      var params;\n      var fnIsAsync = isAsync(taskFn);\n      var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;\n      if (Array.isArray(taskFn)) {\n        params = [...taskFn];\n        taskFn = params.pop();\n        newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n      } else if (hasNoDeps) {\n        // no dependencies, use the function as-is\n        newTasks[key] = taskFn;\n      } else {\n        params = parseParams(taskFn);\n        if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n          throw new Error(\"autoInject task functions require explicit parameters.\");\n        }\n\n        // remove callback param\n        if (!fnIsAsync) params.pop();\n        newTasks[key] = params.concat(newTask);\n      }\n      function newTask(results, taskCb) {\n        var newArgs = params.map(name => results[name]);\n        newArgs.push(taskCb);\n        wrapAsync(taskFn)(...newArgs);\n      }\n    });\n    return auto(newTasks, callback);\n  }\n\n  // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n  // used for queues. This implementation assumes that the node provided by the user can be modified\n  // to adjust the next and last properties. We implement only the minimal functionality\n  // for queue support.\n  class DLL {\n    constructor() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n    removeLink(node) {\n      if (node.prev) node.prev.next = node.next;else this.head = node.next;\n      if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n      node.prev = node.next = null;\n      this.length -= 1;\n      return node;\n    }\n    empty() {\n      while (this.head) this.shift();\n      return this;\n    }\n    insertAfter(node, newNode) {\n      newNode.prev = node;\n      newNode.next = node.next;\n      if (node.next) node.next.prev = newNode;else this.tail = newNode;\n      node.next = newNode;\n      this.length += 1;\n    }\n    insertBefore(node, newNode) {\n      newNode.prev = node.prev;\n      newNode.next = node;\n      if (node.prev) node.prev.next = newNode;else this.head = newNode;\n      node.prev = newNode;\n      this.length += 1;\n    }\n    unshift(node) {\n      if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n    }\n    push(node) {\n      if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n    }\n    shift() {\n      return this.head && this.removeLink(this.head);\n    }\n    pop() {\n      return this.tail && this.removeLink(this.tail);\n    }\n    toArray() {\n      return [...this];\n    }\n    *[Symbol.iterator]() {\n      var cur = this.head;\n      while (cur) {\n        yield cur.data;\n        cur = cur.next;\n      }\n    }\n    remove(testFn) {\n      var curr = this.head;\n      while (curr) {\n        var {\n          next\n        } = curr;\n        if (testFn(curr)) {\n          this.removeLink(curr);\n        }\n        curr = next;\n      }\n      return this;\n    }\n  }\n  function setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n  }\n  function queue$1(worker, concurrency, payload) {\n    if (concurrency == null) {\n      concurrency = 1;\n    } else if (concurrency === 0) {\n      throw new RangeError('Concurrency must not be zero');\n    }\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n      error: [],\n      drain: [],\n      saturated: [],\n      unsaturated: [],\n      empty: []\n    };\n    function on(event, handler) {\n      events[event].push(handler);\n    }\n    function once(event, handler) {\n      const handleAndRemove = (...args) => {\n        off(event, handleAndRemove);\n        handler(...args);\n      };\n      events[event].push(handleAndRemove);\n    }\n    function off(event, handler) {\n      if (!event) return Object.keys(events).forEach(ev => events[ev] = []);\n      if (!handler) return events[event] = [];\n      events[event] = events[event].filter(ev => ev !== handler);\n    }\n    function trigger(event, ...args) {\n      events[event].forEach(handler => handler(...args));\n    }\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n      if (callback != null && typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n      q.started = true;\n      var res, rej;\n      function promiseCallback(err, ...args) {\n        // we don't care about the error, let the global error handler\n        // deal with it\n        if (err) return rejectOnError ? rej(err) : res();\n        if (args.length <= 1) return res(args[0]);\n        res(args);\n      }\n      var item = q._createTaskItem(data, rejectOnError ? promiseCallback : callback || promiseCallback);\n      if (insertAtFront) {\n        q._tasks.unshift(item);\n      } else {\n        q._tasks.push(item);\n      }\n      if (!processingScheduled) {\n        processingScheduled = true;\n        setImmediate$1(() => {\n          processingScheduled = false;\n          q.process();\n        });\n      }\n      if (rejectOnError || !callback) {\n        return new Promise((resolve, reject) => {\n          res = resolve;\n          rej = reject;\n        });\n      }\n    }\n    function _createCB(tasks) {\n      return function (err, ...args) {\n        numRunning -= 1;\n        for (var i = 0, l = tasks.length; i < l; i++) {\n          var task = tasks[i];\n          var index = workersList.indexOf(task);\n          if (index === 0) {\n            workersList.shift();\n          } else if (index > 0) {\n            workersList.splice(index, 1);\n          }\n          task.callback(err, ...args);\n          if (err != null) {\n            trigger('error', err, task.data);\n          }\n        }\n        if (numRunning <= q.concurrency - q.buffer) {\n          trigger('unsaturated');\n        }\n        if (q.idle()) {\n          trigger('drain');\n        }\n        q.process();\n      };\n    }\n    function _maybeDrain(data) {\n      if (data.length === 0 && q.idle()) {\n        // call drain immediately if there are no tasks\n        setImmediate$1(() => trigger('drain'));\n        return true;\n      }\n      return false;\n    }\n    const eventMethod = name => handler => {\n      if (!handler) {\n        return new Promise((resolve, reject) => {\n          once(name, (err, data) => {\n            if (err) return reject(err);\n            resolve(data);\n          });\n        });\n      }\n      off(name);\n      on(name, handler);\n    };\n    var isProcessing = false;\n    var q = {\n      _tasks: new DLL(),\n      _createTaskItem(data, callback) {\n        return {\n          data,\n          callback\n        };\n      },\n      *[Symbol.iterator]() {\n        yield* q._tasks[Symbol.iterator]();\n      },\n      concurrency,\n      payload,\n      buffer: concurrency / 4,\n      started: false,\n      paused: false,\n      push(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, false, false, callback));\n        }\n        return _insert(data, false, false, callback);\n      },\n      pushAsync(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, false, true, callback));\n        }\n        return _insert(data, false, true, callback);\n      },\n      kill() {\n        off();\n        q._tasks.empty();\n      },\n      unshift(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, true, false, callback));\n        }\n        return _insert(data, true, false, callback);\n      },\n      unshiftAsync(data, callback) {\n        if (Array.isArray(data)) {\n          if (_maybeDrain(data)) return;\n          return data.map(datum => _insert(datum, true, true, callback));\n        }\n        return _insert(data, true, true, callback);\n      },\n      remove(testFn) {\n        q._tasks.remove(testFn);\n      },\n      process() {\n        // Avoid trying to start too many processing operations. This can occur\n        // when callbacks resolve synchronously (#1267).\n        if (isProcessing) {\n          return;\n        }\n        isProcessing = true;\n        while (!q.paused && numRunning < q.concurrency && q._tasks.length) {\n          var tasks = [],\n            data = [];\n          var l = q._tasks.length;\n          if (q.payload) l = Math.min(l, q.payload);\n          for (var i = 0; i < l; i++) {\n            var node = q._tasks.shift();\n            tasks.push(node);\n            workersList.push(node);\n            data.push(node.data);\n          }\n          numRunning += 1;\n          if (q._tasks.length === 0) {\n            trigger('empty');\n          }\n          if (numRunning === q.concurrency) {\n            trigger('saturated');\n          }\n          var cb = onlyOnce(_createCB(tasks));\n          _worker(data, cb);\n        }\n        isProcessing = false;\n      },\n      length() {\n        return q._tasks.length;\n      },\n      running() {\n        return numRunning;\n      },\n      workersList() {\n        return workersList;\n      },\n      idle() {\n        return q._tasks.length + numRunning === 0;\n      },\n      pause() {\n        q.paused = true;\n      },\n      resume() {\n        if (q.paused === false) {\n          return;\n        }\n        q.paused = false;\n        setImmediate$1(q.process);\n      }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n      saturated: {\n        writable: false,\n        value: eventMethod('saturated')\n      },\n      unsaturated: {\n        writable: false,\n        value: eventMethod('unsaturated')\n      },\n      empty: {\n        writable: false,\n        value: eventMethod('empty')\n      },\n      drain: {\n        writable: false,\n        value: eventMethod('drain')\n      },\n      error: {\n        writable: false,\n        value: eventMethod('error')\n      }\n    });\n    return q;\n  }\n\n  /**\n   * Creates a `cargo` object with the specified payload. Tasks added to the\n   * cargo will be processed altogether (up to the `payload` limit). If the\n   * `worker` is in progress, the task is queued until it becomes available. Once\n   * the `worker` has completed some tasks, each callback of those tasks is\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n   * for how `cargo` and `queue` work.\n   *\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n   * at a time, cargo passes an array of tasks to a single worker, repeating\n   * when the worker is finished.\n   *\n   * @name cargo\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\n   * of queued tasks. Invoked with `(tasks, callback)`.\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\n   * how many tasks should be processed per round; if omitted, the default is\n   * unlimited.\n   * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the cargo and inner queue.\n   * @example\n   *\n   * // create a cargo object with payload 2\n   * var cargo = async.cargo(function(tasks, callback) {\n   *     for (var i=0; i<tasks.length; i++) {\n   *         console.log('hello ' + tasks[i].name);\n   *     }\n   *     callback();\n   * }, 2);\n   *\n   * // add some items\n   * cargo.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * cargo.push({name: 'bar'}, function(err) {\n   *     console.log('finished processing bar');\n   * });\n   * await cargo.push({name: 'baz'});\n   * console.log('finished processing baz');\n   */\n  function cargo$1(worker, payload) {\n    return queue$1(worker, 1, payload);\n  }\n\n  /**\n   * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n   * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n   * If the all `workers` are in progress, the task is queued until one becomes available. Once\n   * a `worker` has completed some tasks, each callback of those tasks is\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n   * for how `cargo` and `queue` work.\n   *\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n   * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n   * the cargoQueue passes an array of tasks to multiple parallel workers.\n   *\n   * @name cargoQueue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @see [async.cargo]{@link module:ControlFLow.cargo}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\n   * of queued tasks. Invoked with `(tasks, callback)`.\n   * @param {number} [concurrency=1] - An `integer` for determining how many\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\n   * how many tasks should be processed per round; if omitted, the default is\n   * unlimited.\n   * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the cargoQueue and inner queue.\n   * @example\n   *\n   * // create a cargoQueue object with payload 2 and concurrency 2\n   * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n   *     for (var i=0; i<tasks.length; i++) {\n   *         console.log('hello ' + tasks[i].name);\n   *     }\n   *     callback();\n   * }, 2, 2);\n   *\n   * // add some items\n   * cargoQueue.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * cargoQueue.push({name: 'bar'}, function(err) {\n   *     console.log('finished processing bar');\n   * });\n   * cargoQueue.push({name: 'baz'}, function(err) {\n   *     console.log('finished processing baz');\n   * });\n   * cargoQueue.push({name: 'boo'}, function(err) {\n   *     console.log('finished processing boo');\n   * });\n   */\n  function cargo(worker, concurrency, payload) {\n    return queue$1(worker, concurrency, payload);\n  }\n\n  /**\n   * Reduces `coll` into a single value using an async `iteratee` to return each\n   * successive step. `memo` is the initial state of the reduction. This function\n   * only operates in series.\n   *\n   * For performance reasons, it may make sense to split a call to this function\n   * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n   * results. This function is for situations where each step in the reduction\n   * needs to be async; if you can get the data before reducing it, then it's\n   * probably a good idea to do so.\n   *\n   * @name reduce\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias inject\n   * @alias foldl\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee completes with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   * // file4.txt does not exist\n   *\n   * const fileList = ['file1.txt','file2.txt','file3.txt'];\n   * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n   *\n   * // asynchronous function that computes the file size in bytes\n   * // file size is added to the memoized value, then returned\n   * function getFileSizeInBytes(memo, file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, memo + stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // 6000\n   *         // which is the sum of the file sizes of the three files\n   *     }\n   * });\n   *\n   * // Error Handling\n   * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     } else {\n   *         console.log(result);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.reduce(fileList, 0, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   *     // 6000\n   *     // which is the sum of the file sizes of the three files\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n   *         console.log(result);\n   *         // 6000\n   *         // which is the sum of the file sizes of the three files\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n   *         console.log(result);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n  function reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n      _iteratee(memo, x, (err, v) => {\n        memo = v;\n        iterCb(err);\n      });\n    }, err => callback(err, memo));\n  }\n  var reduce$1 = awaitify(reduce, 4);\n\n  /**\n   * Version of the compose function that is more natural to read. Each function\n   * consumes the return value of the previous function. It is the equivalent of\n   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name seq\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.compose]{@link module:ControlFlow.compose}\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} a function that composes the `functions` in order\n   * @example\n   *\n   * // Requires lodash (or underscore), express3 and dresende's orm2.\n   * // Part of an app, that fetches cats of the logged user.\n   * // This example uses `seq` function to avoid overnesting and error\n   * // handling clutter.\n   * app.get('/cats', function(request, response) {\n   *     var User = request.models.User;\n   *     async.seq(\n   *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n   *         function(user, fn) {\n   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n   *         }\n   *     )(req.session.user_id, function (err, cats) {\n   *         if (err) {\n   *             console.error(err);\n   *             response.json({ status: 'error', message: err.message });\n   *         } else {\n   *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n   *         }\n   *     });\n   * });\n   */\n  function seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n      var that = this;\n      var cb = args[args.length - 1];\n      if (typeof cb == 'function') {\n        args.pop();\n      } else {\n        cb = promiseCallback();\n      }\n      reduce$1(_functions, args, (newargs, fn, iterCb) => {\n        fn.apply(that, newargs.concat((err, ...nextargs) => {\n          iterCb(err, nextargs);\n        }));\n      }, (err, results) => cb(err, ...results));\n      return cb[PROMISE_SYMBOL];\n    };\n  }\n\n  /**\n   * Creates a function which is a composition of the passed asynchronous\n   * functions. Each function consumes the return value of the function that\n   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n   *\n   * If the last argument to the composed function is not a function, a promise\n   * is returned when you call it.\n   *\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @name compose\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\n   * @returns {Function} an asynchronous function that is the composed\n   * asynchronous `functions`\n   * @example\n   *\n   * function add1(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n + 1);\n   *     }, 10);\n   * }\n   *\n   * function mul3(n, callback) {\n   *     setTimeout(function () {\n   *         callback(null, n * 3);\n   *     }, 10);\n   * }\n   *\n   * var add1mul3 = async.compose(mul3, add1);\n   * add1mul3(4, function (err, result) {\n   *     // result now equals 15\n   * });\n   */\n  function compose(...args) {\n    return seq(...args.reverse());\n  }\n\n  /**\n   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name mapLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with the transformed item.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Results is an array of the\n   * transformed items from the `coll`. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function mapLimit(coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit$2(limit), coll, iteratee, callback);\n  }\n  var mapLimit$1 = awaitify(mapLimit, 4);\n\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name concatLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @alias flatMapLimit\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @returns A Promise, if no callback is passed\n   */\n  function concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n      _iteratee(val, (err, ...args) => {\n        if (err) return iterCb(err);\n        return iterCb(err, args);\n      });\n    }, (err, mapResults) => {\n      var result = [];\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          result = result.concat(...mapResults[i]);\n        }\n      }\n      return callback(err, result);\n    });\n  }\n  var concatLimit$1 = awaitify(concatLimit, 4);\n\n  /**\n   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n   * the concatenated list. The `iteratee`s are called in parallel, and the\n   * results are concatenated as they return. The results array will be returned in\n   * the original order of `coll` passed to the `iteratee` function.\n   *\n   * @name concat\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @alias flatMap\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n   * which should use an array as its result. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @returns A Promise, if no callback is passed\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * let directoryList = ['dir1','dir2','dir3'];\n   * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n   *\n   * // Using callbacks\n   * async.concat(directoryList, fs.readdir, function(err, results) {\n   *    if (err) {\n   *        console.log(err);\n   *    } else {\n   *        console.log(results);\n   *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n   *    }\n   * });\n   *\n   * // Error Handling\n   * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n   *    if (err) {\n   *        console.log(err);\n   *        // [ Error: ENOENT: no such file or directory ]\n   *        // since dir4 does not exist\n   *    } else {\n   *        console.log(results);\n   *    }\n   * });\n   *\n   * // Using Promises\n   * async.concat(directoryList, fs.readdir)\n   * .then(results => {\n   *     console.log(results);\n   *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n   * }).catch(err => {\n   *      console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.concat(withMissingDirectoryList, fs.readdir)\n   * .then(results => {\n   *     console.log(results);\n   * }).catch(err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   *     // since dir4 does not exist\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.concat(directoryList, fs.readdir);\n   *         console.log(results);\n   *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n   *     } catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n   *         console.log(results);\n   *     } catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *         // since dir4 does not exist\n   *     }\n   * }\n   *\n   */\n  function concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback);\n  }\n  var concat$1 = awaitify(concat, 3);\n\n  /**\n   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n   *\n   * @name concatSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.concat]{@link module:Collections.concat}\n   * @category Collection\n   * @alias flatMapSeries\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n   * The iteratee should complete with an array an array of results.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is an array\n   * containing the concatenated results of the `iteratee` function. Invoked with\n   * (err, results).\n   * @returns A Promise, if no callback is passed\n   */\n  function concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback);\n  }\n  var concatSeries$1 = awaitify(concatSeries, 3);\n\n  /**\n   * Returns a function that when called, calls-back with the values provided.\n   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n   * [`auto`]{@link module:ControlFlow.auto}.\n   *\n   * @name constant\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {...*} arguments... - Any number of arguments to automatically invoke\n   * callback with.\n   * @returns {AsyncFunction} Returns a function that when invoked, automatically\n   * invokes the callback with the previous given arguments.\n   * @example\n   *\n   * async.waterfall([\n   *     async.constant(42),\n   *     function (value, next) {\n   *         // value === 42\n   *     },\n   *     //...\n   * ], callback);\n   *\n   * async.waterfall([\n   *     async.constant(filename, \"utf8\"),\n   *     fs.readFile,\n   *     function (fileData, next) {\n   *         //...\n   *     }\n   *     //...\n   * ], callback);\n   *\n   * async.auto({\n   *     hostname: async.constant(\"https://server.net/\"),\n   *     port: findFreePort,\n   *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n   *         startServer(options, cb);\n   *     }],\n   *     //...\n   * }, callback);\n   */\n  function constant$1(...args) {\n    return function (...ignoredArgs /*, callback*/) {\n      var callback = ignoredArgs.pop();\n      return callback(null, ...args);\n    };\n  }\n  function _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n      var testPassed = false;\n      var testResult;\n      const iteratee = wrapAsync(_iteratee);\n      eachfn(arr, (value, _, callback) => {\n        iteratee(value, (err, result) => {\n          if (err || err === false) return callback(err);\n          if (check(result) && !testResult) {\n            testPassed = true;\n            testResult = getResult(true, value);\n            return callback(null, breakLoop$1);\n          }\n          callback();\n        });\n      }, err => {\n        if (err) return cb(err);\n        cb(null, testPassed ? testResult : getResult(false));\n      });\n    };\n  }\n\n  /**\n   * Returns the first value in `coll` that passes an async truth test. The\n   * `iteratee` is applied in parallel, meaning the first iteratee to return\n   * `true` will fire the detect `callback` with that result. That means the\n   * result might not be the first item in the original `coll` (in terms of order)\n   * that passes the test.\n    * If order within the original `coll` is important, then look at\n   * [`detectSeries`]{@link module:Collections.detectSeries}.\n   *\n   * @name detect\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias find\n   * @category Collections\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n   *    function(err, result) {\n   *        console.log(result);\n   *        // dir1/file1.txt\n   *        // result now equals the first file in the list that exists\n   *    }\n   *);\n   *\n   * // Using Promises\n   * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n   * .then(result => {\n   *     console.log(result);\n   *     // dir1/file1.txt\n   *     // result now equals the first file in the list that exists\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n   *         console.log(result);\n   *         // dir1/file1.txt\n   *         // result now equals the file in the list that exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback);\n  }\n  var detect$1 = awaitify(detect, 3);\n\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name detectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findLimit\n   * @category Collections\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit$2(limit), coll, iteratee, callback);\n  }\n  var detectLimit$1 = awaitify(detectLimit, 4);\n\n  /**\n   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n   *\n   * @name detectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.detect]{@link module:Collections.detect}\n   * @alias findSeries\n   * @category Collections\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n   * The iteratee must complete with a boolean value as its result.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\n   * Result will be the first item in the array that passes the truth test\n   * (iteratee) or the value `undefined` if none passed. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit$2(1), coll, iteratee, callback);\n  }\n  var detectSeries$1 = awaitify(detectSeries, 3);\n  function consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n      /* istanbul ignore else */\n      if (typeof console === 'object') {\n        /* istanbul ignore else */\n        if (err) {\n          /* istanbul ignore else */\n          if (console.error) {\n            console.error(err);\n          }\n        } else if (console[name]) {\n          /* istanbul ignore else */\n          resultArgs.forEach(x => console[name](x));\n        }\n      }\n    });\n  }\n\n  /**\n   * Logs the result of an [`async` function]{@link AsyncFunction} to the\n   * `console` using `console.dir` to display the properties of the resulting object.\n   * Only works in Node.js or in browsers that support `console.dir` and\n   * `console.error` (such as FF and Chrome).\n   * If multiple arguments are returned from the async function,\n   * `console.dir` is called on each argument in order.\n   *\n   * @name dir\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, {hello: name});\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.dir(hello, 'world');\n   * {hello: 'world'}\n   */\n  var dir = consoleFunc('dir');\n\n  /**\n   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n   * the order of operations, the arguments `test` and `iteratee` are switched.\n   *\n   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n   *\n   * @name doWhilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - A function which is called each time `test`\n   * passes. Invoked with (callback).\n   * @param {AsyncFunction} test - asynchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n   * non-error args from the previous callback of `iteratee`.\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped.\n   * `callback` will be passed an error and any arguments passed to the final\n   * `iteratee`'s callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n    function next(err, ...args) {\n      if (err) return callback(err);\n      if (err === false) return;\n      results = args;\n      _test(...args, check);\n    }\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (err === false) return;\n      if (!truth) return callback(null, ...results);\n      _fn(next);\n    }\n    return check(null, true);\n  }\n  var doWhilst$1 = awaitify(doWhilst, 3);\n\n  /**\n   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n   * argument ordering differs from `until`.\n   *\n   * @name doUntil\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n   * @category Control Flow\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {AsyncFunction} test - asynchronous truth test to perform after each\n   * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n   * non-error args from the previous callback of `iteratee`\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n      const cb = args.pop();\n      _test(...args, (err, truth) => cb(err, !truth));\n    }, callback);\n  }\n  function _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n  }\n\n  /**\n   * Applies the function `iteratee` to each item in `coll`, in parallel.\n   * The `iteratee` is called with an item from the list, and a callback for when\n   * it has finished. If the `iteratee` passes an error to its `callback`, the\n   * main `callback` (for the `each` function) is immediately called with the\n   * error.\n   *\n   * Note, that since this function applies `iteratee` to each item in parallel,\n   * there is no guarantee that the iteratee functions will complete in order.\n   *\n   * @name each\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEach\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to\n   * each item in `coll`. Invoked with (item, callback).\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOf`.\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n   * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n   *\n   * // asynchronous function that deletes a file\n   * const deleteFile = function(file, callback) {\n   *     fs.unlink(file, callback);\n   * };\n   *\n   * // Using callbacks\n   * async.each(fileList, deleteFile, function(err) {\n   *     if( err ) {\n   *         console.log(err);\n   *     } else {\n   *         console.log('All files have been deleted successfully');\n   *     }\n   * });\n   *\n   * // Error Handling\n   * async.each(withMissingFileList, deleteFile, function(err){\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   *     // since dir4/file2.txt does not exist\n   *     // dir1/file1.txt could have been deleted\n   * });\n   *\n   * // Using Promises\n   * async.each(fileList, deleteFile)\n   * .then( () => {\n   *     console.log('All files have been deleted successfully');\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.each(fileList, deleteFile)\n   * .then( () => {\n   *     console.log('All files have been deleted successfully');\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   *     // since dir4/file2.txt does not exist\n   *     // dir1/file1.txt could have been deleted\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         await async.each(files, deleteFile);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         await async.each(withMissingFileList, deleteFile);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *         // since dir4/file2.txt does not exist\n   *         // dir1/file1.txt could have been deleted\n   *     }\n   * }\n   *\n   */\n  function eachLimit$2(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  var each = awaitify(eachLimit$2, 3);\n\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name eachLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfLimit`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function eachLimit(coll, limit, iteratee, callback) {\n    return eachOfLimit$2(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n  var eachLimit$1 = awaitify(eachLimit, 4);\n\n  /**\n   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n   *\n   * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n   * in series and therefore the iteratee functions will complete in order.\n    * @name eachSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.each]{@link module:Collections.each}\n   * @alias forEachSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`.\n   * The array index is not passed to the iteratee.\n   * If you need the index, use `eachOfSeries`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n  function eachSeries(coll, iteratee, callback) {\n    return eachLimit$1(coll, 1, iteratee, callback);\n  }\n  var eachSeries$1 = awaitify(eachSeries, 3);\n\n  /**\n   * Wrap an async function and ensure it calls its callback on a later tick of\n   * the event loop.  If the function already calls its callback on a next tick,\n   * no extra deferral is added. This is useful for preventing stack overflows\n   * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n   * contained. ES2017 `async` functions are returned as-is -- they are immune\n   * to Zalgo's corrupting influences, as they always resolve on a later tick.\n   *\n   * @name ensureAsync\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - an async function, one that expects a node-style\n   * callback as its last argument.\n   * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n   * signature as the function passed in.\n   * @example\n   *\n   * function sometimesAsync(arg, callback) {\n   *     if (cache[arg]) {\n   *         return callback(null, cache[arg]); // this would be synchronous!!\n   *     } else {\n   *         doSomeIO(arg, callback); // this IO would be asynchronous\n   *     }\n   * }\n   *\n   * // this has a risk of stack overflows if many results are cached in a row\n   * async.mapSeries(args, sometimesAsync, done);\n   *\n   * // this will defer sometimesAsync's callback if necessary,\n   * // preventing stack overflows\n   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n   */\n  function ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args /*, callback*/) {\n      var callback = args.pop();\n      var sync = true;\n      args.push((...innerArgs) => {\n        if (sync) {\n          setImmediate$1(() => callback(...innerArgs));\n        } else {\n          callback(...innerArgs);\n        }\n      });\n      fn.apply(this, args);\n      sync = false;\n    };\n  }\n\n  /**\n   * Returns `true` if every element in `coll` satisfies an async test. If any\n   * iteratee call returns `false`, the main `callback` is immediately called.\n   *\n   * @name every\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias all\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n   * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.every(fileList, fileExists, function(err, result) {\n   *     console.log(result);\n   *     // true\n   *     // result is true since every file exists\n   * });\n   *\n   * async.every(withMissingFileList, fileExists, function(err, result) {\n   *     console.log(result);\n   *     // false\n   *     // result is false since NOT every file exists\n   * });\n   *\n   * // Using Promises\n   * async.every(fileList, fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // true\n   *     // result is true since every file exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * async.every(withMissingFileList, fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // false\n   *     // result is false since NOT every file exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.every(fileList, fileExists);\n   *         console.log(result);\n   *         // true\n   *         // result is true since every file exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * async () => {\n   *     try {\n   *         let result = await async.every(withMissingFileList, fileExists);\n   *         console.log(result);\n   *         // false\n   *         // result is false since NOT every file exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback);\n  }\n  var every$1 = awaitify(every, 3);\n\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name everyLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in parallel.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit$2(limit), coll, iteratee, callback);\n  }\n  var everyLimit$1 = awaitify(everyLimit, 4);\n\n  /**\n   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n   *\n   * @name everySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.every]{@link module:Collections.every}\n   * @alias allSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collection in series.\n   * The iteratee must complete with a boolean result value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result will be either `true` or `false`\n   * depending on the values of the async tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var everySeries$1 = awaitify(everySeries, 3);\n  function filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n      iteratee(x, (err, v) => {\n        truthValues[index] = !!v;\n        iterCb(err);\n      });\n    }, err => {\n      if (err) return callback(err);\n      var results = [];\n      for (var i = 0; i < arr.length; i++) {\n        if (truthValues[i]) results.push(arr[i]);\n      }\n      callback(null, results);\n    });\n  }\n  function filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n      iteratee(x, (err, v) => {\n        if (err) return iterCb(err);\n        if (v) {\n          results.push({\n            index,\n            value: x\n          });\n        }\n        iterCb(err);\n      });\n    }, err => {\n      if (err) return callback(err);\n      callback(null, results.sort((a, b) => a.index - b.index).map(v => v.value));\n    });\n  }\n  function _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n  }\n\n  /**\n   * Returns a new array of all the values in `coll` which pass an async truth\n   * test. This operation is performed in parallel, but the results array will be\n   * in the same order as the original.\n   *\n   * @name filter\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias select\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   *\n   * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.filter(files, fileExists, function(err, results) {\n   *    if(err) {\n   *        console.log(err);\n   *    } else {\n   *        console.log(results);\n   *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n   *        // results is now an array of the existing files\n   *    }\n   * });\n   *\n   * // Using Promises\n   * async.filter(files, fileExists)\n   * .then(results => {\n   *     console.log(results);\n   *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n   *     // results is now an array of the existing files\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.filter(files, fileExists);\n   *         console.log(results);\n   *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n   *         // results is now an array of the existing files\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function filter(coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback);\n  }\n  var filter$1 = awaitify(filter, 3);\n\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name filterLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function filterLimit(coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit$2(limit), coll, iteratee, callback);\n  }\n  var filterLimit$1 = awaitify(filterLimit, 4);\n\n  /**\n   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n   *\n   * @name filterSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @alias selectSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n   * with a boolean argument once it has completed. Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results)\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function filterSeries(coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var filterSeries$1 = awaitify(filterSeries, 3);\n\n  /**\n   * Calls the asynchronous function `fn` with a callback parameter that allows it\n   * to call itself again, in series, indefinitely.\n    * If an error is passed to the callback then `errback` is called with the\n   * error, and execution stops, otherwise it will never be called.\n   *\n   * @name forever\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} fn - an async function to call repeatedly.\n   * Invoked with (next).\n   * @param {Function} [errback] - when `fn` passes an error to it's callback,\n   * this function will be called, and execution stops. Invoked with (err).\n   * @returns {Promise} a promise that rejects if an error occurs and an errback\n   * is not passed\n   * @example\n   *\n   * async.forever(\n   *     function(next) {\n   *         // next is suitable for passing to things that need a callback(err [, whatever]);\n   *         // it will result in this function being called again.\n   *     },\n   *     function(err) {\n   *         // if next is called with a value in its first parameter, it will appear\n   *         // in here as 'err', and execution will stop.\n   *     }\n   * );\n   */\n  function forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n    function next(err) {\n      if (err) return done(err);\n      if (err === false) return;\n      task(next);\n    }\n    return next();\n  }\n  var forever$1 = awaitify(forever, 2);\n\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name groupByLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n      _iteratee(val, (err, key) => {\n        if (err) return iterCb(err);\n        return iterCb(err, {\n          key,\n          val\n        });\n      });\n    }, (err, mapResults) => {\n      var result = {};\n      // from MDN, handle object having an `hasOwnProperty` prop\n      var {\n        hasOwnProperty\n      } = Object.prototype;\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          var {\n            key\n          } = mapResults[i];\n          var {\n            val\n          } = mapResults[i];\n          if (hasOwnProperty.call(result, key)) {\n            result[key].push(val);\n          } else {\n            result[key] = [val];\n          }\n        }\n      }\n      return callback(err, result);\n    });\n  }\n  var groupByLimit$1 = awaitify(groupByLimit, 4);\n\n  /**\n   * Returns a new object, where each value corresponds to an array of items, from\n   * `coll`, that returned the corresponding key. That is, the keys of the object\n   * correspond to the values passed to the `iteratee` callback.\n   *\n   * Note: Since this function applies the `iteratee` to each item in parallel,\n   * there is no guarantee that the `iteratee` functions will complete in order.\n   * However, the values for each key in the `result` will be in the same order as\n   * the original `coll`. For Objects, the values will roughly be in the order of\n   * the original Objects' keys (but this can vary across JavaScript engines).\n   *\n   * @name groupBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whoses\n   * properties are arrays of values which returned the corresponding key.\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * const files = ['dir1/file1.txt','dir2','dir4']\n   *\n   * // asynchronous function that detects file type as none, file, or directory\n   * function detectFile(file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(null, 'none');\n   *         }\n   *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n   *     });\n   * }\n   *\n   * //Using callbacks\n   * async.groupBy(files, detectFile, function(err, result) {\n   *     if(err) {\n   *         console.log(err);\n   *     } else {\n   *\t       console.log(result);\n   *         // {\n   *         //     file: [ 'dir1/file1.txt' ],\n   *         //     none: [ 'dir4' ],\n   *         //     directory: [ 'dir2']\n   *         // }\n   *         // result is object containing the files grouped by type\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.groupBy(files, detectFile)\n   * .then( result => {\n   *     console.log(result);\n   *     // {\n   *     //     file: [ 'dir1/file1.txt' ],\n   *     //     none: [ 'dir4' ],\n   *     //     directory: [ 'dir2']\n   *     // }\n   *     // result is object containing the files grouped by type\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.groupBy(files, detectFile);\n   *         console.log(result);\n   *         // {\n   *         //     file: [ 'dir1/file1.txt' ],\n   *         //     none: [ 'dir4' ],\n   *         //     directory: [ 'dir2']\n   *         // }\n   *         // result is object containing the files grouped by type\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function groupBy(coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback);\n  }\n\n  /**\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n   *\n   * @name groupBySeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.groupBy]{@link module:Collections.groupBy}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a `key` to group the value under.\n   * Invoked with (value, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Result is an `Object` whose\n   * properties are arrays of values which returned the corresponding key.\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function groupBySeries(coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback);\n  }\n\n  /**\n   * Logs the result of an `async` function to the `console`. Only works in\n   * Node.js or in browsers that support `console.log` and `console.error` (such\n   * as FF and Chrome). If multiple arguments are returned from the async\n   * function, `console.log` is called on each argument in order.\n   *\n   * @name log\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} function - The function you want to eventually apply\n   * all arguments to.\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\n   * @example\n   *\n   * // in a module\n   * var hello = function(name, callback) {\n   *     setTimeout(function() {\n   *         callback(null, 'hello ' + name);\n   *     }, 1000);\n   * };\n   *\n   * // in the node repl\n   * node> async.log(hello, 'world');\n   * 'hello world'\n   */\n  var log = consoleFunc('log');\n\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name mapValuesLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit$2(limit)(obj, (val, key, next) => {\n      _iteratee(val, key, (err, result) => {\n        if (err) return next(err);\n        newObj[key] = result;\n        next(err);\n      });\n    }, err => callback(err, newObj));\n  }\n  var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n  /**\n   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n   *\n   * Produces a new Object by mapping each value of `obj` through the `iteratee`\n   * function. The `iteratee` is called each `value` and `key` from `obj` and a\n   * callback for when it has finished processing. Each of these callbacks takes\n   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n   * passes an error to its callback, the main `callback` (for the `mapValues`\n   * function) is immediately called with the error.\n   *\n   * Note, the order of the keys in the result is not guaranteed.  The keys will\n   * be roughly in the order they complete, (but this is very engine-specific)\n   *\n   * @name mapValues\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   * // file4.txt does not exist\n   *\n   * const fileMap = {\n   *     f1: 'file1.txt',\n   *     f2: 'file2.txt',\n   *     f3: 'file3.txt'\n   * };\n   *\n   * const withMissingFileMap = {\n   *     f1: 'file1.txt',\n   *     f2: 'file2.txt',\n   *     f3: 'file4.txt'\n   * };\n   *\n   * // asynchronous function that returns the file size in bytes\n   * function getFileSizeInBytes(file, key, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // result is now a map of file size in bytes for each file, e.g.\n   *         // {\n   *         //     f1: 1000,\n   *         //     f2: 2000,\n   *         //     f3: 3000\n   *         // }\n   *     }\n   * });\n   *\n   * // Error handling\n   * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n   *     if (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     } else {\n   *         console.log(result);\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.mapValues(fileMap, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   *     // result is now a map of file size in bytes for each file, e.g.\n   *     // {\n   *     //     f1: 1000,\n   *     //     f2: 2000,\n   *     //     f3: 3000\n   *     // }\n   * }).catch (err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error Handling\n   * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n   * .then( result => {\n   *     console.log(result);\n   * }).catch (err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n   *         console.log(result);\n   *         // result is now a map of file size in bytes for each file, e.g.\n   *         // {\n   *         //     f1: 1000,\n   *         //     f2: 2000,\n   *         //     f3: 3000\n   *         // }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // Error Handling\n   * async () => {\n   *     try {\n   *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n   *         console.log(result);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n  function mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback);\n  }\n\n  /**\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n   *\n   * @name mapValuesSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.mapValues]{@link module:Collections.mapValues}\n   * @category Collection\n   * @param {Object} obj - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\n   * in `coll`.\n   * The iteratee should complete with the transformed value as its result.\n   * Invoked with (value, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. `result` is a new object consisting\n   * of each key from `obj`, with each transformed value on the right-hand side.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback);\n  }\n\n  /**\n   * Caches the results of an async function. When creating a hash to store\n   * function results against, the callback is omitted from the hash and an\n   * optional hash function can be used.\n   *\n   * **Note: if the async function errs, the result will not be cached and\n   * subsequent calls will call the wrapped function.**\n   *\n   * If no hash function is specified, the first argument is used as a hash key,\n   * which may work reasonably if it is a string or a data type that converts to a\n   * distinct string. Note that objects and arrays will not behave reasonably.\n   * Neither will cases where the other arguments are significant. In such cases,\n   * specify your own hash function.\n   *\n   * The cache of results is exposed as the `memo` property of the function\n   * returned by `memoize`.\n   *\n   * @name memoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n   * @param {Function} hasher - An optional function for generating a custom hash\n   * for storing results. It has all the arguments applied to it apart from the\n   * callback, and must be synchronous.\n   * @returns {AsyncFunction} a memoized version of `fn`\n   * @example\n   *\n   * var slow_fn = function(name, callback) {\n   *     // do something\n   *     callback(null, result);\n   * };\n   * var fn = async.memoize(slow_fn);\n   *\n   * // fn can now be used as if it were slow_fn\n   * fn('some name', function() {\n   *     // callback\n   * });\n   */\n  function memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n      var key = hasher(...args);\n      if (key in memo) {\n        setImmediate$1(() => callback(null, ...memo[key]));\n      } else if (key in queues) {\n        queues[key].push(callback);\n      } else {\n        queues[key] = [callback];\n        _fn(...args, (err, ...resultArgs) => {\n          // #1465 don't memoize if an error occurred\n          if (!err) {\n            memo[key] = resultArgs;\n          }\n          var q = queues[key];\n          delete queues[key];\n          for (var i = 0, l = q.length; i < l; i++) {\n            q[i](err, ...resultArgs);\n          }\n        });\n      }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n  }\n\n  /* istanbul ignore file */\n\n  /**\n   * Calls `callback` on a later loop around the event loop. In Node.js this just\n   * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n   * available, otherwise `setTimeout(callback, 0)`, which means other higher\n   * priority events may precede the execution of `callback`.\n   *\n   * This is used internally for browser-compatibility purposes.\n   *\n   * @name nextTick\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.setImmediate]{@link module:Utils.setImmediate}\n   * @category Util\n   * @param {Function} callback - The function to call on a later loop around\n   * the event loop. Invoked with (args...).\n   * @param {...*} args... - any number of additional arguments to pass to the\n   * callback on the next tick.\n   * @example\n   *\n   * var call_order = [];\n   * async.nextTick(function() {\n   *     call_order.push('two');\n   *     // call_order now equals ['one','two']\n   * });\n   * call_order.push('one');\n   *\n   * async.setImmediate(function (a, b, c) {\n   *     // a, b, and c equal 1, 2, and 3\n   * }, 1, 2, 3);\n   */\n  var _defer;\n  if (hasNextTick) {\n    _defer = process.nextTick;\n  } else if (hasSetImmediate) {\n    _defer = setImmediate;\n  } else {\n    _defer = fallback;\n  }\n  var nextTick = wrap(_defer);\n  var _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n    eachfn(tasks, (task, key, taskCb) => {\n      wrapAsync(task)((err, ...result) => {\n        if (result.length < 2) {\n          [result] = result;\n        }\n        results[key] = result;\n        taskCb(err);\n      });\n    }, err => callback(err, results));\n  }, 3);\n\n  /**\n   * Run the `tasks` collection of functions in parallel, without waiting until\n   * the previous function has completed. If any of the functions pass an error to\n   * its callback, the main `callback` is immediately called with the value of the\n   * error. Once the `tasks` have completed, the results are passed to the final\n   * `callback` as an array.\n   *\n   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n   * parallel execution of code.  If your tasks do not use any timers or perform\n   * any I/O, they will actually be executed in series.  Any synchronous setup\n   * sections for each task will happen one after the other.  JavaScript remains\n   * single-threaded.\n   *\n   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n   * execution of other tasks when a task fails.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   * results from {@link async.parallel}.\n   *\n   * @name parallel\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   *\n   * @example\n   *\n   * //Using Callbacks\n   * async.parallel([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ], function(err, results) {\n   *     console.log(results);\n   *     // results is equal to ['one','two'] even though\n   *     // the second function had a shorter timeout.\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.parallel({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * });\n   *\n   * //Using Promises\n   * async.parallel([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ]).then(results => {\n   *     console.log(results);\n   *     // results is equal to ['one','two'] even though\n   *     // the second function had a shorter timeout.\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.parallel({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }).then(results => {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * //Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.parallel([\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 'one');\n   *                 }, 200);\n   *             },\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 'two');\n   *                 }, 100);\n   *             }\n   *         ]);\n   *         console.log(results);\n   *         // results is equal to ['one','two'] even though\n   *         // the second function had a shorter timeout.\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // an example using an object instead of an array\n   * async () => {\n   *     try {\n   *         let results = await async.parallel({\n   *             one: function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 1);\n   *                 }, 200);\n   *             },\n   *            two: function(callback) {\n   *                 setTimeout(function() {\n   *                     callback(null, 2);\n   *                 }, 100);\n   *            }\n   *         });\n   *         console.log(results);\n   *         // results is equal to: { one: 1, two: 2 }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n  }\n\n  /**\n   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name parallelLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.parallel]{@link module:ControlFlow.parallel}\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   */\n  function parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit$2(limit), tasks, callback);\n  }\n\n  /**\n   * A queue of tasks for the worker function to complete.\n   * @typedef {Iterable} QueueObject\n   * @memberOf module:ControlFlow\n   * @property {Function} length - a function returning the number of items\n   * waiting to be processed. Invoke with `queue.length()`.\n   * @property {boolean} started - a boolean indicating whether or not any\n   * items have been pushed and processed by the queue.\n   * @property {Function} running - a function returning the number of items\n   * currently being processed. Invoke with `queue.running()`.\n   * @property {Function} workersList - a function returning the array of items\n   * currently being processed. Invoke with `queue.workersList()`.\n   * @property {Function} idle - a function returning false if there are items\n   * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n   * @property {number} concurrency - an integer for determining how many `worker`\n   * functions should be run in parallel. This property can be changed after a\n   * `queue` is created to alter the concurrency on-the-fly.\n   * @property {number} payload - an integer that specifies how many items are\n   * passed to the worker function at a time. only applies if this is a\n   * [cargo]{@link module:ControlFlow.cargo} object\n   * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n   * once the `worker` has finished processing the task. Instead of a single task,\n   * a `tasks` array can be submitted. The respective callback is used for every\n   * task in the list. Invoke with `queue.push(task, [callback])`,\n   * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n   * Invoke with `queue.unshift(task, [callback])`.\n   * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n   * a promise that rejects if an error occurs.\n   * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n   * a promise that rejects if an error occurs.\n   * @property {Function} remove - remove items from the queue that match a test\n   * function.  The test function will be passed an object with a `data` property,\n   * and a `priority` property, if this is a\n   * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n   * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n   * `function ({data, priority}) {}` and returns a Boolean.\n   * @property {Function} saturated - a function that sets a callback that is\n   * called when the number of running workers hits the `concurrency` limit, and\n   * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n   * returns a promise for the next occurrence.\n   * @property {Function} unsaturated - a function that sets a callback that is\n   * called when the number of running workers is less than the `concurrency` &\n   * `buffer` limits, and further tasks will not be queued. If the callback is\n   * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n   * @property {number} buffer - A minimum threshold buffer in order to say that\n   * the `queue` is `unsaturated`.\n   * @property {Function} empty - a function that sets a callback that is called\n   * when the last item from the `queue` is given to a `worker`. If the callback\n   * is omitted, `q.empty()` returns a promise for the next occurrence.\n   * @property {Function} drain - a function that sets a callback that is called\n   * when the last item from the `queue` has returned from the `worker`. If the\n   * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n   * @property {Function} error - a function that sets a callback that is called\n   * when a task errors. Has the signature `function(error, task)`. If the\n   * callback is omitted, `error()` returns a promise that rejects on the next\n   * error.\n   * @property {boolean} paused - a boolean for determining whether the queue is\n   * in a paused state.\n   * @property {Function} pause - a function that pauses the processing of tasks\n   * until `resume()` is called. Invoke with `queue.pause()`.\n   * @property {Function} resume - a function that resumes the processing of\n   * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n   * @property {Function} kill - a function that removes the `drain` callback and\n   * empties remaining tasks from the queue forcing it to go idle. No more tasks\n   * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n   *\n   * @example\n   * const q = async.queue(worker, 2)\n   * q.push(item1)\n   * q.push(item2)\n   * q.push(item3)\n   * // queues are iterable, spread into an array to inspect\n   * const items = [...q] // [item1, item2, item3]\n   * // or use for of\n   * for (let item of q) {\n   *     console.log(item)\n   * }\n   *\n   * q.drain(() => {\n   *     console.log('all done')\n   * })\n   * // or\n   * await q.drain()\n   */\n\n  /**\n   * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n   * `queue` are processed in parallel (up to the `concurrency` limit). If all\n   * `worker`s are in progress, the task is queued until one becomes available.\n   * Once a `worker` completes a `task`, that `task`'s callback is called.\n   *\n   * @name queue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`. Invoked with (task, callback).\n   * @param {number} [concurrency=1] - An `integer` for determining how many\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n   * attached as certain properties to listen for specific events during the\n   * lifecycle of the queue.\n   * @example\n   *\n   * // create a queue object with concurrency 2\n   * var q = async.queue(function(task, callback) {\n   *     console.log('hello ' + task.name);\n   *     callback();\n   * }, 2);\n   *\n   * // assign a callback\n   * q.drain(function() {\n   *     console.log('all items have been processed');\n   * });\n   * // or await the end\n   * await q.drain()\n   *\n   * // assign an error callback\n   * q.error(function(err, task) {\n   *     console.error('task experienced an error');\n   * });\n   *\n   * // add some items to the queue\n   * q.push({name: 'foo'}, function(err) {\n   *     console.log('finished processing foo');\n   * });\n   * // callback is optional\n   * q.push({name: 'bar'});\n   *\n   * // add some items to the queue (batch-wise)\n   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n   *     console.log('finished processing item');\n   * });\n   *\n   * // add some items to the front of the queue\n   * q.unshift({name: 'bar'}, function (err) {\n   *     console.log('finished processing bar');\n   * });\n   */\n  function queue(worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue$1((items, cb) => {\n      _worker(items[0], cb);\n    }, concurrency, 1);\n  }\n\n  // Binary min-heap implementation used for priority queue.\n  // Implementation is stable, i.e. push time is considered for equal priorities\n  class Heap {\n    constructor() {\n      this.heap = [];\n      this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n    get length() {\n      return this.heap.length;\n    }\n    empty() {\n      this.heap = [];\n      return this;\n    }\n    percUp(index) {\n      let p;\n      while (index > 0 && smaller(this.heap[index], this.heap[p = parent(index)])) {\n        let t = this.heap[index];\n        this.heap[index] = this.heap[p];\n        this.heap[p] = t;\n        index = p;\n      }\n    }\n    percDown(index) {\n      let l;\n      while ((l = leftChi(index)) < this.heap.length) {\n        if (l + 1 < this.heap.length && smaller(this.heap[l + 1], this.heap[l])) {\n          l = l + 1;\n        }\n        if (smaller(this.heap[index], this.heap[l])) {\n          break;\n        }\n        let t = this.heap[index];\n        this.heap[index] = this.heap[l];\n        this.heap[l] = t;\n        index = l;\n      }\n    }\n    push(node) {\n      node.pushCount = ++this.pushCount;\n      this.heap.push(node);\n      this.percUp(this.heap.length - 1);\n    }\n    unshift(node) {\n      return this.heap.push(node);\n    }\n    shift() {\n      let [top] = this.heap;\n      this.heap[0] = this.heap[this.heap.length - 1];\n      this.heap.pop();\n      this.percDown(0);\n      return top;\n    }\n    toArray() {\n      return [...this];\n    }\n    *[Symbol.iterator]() {\n      for (let i = 0; i < this.heap.length; i++) {\n        yield this.heap[i].data;\n      }\n    }\n    remove(testFn) {\n      let j = 0;\n      for (let i = 0; i < this.heap.length; i++) {\n        if (!testFn(this.heap[i])) {\n          this.heap[j] = this.heap[i];\n          j++;\n        }\n      }\n      this.heap.splice(j);\n      for (let i = parent(this.heap.length - 1); i >= 0; i--) {\n        this.percDown(i);\n      }\n      return this;\n    }\n  }\n  function leftChi(i) {\n    return (i << 1) + 1;\n  }\n  function parent(i) {\n    return (i + 1 >> 1) - 1;\n  }\n  function smaller(x, y) {\n    if (x.priority !== y.priority) {\n      return x.priority < y.priority;\n    } else {\n      return x.pushCount < y.pushCount;\n    }\n  }\n\n  /**\n   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n   * completed in ascending priority order.\n   *\n   * @name priorityQueue\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.queue]{@link module:ControlFlow.queue}\n   * @category Control Flow\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\n   * If you want to handle errors from an individual task, pass a callback to\n   * `q.push()`.\n   * Invoked with (task, callback).\n   * @param {number} concurrency - An `integer` for determining how many `worker`\n   * functions should be run in parallel.  If omitted, the concurrency defaults to\n   * `1`.  If the concurrency is `0`, an error is thrown.\n   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n   * differences between `queue` and `priorityQueue` objects:\n   * * `push(task, priority, [callback])` - `priority` should be a number. If an\n   *   array of `tasks` is given, all tasks will be assigned the same priority.\n   * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n   *   except this returns a promise that rejects if an error occurs.\n   * * The `unshift` and `unshiftAsync` methods were removed.\n   */\n  function priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue(worker, concurrency);\n    var {\n      push,\n      pushAsync\n    } = q;\n    q._tasks = new Heap();\n    q._createTaskItem = ({\n      data,\n      priority\n    }, callback) => {\n      return {\n        data,\n        priority,\n        callback\n      };\n    };\n    function createDataItems(tasks, priority) {\n      if (!Array.isArray(tasks)) {\n        return {\n          data: tasks,\n          priority\n        };\n      }\n      return tasks.map(data => {\n        return {\n          data,\n          priority\n        };\n      });\n    }\n\n    // Override push to accept second parameter representing priority\n    q.push = function (data, priority = 0, callback) {\n      return push(createDataItems(data, priority), callback);\n    };\n    q.pushAsync = function (data, priority = 0, callback) {\n      return pushAsync(createDataItems(data, priority), callback);\n    };\n\n    // Remove unshift functions\n    delete q.unshift;\n    delete q.unshiftAsync;\n    return q;\n  }\n\n  /**\n   * Runs the `tasks` array of functions in parallel, without waiting until the\n   * previous function has completed. Once any of the `tasks` complete or pass an\n   * error to its callback, the main `callback` is immediately called. It's\n   * equivalent to `Promise.race()`.\n   *\n   * @name race\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n   * to run. Each function can complete with an optional `result` value.\n   * @param {Function} callback - A callback to run once any of the functions have\n   * completed. This function gets an error or result from the first function that\n   * completed. Invoked with (err, result).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * async.race([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ],\n   * // main callback\n   * function(err, result) {\n   *     // the result will be equal to 'two' as it finishes earlier\n   * });\n   */\n  function race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n      wrapAsync(tasks[i])(callback);\n    }\n  }\n  var race$1 = awaitify(race, 2);\n\n  /**\n   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n   *\n   * @name reduceRight\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reduce]{@link module:Collections.reduce}\n   * @alias foldr\n   * @category Collection\n   * @param {Array} array - A collection to iterate over.\n   * @param {*} memo - The initial state of the reduction.\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * array to produce the next step in the reduction.\n   * The `iteratee` should complete with the next state of the reduction.\n   * If the iteratee completes with an error, the reduction is stopped and the\n   * main `callback` is immediately called with the error.\n   * Invoked with (memo, item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\n   * (err, result).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function reduceRight(array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n  }\n\n  /**\n   * Wraps the async function in another function that always completes with a\n   * result object, even when it errors.\n   *\n   * The result object has either the property `error` or `value`.\n   *\n   * @name reflect\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} fn - The async function you want to wrap\n   * @returns {Function} - A function that always passes null to it's callback as\n   * the error. The second argument to the callback will be an `object` with\n   * either an `error` or a `value` property.\n   * @example\n   *\n   * async.parallel([\n   *     async.reflect(function(callback) {\n   *         // do some stuff ...\n   *         callback(null, 'one');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff but error ...\n   *         callback('bad stuff happened');\n   *     }),\n   *     async.reflect(function(callback) {\n   *         // do some more stuff ...\n   *         callback(null, 'two');\n   *     })\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = 'bad stuff happened'\n   *     // results[2].value = 'two'\n   * });\n   */\n  function reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n      args.push((error, ...cbArgs) => {\n        let retVal = {};\n        if (error) {\n          retVal.error = error;\n        }\n        if (cbArgs.length > 0) {\n          var value = cbArgs;\n          if (cbArgs.length <= 1) {\n            [value] = cbArgs;\n          }\n          retVal.value = value;\n        }\n        reflectCallback(null, retVal);\n      });\n      return _fn.apply(this, args);\n    });\n  }\n\n  /**\n   * A helper function that wraps an array or an object of functions with `reflect`.\n   *\n   * @name reflectAll\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.reflect]{@link module:Utils.reflect}\n   * @category Util\n   * @param {Array|Object|Iterable} tasks - The collection of\n   * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n   * @returns {Array} Returns an array of async functions, each wrapped in\n   * `async.reflect`\n   * @example\n   *\n   * let tasks = [\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         // do some more stuff but error ...\n   *         callback(new Error('bad stuff happened'));\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ];\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results[0].value = 'one'\n   *     // results[1].error = Error('bad stuff happened')\n   *     // results[2].value = 'two'\n   * });\n   *\n   * // an example using an object instead of an array\n   * let tasks = {\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         callback('two');\n   *     },\n   *     three: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'three');\n   *         }, 100);\n   *     }\n   * };\n   *\n   * async.parallel(async.reflectAll(tasks),\n   * // optional callback\n   * function(err, results) {\n   *     // values\n   *     // results.one.value = 'one'\n   *     // results.two.error = 'two'\n   *     // results.three.value = 'three'\n   * });\n   */\n  function reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n      results = tasks.map(reflect);\n    } else {\n      results = {};\n      Object.keys(tasks).forEach(key => {\n        results[key] = reflect.call(this, tasks[key]);\n      });\n    }\n    return results;\n  }\n  function reject$2(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n      iteratee(value, (err, v) => {\n        cb(err, !v);\n      });\n    }, callback);\n  }\n\n  /**\n   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n   *\n   * @name reject\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.filter]{@link module:Collections.filter}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   *\n   * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.reject(fileList, fileExists, function(err, results) {\n   *    // [ 'dir3/file6.txt' ]\n   *    // results now equals an array of the non-existing files\n   * });\n   *\n   * // Using Promises\n   * async.reject(fileList, fileExists)\n   * .then( results => {\n   *     console.log(results);\n   *     // [ 'dir3/file6.txt' ]\n   *     // results now equals an array of the non-existing files\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.reject(fileList, fileExists);\n   *         console.log(results);\n   *         // [ 'dir3/file6.txt' ]\n   *         // results now equals an array of the non-existing files\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function reject(coll, iteratee, callback) {\n    return reject$2(eachOf$1, coll, iteratee, callback);\n  }\n  var reject$1 = awaitify(reject, 3);\n\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name rejectLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function rejectLimit(coll, limit, iteratee, callback) {\n    return reject$2(eachOfLimit$2(limit), coll, iteratee, callback);\n  }\n  var rejectLimit$1 = awaitify(rejectLimit, 4);\n\n  /**\n   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n   *\n   * @name rejectSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.reject]{@link module:Collections.reject}\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {Function} iteratee - An async truth test to apply to each item in\n   * `coll`.\n   * The should complete with a boolean value as its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   */\n  function rejectSeries(coll, iteratee, callback) {\n    return reject$2(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var rejectSeries$1 = awaitify(rejectSeries, 3);\n  function constant(value) {\n    return function () {\n      return value;\n    };\n  }\n\n  /**\n   * Attempts to get a successful response from `task` no more than `times` times\n   * before returning an error. If the task is successful, the `callback` will be\n   * passed the result of the successful task. If all attempts fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name retry\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @see [async.retryable]{@link module:ControlFlow.retryable}\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n   * object with `times` and `interval` or a number.\n   * * `times` - The number of attempts to make before giving up.  The default\n   *   is `5`.\n   * * `interval` - The time to wait between retries, in milliseconds.  The\n   *   default is `0`. The interval may also be specified as a function of the\n   *   retry count (see example).\n   * * `errorFilter` - An optional synchronous function that is invoked on\n   *   erroneous result. If it returns `true` the retry attempts will continue;\n   *   if the function returns `false` the retry flow is aborted with the current\n   *   attempt's error and result being returned to the final callback.\n   *   Invoked with (err).\n   * * If `opts` is a number, the number specifies the number of times to retry,\n   *   with the default interval of `0`.\n   * @param {AsyncFunction} task - An async function to retry.\n   * Invoked with (callback).\n   * @param {Function} [callback] - An optional callback which is called when the\n   * task has succeeded, or after the final failed attempt. It receives the `err`\n   * and `result` arguments of the last attempt at completing the `task`. Invoked\n   * with (err, results).\n   * @returns {Promise} a promise if no callback provided\n   *\n   * @example\n   *\n   * // The `retry` function can be used as a stand-alone control flow by passing\n   * // a callback, as shown below:\n   *\n   * // try calling apiMethod 3 times\n   * async.retry(3, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 3 times, waiting 200 ms between each retry\n   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod 10 times with exponential backoff\n   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n   * async.retry({\n   *   times: 10,\n   *   interval: function(retryCount) {\n   *     return 50 * Math.pow(2, retryCount);\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod the default 5 times no delay between each retry\n   * async.retry(apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // try calling apiMethod only when error condition satisfies, all other\n   * // errors will abort the retry control flow and return to final callback\n   * async.retry({\n   *   errorFilter: function(err) {\n   *     return err.message === 'Temporary error'; // only retry on a specific error\n   *   }\n   * }, apiMethod, function(err, result) {\n   *     // do something with the result\n   * });\n   *\n   * // to retry individual methods that are not as reliable within other\n   * // control flow functions, use the `retryable` wrapper:\n   * async.auto({\n   *     users: api.getUsers.bind(api),\n   *     payments: async.retryable(3, api.getPayments.bind(api))\n   * }, function(err, results) {\n   *     // do something with the results\n   * });\n   *\n   */\n  const DEFAULT_TIMES = 5;\n  const DEFAULT_INTERVAL = 0;\n  function retry(opts, task, callback) {\n    var options = {\n      times: DEFAULT_TIMES,\n      intervalFunc: constant(DEFAULT_INTERVAL)\n    };\n    if (arguments.length < 3 && typeof opts === 'function') {\n      callback = task || promiseCallback();\n      task = opts;\n    } else {\n      parseTimes(options, opts);\n      callback = callback || promiseCallback();\n    }\n    if (typeof task !== 'function') {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n    var _task = wrapAsync(task);\n    var attempt = 1;\n    function retryAttempt() {\n      _task((err, ...args) => {\n        if (err === false) return;\n        if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n          setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n        } else {\n          callback(err, ...args);\n        }\n      });\n    }\n    retryAttempt();\n    return callback[PROMISE_SYMBOL];\n  }\n  function parseTimes(acc, t) {\n    if (typeof t === 'object') {\n      acc.times = +t.times || DEFAULT_TIMES;\n      acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant(+t.interval || DEFAULT_INTERVAL);\n      acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n      acc.times = +t || DEFAULT_TIMES;\n    } else {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n  }\n\n  /**\n   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n   * wraps a task and makes it retryable, rather than immediately calling it\n   * with retries.\n   *\n   * @name retryable\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.retry]{@link module:ControlFlow.retry}\n   * @category Control Flow\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n   * options, exactly the same as from `retry`, except for a `opts.arity` that\n   * is the arity of the `task` function, defaulting to `task.length`\n   * @param {AsyncFunction} task - the asynchronous function to wrap.\n   * This function will be passed any arguments passed to the returned wrapper.\n   * Invoked with (...args, callback).\n   * @returns {AsyncFunction} The wrapped function, which when invoked, will\n   * retry on an error, based on the parameters specified in `opts`.\n   * This function will accept the same parameters as `task`.\n   * @example\n   *\n   * async.auto({\n   *     dep1: async.retryable(3, getFromFlakyService),\n   *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n   *         maybeProcessData(results.dep1, cb);\n   *     })]\n   * }, callback);\n   */\n  function retryable(opts, task) {\n    if (!task) {\n      task = opts;\n      opts = null;\n    }\n    let arity = opts && opts.arity || task.length;\n    if (isAsync(task)) {\n      arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n      if (args.length < arity - 1 || callback == null) {\n        args.push(callback);\n        callback = promiseCallback();\n      }\n      function taskFn(cb) {\n        _task(...args, cb);\n      }\n      if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n      return callback[PROMISE_SYMBOL];\n    });\n  }\n\n  /**\n   * Run the functions in the `tasks` collection in series, each one running once\n   * the previous function has completed. If any functions in the series pass an\n   * error to its callback, no more functions are run, and `callback` is\n   * immediately called with the value of the error. Otherwise, `callback`\n   * receives an array of results when `tasks` have completed.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function, and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   *  results from {@link async.series}.\n   *\n   * **Note** that while many implementations preserve the order of object\n   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n   * explicitly states that\n   *\n   * > The mechanics and order of enumerating the properties is not specified.\n   *\n   * So if you rely on the order in which your series of functions are executed,\n   * and want this to work on all platforms, consider using an array.\n   *\n   * @name series\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n   * [async functions]{@link AsyncFunction} to run in series.\n   * Each function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This function gets a results array (or object)\n   * containing all the result arguments passed to the `task` callbacks. Invoked\n   * with (err, result).\n   * @return {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * //Using Callbacks\n   * async.series([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             // do some async task\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             // then do another async task\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ], function(err, results) {\n   *     console.log(results);\n   *     // results is equal to ['one','two']\n   * });\n   *\n   * // an example using objects instead of arrays\n   * async.series({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             // do some async task\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             // then do another async task\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * });\n   *\n   * //Using Promises\n   * async.series([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ]).then(results => {\n   *     console.log(results);\n   *     // results is equal to ['one','two']\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.series({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             // do some async task\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             // then do another async task\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }).then(results => {\n   *     console.log(results);\n   *     // results is equal to: { one: 1, two: 2 }\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * //Using async/await\n   * async () => {\n   *     try {\n   *         let results = await async.series([\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     // do some async task\n   *                     callback(null, 'one');\n   *                 }, 200);\n   *             },\n   *             function(callback) {\n   *                 setTimeout(function() {\n   *                     // then do another async task\n   *                     callback(null, 'two');\n   *                 }, 100);\n   *             }\n   *         ]);\n   *         console.log(results);\n   *         // results is equal to ['one','two']\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * // an example using an object instead of an array\n   * async () => {\n   *     try {\n   *         let results = await async.parallel({\n   *             one: function(callback) {\n   *                 setTimeout(function() {\n   *                     // do some async task\n   *                     callback(null, 1);\n   *                 }, 200);\n   *             },\n   *            two: function(callback) {\n   *                 setTimeout(function() {\n   *                     // then do another async task\n   *                     callback(null, 2);\n   *                 }, 100);\n   *            }\n   *         });\n   *         console.log(results);\n   *         // results is equal to: { one: 1, two: 2 }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n  }\n\n  /**\n   * Returns `true` if at least one element in the `coll` satisfies an async test.\n   * If any iteratee call returns `true`, the main `callback` is immediately\n   * called.\n   *\n   * @name some\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias any\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // dir1 is a directory that contains file1.txt, file2.txt\n   * // dir2 is a directory that contains file3.txt, file4.txt\n   * // dir3 is a directory that contains file5.txt\n   * // dir4 does not exist\n   *\n   * // asynchronous function that checks if a file exists\n   * function fileExists(file, callback) {\n   *    fs.access(file, fs.constants.F_OK, (err) => {\n   *        callback(null, !err);\n   *    });\n   * }\n   *\n   * // Using callbacks\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n   *    function(err, result) {\n   *        console.log(result);\n   *        // true\n   *        // result is true since some file in the list exists\n   *    }\n   *);\n   *\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n   *    function(err, result) {\n   *        console.log(result);\n   *        // false\n   *        // result is false since none of the files exists\n   *    }\n   *);\n   *\n   * // Using Promises\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // true\n   *     // result is true since some file in the list exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n   * .then( result => {\n   *     console.log(result);\n   *     // false\n   *     // result is false since none of the files exists\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n   *         console.log(result);\n   *         // true\n   *         // result is true since some file in the list exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   * async () => {\n   *     try {\n   *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n   *         console.log(result);\n   *         // false\n   *         // result is false since none of the files exists\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback);\n  }\n  var some$1 = awaitify(some, 3);\n\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n   *\n   * @name someLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anyLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in parallel.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit$2(limit), coll, iteratee, callback);\n  }\n  var someLimit$1 = awaitify(someLimit, 4);\n\n  /**\n   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n   *\n   * @name someSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.some]{@link module:Collections.some}\n   * @alias anySeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n   * in the collections in series.\n   * The iteratee should complete with a boolean `result` value.\n   * Invoked with (item, callback).\n   * @param {Function} [callback] - A callback which is called as soon as any\n   * iteratee returns `true`, or after all the iteratee functions have finished.\n   * Result will be either `true` or `false` depending on the values of the async\n   * tests. Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   */\n  function someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback);\n  }\n  var someSeries$1 = awaitify(someSeries, 3);\n\n  /**\n   * Sorts a list by the results of running each `coll` value through an async\n   * `iteratee`.\n   *\n   * @name sortBy\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * The iteratee should complete with a value to use as the sort criteria as\n   * its `result`.\n   * Invoked with (item, callback).\n   * @param {Function} callback - A callback which is called after all the\n   * `iteratee` functions have finished, or an error occurs. Results is the items\n   * from the original `coll` sorted by the values returned by the `iteratee`\n   * calls. Invoked with (err, results).\n   * @returns {Promise} a promise, if no callback passed\n   * @example\n   *\n   * // bigfile.txt is a file that is 251100 bytes in size\n   * // mediumfile.txt is a file that is 11000 bytes in size\n   * // smallfile.txt is a file that is 121 bytes in size\n   *\n   * // asynchronous function that returns the file size in bytes\n   * function getFileSizeInBytes(file, callback) {\n   *     fs.stat(file, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         callback(null, stat.size);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n   *     function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *         } else {\n   *             console.log(results);\n   *             // results is now the original array of files sorted by\n   *             // file size (ascending by default), e.g.\n   *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   *         }\n   *     }\n   * );\n   *\n   * // By modifying the callback parameter the\n   * // sorting order can be influenced:\n   *\n   * // ascending order\n   * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n   *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n   *         if (getFileSizeErr) return callback(getFileSizeErr);\n   *         callback(null, fileSize);\n   *     });\n   * }, function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *         } else {\n   *             console.log(results);\n   *             // results is now the original array of files sorted by\n   *             // file size (ascending by default), e.g.\n   *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   *         }\n   *     }\n   * );\n   *\n   * // descending order\n   * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n   *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n   *         if (getFileSizeErr) {\n   *             return callback(getFileSizeErr);\n   *         }\n   *         callback(null, fileSize * -1);\n   *     });\n   * }, function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *         } else {\n   *             console.log(results);\n   *             // results is now the original array of files sorted by\n   *             // file size (ascending by default), e.g.\n   *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n   *         }\n   *     }\n   * );\n   *\n   * // Error handling\n   * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n   *     function(err, results) {\n   *         if (err) {\n   *             console.log(err);\n   *             // [ Error: ENOENT: no such file or directory ]\n   *         } else {\n   *             console.log(results);\n   *         }\n   *     }\n   * );\n   *\n   * // Using Promises\n   * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   *     // results is now the original array of files sorted by\n   *     // file size (ascending by default), e.g.\n   *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   * }).catch( err => {\n   *     console.log(err);\n   * });\n   *\n   * // Error handling\n   * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n   * .then( results => {\n   *     console.log(results);\n   * }).catch( err => {\n   *     console.log(err);\n   *     // [ Error: ENOENT: no such file or directory ]\n   * });\n   *\n   * // Using async/await\n   * (async () => {\n   *     try {\n   *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n   *         console.log(results);\n   *         // results is now the original array of files sorted by\n   *         // file size (ascending by default), e.g.\n   *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * })();\n   *\n   * // Error handling\n   * async () => {\n   *     try {\n   *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n   *         console.log(results);\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *         // [ Error: ENOENT: no such file or directory ]\n   *     }\n   * }\n   *\n   */\n  function sortBy(coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n      _iteratee(x, (err, criteria) => {\n        if (err) return iterCb(err);\n        iterCb(err, {\n          value: x,\n          criteria\n        });\n      });\n    }, (err, results) => {\n      if (err) return callback(err);\n      callback(null, results.sort(comparator).map(v => v.value));\n    });\n    function comparator(left, right) {\n      var a = left.criteria,\n        b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }\n  }\n  var sortBy$1 = awaitify(sortBy, 3);\n\n  /**\n   * Sets a time limit on an asynchronous function. If the function does not call\n   * its callback within the specified milliseconds, it will be called with a\n   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n   *\n   * @name timeout\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @category Util\n   * @param {AsyncFunction} asyncFn - The async function to limit in time.\n   * @param {number} milliseconds - The specified time limit.\n   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n   * to timeout Error for more information..\n   * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n   * of the control flow functions.\n   * Invoke this function with the same parameters as you would `asyncFunc`.\n   * @example\n   *\n   * function myFunction(foo, callback) {\n   *     doAsyncTask(foo, function(err, data) {\n   *         // handle errors\n   *         if (err) return callback(err);\n   *\n   *         // do some stuff ...\n   *\n   *         // return processed data\n   *         return callback(null, data);\n   *     });\n   * }\n   *\n   * var wrapped = async.timeout(myFunction, 1000);\n   *\n   * // call `wrapped` as you would `myFunction`\n   * wrapped({ bar: 'bar' }, function(err, data) {\n   *     // if `myFunction` takes < 1000 ms to execute, `err`\n   *     // and `data` will have their expected values\n   *\n   *     // else `err` will be an Error with the code 'ETIMEDOUT'\n   * });\n   */\n  function timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n    return initialParams((args, callback) => {\n      var timedOut = false;\n      var timer;\n      function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n        if (info) {\n          error.info = info;\n        }\n        timedOut = true;\n        callback(error);\n      }\n      args.push((...cbArgs) => {\n        if (!timedOut) {\n          callback(...cbArgs);\n          clearTimeout(timer);\n        }\n      });\n\n      // setup timer and call original function\n      timer = setTimeout(timeoutCallback, milliseconds);\n      fn(...args);\n    });\n  }\n  function range(size) {\n    var result = Array(size);\n    while (size--) {\n      result[size] = size;\n    }\n    return result;\n  }\n\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name timesLimit\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} count - The number of times to run the function.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n   * @returns {Promise} a promise, if no callback is provided\n   */\n  function timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n  }\n\n  /**\n   * Calls the `iteratee` function `n` times, and accumulates results in the same\n   * manner you would use with [map]{@link module:Collections.map}.\n   *\n   * @name times\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.map]{@link module:Collections.map}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   * @returns {Promise} a promise, if no callback is provided\n   * @example\n   *\n   * // Pretend this is some complicated async factory\n   * var createUser = function(id, callback) {\n   *     callback(null, {\n   *         id: 'user' + id\n   *     });\n   * };\n   *\n   * // generate 5 users\n   * async.times(5, function(n, next) {\n   *     createUser(n, function(err, user) {\n   *         next(err, user);\n   *     });\n   * }, function(err, users) {\n   *     // we should now have 5 users\n   * });\n   */\n  function times(n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback);\n  }\n\n  /**\n   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n   *\n   * @name timesSeries\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.times]{@link module:ControlFlow.times}\n   * @category Control Flow\n   * @param {number} n - The number of times to run the function.\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\n   * Invoked with the iteration index and a callback: (n, next).\n   * @param {Function} callback - see {@link module:Collections.map}.\n   * @returns {Promise} a promise, if no callback is provided\n   */\n  function timesSeries(n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback);\n  }\n\n  /**\n   * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n   * element in parallel, each step potentially mutating an `accumulator` value.\n   * The type of the accumulator defaults to the type of collection passed in.\n   *\n   * @name transform\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n   * it will default to an empty Object or Array, depending on the type of `coll`\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\n   * collection that potentially modifies the accumulator.\n   * Invoked with (accumulator, item, key, callback).\n   * @param {Function} [callback] - A callback which is called after all the\n   * `iteratee` functions have finished. Result is the transformed accumulator.\n   * Invoked with (err, result).\n   * @returns {Promise} a promise, if no callback provided\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   *\n   * // helper function that returns human-readable size format from bytes\n   * function formatBytes(bytes, decimals = 2) {\n   *   // implementation not included for brevity\n   *   return humanReadbleFilesize;\n   * }\n   *\n   * const fileList = ['file1.txt','file2.txt','file3.txt'];\n   *\n   * // asynchronous function that returns the file size, transformed to human-readable format\n   * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n   * function transformFileSize(acc, value, key, callback) {\n   *     fs.stat(value, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         acc[key] = formatBytes(stat.size);\n   *         callback(null);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.transform(fileList, transformFileSize, function(err, result) {\n   *     if(err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.transform(fileList, transformFileSize)\n   * .then(result => {\n   *     console.log(result);\n   *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * (async () => {\n   *     try {\n   *         let result = await async.transform(fileList, transformFileSize);\n   *         console.log(result);\n   *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * })();\n   *\n   * @example\n   *\n   * // file1.txt is a file that is 1000 bytes in size\n   * // file2.txt is a file that is 2000 bytes in size\n   * // file3.txt is a file that is 3000 bytes in size\n   *\n   * // helper function that returns human-readable size format from bytes\n   * function formatBytes(bytes, decimals = 2) {\n   *   // implementation not included for brevity\n   *   return humanReadbleFilesize;\n   * }\n   *\n   * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n   *\n   * // asynchronous function that returns the file size, transformed to human-readable format\n   * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n   * function transformFileSize(acc, value, key, callback) {\n   *     fs.stat(value, function(err, stat) {\n   *         if (err) {\n   *             return callback(err);\n   *         }\n   *         acc[key] = formatBytes(stat.size);\n   *         callback(null);\n   *     });\n   * }\n   *\n   * // Using callbacks\n   * async.transform(fileMap, transformFileSize, function(err, result) {\n   *     if(err) {\n   *         console.log(err);\n   *     } else {\n   *         console.log(result);\n   *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n   *     }\n   * });\n   *\n   * // Using Promises\n   * async.transform(fileMap, transformFileSize)\n   * .then(result => {\n   *     console.log(result);\n   *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n   * }).catch(err => {\n   *     console.log(err);\n   * });\n   *\n   * // Using async/await\n   * async () => {\n   *     try {\n   *         let result = await async.transform(fileMap, transformFileSize);\n   *         console.log(result);\n   *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n   *     }\n   *     catch (err) {\n   *         console.log(err);\n   *     }\n   * }\n   *\n   */\n  function transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n      callback = iteratee;\n      iteratee = accumulator;\n      accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n    eachOf$1(coll, (v, k, cb) => {\n      _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL];\n  }\n\n  /**\n   * It runs each task in series but stops whenever any of the functions were\n   * successful. If one of the tasks were successful, the `callback` will be\n   * passed the result of the successful task. If all tasks fail, the callback\n   * will be passed the error and result (if any) of the final attempt.\n   *\n   * @name tryEach\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n   * run, each function is passed a `callback(err, result)` it must call on\n   * completion with an error `err` (which can be `null`) and an optional `result`\n   * value.\n   * @param {Function} [callback] - An optional callback which is called when one\n   * of the tasks has succeeded, or all have failed. It receives the `err` and\n   * `result` arguments of the last attempt at completing the `task`. Invoked with\n   * (err, results).\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   * async.tryEach([\n   *     function getDataFromFirstWebsite(callback) {\n   *         // Try getting the data from the first website\n   *         callback(err, data);\n   *     },\n   *     function getDataFromSecondWebsite(callback) {\n   *         // First website failed,\n   *         // Try getting the data from the backup website\n   *         callback(err, data);\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     Now do something with the data.\n   * });\n   *\n   */\n  function tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n      wrapAsync(task)((err, ...args) => {\n        if (err === false) return taskCb(err);\n        if (args.length < 2) {\n          [result] = args;\n        } else {\n          result = args;\n        }\n        error = err;\n        taskCb(err ? null : {});\n      });\n    }, () => callback(error, result));\n  }\n  var tryEach$1 = awaitify(tryEach);\n\n  /**\n   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n   * unmemoized form. Handy for testing.\n   *\n   * @name unmemoize\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @see [async.memoize]{@link module:Utils.memoize}\n   * @category Util\n   * @param {AsyncFunction} fn - the memoized function\n   * @returns {AsyncFunction} a function that calls the original unmemoized function\n   */\n  function unmemoize(fn) {\n    return (...args) => {\n      return (fn.unmemoized || fn)(...args);\n    };\n  }\n\n  /**\n   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs.\n   *\n   * @name whilst\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with (callback).\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` passes. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has failed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if no callback is passed\n   * @example\n   *\n   * var count = 0;\n   * async.whilst(\n   *     function test(cb) { cb(null, count < 5); },\n   *     function iter(callback) {\n   *         count++;\n   *         setTimeout(function() {\n   *             callback(null, count);\n   *         }, 1000);\n   *     },\n   *     function (err, n) {\n   *         // 5 seconds have passed, n = 5\n   *     }\n   * );\n   */\n  function whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n    function next(err, ...rest) {\n      if (err) return callback(err);\n      results = rest;\n      if (err === false) return;\n      _test(check);\n    }\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (err === false) return;\n      if (!truth) return callback(null, ...results);\n      _fn(next);\n    }\n    return _test(check);\n  }\n  var whilst$1 = awaitify(whilst, 3);\n\n  /**\n   * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n   * stopped, or an error occurs. `callback` will be passed an error and any\n   * arguments passed to the final `iteratee`'s callback.\n   *\n   * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n   *\n   * @name until\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\n   * @category Control Flow\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\n   * execution of `iteratee`. Invoked with (callback).\n   * @param {AsyncFunction} iteratee - An async function which is called each time\n   * `test` fails. Invoked with (callback).\n   * @param {Function} [callback] - A callback which is called after the test\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\n   * will be passed an error and any arguments passed to the final `iteratee`'s\n   * callback. Invoked with (err, [results]);\n   * @returns {Promise} a promise, if a callback is not passed\n   *\n   * @example\n   * const results = []\n   * let finished = false\n   * async.until(function test(cb) {\n   *     cb(null, finished)\n   * }, function iter(next) {\n   *     fetchPage(url, (err, body) => {\n   *         if (err) return next(err)\n   *         results = results.concat(body.objects)\n   *         finished = !!body.next\n   *         next(err)\n   *     })\n   * }, function done (err) {\n   *     // all pages have been fetched\n   * })\n   */\n  function until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1(cb => _test((err, truth) => cb(err, !truth)), iteratee, callback);\n  }\n\n  /**\n   * Runs the `tasks` array of functions in series, each passing their results to\n   * the next in the array. However, if any of the `tasks` pass an error to their\n   * own callback, the next function is not executed, and the main `callback` is\n   * immediately called with the error.\n   *\n   * @name waterfall\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n   * to run.\n   * Each function should complete with any number of `result` values.\n   * The `result` values will be passed as arguments, in order, to the next task.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This will be passed the results of the last task's\n   * callback. Invoked with (err, [results]).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * async.waterfall([\n   *     function(callback) {\n   *         callback(null, 'one', 'two');\n   *     },\n   *     function(arg1, arg2, callback) {\n   *         // arg1 now equals 'one' and arg2 now equals 'two'\n   *         callback(null, 'three');\n   *     },\n   *     function(arg1, callback) {\n   *         // arg1 now equals 'three'\n   *         callback(null, 'done');\n   *     }\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   *\n   * // Or, with named functions:\n   * async.waterfall([\n   *     myFirstFunction,\n   *     mySecondFunction,\n   *     myLastFunction,\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   * function myFirstFunction(callback) {\n   *     callback(null, 'one', 'two');\n   * }\n   * function mySecondFunction(arg1, arg2, callback) {\n   *     // arg1 now equals 'one' and arg2 now equals 'two'\n   *     callback(null, 'three');\n   * }\n   * function myLastFunction(arg1, callback) {\n   *     // arg1 now equals 'three'\n   *     callback(null, 'done');\n   * }\n   */\n  function waterfall(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n    function nextTask(args) {\n      var task = wrapAsync(tasks[taskIndex++]);\n      task(...args, onlyOnce(next));\n    }\n    function next(err, ...args) {\n      if (err === false) return;\n      if (err || taskIndex === tasks.length) {\n        return callback(err, ...args);\n      }\n      nextTask(args);\n    }\n    nextTask([]);\n  }\n  var waterfall$1 = awaitify(waterfall);\n\n  /**\n   * An \"async function\" in the context of Async is an asynchronous function with\n   * a variable number of parameters, with the final parameter being a callback.\n   * (`function (arg1, arg2, ..., callback) {}`)\n   * The final callback is of the form `callback(err, results...)`, which must be\n   * called once the function is completed.  The callback should be called with a\n   * Error as its first argument to signal that an error occurred.\n   * Otherwise, if no error occurred, it should be called with `null` as the first\n   * argument, and any additional `result` arguments that may apply, to signal\n   * successful completion.\n   * The callback must be called exactly once, ideally on a later tick of the\n   * JavaScript event loop.\n   *\n   * This type of function is also referred to as a \"Node-style async function\",\n   * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n   * library are themselves CPS/Node-style async functions, or functions that\n   * return CPS/Node-style async functions.\n   *\n   * Wherever we accept a Node-style async function, we also directly accept an\n   * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n   * In this case, the `async` function will not be passed a final callback\n   * argument, and any thrown error will be used as the `err` argument of the\n   * implicit callback, and the return value will be used as the `result` value.\n   * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n   * argument, and a `resolved` value becomes the `result`.)\n   *\n   * Note, due to JavaScript limitations, we can only detect native `async`\n   * functions and not transpilied implementations.\n   * Your environment must have `async`/`await` support for this to work.\n   * (e.g. Node > v7.6, or a recent version of a modern browser).\n   * If you are using `async` functions through a transpiler (e.g. Babel), you\n   * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n   * because the `async function` will be compiled to an ordinary function that\n   * returns a promise.\n   *\n   * @typedef {Function} AsyncFunction\n   * @static\n   */\n\n  var index = {\n    apply,\n    applyEach,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo: cargo$1,\n    cargoQueue: cargo,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant: constant$1,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$1,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$1,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$1,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$1,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$1,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n  };\n  exports.all = every$1;\n  exports.allLimit = everyLimit$1;\n  exports.allSeries = everySeries$1;\n  exports.any = some$1;\n  exports.anyLimit = someLimit$1;\n  exports.anySeries = someSeries$1;\n  exports.apply = apply;\n  exports.applyEach = applyEach;\n  exports.applyEachSeries = applyEachSeries;\n  exports.asyncify = asyncify;\n  exports.auto = auto;\n  exports.autoInject = autoInject;\n  exports.cargo = cargo$1;\n  exports.cargoQueue = cargo;\n  exports.compose = compose;\n  exports.concat = concat$1;\n  exports.concatLimit = concatLimit$1;\n  exports.concatSeries = concatSeries$1;\n  exports.constant = constant$1;\n  exports.default = index;\n  exports.detect = detect$1;\n  exports.detectLimit = detectLimit$1;\n  exports.detectSeries = detectSeries$1;\n  exports.dir = dir;\n  exports.doDuring = doWhilst$1;\n  exports.doUntil = doUntil;\n  exports.doWhilst = doWhilst$1;\n  exports.during = whilst$1;\n  exports.each = each;\n  exports.eachLimit = eachLimit$1;\n  exports.eachOf = eachOf$1;\n  exports.eachOfLimit = eachOfLimit$1;\n  exports.eachOfSeries = eachOfSeries$1;\n  exports.eachSeries = eachSeries$1;\n  exports.ensureAsync = ensureAsync;\n  exports.every = every$1;\n  exports.everyLimit = everyLimit$1;\n  exports.everySeries = everySeries$1;\n  exports.filter = filter$1;\n  exports.filterLimit = filterLimit$1;\n  exports.filterSeries = filterSeries$1;\n  exports.find = detect$1;\n  exports.findLimit = detectLimit$1;\n  exports.findSeries = detectSeries$1;\n  exports.flatMap = concat$1;\n  exports.flatMapLimit = concatLimit$1;\n  exports.flatMapSeries = concatSeries$1;\n  exports.foldl = reduce$1;\n  exports.foldr = reduceRight;\n  exports.forEach = each;\n  exports.forEachLimit = eachLimit$1;\n  exports.forEachOf = eachOf$1;\n  exports.forEachOfLimit = eachOfLimit$1;\n  exports.forEachOfSeries = eachOfSeries$1;\n  exports.forEachSeries = eachSeries$1;\n  exports.forever = forever$1;\n  exports.groupBy = groupBy;\n  exports.groupByLimit = groupByLimit$1;\n  exports.groupBySeries = groupBySeries;\n  exports.inject = reduce$1;\n  exports.log = log;\n  exports.map = map$1;\n  exports.mapLimit = mapLimit$1;\n  exports.mapSeries = mapSeries$1;\n  exports.mapValues = mapValues;\n  exports.mapValuesLimit = mapValuesLimit$1;\n  exports.mapValuesSeries = mapValuesSeries;\n  exports.memoize = memoize;\n  exports.nextTick = nextTick;\n  exports.parallel = parallel;\n  exports.parallelLimit = parallelLimit;\n  exports.priorityQueue = priorityQueue;\n  exports.queue = queue;\n  exports.race = race$1;\n  exports.reduce = reduce$1;\n  exports.reduceRight = reduceRight;\n  exports.reflect = reflect;\n  exports.reflectAll = reflectAll;\n  exports.reject = reject$1;\n  exports.rejectLimit = rejectLimit$1;\n  exports.rejectSeries = rejectSeries$1;\n  exports.retry = retry;\n  exports.retryable = retryable;\n  exports.select = filter$1;\n  exports.selectLimit = filterLimit$1;\n  exports.selectSeries = filterSeries$1;\n  exports.seq = seq;\n  exports.series = series;\n  exports.setImmediate = setImmediate$1;\n  exports.some = some$1;\n  exports.someLimit = someLimit$1;\n  exports.someSeries = someSeries$1;\n  exports.sortBy = sortBy$1;\n  exports.timeout = timeout;\n  exports.times = times;\n  exports.timesLimit = timesLimit;\n  exports.timesSeries = timesSeries;\n  exports.transform = transform;\n  exports.tryEach = tryEach$1;\n  exports.unmemoize = unmemoize;\n  exports.until = until;\n  exports.waterfall = waterfall$1;\n  exports.whilst = whilst$1;\n  exports.wrapSync = asyncify;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","globalThis","self","async","apply","fn","args","callArgs","initialParams","callback","pop","call","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","_defer$1","setImmediate$1","asyncify","func","isAsync","promise","handlePromise","result","e","then","value","invokeCallback","err","Error","message","error","Symbol","toStringTag","isAsyncGenerator","isAsyncIterable","obj","asyncIterator","wrapAsync","asyncFn","awaitify","arity","length","awaitable","Promise","resolve","reject","cbArgs","applyEach$1","eachfn","applyEach","fns","go","that","cb","concat","_asyncMap","arr","iteratee","results","counter","_iteratee","_","iterCb","index","v","isArrayLike","breakLoop","breakLoop$1","once","wrapper","callFn","Object","assign","getIterator","coll","iterator","createArrayIterator","i","len","next","key","createES2015Iterator","item","done","createObjectIterator","okeys","keys","createIterator","onlyOnce","asyncEachOfLimit","generator","limit","canceled","awaiting","running","idx","replenish","iterDone","iterateeCallback","catch","handleError","eachOfLimit$2","RangeError","nextElem","looping","elem","eachOfLimit","eachOfLimit$1","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf","eachOfImplementation","eachOf$1","map","map$1","eachOfSeries","eachOfSeries$1","mapSeries","mapSeries$1","applyEachSeries","PROMISE_SYMBOL","promiseCallback","res","rej","auto","tasks","concurrency","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","forEach","task","Array","isArray","enqueueTask","push","dependencies","slice","remainingDependencies","dependencyName","join","addListener","checkForDeadlocks","processQueue","runTask","run","shift","taskName","taskListeners","taskComplete","taskCallback","safeResults","rkey","taskFn","currentTask","getDependents","dependent","indexOf","FN_ARGS","ARROW_FN_ARGS","FN_ARG_SPLIT","FN_ARG","stripComments","string","stripped","endBlockComment","endIndex","parseParams","src","toString","match","replace","split","arg","trim","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","taskCb","newArgs","name","DLL","constructor","head","tail","removeLink","node","prev","empty","insertAfter","newNode","insertBefore","unshift","setInitial","toArray","cur","data","remove","testFn","curr","dll","queue$1","worker","payload","_worker","numRunning","workersList","events","drain","saturated","unsaturated","on","event","handler","handleAndRemove","off","ev","filter","trigger","processingScheduled","_insert","insertAtFront","rejectOnError","q","started","_createTaskItem","_tasks","_createCB","l","splice","buffer","idle","_maybeDrain","eventMethod","isProcessing","paused","datum","pushAsync","kill","unshiftAsync","Math","min","pause","resume","defineProperties","writable","cargo$1","cargo","reduce","memo","x","reduce$1","seq","functions","_functions","newargs","nextargs","compose","reverse","mapLimit","mapLimit$1","concatLimit","val","mapResults","concatLimit$1","concat$1","concatSeries","concatSeries$1","constant$1","ignoredArgs","_createTester","check","getResult","testPassed","testResult","detect","bool","detect$1","detectLimit","detectLimit$1","detectSeries","detectSeries$1","consoleFunc","resultArgs","console","dir","doWhilst","test","_fn","_test","truth","doWhilst$1","doUntil","_withoutIndex","eachLimit$2","each","eachLimit","eachLimit$1","eachSeries","eachSeries$1","ensureAsync","sync","innerArgs","every","every$1","everyLimit","everyLimit$1","everySeries","everySeries$1","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter$1","filterLimit","filterLimit$1","filterSeries","filterSeries$1","forever","errback","forever$1","groupByLimit","hasOwnProperty","prototype","groupByLimit$1","groupBy","groupBySeries","log","mapValuesLimit","newObj","mapValuesLimit$1","mapValues","mapValuesSeries","memoize","hasher","queues","memoized","unmemoized","_defer","_parallel","parallel","parallelLimit","queue","items","Heap","heap","pushCount","Number","MIN_SAFE_INTEGER","percUp","p","smaller","parent","t","percDown","leftChi","top","j","y","priority","priorityQueue","createDataItems","race","TypeError","race$1","reduceRight","array","reversed","reflect","reflectOn","reflectCallback","retVal","reflectAll","reject$2","reject$1","rejectLimit","rejectLimit$1","rejectSeries","rejectSeries$1","constant","DEFAULT_TIMES","DEFAULT_INTERVAL","retry","opts","options","times","intervalFunc","arguments","parseTimes","_task","attempt","retryAttempt","errorFilter","acc","interval","retryable","series","some","Boolean","some$1","someLimit","someLimit$1","someSeries","someSeries$1","sortBy","criteria","comparator","left","right","sortBy$1","timeout","milliseconds","info","timedOut","timer","timeoutCallback","code","clearTimeout","range","size","timesLimit","count","n","timesSeries","transform","accumulator","k","tryEach","tryEach$1","unmemoize","whilst","rest","whilst$1","until","waterfall","taskIndex","nextTask","waterfall$1","cargoQueue","all","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","flatMap","flatMapLimit","flatMapSeries","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","during","doDuring","default","defineProperty"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/async/dist/async.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.async = {}));\n})(this, (function (exports) { 'use strict';\n\n    /**\n     * Creates a continuation function with some arguments already applied.\n     *\n     * Useful as a shorthand when combined with other control flow functions. Any\n     * arguments passed to the returned function are added to the arguments\n     * originally passed to apply.\n     *\n     * @name apply\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {Function} fn - The function you want to eventually apply all\n     * arguments to. Invokes with (arguments...).\n     * @param {...*} arguments... - Any number of arguments to automatically apply\n     * when the continuation is called.\n     * @returns {Function} the partially-applied function\n     * @example\n     *\n     * // using apply\n     * async.parallel([\n     *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n     *     async.apply(fs.writeFile, 'testfile2', 'test2')\n     * ]);\n     *\n     *\n     * // the same process without using apply\n     * async.parallel([\n     *     function(callback) {\n     *         fs.writeFile('testfile1', 'test1', callback);\n     *     },\n     *     function(callback) {\n     *         fs.writeFile('testfile2', 'test2', callback);\n     *     }\n     * ]);\n     *\n     * // It's possible to pass any number of additional arguments when calling the\n     * // continuation:\n     *\n     * node> var fn = async.apply(sys.puts, 'one');\n     * node> fn('two', 'three');\n     * one\n     * two\n     * three\n     */\n    function apply(fn, ...args) {\n        return (...callArgs) => fn(...args,...callArgs);\n    }\n\n    function initialParams (fn) {\n        return function (...args/*, callback*/) {\n            var callback = args.pop();\n            return fn.call(this, args, callback);\n        };\n    }\n\n    /* istanbul ignore file */\n\n    var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\n    var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n    var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n    function fallback(fn) {\n        setTimeout(fn, 0);\n    }\n\n    function wrap(defer) {\n        return (fn, ...args) => defer(() => fn(...args));\n    }\n\n    var _defer$1;\n\n    if (hasQueueMicrotask) {\n        _defer$1 = queueMicrotask;\n    } else if (hasSetImmediate) {\n        _defer$1 = setImmediate;\n    } else if (hasNextTick) {\n        _defer$1 = process.nextTick;\n    } else {\n        _defer$1 = fallback;\n    }\n\n    var setImmediate$1 = wrap(_defer$1);\n\n    /**\n     * Take a sync function and make it async, passing its return value to a\n     * callback. This is useful for plugging sync functions into a waterfall,\n     * series, or other async functions. Any arguments passed to the generated\n     * function will be passed to the wrapped function (except for the final\n     * callback argument). Errors thrown will be passed to the callback.\n     *\n     * If the function passed to `asyncify` returns a Promise, that promises's\n     * resolved/rejected state will be used to call the callback, rather than simply\n     * the synchronous return value.\n     *\n     * This also means you can asyncify ES2017 `async` functions.\n     *\n     * @name asyncify\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @alias wrapSync\n     * @category Util\n     * @param {Function} func - The synchronous function, or Promise-returning\n     * function to convert to an {@link AsyncFunction}.\n     * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n     * invoked with `(args..., callback)`.\n     * @example\n     *\n     * // passing a regular synchronous function\n     * async.waterfall([\n     *     async.apply(fs.readFile, filename, \"utf8\"),\n     *     async.asyncify(JSON.parse),\n     *     function (data, next) {\n     *         // data is the result of parsing the text.\n     *         // If there was a parsing error, it would have been caught.\n     *     }\n     * ], callback);\n     *\n     * // passing a function returning a promise\n     * async.waterfall([\n     *     async.apply(fs.readFile, filename, \"utf8\"),\n     *     async.asyncify(function (contents) {\n     *         return db.model.create(contents);\n     *     }),\n     *     function (model, next) {\n     *         // `model` is the instantiated model object.\n     *         // If there was an error, this function would be skipped.\n     *     }\n     * ], callback);\n     *\n     * // es2017 example, though `asyncify` is not needed if your JS environment\n     * // supports async functions out of the box\n     * var q = async.queue(async.asyncify(async function(file) {\n     *     var intermediateStep = await processFile(file);\n     *     return await somePromise(intermediateStep)\n     * }));\n     *\n     * q.push(files);\n     */\n    function asyncify(func) {\n        if (isAsync(func)) {\n            return function (...args/*, callback*/) {\n                const callback = args.pop();\n                const promise = func.apply(this, args);\n                return handlePromise(promise, callback)\n            }\n        }\n\n        return initialParams(function (args, callback) {\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (result && typeof result.then === 'function') {\n                return handlePromise(result, callback)\n            } else {\n                callback(null, result);\n            }\n        });\n    }\n\n    function handlePromise(promise, callback) {\n        return promise.then(value => {\n            invokeCallback(callback, null, value);\n        }, err => {\n            invokeCallback(callback, err && (err instanceof Error || err.message) ? err : new Error(err));\n        });\n    }\n\n    function invokeCallback(callback, error, value) {\n        try {\n            callback(error, value);\n        } catch (err) {\n            setImmediate$1(e => { throw e }, err);\n        }\n    }\n\n    function isAsync(fn) {\n        return fn[Symbol.toStringTag] === 'AsyncFunction';\n    }\n\n    function isAsyncGenerator(fn) {\n        return fn[Symbol.toStringTag] === 'AsyncGenerator';\n    }\n\n    function isAsyncIterable(obj) {\n        return typeof obj[Symbol.asyncIterator] === 'function';\n    }\n\n    function wrapAsync(asyncFn) {\n        if (typeof asyncFn !== 'function') throw new Error('expected a function')\n        return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n    }\n\n    // conditionally promisify a function.\n    // only return a promise if a callback is omitted\n    function awaitify (asyncFn, arity) {\n        if (!arity) arity = asyncFn.length;\n        if (!arity) throw new Error('arity is undefined')\n        function awaitable (...args) {\n            if (typeof args[arity - 1] === 'function') {\n                return asyncFn.apply(this, args)\n            }\n\n            return new Promise((resolve, reject) => {\n                args[arity - 1] = (err, ...cbArgs) => {\n                    if (err) return reject(err)\n                    resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n                };\n                asyncFn.apply(this, args);\n            })\n        }\n\n        return awaitable\n    }\n\n    function applyEach$1 (eachfn) {\n        return function applyEach(fns, ...callArgs) {\n            const go = awaitify(function (callback) {\n                var that = this;\n                return eachfn(fns, (fn, cb) => {\n                    wrapAsync(fn).apply(that, callArgs.concat(cb));\n                }, callback);\n            });\n            return go;\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iteratee, callback) {\n        arr = arr || [];\n        var results = [];\n        var counter = 0;\n        var _iteratee = wrapAsync(iteratee);\n\n        return eachfn(arr, (value, _, iterCb) => {\n            var index = counter++;\n            _iteratee(value, (err, v) => {\n                results[index] = v;\n                iterCb(err);\n            });\n        }, err => {\n            callback(err, results);\n        });\n    }\n\n    function isArrayLike(value) {\n        return value &&\n            typeof value.length === 'number' &&\n            value.length >= 0 &&\n            value.length % 1 === 0;\n    }\n\n    // A temporary value used to identify if the loop should be broken.\n    // See #1064, #1293\n    const breakLoop = {};\n    var breakLoop$1 = breakLoop;\n\n    function once(fn) {\n        function wrapper (...args) {\n            if (fn === null) return;\n            var callFn = fn;\n            fn = null;\n            callFn.apply(this, args);\n        }\n        Object.assign(wrapper, fn);\n        return wrapper\n    }\n\n    function getIterator (coll) {\n        return coll[Symbol.iterator] && coll[Symbol.iterator]();\n    }\n\n    function createArrayIterator(coll) {\n        var i = -1;\n        var len = coll.length;\n        return function next() {\n            return ++i < len ? {value: coll[i], key: i} : null;\n        }\n    }\n\n    function createES2015Iterator(iterator) {\n        var i = -1;\n        return function next() {\n            var item = iterator.next();\n            if (item.done)\n                return null;\n            i++;\n            return {value: item.value, key: i};\n        }\n    }\n\n    function createObjectIterator(obj) {\n        var okeys = obj ? Object.keys(obj) : [];\n        var i = -1;\n        var len = okeys.length;\n        return function next() {\n            var key = okeys[++i];\n            if (key === '__proto__') {\n                return next();\n            }\n            return i < len ? {value: obj[key], key} : null;\n        };\n    }\n\n    function createIterator(coll) {\n        if (isArrayLike(coll)) {\n            return createArrayIterator(coll);\n        }\n\n        var iterator = getIterator(coll);\n        return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n    }\n\n    function onlyOnce(fn) {\n        return function (...args) {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            var callFn = fn;\n            fn = null;\n            callFn.apply(this, args);\n        };\n    }\n\n    // for async generators\n    function asyncEachOfLimit(generator, limit, iteratee, callback) {\n        let done = false;\n        let canceled = false;\n        let awaiting = false;\n        let running = 0;\n        let idx = 0;\n\n        function replenish() {\n            //console.log('replenish')\n            if (running >= limit || awaiting || done) return\n            //console.log('replenish awaiting')\n            awaiting = true;\n            generator.next().then(({value, done: iterDone}) => {\n                //console.log('got value', value)\n                if (canceled || done) return\n                awaiting = false;\n                if (iterDone) {\n                    done = true;\n                    if (running <= 0) {\n                        //console.log('done nextCb')\n                        callback(null);\n                    }\n                    return;\n                }\n                running++;\n                iteratee(value, idx, iterateeCallback);\n                idx++;\n                replenish();\n            }).catch(handleError);\n        }\n\n        function iterateeCallback(err, result) {\n            //console.log('iterateeCallback')\n            running -= 1;\n            if (canceled) return\n            if (err) return handleError(err)\n\n            if (err === false) {\n                done = true;\n                canceled = true;\n                return\n            }\n\n            if (result === breakLoop$1 || (done && running <= 0)) {\n                done = true;\n                //console.log('done iterCb')\n                return callback(null);\n            }\n            replenish();\n        }\n\n        function handleError(err) {\n            if (canceled) return\n            awaiting = false;\n            done = true;\n            callback(err);\n        }\n\n        replenish();\n    }\n\n    var eachOfLimit$2 = (limit) => {\n        return (obj, iteratee, callback) => {\n            callback = once(callback);\n            if (limit <= 0) {\n                throw new RangeError('concurrency limit cannot be less than 1')\n            }\n            if (!obj) {\n                return callback(null);\n            }\n            if (isAsyncGenerator(obj)) {\n                return asyncEachOfLimit(obj, limit, iteratee, callback)\n            }\n            if (isAsyncIterable(obj)) {\n                return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n            }\n            var nextElem = createIterator(obj);\n            var done = false;\n            var canceled = false;\n            var running = 0;\n            var looping = false;\n\n            function iterateeCallback(err, value) {\n                if (canceled) return\n                running -= 1;\n                if (err) {\n                    done = true;\n                    callback(err);\n                }\n                else if (err === false) {\n                    done = true;\n                    canceled = true;\n                }\n                else if (value === breakLoop$1 || (done && running <= 0)) {\n                    done = true;\n                    return callback(null);\n                }\n                else if (!looping) {\n                    replenish();\n                }\n            }\n\n            function replenish () {\n                looping = true;\n                while (running < limit && !done) {\n                    var elem = nextElem();\n                    if (elem === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n                }\n                looping = false;\n            }\n\n            replenish();\n        };\n    };\n\n    /**\n     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name eachOfLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.eachOf]{@link module:Collections.eachOf}\n     * @alias forEachOfLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each\n     * item in `coll`. The `key` is the item's key, or index in the case of an\n     * array.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachOfLimit(coll, limit, iteratee, callback) {\n        return eachOfLimit$2(limit)(coll, wrapAsync(iteratee), callback);\n    }\n\n    var eachOfLimit$1 = awaitify(eachOfLimit, 4);\n\n    // eachOf implementation optimized for array-likes\n    function eachOfArrayLike(coll, iteratee, callback) {\n        callback = once(callback);\n        var index = 0,\n            completed = 0,\n            {length} = coll,\n            canceled = false;\n        if (length === 0) {\n            callback(null);\n        }\n\n        function iteratorCallback(err, value) {\n            if (err === false) {\n                canceled = true;\n            }\n            if (canceled === true) return\n            if (err) {\n                callback(err);\n            } else if ((++completed === length) || value === breakLoop$1) {\n                callback(null);\n            }\n        }\n\n        for (; index < length; index++) {\n            iteratee(coll[index], index, onlyOnce(iteratorCallback));\n        }\n    }\n\n    // a generic version of eachOf which can handle array, object, and iterator cases.\n    function eachOfGeneric (coll, iteratee, callback) {\n        return eachOfLimit$1(coll, Infinity, iteratee, callback);\n    }\n\n    /**\n     * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n     * to the iteratee.\n     *\n     * @name eachOf\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias forEachOf\n     * @category Collection\n     * @see [async.each]{@link module:Collections.each}\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each\n     * item in `coll`.\n     * The `key` is the item's key, or index in the case of an array.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // dev.json is a file containing a valid json object config for dev environment\n     * // dev.json is a file containing a valid json object config for test environment\n     * // prod.json is a file containing a valid json object config for prod environment\n     * // invalid.json is a file with a malformed json object\n     *\n     * let configs = {}; //global variable\n     * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n     * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n     *\n     * // asynchronous function that reads a json file and parses the contents as json object\n     * function parseFile(file, key, callback) {\n     *     fs.readFile(file, \"utf8\", function(err, data) {\n     *         if (err) return calback(err);\n     *         try {\n     *             configs[key] = JSON.parse(data);\n     *         } catch (e) {\n     *             return callback(e);\n     *         }\n     *         callback();\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n     *     if (err) {\n     *         console.error(err);\n     *     } else {\n     *         console.log(configs);\n     *         // configs is now a map of JSON data, e.g.\n     *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n     *     }\n     * });\n     *\n     * //Error handing\n     * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n     *     if (err) {\n     *         console.error(err);\n     *         // JSON parse error exception\n     *     } else {\n     *         console.log(configs);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.forEachOf(validConfigFileMap, parseFile)\n     * .then( () => {\n     *     console.log(configs);\n     *     // configs is now a map of JSON data, e.g.\n     *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n     * }).catch( err => {\n     *     console.error(err);\n     * });\n     *\n     * //Error handing\n     * async.forEachOf(invalidConfigFileMap, parseFile)\n     * .then( () => {\n     *     console.log(configs);\n     * }).catch( err => {\n     *     console.error(err);\n     *     // JSON parse error exception\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n     *         console.log(configs);\n     *         // configs is now a map of JSON data, e.g.\n     *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * //Error handing\n     * async () => {\n     *     try {\n     *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n     *         console.log(configs);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // JSON parse error exception\n     *     }\n     * }\n     *\n     */\n    function eachOf(coll, iteratee, callback) {\n        var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n        return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n    }\n\n    var eachOf$1 = awaitify(eachOf, 3);\n\n    /**\n     * Produces a new collection of values by mapping each value in `coll` through\n     * the `iteratee` function. The `iteratee` is called with an item from `coll`\n     * and a callback for when it has finished processing. Each of these callbacks\n     * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n     * `iteratee` passes an error to its callback, the main `callback` (for the\n     * `map` function) is immediately called with the error.\n     *\n     * Note, that since this function applies the `iteratee` to each item in\n     * parallel, there is no guarantee that the `iteratee` functions will complete\n     * in order. However, the results array will be in the same order as the\n     * original `coll`.\n     *\n     * If `map` is passed an Object, the results will be an Array.  The results\n     * will roughly be in the order of the original Objects' keys (but this can\n     * vary across JavaScript engines).\n     *\n     * @name map\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an Array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     * // file4.txt does not exist\n     *\n     * const fileList = ['file1.txt','file2.txt','file3.txt'];\n     * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n     *\n     * // asynchronous function that returns the file size in bytes\n     * function getFileSizeInBytes(file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.map(fileList, getFileSizeInBytes, function(err, results) {\n     *     if (err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(results);\n     *         // results is now an array of the file size in bytes for each file, e.g.\n     *         // [ 1000, 2000, 3000]\n     *     }\n     * });\n     *\n     * // Error Handling\n     * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n     *     if (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     } else {\n     *         console.log(results);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.map(fileList, getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     *     // results is now an array of the file size in bytes for each file, e.g.\n     *     // [ 1000, 2000, 3000]\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.map(withMissingFileList, getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.map(fileList, getFileSizeInBytes);\n     *         console.log(results);\n     *         // results is now an array of the file size in bytes for each file, e.g.\n     *         // [ 1000, 2000, 3000]\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n     *         console.log(results);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function map (coll, iteratee, callback) {\n        return _asyncMap(eachOf$1, coll, iteratee, callback)\n    }\n    var map$1 = awaitify(map, 3);\n\n    /**\n     * Applies the provided arguments to each function in the array, calling\n     * `callback` after all functions have completed. If you only provide the first\n     * argument, `fns`, then it will return a function which lets you pass in the\n     * arguments as if it were a single function call. If more arguments are\n     * provided, `callback` is required while `args` is still optional. The results\n     * for each of the applied async functions are passed to the final callback\n     * as an array.\n     *\n     * @name applyEach\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n     * to all call with the same arguments\n     * @param {...*} [args] - any number of separate arguments to pass to the\n     * function.\n     * @param {Function} [callback] - the final argument should be the callback,\n     * called when all functions have completed processing.\n     * @returns {AsyncFunction} - Returns a function that takes no args other than\n     * an optional callback, that is the result of applying the `args` to each\n     * of the functions.\n     * @example\n     *\n     * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n     *\n     * appliedFn((err, results) => {\n     *     // results[0] is the results for `enableSearch`\n     *     // results[1] is the results for `updateSchema`\n     * });\n     *\n     * // partial application example:\n     * async.each(\n     *     buckets,\n     *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n     *     callback\n     * );\n     */\n    var applyEach = applyEach$1(map$1);\n\n    /**\n     * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n     *\n     * @name eachOfSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.eachOf]{@link module:Collections.eachOf}\n     * @alias forEachOfSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * Invoked with (item, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachOfSeries(coll, iteratee, callback) {\n        return eachOfLimit$1(coll, 1, iteratee, callback)\n    }\n    var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n    /**\n     * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n     *\n     * @name mapSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapSeries (coll, iteratee, callback) {\n        return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var mapSeries$1 = awaitify(mapSeries, 3);\n\n    /**\n     * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n     *\n     * @name applyEachSeries\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n     * call with the same arguments\n     * @param {...*} [args] - any number of separate arguments to pass to the\n     * function.\n     * @param {Function} [callback] - the final argument should be the callback,\n     * called when all functions have completed processing.\n     * @returns {AsyncFunction} - A function, that when called, is the result of\n     * appling the `args` to the list of functions.  It takes no args, other than\n     * a callback.\n     */\n    var applyEachSeries = applyEach$1(mapSeries$1);\n\n    const PROMISE_SYMBOL = Symbol('promiseCallback');\n\n    function promiseCallback () {\n        let resolve, reject;\n        function callback (err, ...args) {\n            if (err) return reject(err)\n            resolve(args.length > 1 ? args : args[0]);\n        }\n\n        callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n            resolve = res,\n            reject = rej;\n        });\n\n        return callback\n    }\n\n    /**\n     * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n     * their requirements. Each function can optionally depend on other functions\n     * being completed first, and each function is run as soon as its requirements\n     * are satisfied.\n     *\n     * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n     * will stop. Further tasks will not execute (so any other functions depending\n     * on it will not run), and the main `callback` is immediately called with the\n     * error.\n     *\n     * {@link AsyncFunction}s also receive an object containing the results of functions which\n     * have completed so far as the first argument, if they have dependencies. If a\n     * task function has no dependencies, it will only be passed a callback.\n     *\n     * @name auto\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Object} tasks - An object. Each of its properties is either a\n     * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n     * in the array. The object's key of a property serves as the name of the task\n     * defined by that property, i.e. can be used when specifying requirements for\n     * other tasks. The function receives one or two arguments:\n     * * a `results` object, containing the results of the previously executed\n     *   functions, only passed if the task has any dependencies,\n     * * a `callback(err, result)` function, which must be called when finished,\n     *   passing an `error` (which can be `null`) and the result of the function's\n     *   execution.\n     * @param {number} [concurrency=Infinity] - An optional `integer` for\n     * determining the maximum number of tasks that can be run in parallel. By\n     * default, as many as possible.\n     * @param {Function} [callback] - An optional callback which is called when all\n     * the tasks have been completed. It receives the `err` argument if any `tasks`\n     * pass an error to their callback. Results are always returned; however, if an\n     * error occurs, no further `tasks` will be performed, and the results object\n     * will only contain partial results. Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     * @example\n     *\n     * //Using Callbacks\n     * async.auto({\n     *     get_data: function(callback) {\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: ['get_data', 'make_folder', function(results, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(results, callback) {\n     *         // once the file is written let's email a link to it...\n     *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *     }]\n     * }, function(err, results) {\n     *     if (err) {\n     *         console.log('err = ', err);\n     *     }\n     *     console.log('results = ', results);\n     *     // results = {\n     *     //     get_data: ['data', 'converted to array']\n     *     //     make_folder; 'folder',\n     *     //     write_file: 'filename'\n     *     //     email_link: { file: 'filename', email: 'user@example.com' }\n     *     // }\n     * });\n     *\n     * //Using Promises\n     * async.auto({\n     *     get_data: function(callback) {\n     *         console.log('in get_data');\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         console.log('in make_folder');\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: ['get_data', 'make_folder', function(results, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(results, callback) {\n     *         // once the file is written let's email a link to it...\n     *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *     }]\n     * }).then(results => {\n     *     console.log('results = ', results);\n     *     // results = {\n     *     //     get_data: ['data', 'converted to array']\n     *     //     make_folder; 'folder',\n     *     //     write_file: 'filename'\n     *     //     email_link: { file: 'filename', email: 'user@example.com' }\n     *     // }\n     * }).catch(err => {\n     *     console.log('err = ', err);\n     * });\n     *\n     * //Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.auto({\n     *             get_data: function(callback) {\n     *                 // async code to get some data\n     *                 callback(null, 'data', 'converted to array');\n     *             },\n     *             make_folder: function(callback) {\n     *                 // async code to create a directory to store a file in\n     *                 // this is run at the same time as getting the data\n     *                 callback(null, 'folder');\n     *             },\n     *             write_file: ['get_data', 'make_folder', function(results, callback) {\n     *                 // once there is some data and the directory exists,\n     *                 // write the data to a file in the directory\n     *                 callback(null, 'filename');\n     *             }],\n     *             email_link: ['write_file', function(results, callback) {\n     *                 // once the file is written let's email a link to it...\n     *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n     *             }]\n     *         });\n     *         console.log('results = ', results);\n     *         // results = {\n     *         //     get_data: ['data', 'converted to array']\n     *         //     make_folder; 'folder',\n     *         //     write_file: 'filename'\n     *         //     email_link: { file: 'filename', email: 'user@example.com' }\n     *         // }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function auto(tasks, concurrency, callback) {\n        if (typeof concurrency !== 'number') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = once(callback || promiseCallback());\n        var numTasks = Object.keys(tasks).length;\n        if (!numTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = numTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n        var canceled = false;\n        var hasError = false;\n\n        var listeners = Object.create(null);\n\n        var readyTasks = [];\n\n        // for cycle detection:\n        var readyToCheck = []; // tasks that have been identified as reachable\n        // without the possibility of returning to an ancestor task\n        var uncheckedDependencies = {};\n\n        Object.keys(tasks).forEach(key => {\n            var task = tasks[key];\n            if (!Array.isArray(task)) {\n                // no dependencies\n                enqueueTask(key, [task]);\n                readyToCheck.push(key);\n                return;\n            }\n\n            var dependencies = task.slice(0, task.length - 1);\n            var remainingDependencies = dependencies.length;\n            if (remainingDependencies === 0) {\n                enqueueTask(key, task);\n                readyToCheck.push(key);\n                return;\n            }\n            uncheckedDependencies[key] = remainingDependencies;\n\n            dependencies.forEach(dependencyName => {\n                if (!tasks[dependencyName]) {\n                    throw new Error('async.auto task `' + key +\n                        '` has a non-existent dependency `' +\n                        dependencyName + '` in ' +\n                        dependencies.join(', '));\n                }\n                addListener(dependencyName, () => {\n                    remainingDependencies--;\n                    if (remainingDependencies === 0) {\n                        enqueueTask(key, task);\n                    }\n                });\n            });\n        });\n\n        checkForDeadlocks();\n        processQueue();\n\n        function enqueueTask(key, task) {\n            readyTasks.push(() => runTask(key, task));\n        }\n\n        function processQueue() {\n            if (canceled) return\n            if (readyTasks.length === 0 && runningTasks === 0) {\n                return callback(null, results);\n            }\n            while(readyTasks.length && runningTasks < concurrency) {\n                var run = readyTasks.shift();\n                run();\n            }\n\n        }\n\n        function addListener(taskName, fn) {\n            var taskListeners = listeners[taskName];\n            if (!taskListeners) {\n                taskListeners = listeners[taskName] = [];\n            }\n\n            taskListeners.push(fn);\n        }\n\n        function taskComplete(taskName) {\n            var taskListeners = listeners[taskName] || [];\n            taskListeners.forEach(fn => fn());\n            processQueue();\n        }\n\n\n        function runTask(key, task) {\n            if (hasError) return;\n\n            var taskCallback = onlyOnce((err, ...result) => {\n                runningTasks--;\n                if (err === false) {\n                    canceled = true;\n                    return\n                }\n                if (result.length < 2) {\n                    [result] = result;\n                }\n                if (err) {\n                    var safeResults = {};\n                    Object.keys(results).forEach(rkey => {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[key] = result;\n                    hasError = true;\n                    listeners = Object.create(null);\n                    if (canceled) return\n                    callback(err, safeResults);\n                } else {\n                    results[key] = result;\n                    taskComplete(key);\n                }\n            });\n\n            runningTasks++;\n            var taskFn = wrapAsync(task[task.length - 1]);\n            if (task.length > 1) {\n                taskFn(results, taskCallback);\n            } else {\n                taskFn(taskCallback);\n            }\n        }\n\n        function checkForDeadlocks() {\n            // Kahn's algorithm\n            // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n            // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n            var currentTask;\n            var counter = 0;\n            while (readyToCheck.length) {\n                currentTask = readyToCheck.pop();\n                counter++;\n                getDependents(currentTask).forEach(dependent => {\n                    if (--uncheckedDependencies[dependent] === 0) {\n                        readyToCheck.push(dependent);\n                    }\n                });\n            }\n\n            if (counter !== numTasks) {\n                throw new Error(\n                    'async.auto cannot execute tasks due to a recursive dependency'\n                );\n            }\n        }\n\n        function getDependents(taskName) {\n            var result = [];\n            Object.keys(tasks).forEach(key => {\n                const task = tasks[key];\n                if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                    result.push(key);\n                }\n            });\n            return result;\n        }\n\n        return callback[PROMISE_SYMBOL]\n    }\n\n    var FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\n    var ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\n    var FN_ARG_SPLIT = /,/;\n    var FN_ARG = /(=.+)?(\\s*)$/;\n\n    function stripComments(string) {\n        let stripped = '';\n        let index = 0;\n        let endBlockComment = string.indexOf('*/');\n        while (index < string.length) {\n            if (string[index] === '/' && string[index+1] === '/') {\n                // inline comment\n                let endIndex = string.indexOf('\\n', index);\n                index = (endIndex === -1) ? string.length : endIndex;\n            } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n                // block comment\n                let endIndex = string.indexOf('*/', index);\n                if (endIndex !== -1) {\n                    index = endIndex + 2;\n                    endBlockComment = string.indexOf('*/', index);\n                } else {\n                    stripped += string[index];\n                    index++;\n                }\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        }\n        return stripped;\n    }\n\n    function parseParams(func) {\n        const src = stripComments(func.toString());\n        let match = src.match(FN_ARGS);\n        if (!match) {\n            match = src.match(ARROW_FN_ARGS);\n        }\n        if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n        let [, args] = match;\n        return args\n            .replace(/\\s/g, '')\n            .split(FN_ARG_SPLIT)\n            .map((arg) => arg.replace(FN_ARG, '').trim());\n    }\n\n    /**\n     * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n     * tasks are specified as parameters to the function, after the usual callback\n     * parameter, with the parameter names matching the names of the tasks it\n     * depends on. This can provide even more readable task graphs which can be\n     * easier to maintain.\n     *\n     * If a final callback is specified, the task results are similarly injected,\n     * specified as named parameters after the initial error parameter.\n     *\n     * The autoInject function is purely syntactic sugar and its semantics are\n     * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n     *\n     * @name autoInject\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.auto]{@link module:ControlFlow.auto}\n     * @category Control Flow\n     * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n     * the form 'func([dependencies...], callback). The object's key of a property\n     * serves as the name of the task defined by that property, i.e. can be used\n     * when specifying requirements for other tasks.\n     * * The `callback` parameter is a `callback(err, result)` which must be called\n     *   when finished, passing an `error` (which can be `null`) and the result of\n     *   the function's execution. The remaining parameters name other tasks on\n     *   which the task is dependent, and the results from those tasks are the\n     *   arguments of those parameters.\n     * @param {Function} [callback] - An optional callback which is called when all\n     * the tasks have been completed. It receives the `err` argument if any `tasks`\n     * pass an error to their callback, and a `results` object with any completed\n     * task results, similar to `auto`.\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * //  The example from `auto` can be rewritten as follows:\n     * async.autoInject({\n     *     get_data: function(callback) {\n     *         // async code to get some data\n     *         callback(null, 'data', 'converted to array');\n     *     },\n     *     make_folder: function(callback) {\n     *         // async code to create a directory to store a file in\n     *         // this is run at the same time as getting the data\n     *         callback(null, 'folder');\n     *     },\n     *     write_file: function(get_data, make_folder, callback) {\n     *         // once there is some data and the directory exists,\n     *         // write the data to a file in the directory\n     *         callback(null, 'filename');\n     *     },\n     *     email_link: function(write_file, callback) {\n     *         // once the file is written let's email a link to it...\n     *         // write_file contains the filename returned by write_file.\n     *         callback(null, {'file':write_file, 'email':'user@example.com'});\n     *     }\n     * }, function(err, results) {\n     *     console.log('err = ', err);\n     *     console.log('email_link = ', results.email_link);\n     * });\n     *\n     * // If you are using a JS minifier that mangles parameter names, `autoInject`\n     * // will not work with plain functions, since the parameter names will be\n     * // collapsed to a single letter identifier.  To work around this, you can\n     * // explicitly specify the names of the parameters your task function needs\n     * // in an array, similar to Angular.js dependency injection.\n     *\n     * // This still has an advantage over plain `auto`, since the results a task\n     * // depends on are still spread into arguments.\n     * async.autoInject({\n     *     //...\n     *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n     *         callback(null, 'filename');\n     *     }],\n     *     email_link: ['write_file', function(write_file, callback) {\n     *         callback(null, {'file':write_file, 'email':'user@example.com'});\n     *     }]\n     *     //...\n     * }, function(err, results) {\n     *     console.log('err = ', err);\n     *     console.log('email_link = ', results.email_link);\n     * });\n     */\n    function autoInject(tasks, callback) {\n        var newTasks = {};\n\n        Object.keys(tasks).forEach(key => {\n            var taskFn = tasks[key];\n            var params;\n            var fnIsAsync = isAsync(taskFn);\n            var hasNoDeps =\n                (!fnIsAsync && taskFn.length === 1) ||\n                (fnIsAsync && taskFn.length === 0);\n\n            if (Array.isArray(taskFn)) {\n                params = [...taskFn];\n                taskFn = params.pop();\n\n                newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n            } else if (hasNoDeps) {\n                // no dependencies, use the function as-is\n                newTasks[key] = taskFn;\n            } else {\n                params = parseParams(taskFn);\n                if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                    throw new Error(\"autoInject task functions require explicit parameters.\");\n                }\n\n                // remove callback param\n                if (!fnIsAsync) params.pop();\n\n                newTasks[key] = params.concat(newTask);\n            }\n\n            function newTask(results, taskCb) {\n                var newArgs = params.map(name => results[name]);\n                newArgs.push(taskCb);\n                wrapAsync(taskFn)(...newArgs);\n            }\n        });\n\n        return auto(newTasks, callback);\n    }\n\n    // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n    // used for queues. This implementation assumes that the node provided by the user can be modified\n    // to adjust the next and last properties. We implement only the minimal functionality\n    // for queue support.\n    class DLL {\n        constructor() {\n            this.head = this.tail = null;\n            this.length = 0;\n        }\n\n        removeLink(node) {\n            if (node.prev) node.prev.next = node.next;\n            else this.head = node.next;\n            if (node.next) node.next.prev = node.prev;\n            else this.tail = node.prev;\n\n            node.prev = node.next = null;\n            this.length -= 1;\n            return node;\n        }\n\n        empty () {\n            while(this.head) this.shift();\n            return this;\n        }\n\n        insertAfter(node, newNode) {\n            newNode.prev = node;\n            newNode.next = node.next;\n            if (node.next) node.next.prev = newNode;\n            else this.tail = newNode;\n            node.next = newNode;\n            this.length += 1;\n        }\n\n        insertBefore(node, newNode) {\n            newNode.prev = node.prev;\n            newNode.next = node;\n            if (node.prev) node.prev.next = newNode;\n            else this.head = newNode;\n            node.prev = newNode;\n            this.length += 1;\n        }\n\n        unshift(node) {\n            if (this.head) this.insertBefore(this.head, node);\n            else setInitial(this, node);\n        }\n\n        push(node) {\n            if (this.tail) this.insertAfter(this.tail, node);\n            else setInitial(this, node);\n        }\n\n        shift() {\n            return this.head && this.removeLink(this.head);\n        }\n\n        pop() {\n            return this.tail && this.removeLink(this.tail);\n        }\n\n        toArray() {\n            return [...this]\n        }\n\n        *[Symbol.iterator] () {\n            var cur = this.head;\n            while (cur) {\n                yield cur.data;\n                cur = cur.next;\n            }\n        }\n\n        remove (testFn) {\n            var curr = this.head;\n            while(curr) {\n                var {next} = curr;\n                if (testFn(curr)) {\n                    this.removeLink(curr);\n                }\n                curr = next;\n            }\n            return this;\n        }\n    }\n\n    function setInitial(dll, node) {\n        dll.length = 1;\n        dll.head = dll.tail = node;\n    }\n\n    function queue$1(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new RangeError('Concurrency must not be zero');\n        }\n\n        var _worker = wrapAsync(worker);\n        var numRunning = 0;\n        var workersList = [];\n        const events = {\n            error: [],\n            drain: [],\n            saturated: [],\n            unsaturated: [],\n            empty: []\n        };\n\n        function on (event, handler) {\n            events[event].push(handler);\n        }\n\n        function once (event, handler) {\n            const handleAndRemove = (...args) => {\n                off(event, handleAndRemove);\n                handler(...args);\n            };\n            events[event].push(handleAndRemove);\n        }\n\n        function off (event, handler) {\n            if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n            if (!handler) return events[event] = []\n            events[event] = events[event].filter(ev => ev !== handler);\n        }\n\n        function trigger (event, ...args) {\n            events[event].forEach(handler => handler(...args));\n        }\n\n        var processingScheduled = false;\n        function _insert(data, insertAtFront, rejectOnError, callback) {\n            if (callback != null && typeof callback !== 'function') {\n                throw new Error('task callback must be a function');\n            }\n            q.started = true;\n\n            var res, rej;\n            function promiseCallback (err, ...args) {\n                // we don't care about the error, let the global error handler\n                // deal with it\n                if (err) return rejectOnError ? rej(err) : res()\n                if (args.length <= 1) return res(args[0])\n                res(args);\n            }\n\n            var item = q._createTaskItem(\n                data,\n                rejectOnError ? promiseCallback :\n                    (callback || promiseCallback)\n            );\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n\n            if (!processingScheduled) {\n                processingScheduled = true;\n                setImmediate$1(() => {\n                    processingScheduled = false;\n                    q.process();\n                });\n            }\n\n            if (rejectOnError || !callback) {\n                return new Promise((resolve, reject) => {\n                    res = resolve;\n                    rej = reject;\n                })\n            }\n        }\n\n        function _createCB(tasks) {\n            return function (err, ...args) {\n                numRunning -= 1;\n\n                for (var i = 0, l = tasks.length; i < l; i++) {\n                    var task = tasks[i];\n\n                    var index = workersList.indexOf(task);\n                    if (index === 0) {\n                        workersList.shift();\n                    } else if (index > 0) {\n                        workersList.splice(index, 1);\n                    }\n\n                    task.callback(err, ...args);\n\n                    if (err != null) {\n                        trigger('error', err, task.data);\n                    }\n                }\n\n                if (numRunning <= (q.concurrency - q.buffer) ) {\n                    trigger('unsaturated');\n                }\n\n                if (q.idle()) {\n                    trigger('drain');\n                }\n                q.process();\n            };\n        }\n\n        function _maybeDrain(data) {\n            if (data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                setImmediate$1(() => trigger('drain'));\n                return true\n            }\n            return false\n        }\n\n        const eventMethod = (name) => (handler) => {\n            if (!handler) {\n                return new Promise((resolve, reject) => {\n                    once(name, (err, data) => {\n                        if (err) return reject(err)\n                        resolve(data);\n                    });\n                })\n            }\n            off(name);\n            on(name, handler);\n\n        };\n\n        var isProcessing = false;\n        var q = {\n            _tasks: new DLL(),\n            _createTaskItem (data, callback) {\n                return {\n                    data,\n                    callback\n                };\n            },\n            *[Symbol.iterator] () {\n                yield* q._tasks[Symbol.iterator]();\n            },\n            concurrency,\n            payload,\n            buffer: concurrency / 4,\n            started: false,\n            paused: false,\n            push (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, false, false, callback))\n                }\n                return _insert(data, false, false, callback);\n            },\n            pushAsync (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, false, true, callback))\n                }\n                return _insert(data, false, true, callback);\n            },\n            kill () {\n                off();\n                q._tasks.empty();\n            },\n            unshift (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, true, false, callback))\n                }\n                return _insert(data, true, false, callback);\n            },\n            unshiftAsync (data, callback) {\n                if (Array.isArray(data)) {\n                    if (_maybeDrain(data)) return\n                    return data.map(datum => _insert(datum, true, true, callback))\n                }\n                return _insert(data, true, true, callback);\n            },\n            remove (testFn) {\n                q._tasks.remove(testFn);\n            },\n            process () {\n                // Avoid trying to start too many processing operations. This can occur\n                // when callbacks resolve synchronously (#1267).\n                if (isProcessing) {\n                    return;\n                }\n                isProcessing = true;\n                while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                    var tasks = [], data = [];\n                    var l = q._tasks.length;\n                    if (q.payload) l = Math.min(l, q.payload);\n                    for (var i = 0; i < l; i++) {\n                        var node = q._tasks.shift();\n                        tasks.push(node);\n                        workersList.push(node);\n                        data.push(node.data);\n                    }\n\n                    numRunning += 1;\n\n                    if (q._tasks.length === 0) {\n                        trigger('empty');\n                    }\n\n                    if (numRunning === q.concurrency) {\n                        trigger('saturated');\n                    }\n\n                    var cb = onlyOnce(_createCB(tasks));\n                    _worker(data, cb);\n                }\n                isProcessing = false;\n            },\n            length () {\n                return q._tasks.length;\n            },\n            running () {\n                return numRunning;\n            },\n            workersList () {\n                return workersList;\n            },\n            idle() {\n                return q._tasks.length + numRunning === 0;\n            },\n            pause () {\n                q.paused = true;\n            },\n            resume () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                setImmediate$1(q.process);\n            }\n        };\n        // define these as fixed properties, so people get useful errors when updating\n        Object.defineProperties(q, {\n            saturated: {\n                writable: false,\n                value: eventMethod('saturated')\n            },\n            unsaturated: {\n                writable: false,\n                value: eventMethod('unsaturated')\n            },\n            empty: {\n                writable: false,\n                value: eventMethod('empty')\n            },\n            drain: {\n                writable: false,\n                value: eventMethod('drain')\n            },\n            error: {\n                writable: false,\n                value: eventMethod('error')\n            },\n        });\n        return q;\n    }\n\n    /**\n     * Creates a `cargo` object with the specified payload. Tasks added to the\n     * cargo will be processed altogether (up to the `payload` limit). If the\n     * `worker` is in progress, the task is queued until it becomes available. Once\n     * the `worker` has completed some tasks, each callback of those tasks is\n     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n     * for how `cargo` and `queue` work.\n     *\n     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n     * at a time, cargo passes an array of tasks to a single worker, repeating\n     * when the worker is finished.\n     *\n     * @name cargo\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An asynchronous function for processing an array\n     * of queued tasks. Invoked with `(tasks, callback)`.\n     * @param {number} [payload=Infinity] - An optional `integer` for determining\n     * how many tasks should be processed per round; if omitted, the default is\n     * unlimited.\n     * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the cargo and inner queue.\n     * @example\n     *\n     * // create a cargo object with payload 2\n     * var cargo = async.cargo(function(tasks, callback) {\n     *     for (var i=0; i<tasks.length; i++) {\n     *         console.log('hello ' + tasks[i].name);\n     *     }\n     *     callback();\n     * }, 2);\n     *\n     * // add some items\n     * cargo.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * cargo.push({name: 'bar'}, function(err) {\n     *     console.log('finished processing bar');\n     * });\n     * await cargo.push({name: 'baz'});\n     * console.log('finished processing baz');\n     */\n    function cargo$1(worker, payload) {\n        return queue$1(worker, 1, payload);\n    }\n\n    /**\n     * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n     * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n     * If the all `workers` are in progress, the task is queued until one becomes available. Once\n     * a `worker` has completed some tasks, each callback of those tasks is\n     * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n     * for how `cargo` and `queue` work.\n     *\n     * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n     * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n     * the cargoQueue passes an array of tasks to multiple parallel workers.\n     *\n     * @name cargoQueue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @see [async.cargo]{@link module:ControlFLow.cargo}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An asynchronous function for processing an array\n     * of queued tasks. Invoked with `(tasks, callback)`.\n     * @param {number} [concurrency=1] - An `integer` for determining how many\n     * `worker` functions should be run in parallel.  If omitted, the concurrency\n     * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n     * @param {number} [payload=Infinity] - An optional `integer` for determining\n     * how many tasks should be processed per round; if omitted, the default is\n     * unlimited.\n     * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the cargoQueue and inner queue.\n     * @example\n     *\n     * // create a cargoQueue object with payload 2 and concurrency 2\n     * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n     *     for (var i=0; i<tasks.length; i++) {\n     *         console.log('hello ' + tasks[i].name);\n     *     }\n     *     callback();\n     * }, 2, 2);\n     *\n     * // add some items\n     * cargoQueue.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * cargoQueue.push({name: 'bar'}, function(err) {\n     *     console.log('finished processing bar');\n     * });\n     * cargoQueue.push({name: 'baz'}, function(err) {\n     *     console.log('finished processing baz');\n     * });\n     * cargoQueue.push({name: 'boo'}, function(err) {\n     *     console.log('finished processing boo');\n     * });\n     */\n    function cargo(worker, concurrency, payload) {\n        return queue$1(worker, concurrency, payload);\n    }\n\n    /**\n     * Reduces `coll` into a single value using an async `iteratee` to return each\n     * successive step. `memo` is the initial state of the reduction. This function\n     * only operates in series.\n     *\n     * For performance reasons, it may make sense to split a call to this function\n     * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n     * results. This function is for situations where each step in the reduction\n     * needs to be async; if you can get the data before reducing it, then it's\n     * probably a good idea to do so.\n     *\n     * @name reduce\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias inject\n     * @alias foldl\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {*} memo - The initial state of the reduction.\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * array to produce the next step in the reduction.\n     * The `iteratee` should complete with the next state of the reduction.\n     * If the iteratee completes with an error, the reduction is stopped and the\n     * main `callback` is immediately called with the error.\n     * Invoked with (memo, item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the reduced value. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     * // file4.txt does not exist\n     *\n     * const fileList = ['file1.txt','file2.txt','file3.txt'];\n     * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n     *\n     * // asynchronous function that computes the file size in bytes\n     * // file size is added to the memoized value, then returned\n     * function getFileSizeInBytes(memo, file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, memo + stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // 6000\n     *         // which is the sum of the file sizes of the three files\n     *     }\n     * });\n     *\n     * // Error Handling\n     * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     } else {\n     *         console.log(result);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.reduce(fileList, 0, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     *     // 6000\n     *     // which is the sum of the file sizes of the three files\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n     *         console.log(result);\n     *         // 6000\n     *         // which is the sum of the file sizes of the three files\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n     *         console.log(result);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function reduce(coll, memo, iteratee, callback) {\n        callback = once(callback);\n        var _iteratee = wrapAsync(iteratee);\n        return eachOfSeries$1(coll, (x, i, iterCb) => {\n            _iteratee(memo, x, (err, v) => {\n                memo = v;\n                iterCb(err);\n            });\n        }, err => callback(err, memo));\n    }\n    var reduce$1 = awaitify(reduce, 4);\n\n    /**\n     * Version of the compose function that is more natural to read. Each function\n     * consumes the return value of the previous function. It is the equivalent of\n     * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n     *\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @name seq\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.compose]{@link module:ControlFlow.compose}\n     * @category Control Flow\n     * @param {...AsyncFunction} functions - the asynchronous functions to compose\n     * @returns {Function} a function that composes the `functions` in order\n     * @example\n     *\n     * // Requires lodash (or underscore), express3 and dresende's orm2.\n     * // Part of an app, that fetches cats of the logged user.\n     * // This example uses `seq` function to avoid overnesting and error\n     * // handling clutter.\n     * app.get('/cats', function(request, response) {\n     *     var User = request.models.User;\n     *     async.seq(\n     *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n     *         function(user, fn) {\n     *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n     *         }\n     *     )(req.session.user_id, function (err, cats) {\n     *         if (err) {\n     *             console.error(err);\n     *             response.json({ status: 'error', message: err.message });\n     *         } else {\n     *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n     *         }\n     *     });\n     * });\n     */\n    function seq(...functions) {\n        var _functions = functions.map(wrapAsync);\n        return function (...args) {\n            var that = this;\n\n            var cb = args[args.length - 1];\n            if (typeof cb == 'function') {\n                args.pop();\n            } else {\n                cb = promiseCallback();\n            }\n\n            reduce$1(_functions, args, (newargs, fn, iterCb) => {\n                fn.apply(that, newargs.concat((err, ...nextargs) => {\n                    iterCb(err, nextargs);\n                }));\n            },\n            (err, results) => cb(err, ...results));\n\n            return cb[PROMISE_SYMBOL]\n        };\n    }\n\n    /**\n     * Creates a function which is a composition of the passed asynchronous\n     * functions. Each function consumes the return value of the function that\n     * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n     * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n     *\n     * If the last argument to the composed function is not a function, a promise\n     * is returned when you call it.\n     *\n     * Each function is executed with the `this` binding of the composed function.\n     *\n     * @name compose\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {...AsyncFunction} functions - the asynchronous functions to compose\n     * @returns {Function} an asynchronous function that is the composed\n     * asynchronous `functions`\n     * @example\n     *\n     * function add1(n, callback) {\n     *     setTimeout(function () {\n     *         callback(null, n + 1);\n     *     }, 10);\n     * }\n     *\n     * function mul3(n, callback) {\n     *     setTimeout(function () {\n     *         callback(null, n * 3);\n     *     }, 10);\n     * }\n     *\n     * var add1mul3 = async.compose(mul3, add1);\n     * add1mul3(4, function (err, result) {\n     *     // result now equals 15\n     * });\n     */\n    function compose(...args) {\n        return seq(...args.reverse());\n    }\n\n    /**\n     * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name mapLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with the transformed item.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Results is an array of the\n     * transformed items from the `coll`. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapLimit (coll, limit, iteratee, callback) {\n        return _asyncMap(eachOfLimit$2(limit), coll, iteratee, callback)\n    }\n    var mapLimit$1 = awaitify(mapLimit, 4);\n\n    /**\n     * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name concatLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.concat]{@link module:Collections.concat}\n     * @category Collection\n     * @alias flatMapLimit\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n     * which should use an array as its result. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     */\n    function concatLimit(coll, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(coll, limit, (val, iterCb) => {\n            _iteratee(val, (err, ...args) => {\n                if (err) return iterCb(err);\n                return iterCb(err, args);\n            });\n        }, (err, mapResults) => {\n            var result = [];\n            for (var i = 0; i < mapResults.length; i++) {\n                if (mapResults[i]) {\n                    result = result.concat(...mapResults[i]);\n                }\n            }\n\n            return callback(err, result);\n        });\n    }\n    var concatLimit$1 = awaitify(concatLimit, 4);\n\n    /**\n     * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n     * the concatenated list. The `iteratee`s are called in parallel, and the\n     * results are concatenated as they return. The results array will be returned in\n     * the original order of `coll` passed to the `iteratee` function.\n     *\n     * @name concat\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @alias flatMap\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n     * which should use an array as its result. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * let directoryList = ['dir1','dir2','dir3'];\n     * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n     *\n     * // Using callbacks\n     * async.concat(directoryList, fs.readdir, function(err, results) {\n     *    if (err) {\n     *        console.log(err);\n     *    } else {\n     *        console.log(results);\n     *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n     *    }\n     * });\n     *\n     * // Error Handling\n     * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n     *    if (err) {\n     *        console.log(err);\n     *        // [ Error: ENOENT: no such file or directory ]\n     *        // since dir4 does not exist\n     *    } else {\n     *        console.log(results);\n     *    }\n     * });\n     *\n     * // Using Promises\n     * async.concat(directoryList, fs.readdir)\n     * .then(results => {\n     *     console.log(results);\n     *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n     * }).catch(err => {\n     *      console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.concat(withMissingDirectoryList, fs.readdir)\n     * .then(results => {\n     *     console.log(results);\n     * }).catch(err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     *     // since dir4 does not exist\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.concat(directoryList, fs.readdir);\n     *         console.log(results);\n     *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n     *     } catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n     *         console.log(results);\n     *     } catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *         // since dir4 does not exist\n     *     }\n     * }\n     *\n     */\n    function concat(coll, iteratee, callback) {\n        return concatLimit$1(coll, Infinity, iteratee, callback)\n    }\n    var concat$1 = awaitify(concat, 3);\n\n    /**\n     * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n     *\n     * @name concatSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.concat]{@link module:Collections.concat}\n     * @category Collection\n     * @alias flatMapSeries\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n     * The iteratee should complete with an array an array of results.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is an array\n     * containing the concatenated results of the `iteratee` function. Invoked with\n     * (err, results).\n     * @returns A Promise, if no callback is passed\n     */\n    function concatSeries(coll, iteratee, callback) {\n        return concatLimit$1(coll, 1, iteratee, callback)\n    }\n    var concatSeries$1 = awaitify(concatSeries, 3);\n\n    /**\n     * Returns a function that when called, calls-back with the values provided.\n     * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n     * [`auto`]{@link module:ControlFlow.auto}.\n     *\n     * @name constant\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {...*} arguments... - Any number of arguments to automatically invoke\n     * callback with.\n     * @returns {AsyncFunction} Returns a function that when invoked, automatically\n     * invokes the callback with the previous given arguments.\n     * @example\n     *\n     * async.waterfall([\n     *     async.constant(42),\n     *     function (value, next) {\n     *         // value === 42\n     *     },\n     *     //...\n     * ], callback);\n     *\n     * async.waterfall([\n     *     async.constant(filename, \"utf8\"),\n     *     fs.readFile,\n     *     function (fileData, next) {\n     *         //...\n     *     }\n     *     //...\n     * ], callback);\n     *\n     * async.auto({\n     *     hostname: async.constant(\"https://server.net/\"),\n     *     port: findFreePort,\n     *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n     *         startServer(options, cb);\n     *     }],\n     *     //...\n     * }, callback);\n     */\n    function constant$1(...args) {\n        return function (...ignoredArgs/*, callback*/) {\n            var callback = ignoredArgs.pop();\n            return callback(null, ...args);\n        };\n    }\n\n    function _createTester(check, getResult) {\n        return (eachfn, arr, _iteratee, cb) => {\n            var testPassed = false;\n            var testResult;\n            const iteratee = wrapAsync(_iteratee);\n            eachfn(arr, (value, _, callback) => {\n                iteratee(value, (err, result) => {\n                    if (err || err === false) return callback(err);\n\n                    if (check(result) && !testResult) {\n                        testPassed = true;\n                        testResult = getResult(true, value);\n                        return callback(null, breakLoop$1);\n                    }\n                    callback();\n                });\n            }, err => {\n                if (err) return cb(err);\n                cb(null, testPassed ? testResult : getResult(false));\n            });\n        };\n    }\n\n    /**\n     * Returns the first value in `coll` that passes an async truth test. The\n     * `iteratee` is applied in parallel, meaning the first iteratee to return\n     * `true` will fire the detect `callback` with that result. That means the\n     * result might not be the first item in the original `coll` (in terms of order)\n     * that passes the test.\n\n     * If order within the original `coll` is important, then look at\n     * [`detectSeries`]{@link module:Collections.detectSeries}.\n     *\n     * @name detect\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias find\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n     *    function(err, result) {\n     *        console.log(result);\n     *        // dir1/file1.txt\n     *        // result now equals the first file in the list that exists\n     *    }\n     *);\n     *\n     * // Using Promises\n     * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n     * .then(result => {\n     *     console.log(result);\n     *     // dir1/file1.txt\n     *     // result now equals the first file in the list that exists\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n     *         console.log(result);\n     *         // dir1/file1.txt\n     *         // result now equals the file in the list that exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function detect(coll, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n    }\n    var detect$1 = awaitify(detect, 3);\n\n    /**\n     * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name detectLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.detect]{@link module:Collections.detect}\n     * @alias findLimit\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function detectLimit(coll, limit, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOfLimit$2(limit), coll, iteratee, callback)\n    }\n    var detectLimit$1 = awaitify(detectLimit, 4);\n\n    /**\n     * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n     *\n     * @name detectSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.detect]{@link module:Collections.detect}\n     * @alias findSeries\n     * @category Collections\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n     * The iteratee must complete with a boolean value as its result.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the `iteratee` functions have finished.\n     * Result will be the first item in the array that passes the truth test\n     * (iteratee) or the value `undefined` if none passed. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function detectSeries(coll, iteratee, callback) {\n        return _createTester(bool => bool, (res, item) => item)(eachOfLimit$2(1), coll, iteratee, callback)\n    }\n\n    var detectSeries$1 = awaitify(detectSeries, 3);\n\n    function consoleFunc(name) {\n        return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n            /* istanbul ignore else */\n            if (typeof console === 'object') {\n                /* istanbul ignore else */\n                if (err) {\n                    /* istanbul ignore else */\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) { /* istanbul ignore else */\n                    resultArgs.forEach(x => console[name](x));\n                }\n            }\n        })\n    }\n\n    /**\n     * Logs the result of an [`async` function]{@link AsyncFunction} to the\n     * `console` using `console.dir` to display the properties of the resulting object.\n     * Only works in Node.js or in browsers that support `console.dir` and\n     * `console.error` (such as FF and Chrome).\n     * If multiple arguments are returned from the async function,\n     * `console.dir` is called on each argument in order.\n     *\n     * @name dir\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} function - The function you want to eventually apply\n     * all arguments to.\n     * @param {...*} arguments... - Any number of arguments to apply to the function.\n     * @example\n     *\n     * // in a module\n     * var hello = function(name, callback) {\n     *     setTimeout(function() {\n     *         callback(null, {hello: name});\n     *     }, 1000);\n     * };\n     *\n     * // in the node repl\n     * node> async.dir(hello, 'world');\n     * {hello: 'world'}\n     */\n    var dir = consoleFunc('dir');\n\n    /**\n     * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n     * the order of operations, the arguments `test` and `iteratee` are switched.\n     *\n     * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n     *\n     * @name doWhilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {AsyncFunction} iteratee - A function which is called each time `test`\n     * passes. Invoked with (callback).\n     * @param {AsyncFunction} test - asynchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n     * non-error args from the previous callback of `iteratee`.\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped.\n     * `callback` will be passed an error and any arguments passed to the final\n     * `iteratee`'s callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function doWhilst(iteratee, test, callback) {\n        callback = onlyOnce(callback);\n        var _fn = wrapAsync(iteratee);\n        var _test = wrapAsync(test);\n        var results;\n\n        function next(err, ...args) {\n            if (err) return callback(err);\n            if (err === false) return;\n            results = args;\n            _test(...args, check);\n        }\n\n        function check(err, truth) {\n            if (err) return callback(err);\n            if (err === false) return;\n            if (!truth) return callback(null, ...results);\n            _fn(next);\n        }\n\n        return check(null, true);\n    }\n\n    var doWhilst$1 = awaitify(doWhilst, 3);\n\n    /**\n     * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n     * argument ordering differs from `until`.\n     *\n     * @name doUntil\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n     * @category Control Flow\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` fails. Invoked with (callback).\n     * @param {AsyncFunction} test - asynchronous truth test to perform after each\n     * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n     * non-error args from the previous callback of `iteratee`\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has passed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function doUntil(iteratee, test, callback) {\n        const _test = wrapAsync(test);\n        return doWhilst$1(iteratee, (...args) => {\n            const cb = args.pop();\n            _test(...args, (err, truth) => cb (err, !truth));\n        }, callback);\n    }\n\n    function _withoutIndex(iteratee) {\n        return (value, index, callback) => iteratee(value, callback);\n    }\n\n    /**\n     * Applies the function `iteratee` to each item in `coll`, in parallel.\n     * The `iteratee` is called with an item from the list, and a callback for when\n     * it has finished. If the `iteratee` passes an error to its `callback`, the\n     * main `callback` (for the `each` function) is immediately called with the\n     * error.\n     *\n     * Note, that since this function applies `iteratee` to each item in parallel,\n     * there is no guarantee that the iteratee functions will complete in order.\n     *\n     * @name each\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias forEach\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to\n     * each item in `coll`. Invoked with (item, callback).\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOf`.\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n     * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n     *\n     * // asynchronous function that deletes a file\n     * const deleteFile = function(file, callback) {\n     *     fs.unlink(file, callback);\n     * };\n     *\n     * // Using callbacks\n     * async.each(fileList, deleteFile, function(err) {\n     *     if( err ) {\n     *         console.log(err);\n     *     } else {\n     *         console.log('All files have been deleted successfully');\n     *     }\n     * });\n     *\n     * // Error Handling\n     * async.each(withMissingFileList, deleteFile, function(err){\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     *     // since dir4/file2.txt does not exist\n     *     // dir1/file1.txt could have been deleted\n     * });\n     *\n     * // Using Promises\n     * async.each(fileList, deleteFile)\n     * .then( () => {\n     *     console.log('All files have been deleted successfully');\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.each(fileList, deleteFile)\n     * .then( () => {\n     *     console.log('All files have been deleted successfully');\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     *     // since dir4/file2.txt does not exist\n     *     // dir1/file1.txt could have been deleted\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         await async.each(files, deleteFile);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         await async.each(withMissingFileList, deleteFile);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *         // since dir4/file2.txt does not exist\n     *         // dir1/file1.txt could have been deleted\n     *     }\n     * }\n     *\n     */\n    function eachLimit$2(coll, iteratee, callback) {\n        return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n    }\n\n    var each = awaitify(eachLimit$2, 3);\n\n    /**\n     * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name eachLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.each]{@link module:Collections.each}\n     * @alias forEachLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOfLimit`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachLimit(coll, limit, iteratee, callback) {\n        return eachOfLimit$2(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n    }\n    var eachLimit$1 = awaitify(eachLimit, 4);\n\n    /**\n     * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n     *\n     * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n     * in series and therefore the iteratee functions will complete in order.\n\n     * @name eachSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.each]{@link module:Collections.each}\n     * @alias forEachSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each\n     * item in `coll`.\n     * The array index is not passed to the iteratee.\n     * If you need the index, use `eachOfSeries`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called when all\n     * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n     * @returns {Promise} a promise, if a callback is omitted\n     */\n    function eachSeries(coll, iteratee, callback) {\n        return eachLimit$1(coll, 1, iteratee, callback)\n    }\n    var eachSeries$1 = awaitify(eachSeries, 3);\n\n    /**\n     * Wrap an async function and ensure it calls its callback on a later tick of\n     * the event loop.  If the function already calls its callback on a next tick,\n     * no extra deferral is added. This is useful for preventing stack overflows\n     * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n     * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n     * contained. ES2017 `async` functions are returned as-is -- they are immune\n     * to Zalgo's corrupting influences, as they always resolve on a later tick.\n     *\n     * @name ensureAsync\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - an async function, one that expects a node-style\n     * callback as its last argument.\n     * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n     * signature as the function passed in.\n     * @example\n     *\n     * function sometimesAsync(arg, callback) {\n     *     if (cache[arg]) {\n     *         return callback(null, cache[arg]); // this would be synchronous!!\n     *     } else {\n     *         doSomeIO(arg, callback); // this IO would be asynchronous\n     *     }\n     * }\n     *\n     * // this has a risk of stack overflows if many results are cached in a row\n     * async.mapSeries(args, sometimesAsync, done);\n     *\n     * // this will defer sometimesAsync's callback if necessary,\n     * // preventing stack overflows\n     * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n     */\n    function ensureAsync(fn) {\n        if (isAsync(fn)) return fn;\n        return function (...args/*, callback*/) {\n            var callback = args.pop();\n            var sync = true;\n            args.push((...innerArgs) => {\n                if (sync) {\n                    setImmediate$1(() => callback(...innerArgs));\n                } else {\n                    callback(...innerArgs);\n                }\n            });\n            fn.apply(this, args);\n            sync = false;\n        };\n    }\n\n    /**\n     * Returns `true` if every element in `coll` satisfies an async test. If any\n     * iteratee call returns `false`, the main `callback` is immediately called.\n     *\n     * @name every\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias all\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in parallel.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n     * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.every(fileList, fileExists, function(err, result) {\n     *     console.log(result);\n     *     // true\n     *     // result is true since every file exists\n     * });\n     *\n     * async.every(withMissingFileList, fileExists, function(err, result) {\n     *     console.log(result);\n     *     // false\n     *     // result is false since NOT every file exists\n     * });\n     *\n     * // Using Promises\n     * async.every(fileList, fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // true\n     *     // result is true since every file exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * async.every(withMissingFileList, fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // false\n     *     // result is false since NOT every file exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.every(fileList, fileExists);\n     *         console.log(result);\n     *         // true\n     *         // result is true since every file exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * async () => {\n     *     try {\n     *         let result = await async.every(withMissingFileList, fileExists);\n     *         console.log(result);\n     *         // false\n     *         // result is false since NOT every file exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function every(coll, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n    }\n    var every$1 = awaitify(every, 3);\n\n    /**\n     * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name everyLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.every]{@link module:Collections.every}\n     * @alias allLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in parallel.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function everyLimit(coll, limit, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOfLimit$2(limit), coll, iteratee, callback)\n    }\n    var everyLimit$1 = awaitify(everyLimit, 4);\n\n    /**\n     * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n     *\n     * @name everySeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.every]{@link module:Collections.every}\n     * @alias allSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collection in series.\n     * The iteratee must complete with a boolean result value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result will be either `true` or `false`\n     * depending on the values of the async tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function everySeries(coll, iteratee, callback) {\n        return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var everySeries$1 = awaitify(everySeries, 3);\n\n    function filterArray(eachfn, arr, iteratee, callback) {\n        var truthValues = new Array(arr.length);\n        eachfn(arr, (x, index, iterCb) => {\n            iteratee(x, (err, v) => {\n                truthValues[index] = !!v;\n                iterCb(err);\n            });\n        }, err => {\n            if (err) return callback(err);\n            var results = [];\n            for (var i = 0; i < arr.length; i++) {\n                if (truthValues[i]) results.push(arr[i]);\n            }\n            callback(null, results);\n        });\n    }\n\n    function filterGeneric(eachfn, coll, iteratee, callback) {\n        var results = [];\n        eachfn(coll, (x, index, iterCb) => {\n            iteratee(x, (err, v) => {\n                if (err) return iterCb(err);\n                if (v) {\n                    results.push({index, value: x});\n                }\n                iterCb(err);\n            });\n        }, err => {\n            if (err) return callback(err);\n            callback(null, results\n                .sort((a, b) => a.index - b.index)\n                .map(v => v.value));\n        });\n    }\n\n    function _filter(eachfn, coll, iteratee, callback) {\n        var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n        return filter(eachfn, coll, wrapAsync(iteratee), callback);\n    }\n\n    /**\n     * Returns a new array of all the values in `coll` which pass an async truth\n     * test. This operation is performed in parallel, but the results array will be\n     * in the same order as the original.\n     *\n     * @name filter\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias select\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     *\n     * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.filter(files, fileExists, function(err, results) {\n     *    if(err) {\n     *        console.log(err);\n     *    } else {\n     *        console.log(results);\n     *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n     *        // results is now an array of the existing files\n     *    }\n     * });\n     *\n     * // Using Promises\n     * async.filter(files, fileExists)\n     * .then(results => {\n     *     console.log(results);\n     *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n     *     // results is now an array of the existing files\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.filter(files, fileExists);\n     *         console.log(results);\n     *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n     *         // results is now an array of the existing files\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function filter (coll, iteratee, callback) {\n        return _filter(eachOf$1, coll, iteratee, callback)\n    }\n    var filter$1 = awaitify(filter, 3);\n\n    /**\n     * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name filterLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @alias selectLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function filterLimit (coll, limit, iteratee, callback) {\n        return _filter(eachOfLimit$2(limit), coll, iteratee, callback)\n    }\n    var filterLimit$1 = awaitify(filterLimit, 4);\n\n    /**\n     * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n     *\n     * @name filterSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @alias selectSeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n     * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n     * with a boolean argument once it has completed. Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results)\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function filterSeries (coll, iteratee, callback) {\n        return _filter(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var filterSeries$1 = awaitify(filterSeries, 3);\n\n    /**\n     * Calls the asynchronous function `fn` with a callback parameter that allows it\n     * to call itself again, in series, indefinitely.\n\n     * If an error is passed to the callback then `errback` is called with the\n     * error, and execution stops, otherwise it will never be called.\n     *\n     * @name forever\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} fn - an async function to call repeatedly.\n     * Invoked with (next).\n     * @param {Function} [errback] - when `fn` passes an error to it's callback,\n     * this function will be called, and execution stops. Invoked with (err).\n     * @returns {Promise} a promise that rejects if an error occurs and an errback\n     * is not passed\n     * @example\n     *\n     * async.forever(\n     *     function(next) {\n     *         // next is suitable for passing to things that need a callback(err [, whatever]);\n     *         // it will result in this function being called again.\n     *     },\n     *     function(err) {\n     *         // if next is called with a value in its first parameter, it will appear\n     *         // in here as 'err', and execution will stop.\n     *     }\n     * );\n     */\n    function forever(fn, errback) {\n        var done = onlyOnce(errback);\n        var task = wrapAsync(ensureAsync(fn));\n\n        function next(err) {\n            if (err) return done(err);\n            if (err === false) return;\n            task(next);\n        }\n        return next();\n    }\n    var forever$1 = awaitify(forever, 2);\n\n    /**\n     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name groupByLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.groupBy]{@link module:Collections.groupBy}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whoses\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function groupByLimit(coll, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(coll, limit, (val, iterCb) => {\n            _iteratee(val, (err, key) => {\n                if (err) return iterCb(err);\n                return iterCb(err, {key, val});\n            });\n        }, (err, mapResults) => {\n            var result = {};\n            // from MDN, handle object having an `hasOwnProperty` prop\n            var {hasOwnProperty} = Object.prototype;\n\n            for (var i = 0; i < mapResults.length; i++) {\n                if (mapResults[i]) {\n                    var {key} = mapResults[i];\n                    var {val} = mapResults[i];\n\n                    if (hasOwnProperty.call(result, key)) {\n                        result[key].push(val);\n                    } else {\n                        result[key] = [val];\n                    }\n                }\n            }\n\n            return callback(err, result);\n        });\n    }\n\n    var groupByLimit$1 = awaitify(groupByLimit, 4);\n\n    /**\n     * Returns a new object, where each value corresponds to an array of items, from\n     * `coll`, that returned the corresponding key. That is, the keys of the object\n     * correspond to the values passed to the `iteratee` callback.\n     *\n     * Note: Since this function applies the `iteratee` to each item in parallel,\n     * there is no guarantee that the `iteratee` functions will complete in order.\n     * However, the values for each key in the `result` will be in the same order as\n     * the original `coll`. For Objects, the values will roughly be in the order of\n     * the original Objects' keys (but this can vary across JavaScript engines).\n     *\n     * @name groupBy\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whoses\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * const files = ['dir1/file1.txt','dir2','dir4']\n     *\n     * // asynchronous function that detects file type as none, file, or directory\n     * function detectFile(file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(null, 'none');\n     *         }\n     *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n     *     });\n     * }\n     *\n     * //Using callbacks\n     * async.groupBy(files, detectFile, function(err, result) {\n     *     if(err) {\n     *         console.log(err);\n     *     } else {\n     *\t       console.log(result);\n     *         // {\n     *         //     file: [ 'dir1/file1.txt' ],\n     *         //     none: [ 'dir4' ],\n     *         //     directory: [ 'dir2']\n     *         // }\n     *         // result is object containing the files grouped by type\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.groupBy(files, detectFile)\n     * .then( result => {\n     *     console.log(result);\n     *     // {\n     *     //     file: [ 'dir1/file1.txt' ],\n     *     //     none: [ 'dir4' ],\n     *     //     directory: [ 'dir2']\n     *     // }\n     *     // result is object containing the files grouped by type\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.groupBy(files, detectFile);\n     *         console.log(result);\n     *         // {\n     *         //     file: [ 'dir1/file1.txt' ],\n     *         //     none: [ 'dir4' ],\n     *         //     directory: [ 'dir2']\n     *         // }\n     *         // result is object containing the files grouped by type\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function groupBy (coll, iteratee, callback) {\n        return groupByLimit$1(coll, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n     *\n     * @name groupBySeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.groupBy]{@link module:Collections.groupBy}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a `key` to group the value under.\n     * Invoked with (value, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. Result is an `Object` whose\n     * properties are arrays of values which returned the corresponding key.\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function groupBySeries (coll, iteratee, callback) {\n        return groupByLimit$1(coll, 1, iteratee, callback)\n    }\n\n    /**\n     * Logs the result of an `async` function to the `console`. Only works in\n     * Node.js or in browsers that support `console.log` and `console.error` (such\n     * as FF and Chrome). If multiple arguments are returned from the async\n     * function, `console.log` is called on each argument in order.\n     *\n     * @name log\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} function - The function you want to eventually apply\n     * all arguments to.\n     * @param {...*} arguments... - Any number of arguments to apply to the function.\n     * @example\n     *\n     * // in a module\n     * var hello = function(name, callback) {\n     *     setTimeout(function() {\n     *         callback(null, 'hello ' + name);\n     *     }, 1000);\n     * };\n     *\n     * // in the node repl\n     * node> async.log(hello, 'world');\n     * 'hello world'\n     */\n    var log = consoleFunc('log');\n\n    /**\n     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name mapValuesLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.mapValues]{@link module:Collections.mapValues}\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapValuesLimit(obj, limit, iteratee, callback) {\n        callback = once(callback);\n        var newObj = {};\n        var _iteratee = wrapAsync(iteratee);\n        return eachOfLimit$2(limit)(obj, (val, key, next) => {\n            _iteratee(val, key, (err, result) => {\n                if (err) return next(err);\n                newObj[key] = result;\n                next(err);\n            });\n        }, err => callback(err, newObj));\n    }\n\n    var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n    /**\n     * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n     *\n     * Produces a new Object by mapping each value of `obj` through the `iteratee`\n     * function. The `iteratee` is called each `value` and `key` from `obj` and a\n     * callback for when it has finished processing. Each of these callbacks takes\n     * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n     * passes an error to its callback, the main `callback` (for the `mapValues`\n     * function) is immediately called with the error.\n     *\n     * Note, the order of the keys in the result is not guaranteed.  The keys will\n     * be roughly in the order they complete, (but this is very engine-specific)\n     *\n     * @name mapValues\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     * // file4.txt does not exist\n     *\n     * const fileMap = {\n     *     f1: 'file1.txt',\n     *     f2: 'file2.txt',\n     *     f3: 'file3.txt'\n     * };\n     *\n     * const withMissingFileMap = {\n     *     f1: 'file1.txt',\n     *     f2: 'file2.txt',\n     *     f3: 'file4.txt'\n     * };\n     *\n     * // asynchronous function that returns the file size in bytes\n     * function getFileSizeInBytes(file, key, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // result is now a map of file size in bytes for each file, e.g.\n     *         // {\n     *         //     f1: 1000,\n     *         //     f2: 2000,\n     *         //     f3: 3000\n     *         // }\n     *     }\n     * });\n     *\n     * // Error handling\n     * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n     *     if (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     } else {\n     *         console.log(result);\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.mapValues(fileMap, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     *     // result is now a map of file size in bytes for each file, e.g.\n     *     // {\n     *     //     f1: 1000,\n     *     //     f2: 2000,\n     *     //     f3: 3000\n     *     // }\n     * }).catch (err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error Handling\n     * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n     * .then( result => {\n     *     console.log(result);\n     * }).catch (err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n     *         console.log(result);\n     *         // result is now a map of file size in bytes for each file, e.g.\n     *         // {\n     *         //     f1: 1000,\n     *         //     f2: 2000,\n     *         //     f3: 3000\n     *         // }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // Error Handling\n     * async () => {\n     *     try {\n     *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n     *         console.log(result);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function mapValues(obj, iteratee, callback) {\n        return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n     *\n     * @name mapValuesSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.mapValues]{@link module:Collections.mapValues}\n     * @category Collection\n     * @param {Object} obj - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - A function to apply to each value and key\n     * in `coll`.\n     * The iteratee should complete with the transformed value as its result.\n     * Invoked with (value, key, callback).\n     * @param {Function} [callback] - A callback which is called when all `iteratee`\n     * functions have finished, or an error occurs. `result` is a new object consisting\n     * of each key from `obj`, with each transformed value on the right-hand side.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function mapValuesSeries(obj, iteratee, callback) {\n        return mapValuesLimit$1(obj, 1, iteratee, callback)\n    }\n\n    /**\n     * Caches the results of an async function. When creating a hash to store\n     * function results against, the callback is omitted from the hash and an\n     * optional hash function can be used.\n     *\n     * **Note: if the async function errs, the result will not be cached and\n     * subsequent calls will call the wrapped function.**\n     *\n     * If no hash function is specified, the first argument is used as a hash key,\n     * which may work reasonably if it is a string or a data type that converts to a\n     * distinct string. Note that objects and arrays will not behave reasonably.\n     * Neither will cases where the other arguments are significant. In such cases,\n     * specify your own hash function.\n     *\n     * The cache of results is exposed as the `memo` property of the function\n     * returned by `memoize`.\n     *\n     * @name memoize\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n     * @param {Function} hasher - An optional function for generating a custom hash\n     * for storing results. It has all the arguments applied to it apart from the\n     * callback, and must be synchronous.\n     * @returns {AsyncFunction} a memoized version of `fn`\n     * @example\n     *\n     * var slow_fn = function(name, callback) {\n     *     // do something\n     *     callback(null, result);\n     * };\n     * var fn = async.memoize(slow_fn);\n     *\n     * // fn can now be used as if it were slow_fn\n     * fn('some name', function() {\n     *     // callback\n     * });\n     */\n    function memoize(fn, hasher = v => v) {\n        var memo = Object.create(null);\n        var queues = Object.create(null);\n        var _fn = wrapAsync(fn);\n        var memoized = initialParams((args, callback) => {\n            var key = hasher(...args);\n            if (key in memo) {\n                setImmediate$1(() => callback(null, ...memo[key]));\n            } else if (key in queues) {\n                queues[key].push(callback);\n            } else {\n                queues[key] = [callback];\n                _fn(...args, (err, ...resultArgs) => {\n                    // #1465 don't memoize if an error occurred\n                    if (!err) {\n                        memo[key] = resultArgs;\n                    }\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i](err, ...resultArgs);\n                    }\n                });\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    }\n\n    /* istanbul ignore file */\n\n    /**\n     * Calls `callback` on a later loop around the event loop. In Node.js this just\n     * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n     * available, otherwise `setTimeout(callback, 0)`, which means other higher\n     * priority events may precede the execution of `callback`.\n     *\n     * This is used internally for browser-compatibility purposes.\n     *\n     * @name nextTick\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.setImmediate]{@link module:Utils.setImmediate}\n     * @category Util\n     * @param {Function} callback - The function to call on a later loop around\n     * the event loop. Invoked with (args...).\n     * @param {...*} args... - any number of additional arguments to pass to the\n     * callback on the next tick.\n     * @example\n     *\n     * var call_order = [];\n     * async.nextTick(function() {\n     *     call_order.push('two');\n     *     // call_order now equals ['one','two']\n     * });\n     * call_order.push('one');\n     *\n     * async.setImmediate(function (a, b, c) {\n     *     // a, b, and c equal 1, 2, and 3\n     * }, 1, 2, 3);\n     */\n    var _defer;\n\n    if (hasNextTick) {\n        _defer = process.nextTick;\n    } else if (hasSetImmediate) {\n        _defer = setImmediate;\n    } else {\n        _defer = fallback;\n    }\n\n    var nextTick = wrap(_defer);\n\n    var _parallel = awaitify((eachfn, tasks, callback) => {\n        var results = isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, (task, key, taskCb) => {\n            wrapAsync(task)((err, ...result) => {\n                if (result.length < 2) {\n                    [result] = result;\n                }\n                results[key] = result;\n                taskCb(err);\n            });\n        }, err => callback(err, results));\n    }, 3);\n\n    /**\n     * Run the `tasks` collection of functions in parallel, without waiting until\n     * the previous function has completed. If any of the functions pass an error to\n     * its callback, the main `callback` is immediately called with the value of the\n     * error. Once the `tasks` have completed, the results are passed to the final\n     * `callback` as an array.\n     *\n     * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n     * parallel execution of code.  If your tasks do not use any timers or perform\n     * any I/O, they will actually be executed in series.  Any synchronous setup\n     * sections for each task will happen one after the other.  JavaScript remains\n     * single-threaded.\n     *\n     * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n     * execution of other tasks when a task fails.\n     *\n     * It is also possible to use an object instead of an array. Each property will\n     * be run as a function and the results will be passed to the final `callback`\n     * as an object instead of an array. This can be a more readable way of handling\n     * results from {@link async.parallel}.\n     *\n     * @name parallel\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n     * [async functions]{@link AsyncFunction} to run.\n     * Each async function can complete with any number of optional `result` values.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed successfully. This function gets a results array\n     * (or object) containing all the result arguments passed to the task callbacks.\n     * Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     *\n     * @example\n     *\n     * //Using Callbacks\n     * async.parallel([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ], function(err, results) {\n     *     console.log(results);\n     *     // results is equal to ['one','two'] even though\n     *     // the second function had a shorter timeout.\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.parallel({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }, function(err, results) {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * });\n     *\n     * //Using Promises\n     * async.parallel([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ]).then(results => {\n     *     console.log(results);\n     *     // results is equal to ['one','two'] even though\n     *     // the second function had a shorter timeout.\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.parallel({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }).then(results => {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * //Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.parallel([\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 'one');\n     *                 }, 200);\n     *             },\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 'two');\n     *                 }, 100);\n     *             }\n     *         ]);\n     *         console.log(results);\n     *         // results is equal to ['one','two'] even though\n     *         // the second function had a shorter timeout.\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // an example using an object instead of an array\n     * async () => {\n     *     try {\n     *         let results = await async.parallel({\n     *             one: function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 1);\n     *                 }, 200);\n     *             },\n     *            two: function(callback) {\n     *                 setTimeout(function() {\n     *                     callback(null, 2);\n     *                 }, 100);\n     *            }\n     *         });\n     *         console.log(results);\n     *         // results is equal to: { one: 1, two: 2 }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function parallel(tasks, callback) {\n        return _parallel(eachOf$1, tasks, callback);\n    }\n\n    /**\n     * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name parallelLimit\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.parallel]{@link module:ControlFlow.parallel}\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n     * [async functions]{@link AsyncFunction} to run.\n     * Each async function can complete with any number of optional `result` values.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed successfully. This function gets a results array\n     * (or object) containing all the result arguments passed to the task callbacks.\n     * Invoked with (err, results).\n     * @returns {Promise} a promise, if a callback is not passed\n     */\n    function parallelLimit(tasks, limit, callback) {\n        return _parallel(eachOfLimit$2(limit), tasks, callback);\n    }\n\n    /**\n     * A queue of tasks for the worker function to complete.\n     * @typedef {Iterable} QueueObject\n     * @memberOf module:ControlFlow\n     * @property {Function} length - a function returning the number of items\n     * waiting to be processed. Invoke with `queue.length()`.\n     * @property {boolean} started - a boolean indicating whether or not any\n     * items have been pushed and processed by the queue.\n     * @property {Function} running - a function returning the number of items\n     * currently being processed. Invoke with `queue.running()`.\n     * @property {Function} workersList - a function returning the array of items\n     * currently being processed. Invoke with `queue.workersList()`.\n     * @property {Function} idle - a function returning false if there are items\n     * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n     * @property {number} concurrency - an integer for determining how many `worker`\n     * functions should be run in parallel. This property can be changed after a\n     * `queue` is created to alter the concurrency on-the-fly.\n     * @property {number} payload - an integer that specifies how many items are\n     * passed to the worker function at a time. only applies if this is a\n     * [cargo]{@link module:ControlFlow.cargo} object\n     * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n     * once the `worker` has finished processing the task. Instead of a single task,\n     * a `tasks` array can be submitted. The respective callback is used for every\n     * task in the list. Invoke with `queue.push(task, [callback])`,\n     * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n     * Invoke with `queue.unshift(task, [callback])`.\n     * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n     * a promise that rejects if an error occurs.\n     * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n     * a promise that rejects if an error occurs.\n     * @property {Function} remove - remove items from the queue that match a test\n     * function.  The test function will be passed an object with a `data` property,\n     * and a `priority` property, if this is a\n     * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n     * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n     * `function ({data, priority}) {}` and returns a Boolean.\n     * @property {Function} saturated - a function that sets a callback that is\n     * called when the number of running workers hits the `concurrency` limit, and\n     * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n     * returns a promise for the next occurrence.\n     * @property {Function} unsaturated - a function that sets a callback that is\n     * called when the number of running workers is less than the `concurrency` &\n     * `buffer` limits, and further tasks will not be queued. If the callback is\n     * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n     * @property {number} buffer - A minimum threshold buffer in order to say that\n     * the `queue` is `unsaturated`.\n     * @property {Function} empty - a function that sets a callback that is called\n     * when the last item from the `queue` is given to a `worker`. If the callback\n     * is omitted, `q.empty()` returns a promise for the next occurrence.\n     * @property {Function} drain - a function that sets a callback that is called\n     * when the last item from the `queue` has returned from the `worker`. If the\n     * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n     * @property {Function} error - a function that sets a callback that is called\n     * when a task errors. Has the signature `function(error, task)`. If the\n     * callback is omitted, `error()` returns a promise that rejects on the next\n     * error.\n     * @property {boolean} paused - a boolean for determining whether the queue is\n     * in a paused state.\n     * @property {Function} pause - a function that pauses the processing of tasks\n     * until `resume()` is called. Invoke with `queue.pause()`.\n     * @property {Function} resume - a function that resumes the processing of\n     * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n     * @property {Function} kill - a function that removes the `drain` callback and\n     * empties remaining tasks from the queue forcing it to go idle. No more tasks\n     * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n     *\n     * @example\n     * const q = async.queue(worker, 2)\n     * q.push(item1)\n     * q.push(item2)\n     * q.push(item3)\n     * // queues are iterable, spread into an array to inspect\n     * const items = [...q] // [item1, item2, item3]\n     * // or use for of\n     * for (let item of q) {\n     *     console.log(item)\n     * }\n     *\n     * q.drain(() => {\n     *     console.log('all done')\n     * })\n     * // or\n     * await q.drain()\n     */\n\n    /**\n     * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n     * `queue` are processed in parallel (up to the `concurrency` limit). If all\n     * `worker`s are in progress, the task is queued until one becomes available.\n     * Once a `worker` completes a `task`, that `task`'s callback is called.\n     *\n     * @name queue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An async function for processing a queued task.\n     * If you want to handle errors from an individual task, pass a callback to\n     * `q.push()`. Invoked with (task, callback).\n     * @param {number} [concurrency=1] - An `integer` for determining how many\n     * `worker` functions should be run in parallel.  If omitted, the concurrency\n     * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n     * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n     * attached as certain properties to listen for specific events during the\n     * lifecycle of the queue.\n     * @example\n     *\n     * // create a queue object with concurrency 2\n     * var q = async.queue(function(task, callback) {\n     *     console.log('hello ' + task.name);\n     *     callback();\n     * }, 2);\n     *\n     * // assign a callback\n     * q.drain(function() {\n     *     console.log('all items have been processed');\n     * });\n     * // or await the end\n     * await q.drain()\n     *\n     * // assign an error callback\n     * q.error(function(err, task) {\n     *     console.error('task experienced an error');\n     * });\n     *\n     * // add some items to the queue\n     * q.push({name: 'foo'}, function(err) {\n     *     console.log('finished processing foo');\n     * });\n     * // callback is optional\n     * q.push({name: 'bar'});\n     *\n     * // add some items to the queue (batch-wise)\n     * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n     *     console.log('finished processing item');\n     * });\n     *\n     * // add some items to the front of the queue\n     * q.unshift({name: 'bar'}, function (err) {\n     *     console.log('finished processing bar');\n     * });\n     */\n    function queue (worker, concurrency) {\n        var _worker = wrapAsync(worker);\n        return queue$1((items, cb) => {\n            _worker(items[0], cb);\n        }, concurrency, 1);\n    }\n\n    // Binary min-heap implementation used for priority queue.\n    // Implementation is stable, i.e. push time is considered for equal priorities\n    class Heap {\n        constructor() {\n            this.heap = [];\n            this.pushCount = Number.MIN_SAFE_INTEGER;\n        }\n\n        get length() {\n            return this.heap.length;\n        }\n\n        empty () {\n            this.heap = [];\n            return this;\n        }\n\n        percUp(index) {\n            let p;\n\n            while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n                let t = this.heap[index];\n                this.heap[index] = this.heap[p];\n                this.heap[p] = t;\n\n                index = p;\n            }\n        }\n\n        percDown(index) {\n            let l;\n\n            while ((l=leftChi(index)) < this.heap.length) {\n                if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                    l = l+1;\n                }\n\n                if (smaller(this.heap[index], this.heap[l])) {\n                    break;\n                }\n\n                let t = this.heap[index];\n                this.heap[index] = this.heap[l];\n                this.heap[l] = t;\n\n                index = l;\n            }\n        }\n\n        push(node) {\n            node.pushCount = ++this.pushCount;\n            this.heap.push(node);\n            this.percUp(this.heap.length-1);\n        }\n\n        unshift(node) {\n            return this.heap.push(node);\n        }\n\n        shift() {\n            let [top] = this.heap;\n\n            this.heap[0] = this.heap[this.heap.length-1];\n            this.heap.pop();\n            this.percDown(0);\n\n            return top;\n        }\n\n        toArray() {\n            return [...this];\n        }\n\n        *[Symbol.iterator] () {\n            for (let i = 0; i < this.heap.length; i++) {\n                yield this.heap[i].data;\n            }\n        }\n\n        remove (testFn) {\n            let j = 0;\n            for (let i = 0; i < this.heap.length; i++) {\n                if (!testFn(this.heap[i])) {\n                    this.heap[j] = this.heap[i];\n                    j++;\n                }\n            }\n\n            this.heap.splice(j);\n\n            for (let i = parent(this.heap.length-1); i >= 0; i--) {\n                this.percDown(i);\n            }\n\n            return this;\n        }\n    }\n\n    function leftChi(i) {\n        return (i<<1)+1;\n    }\n\n    function parent(i) {\n        return ((i+1)>>1)-1;\n    }\n\n    function smaller(x, y) {\n        if (x.priority !== y.priority) {\n            return x.priority < y.priority;\n        }\n        else {\n            return x.pushCount < y.pushCount;\n        }\n    }\n\n    /**\n     * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n     * completed in ascending priority order.\n     *\n     * @name priorityQueue\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.queue]{@link module:ControlFlow.queue}\n     * @category Control Flow\n     * @param {AsyncFunction} worker - An async function for processing a queued task.\n     * If you want to handle errors from an individual task, pass a callback to\n     * `q.push()`.\n     * Invoked with (task, callback).\n     * @param {number} concurrency - An `integer` for determining how many `worker`\n     * functions should be run in parallel.  If omitted, the concurrency defaults to\n     * `1`.  If the concurrency is `0`, an error is thrown.\n     * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are three\n     * differences between `queue` and `priorityQueue` objects:\n     * * `push(task, priority, [callback])` - `priority` should be a number. If an\n     *   array of `tasks` is given, all tasks will be assigned the same priority.\n     * * `pushAsync(task, priority, [callback])` - the same as `priorityQueue.push`,\n     *   except this returns a promise that rejects if an error occurs.\n     * * The `unshift` and `unshiftAsync` methods were removed.\n     */\n    function priorityQueue(worker, concurrency) {\n        // Start with a normal queue\n        var q = queue(worker, concurrency);\n\n        var {\n            push,\n            pushAsync\n        } = q;\n\n        q._tasks = new Heap();\n        q._createTaskItem = ({data, priority}, callback) => {\n            return {\n                data,\n                priority,\n                callback\n            };\n        };\n\n        function createDataItems(tasks, priority) {\n            if (!Array.isArray(tasks)) {\n                return {data: tasks, priority};\n            }\n            return tasks.map(data => { return {data, priority}; });\n        }\n\n        // Override push to accept second parameter representing priority\n        q.push = function(data, priority = 0, callback) {\n            return push(createDataItems(data, priority), callback);\n        };\n\n        q.pushAsync = function(data, priority = 0, callback) {\n            return pushAsync(createDataItems(data, priority), callback);\n        };\n\n        // Remove unshift functions\n        delete q.unshift;\n        delete q.unshiftAsync;\n\n        return q;\n    }\n\n    /**\n     * Runs the `tasks` array of functions in parallel, without waiting until the\n     * previous function has completed. Once any of the `tasks` complete or pass an\n     * error to its callback, the main `callback` is immediately called. It's\n     * equivalent to `Promise.race()`.\n     *\n     * @name race\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n     * to run. Each function can complete with an optional `result` value.\n     * @param {Function} callback - A callback to run once any of the functions have\n     * completed. This function gets an error or result from the first function that\n     * completed. Invoked with (err, result).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * async.race([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ],\n     * // main callback\n     * function(err, result) {\n     *     // the result will be equal to 'two' as it finishes earlier\n     * });\n     */\n    function race(tasks, callback) {\n        callback = once(callback);\n        if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n        if (!tasks.length) return callback();\n        for (var i = 0, l = tasks.length; i < l; i++) {\n            wrapAsync(tasks[i])(callback);\n        }\n    }\n\n    var race$1 = awaitify(race, 2);\n\n    /**\n     * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n     *\n     * @name reduceRight\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reduce]{@link module:Collections.reduce}\n     * @alias foldr\n     * @category Collection\n     * @param {Array} array - A collection to iterate over.\n     * @param {*} memo - The initial state of the reduction.\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * array to produce the next step in the reduction.\n     * The `iteratee` should complete with the next state of the reduction.\n     * If the iteratee completes with an error, the reduction is stopped and the\n     * main `callback` is immediately called with the error.\n     * Invoked with (memo, item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the reduced value. Invoked with\n     * (err, result).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function reduceRight (array, memo, iteratee, callback) {\n        var reversed = [...array].reverse();\n        return reduce$1(reversed, memo, iteratee, callback);\n    }\n\n    /**\n     * Wraps the async function in another function that always completes with a\n     * result object, even when it errors.\n     *\n     * The result object has either the property `error` or `value`.\n     *\n     * @name reflect\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} fn - The async function you want to wrap\n     * @returns {Function} - A function that always passes null to it's callback as\n     * the error. The second argument to the callback will be an `object` with\n     * either an `error` or a `value` property.\n     * @example\n     *\n     * async.parallel([\n     *     async.reflect(function(callback) {\n     *         // do some stuff ...\n     *         callback(null, 'one');\n     *     }),\n     *     async.reflect(function(callback) {\n     *         // do some more stuff but error ...\n     *         callback('bad stuff happened');\n     *     }),\n     *     async.reflect(function(callback) {\n     *         // do some more stuff ...\n     *         callback(null, 'two');\n     *     })\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results[0].value = 'one'\n     *     // results[1].error = 'bad stuff happened'\n     *     // results[2].value = 'two'\n     * });\n     */\n    function reflect(fn) {\n        var _fn = wrapAsync(fn);\n        return initialParams(function reflectOn(args, reflectCallback) {\n            args.push((error, ...cbArgs) => {\n                let retVal = {};\n                if (error) {\n                    retVal.error = error;\n                }\n                if (cbArgs.length > 0){\n                    var value = cbArgs;\n                    if (cbArgs.length <= 1) {\n                        [value] = cbArgs;\n                    }\n                    retVal.value = value;\n                }\n                reflectCallback(null, retVal);\n            });\n\n            return _fn.apply(this, args);\n        });\n    }\n\n    /**\n     * A helper function that wraps an array or an object of functions with `reflect`.\n     *\n     * @name reflectAll\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.reflect]{@link module:Utils.reflect}\n     * @category Util\n     * @param {Array|Object|Iterable} tasks - The collection of\n     * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n     * @returns {Array} Returns an array of async functions, each wrapped in\n     * `async.reflect`\n     * @example\n     *\n     * let tasks = [\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         // do some more stuff but error ...\n     *         callback(new Error('bad stuff happened'));\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ];\n     *\n     * async.parallel(async.reflectAll(tasks),\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results[0].value = 'one'\n     *     // results[1].error = Error('bad stuff happened')\n     *     // results[2].value = 'two'\n     * });\n     *\n     * // an example using an object instead of an array\n     * let tasks = {\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         callback('two');\n     *     },\n     *     three: function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'three');\n     *         }, 100);\n     *     }\n     * };\n     *\n     * async.parallel(async.reflectAll(tasks),\n     * // optional callback\n     * function(err, results) {\n     *     // values\n     *     // results.one.value = 'one'\n     *     // results.two.error = 'two'\n     *     // results.three.value = 'three'\n     * });\n     */\n    function reflectAll(tasks) {\n        var results;\n        if (Array.isArray(tasks)) {\n            results = tasks.map(reflect);\n        } else {\n            results = {};\n            Object.keys(tasks).forEach(key => {\n                results[key] = reflect.call(this, tasks[key]);\n            });\n        }\n        return results;\n    }\n\n    function reject$2(eachfn, arr, _iteratee, callback) {\n        const iteratee = wrapAsync(_iteratee);\n        return _filter(eachfn, arr, (value, cb) => {\n            iteratee(value, (err, v) => {\n                cb(err, !v);\n            });\n        }, callback);\n    }\n\n    /**\n     * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n     *\n     * @name reject\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.filter]{@link module:Collections.filter}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     *\n     * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.reject(fileList, fileExists, function(err, results) {\n     *    // [ 'dir3/file6.txt' ]\n     *    // results now equals an array of the non-existing files\n     * });\n     *\n     * // Using Promises\n     * async.reject(fileList, fileExists)\n     * .then( results => {\n     *     console.log(results);\n     *     // [ 'dir3/file6.txt' ]\n     *     // results now equals an array of the non-existing files\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.reject(fileList, fileExists);\n     *         console.log(results);\n     *         // [ 'dir3/file6.txt' ]\n     *         // results now equals an array of the non-existing files\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function reject (coll, iteratee, callback) {\n        return reject$2(eachOf$1, coll, iteratee, callback)\n    }\n    var reject$1 = awaitify(reject, 3);\n\n    /**\n     * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name rejectLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reject]{@link module:Collections.reject}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function rejectLimit (coll, limit, iteratee, callback) {\n        return reject$2(eachOfLimit$2(limit), coll, iteratee, callback)\n    }\n    var rejectLimit$1 = awaitify(rejectLimit, 4);\n\n    /**\n     * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n     *\n     * @name rejectSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.reject]{@link module:Collections.reject}\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {Function} iteratee - An async truth test to apply to each item in\n     * `coll`.\n     * The should complete with a boolean value as its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     */\n    function rejectSeries (coll, iteratee, callback) {\n        return reject$2(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var rejectSeries$1 = awaitify(rejectSeries, 3);\n\n    function constant(value) {\n        return function () {\n            return value;\n        }\n    }\n\n    /**\n     * Attempts to get a successful response from `task` no more than `times` times\n     * before returning an error. If the task is successful, the `callback` will be\n     * passed the result of the successful task. If all attempts fail, the callback\n     * will be passed the error and result (if any) of the final attempt.\n     *\n     * @name retry\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @see [async.retryable]{@link module:ControlFlow.retryable}\n     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n     * object with `times` and `interval` or a number.\n     * * `times` - The number of attempts to make before giving up.  The default\n     *   is `5`.\n     * * `interval` - The time to wait between retries, in milliseconds.  The\n     *   default is `0`. The interval may also be specified as a function of the\n     *   retry count (see example).\n     * * `errorFilter` - An optional synchronous function that is invoked on\n     *   erroneous result. If it returns `true` the retry attempts will continue;\n     *   if the function returns `false` the retry flow is aborted with the current\n     *   attempt's error and result being returned to the final callback.\n     *   Invoked with (err).\n     * * If `opts` is a number, the number specifies the number of times to retry,\n     *   with the default interval of `0`.\n     * @param {AsyncFunction} task - An async function to retry.\n     * Invoked with (callback).\n     * @param {Function} [callback] - An optional callback which is called when the\n     * task has succeeded, or after the final failed attempt. It receives the `err`\n     * and `result` arguments of the last attempt at completing the `task`. Invoked\n     * with (err, results).\n     * @returns {Promise} a promise if no callback provided\n     *\n     * @example\n     *\n     * // The `retry` function can be used as a stand-alone control flow by passing\n     * // a callback, as shown below:\n     *\n     * // try calling apiMethod 3 times\n     * async.retry(3, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod 3 times, waiting 200 ms between each retry\n     * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod 10 times with exponential backoff\n     * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n     * async.retry({\n     *   times: 10,\n     *   interval: function(retryCount) {\n     *     return 50 * Math.pow(2, retryCount);\n     *   }\n     * }, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod the default 5 times no delay between each retry\n     * async.retry(apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // try calling apiMethod only when error condition satisfies, all other\n     * // errors will abort the retry control flow and return to final callback\n     * async.retry({\n     *   errorFilter: function(err) {\n     *     return err.message === 'Temporary error'; // only retry on a specific error\n     *   }\n     * }, apiMethod, function(err, result) {\n     *     // do something with the result\n     * });\n     *\n     * // to retry individual methods that are not as reliable within other\n     * // control flow functions, use the `retryable` wrapper:\n     * async.auto({\n     *     users: api.getUsers.bind(api),\n     *     payments: async.retryable(3, api.getPayments.bind(api))\n     * }, function(err, results) {\n     *     // do something with the results\n     * });\n     *\n     */\n    const DEFAULT_TIMES = 5;\n    const DEFAULT_INTERVAL = 0;\n\n    function retry(opts, task, callback) {\n        var options = {\n            times: DEFAULT_TIMES,\n            intervalFunc: constant(DEFAULT_INTERVAL)\n        };\n\n        if (arguments.length < 3 && typeof opts === 'function') {\n            callback = task || promiseCallback();\n            task = opts;\n        } else {\n            parseTimes(options, opts);\n            callback = callback || promiseCallback();\n        }\n\n        if (typeof task !== 'function') {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n\n        var _task = wrapAsync(task);\n\n        var attempt = 1;\n        function retryAttempt() {\n            _task((err, ...args) => {\n                if (err === false) return\n                if (err && attempt++ < options.times &&\n                    (typeof options.errorFilter != 'function' ||\n                        options.errorFilter(err))) {\n                    setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n                } else {\n                    callback(err, ...args);\n                }\n            });\n        }\n\n        retryAttempt();\n        return callback[PROMISE_SYMBOL]\n    }\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ?\n                t.interval :\n                constant(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    /**\n     * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n     * wraps a task and makes it retryable, rather than immediately calling it\n     * with retries.\n     *\n     * @name retryable\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.retry]{@link module:ControlFlow.retry}\n     * @category Control Flow\n     * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n     * options, exactly the same as from `retry`, except for a `opts.arity` that\n     * is the arity of the `task` function, defaulting to `task.length`\n     * @param {AsyncFunction} task - the asynchronous function to wrap.\n     * This function will be passed any arguments passed to the returned wrapper.\n     * Invoked with (...args, callback).\n     * @returns {AsyncFunction} The wrapped function, which when invoked, will\n     * retry on an error, based on the parameters specified in `opts`.\n     * This function will accept the same parameters as `task`.\n     * @example\n     *\n     * async.auto({\n     *     dep1: async.retryable(3, getFromFlakyService),\n     *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n     *         maybeProcessData(results.dep1, cb);\n     *     })]\n     * }, callback);\n     */\n    function retryable (opts, task) {\n        if (!task) {\n            task = opts;\n            opts = null;\n        }\n        let arity = (opts && opts.arity) || task.length;\n        if (isAsync(task)) {\n            arity += 1;\n        }\n        var _task = wrapAsync(task);\n        return initialParams((args, callback) => {\n            if (args.length < arity - 1 || callback == null) {\n                args.push(callback);\n                callback = promiseCallback();\n            }\n            function taskFn(cb) {\n                _task(...args, cb);\n            }\n\n            if (opts) retry(opts, taskFn, callback);\n            else retry(taskFn, callback);\n\n            return callback[PROMISE_SYMBOL]\n        });\n    }\n\n    /**\n     * Run the functions in the `tasks` collection in series, each one running once\n     * the previous function has completed. If any functions in the series pass an\n     * error to its callback, no more functions are run, and `callback` is\n     * immediately called with the value of the error. Otherwise, `callback`\n     * receives an array of results when `tasks` have completed.\n     *\n     * It is also possible to use an object instead of an array. Each property will\n     * be run as a function, and the results will be passed to the final `callback`\n     * as an object instead of an array. This can be a more readable way of handling\n     *  results from {@link async.series}.\n     *\n     * **Note** that while many implementations preserve the order of object\n     * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n     * explicitly states that\n     *\n     * > The mechanics and order of enumerating the properties is not specified.\n     *\n     * So if you rely on the order in which your series of functions are executed,\n     * and want this to work on all platforms, consider using an array.\n     *\n     * @name series\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n     * [async functions]{@link AsyncFunction} to run in series.\n     * Each function can complete with any number of optional `result` values.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed. This function gets a results array (or object)\n     * containing all the result arguments passed to the `task` callbacks. Invoked\n     * with (err, result).\n     * @return {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * //Using Callbacks\n     * async.series([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             // do some async task\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             // then do another async task\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ], function(err, results) {\n     *     console.log(results);\n     *     // results is equal to ['one','two']\n     * });\n     *\n     * // an example using objects instead of arrays\n     * async.series({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             // do some async task\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             // then do another async task\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }, function(err, results) {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * });\n     *\n     * //Using Promises\n     * async.series([\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'one');\n     *         }, 200);\n     *     },\n     *     function(callback) {\n     *         setTimeout(function() {\n     *             callback(null, 'two');\n     *         }, 100);\n     *     }\n     * ]).then(results => {\n     *     console.log(results);\n     *     // results is equal to ['one','two']\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // an example using an object instead of an array\n     * async.series({\n     *     one: function(callback) {\n     *         setTimeout(function() {\n     *             // do some async task\n     *             callback(null, 1);\n     *         }, 200);\n     *     },\n     *     two: function(callback) {\n     *         setTimeout(function() {\n     *             // then do another async task\n     *             callback(null, 2);\n     *         }, 100);\n     *     }\n     * }).then(results => {\n     *     console.log(results);\n     *     // results is equal to: { one: 1, two: 2 }\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * //Using async/await\n     * async () => {\n     *     try {\n     *         let results = await async.series([\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     // do some async task\n     *                     callback(null, 'one');\n     *                 }, 200);\n     *             },\n     *             function(callback) {\n     *                 setTimeout(function() {\n     *                     // then do another async task\n     *                     callback(null, 'two');\n     *                 }, 100);\n     *             }\n     *         ]);\n     *         console.log(results);\n     *         // results is equal to ['one','two']\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * // an example using an object instead of an array\n     * async () => {\n     *     try {\n     *         let results = await async.parallel({\n     *             one: function(callback) {\n     *                 setTimeout(function() {\n     *                     // do some async task\n     *                     callback(null, 1);\n     *                 }, 200);\n     *             },\n     *            two: function(callback) {\n     *                 setTimeout(function() {\n     *                     // then do another async task\n     *                     callback(null, 2);\n     *                 }, 100);\n     *            }\n     *         });\n     *         console.log(results);\n     *         // results is equal to: { one: 1, two: 2 }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function series(tasks, callback) {\n        return _parallel(eachOfSeries$1, tasks, callback);\n    }\n\n    /**\n     * Returns `true` if at least one element in the `coll` satisfies an async test.\n     * If any iteratee call returns `true`, the main `callback` is immediately\n     * called.\n     *\n     * @name some\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @alias any\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in parallel.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // dir1 is a directory that contains file1.txt, file2.txt\n     * // dir2 is a directory that contains file3.txt, file4.txt\n     * // dir3 is a directory that contains file5.txt\n     * // dir4 does not exist\n     *\n     * // asynchronous function that checks if a file exists\n     * function fileExists(file, callback) {\n     *    fs.access(file, fs.constants.F_OK, (err) => {\n     *        callback(null, !err);\n     *    });\n     * }\n     *\n     * // Using callbacks\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n     *    function(err, result) {\n     *        console.log(result);\n     *        // true\n     *        // result is true since some file in the list exists\n     *    }\n     *);\n     *\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n     *    function(err, result) {\n     *        console.log(result);\n     *        // false\n     *        // result is false since none of the files exists\n     *    }\n     *);\n     *\n     * // Using Promises\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // true\n     *     // result is true since some file in the list exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n     * .then( result => {\n     *     console.log(result);\n     *     // false\n     *     // result is false since none of the files exists\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n     *         console.log(result);\n     *         // true\n     *         // result is true since some file in the list exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     * async () => {\n     *     try {\n     *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n     *         console.log(result);\n     *         // false\n     *         // result is false since none of the files exists\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function some(coll, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n    }\n    var some$1 = awaitify(some, 3);\n\n    /**\n     * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n     *\n     * @name someLimit\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.some]{@link module:Collections.some}\n     * @alias anyLimit\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in parallel.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function someLimit(coll, limit, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOfLimit$2(limit), coll, iteratee, callback)\n    }\n    var someLimit$1 = awaitify(someLimit, 4);\n\n    /**\n     * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n     *\n     * @name someSeries\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @see [async.some]{@link module:Collections.some}\n     * @alias anySeries\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n     * in the collections in series.\n     * The iteratee should complete with a boolean `result` value.\n     * Invoked with (item, callback).\n     * @param {Function} [callback] - A callback which is called as soon as any\n     * iteratee returns `true`, or after all the iteratee functions have finished.\n     * Result will be either `true` or `false` depending on the values of the async\n     * tests. Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     */\n    function someSeries(coll, iteratee, callback) {\n        return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n    }\n    var someSeries$1 = awaitify(someSeries, 3);\n\n    /**\n     * Sorts a list by the results of running each `coll` value through an async\n     * `iteratee`.\n     *\n     * @name sortBy\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {AsyncFunction} iteratee - An async function to apply to each item in\n     * `coll`.\n     * The iteratee should complete with a value to use as the sort criteria as\n     * its `result`.\n     * Invoked with (item, callback).\n     * @param {Function} callback - A callback which is called after all the\n     * `iteratee` functions have finished, or an error occurs. Results is the items\n     * from the original `coll` sorted by the values returned by the `iteratee`\n     * calls. Invoked with (err, results).\n     * @returns {Promise} a promise, if no callback passed\n     * @example\n     *\n     * // bigfile.txt is a file that is 251100 bytes in size\n     * // mediumfile.txt is a file that is 11000 bytes in size\n     * // smallfile.txt is a file that is 121 bytes in size\n     *\n     * // asynchronous function that returns the file size in bytes\n     * function getFileSizeInBytes(file, callback) {\n     *     fs.stat(file, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         callback(null, stat.size);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n     *     function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *         } else {\n     *             console.log(results);\n     *             // results is now the original array of files sorted by\n     *             // file size (ascending by default), e.g.\n     *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     *         }\n     *     }\n     * );\n     *\n     * // By modifying the callback parameter the\n     * // sorting order can be influenced:\n     *\n     * // ascending order\n     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n     *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n     *         if (getFileSizeErr) return callback(getFileSizeErr);\n     *         callback(null, fileSize);\n     *     });\n     * }, function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *         } else {\n     *             console.log(results);\n     *             // results is now the original array of files sorted by\n     *             // file size (ascending by default), e.g.\n     *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     *         }\n     *     }\n     * );\n     *\n     * // descending order\n     * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n     *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n     *         if (getFileSizeErr) {\n     *             return callback(getFileSizeErr);\n     *         }\n     *         callback(null, fileSize * -1);\n     *     });\n     * }, function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *         } else {\n     *             console.log(results);\n     *             // results is now the original array of files sorted by\n     *             // file size (ascending by default), e.g.\n     *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n     *         }\n     *     }\n     * );\n     *\n     * // Error handling\n     * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n     *     function(err, results) {\n     *         if (err) {\n     *             console.log(err);\n     *             // [ Error: ENOENT: no such file or directory ]\n     *         } else {\n     *             console.log(results);\n     *         }\n     *     }\n     * );\n     *\n     * // Using Promises\n     * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     *     // results is now the original array of files sorted by\n     *     // file size (ascending by default), e.g.\n     *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     * }).catch( err => {\n     *     console.log(err);\n     * });\n     *\n     * // Error handling\n     * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n     * .then( results => {\n     *     console.log(results);\n     * }).catch( err => {\n     *     console.log(err);\n     *     // [ Error: ENOENT: no such file or directory ]\n     * });\n     *\n     * // Using async/await\n     * (async () => {\n     *     try {\n     *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n     *         console.log(results);\n     *         // results is now the original array of files sorted by\n     *         // file size (ascending by default), e.g.\n     *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * })();\n     *\n     * // Error handling\n     * async () => {\n     *     try {\n     *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n     *         console.log(results);\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *         // [ Error: ENOENT: no such file or directory ]\n     *     }\n     * }\n     *\n     */\n    function sortBy (coll, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return map$1(coll, (x, iterCb) => {\n            _iteratee(x, (err, criteria) => {\n                if (err) return iterCb(err);\n                iterCb(err, {value: x, criteria});\n            });\n        }, (err, results) => {\n            if (err) return callback(err);\n            callback(null, results.sort(comparator).map(v => v.value));\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    }\n    var sortBy$1 = awaitify(sortBy, 3);\n\n    /**\n     * Sets a time limit on an asynchronous function. If the function does not call\n     * its callback within the specified milliseconds, it will be called with a\n     * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n     *\n     * @name timeout\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @category Util\n     * @param {AsyncFunction} asyncFn - The async function to limit in time.\n     * @param {number} milliseconds - The specified time limit.\n     * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n     * to timeout Error for more information..\n     * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n     * of the control flow functions.\n     * Invoke this function with the same parameters as you would `asyncFunc`.\n     * @example\n     *\n     * function myFunction(foo, callback) {\n     *     doAsyncTask(foo, function(err, data) {\n     *         // handle errors\n     *         if (err) return callback(err);\n     *\n     *         // do some stuff ...\n     *\n     *         // return processed data\n     *         return callback(null, data);\n     *     });\n     * }\n     *\n     * var wrapped = async.timeout(myFunction, 1000);\n     *\n     * // call `wrapped` as you would `myFunction`\n     * wrapped({ bar: 'bar' }, function(err, data) {\n     *     // if `myFunction` takes < 1000 ms to execute, `err`\n     *     // and `data` will have their expected values\n     *\n     *     // else `err` will be an Error with the code 'ETIMEDOUT'\n     * });\n     */\n    function timeout(asyncFn, milliseconds, info) {\n        var fn = wrapAsync(asyncFn);\n\n        return initialParams((args, callback) => {\n            var timedOut = false;\n            var timer;\n\n            function timeoutCallback() {\n                var name = asyncFn.name || 'anonymous';\n                var error  = new Error('Callback function \"' + name + '\" timed out.');\n                error.code = 'ETIMEDOUT';\n                if (info) {\n                    error.info = info;\n                }\n                timedOut = true;\n                callback(error);\n            }\n\n            args.push((...cbArgs) => {\n                if (!timedOut) {\n                    callback(...cbArgs);\n                    clearTimeout(timer);\n                }\n            });\n\n            // setup timer and call original function\n            timer = setTimeout(timeoutCallback, milliseconds);\n            fn(...args);\n        });\n    }\n\n    function range(size) {\n        var result = Array(size);\n        while (size--) {\n            result[size] = size;\n        }\n        return result;\n    }\n\n    /**\n     * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n     * time.\n     *\n     * @name timesLimit\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.times]{@link module:ControlFlow.times}\n     * @category Control Flow\n     * @param {number} count - The number of times to run the function.\n     * @param {number} limit - The maximum number of async operations at a time.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     */\n    function timesLimit(count, limit, iteratee, callback) {\n        var _iteratee = wrapAsync(iteratee);\n        return mapLimit$1(range(count), limit, _iteratee, callback);\n    }\n\n    /**\n     * Calls the `iteratee` function `n` times, and accumulates results in the same\n     * manner you would use with [map]{@link module:Collections.map}.\n     *\n     * @name times\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.map]{@link module:Collections.map}\n     * @category Control Flow\n     * @param {number} n - The number of times to run the function.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see {@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     * @example\n     *\n     * // Pretend this is some complicated async factory\n     * var createUser = function(id, callback) {\n     *     callback(null, {\n     *         id: 'user' + id\n     *     });\n     * };\n     *\n     * // generate 5 users\n     * async.times(5, function(n, next) {\n     *     createUser(n, function(err, user) {\n     *         next(err, user);\n     *     });\n     * }, function(err, users) {\n     *     // we should now have 5 users\n     * });\n     */\n    function times (n, iteratee, callback) {\n        return timesLimit(n, Infinity, iteratee, callback)\n    }\n\n    /**\n     * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n     *\n     * @name timesSeries\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.times]{@link module:ControlFlow.times}\n     * @category Control Flow\n     * @param {number} n - The number of times to run the function.\n     * @param {AsyncFunction} iteratee - The async function to call `n` times.\n     * Invoked with the iteration index and a callback: (n, next).\n     * @param {Function} callback - see {@link module:Collections.map}.\n     * @returns {Promise} a promise, if no callback is provided\n     */\n    function timesSeries (n, iteratee, callback) {\n        return timesLimit(n, 1, iteratee, callback)\n    }\n\n    /**\n     * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n     * element in parallel, each step potentially mutating an `accumulator` value.\n     * The type of the accumulator defaults to the type of collection passed in.\n     *\n     * @name transform\n     * @static\n     * @memberOf module:Collections\n     * @method\n     * @category Collection\n     * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n     * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n     * it will default to an empty Object or Array, depending on the type of `coll`\n     * @param {AsyncFunction} iteratee - A function applied to each item in the\n     * collection that potentially modifies the accumulator.\n     * Invoked with (accumulator, item, key, callback).\n     * @param {Function} [callback] - A callback which is called after all the\n     * `iteratee` functions have finished. Result is the transformed accumulator.\n     * Invoked with (err, result).\n     * @returns {Promise} a promise, if no callback provided\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     *\n     * // helper function that returns human-readable size format from bytes\n     * function formatBytes(bytes, decimals = 2) {\n     *   // implementation not included for brevity\n     *   return humanReadbleFilesize;\n     * }\n     *\n     * const fileList = ['file1.txt','file2.txt','file3.txt'];\n     *\n     * // asynchronous function that returns the file size, transformed to human-readable format\n     * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n     * function transformFileSize(acc, value, key, callback) {\n     *     fs.stat(value, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         acc[key] = formatBytes(stat.size);\n     *         callback(null);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.transform(fileList, transformFileSize, function(err, result) {\n     *     if(err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.transform(fileList, transformFileSize)\n     * .then(result => {\n     *     console.log(result);\n     *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * (async () => {\n     *     try {\n     *         let result = await async.transform(fileList, transformFileSize);\n     *         console.log(result);\n     *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * })();\n     *\n     * @example\n     *\n     * // file1.txt is a file that is 1000 bytes in size\n     * // file2.txt is a file that is 2000 bytes in size\n     * // file3.txt is a file that is 3000 bytes in size\n     *\n     * // helper function that returns human-readable size format from bytes\n     * function formatBytes(bytes, decimals = 2) {\n     *   // implementation not included for brevity\n     *   return humanReadbleFilesize;\n     * }\n     *\n     * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n     *\n     * // asynchronous function that returns the file size, transformed to human-readable format\n     * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n     * function transformFileSize(acc, value, key, callback) {\n     *     fs.stat(value, function(err, stat) {\n     *         if (err) {\n     *             return callback(err);\n     *         }\n     *         acc[key] = formatBytes(stat.size);\n     *         callback(null);\n     *     });\n     * }\n     *\n     * // Using callbacks\n     * async.transform(fileMap, transformFileSize, function(err, result) {\n     *     if(err) {\n     *         console.log(err);\n     *     } else {\n     *         console.log(result);\n     *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n     *     }\n     * });\n     *\n     * // Using Promises\n     * async.transform(fileMap, transformFileSize)\n     * .then(result => {\n     *     console.log(result);\n     *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n     * }).catch(err => {\n     *     console.log(err);\n     * });\n     *\n     * // Using async/await\n     * async () => {\n     *     try {\n     *         let result = await async.transform(fileMap, transformFileSize);\n     *         console.log(result);\n     *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n     *     }\n     *     catch (err) {\n     *         console.log(err);\n     *     }\n     * }\n     *\n     */\n    function transform (coll, accumulator, iteratee, callback) {\n        if (arguments.length <= 3 && typeof accumulator === 'function') {\n            callback = iteratee;\n            iteratee = accumulator;\n            accumulator = Array.isArray(coll) ? [] : {};\n        }\n        callback = once(callback || promiseCallback());\n        var _iteratee = wrapAsync(iteratee);\n\n        eachOf$1(coll, (v, k, cb) => {\n            _iteratee(accumulator, v, k, cb);\n        }, err => callback(err, accumulator));\n        return callback[PROMISE_SYMBOL]\n    }\n\n    /**\n     * It runs each task in series but stops whenever any of the functions were\n     * successful. If one of the tasks were successful, the `callback` will be\n     * passed the result of the successful task. If all tasks fail, the callback\n     * will be passed the error and result (if any) of the final attempt.\n     *\n     * @name tryEach\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n     * run, each function is passed a `callback(err, result)` it must call on\n     * completion with an error `err` (which can be `null`) and an optional `result`\n     * value.\n     * @param {Function} [callback] - An optional callback which is called when one\n     * of the tasks has succeeded, or all have failed. It receives the `err` and\n     * `result` arguments of the last attempt at completing the `task`. Invoked with\n     * (err, results).\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     * async.tryEach([\n     *     function getDataFromFirstWebsite(callback) {\n     *         // Try getting the data from the first website\n     *         callback(err, data);\n     *     },\n     *     function getDataFromSecondWebsite(callback) {\n     *         // First website failed,\n     *         // Try getting the data from the backup website\n     *         callback(err, data);\n     *     }\n     * ],\n     * // optional callback\n     * function(err, results) {\n     *     Now do something with the data.\n     * });\n     *\n     */\n    function tryEach(tasks, callback) {\n        var error = null;\n        var result;\n        return eachSeries$1(tasks, (task, taskCb) => {\n            wrapAsync(task)((err, ...args) => {\n                if (err === false) return taskCb(err);\n\n                if (args.length < 2) {\n                    [result] = args;\n                } else {\n                    result = args;\n                }\n                error = err;\n                taskCb(err ? null : {});\n            });\n        }, () => callback(error, result));\n    }\n\n    var tryEach$1 = awaitify(tryEach);\n\n    /**\n     * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n     * unmemoized form. Handy for testing.\n     *\n     * @name unmemoize\n     * @static\n     * @memberOf module:Utils\n     * @method\n     * @see [async.memoize]{@link module:Utils.memoize}\n     * @category Util\n     * @param {AsyncFunction} fn - the memoized function\n     * @returns {AsyncFunction} a function that calls the original unmemoized function\n     */\n    function unmemoize(fn) {\n        return (...args) => {\n            return (fn.unmemoized || fn)(...args);\n        };\n    }\n\n    /**\n     * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs.\n     *\n     * @name whilst\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {AsyncFunction} test - asynchronous truth test to perform before each\n     * execution of `iteratee`. Invoked with (callback).\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` passes. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has failed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if no callback is passed\n     * @example\n     *\n     * var count = 0;\n     * async.whilst(\n     *     function test(cb) { cb(null, count < 5); },\n     *     function iter(callback) {\n     *         count++;\n     *         setTimeout(function() {\n     *             callback(null, count);\n     *         }, 1000);\n     *     },\n     *     function (err, n) {\n     *         // 5 seconds have passed, n = 5\n     *     }\n     * );\n     */\n    function whilst(test, iteratee, callback) {\n        callback = onlyOnce(callback);\n        var _fn = wrapAsync(iteratee);\n        var _test = wrapAsync(test);\n        var results = [];\n\n        function next(err, ...rest) {\n            if (err) return callback(err);\n            results = rest;\n            if (err === false) return;\n            _test(check);\n        }\n\n        function check(err, truth) {\n            if (err) return callback(err);\n            if (err === false) return;\n            if (!truth) return callback(null, ...results);\n            _fn(next);\n        }\n\n        return _test(check);\n    }\n    var whilst$1 = awaitify(whilst, 3);\n\n    /**\n     * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n     * stopped, or an error occurs. `callback` will be passed an error and any\n     * arguments passed to the final `iteratee`'s callback.\n     *\n     * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n     *\n     * @name until\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @see [async.whilst]{@link module:ControlFlow.whilst}\n     * @category Control Flow\n     * @param {AsyncFunction} test - asynchronous truth test to perform before each\n     * execution of `iteratee`. Invoked with (callback).\n     * @param {AsyncFunction} iteratee - An async function which is called each time\n     * `test` fails. Invoked with (callback).\n     * @param {Function} [callback] - A callback which is called after the test\n     * function has passed and repeated execution of `iteratee` has stopped. `callback`\n     * will be passed an error and any arguments passed to the final `iteratee`'s\n     * callback. Invoked with (err, [results]);\n     * @returns {Promise} a promise, if a callback is not passed\n     *\n     * @example\n     * const results = []\n     * let finished = false\n     * async.until(function test(cb) {\n     *     cb(null, finished)\n     * }, function iter(next) {\n     *     fetchPage(url, (err, body) => {\n     *         if (err) return next(err)\n     *         results = results.concat(body.objects)\n     *         finished = !!body.next\n     *         next(err)\n     *     })\n     * }, function done (err) {\n     *     // all pages have been fetched\n     * })\n     */\n    function until(test, iteratee, callback) {\n        const _test = wrapAsync(test);\n        return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n    }\n\n    /**\n     * Runs the `tasks` array of functions in series, each passing their results to\n     * the next in the array. However, if any of the `tasks` pass an error to their\n     * own callback, the next function is not executed, and the main `callback` is\n     * immediately called with the error.\n     *\n     * @name waterfall\n     * @static\n     * @memberOf module:ControlFlow\n     * @method\n     * @category Control Flow\n     * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n     * to run.\n     * Each function should complete with any number of `result` values.\n     * The `result` values will be passed as arguments, in order, to the next task.\n     * @param {Function} [callback] - An optional callback to run once all the\n     * functions have completed. This will be passed the results of the last task's\n     * callback. Invoked with (err, [results]).\n     * @returns {Promise} a promise, if a callback is omitted\n     * @example\n     *\n     * async.waterfall([\n     *     function(callback) {\n     *         callback(null, 'one', 'two');\n     *     },\n     *     function(arg1, arg2, callback) {\n     *         // arg1 now equals 'one' and arg2 now equals 'two'\n     *         callback(null, 'three');\n     *     },\n     *     function(arg1, callback) {\n     *         // arg1 now equals 'three'\n     *         callback(null, 'done');\n     *     }\n     * ], function (err, result) {\n     *     // result now equals 'done'\n     * });\n     *\n     * // Or, with named functions:\n     * async.waterfall([\n     *     myFirstFunction,\n     *     mySecondFunction,\n     *     myLastFunction,\n     * ], function (err, result) {\n     *     // result now equals 'done'\n     * });\n     * function myFirstFunction(callback) {\n     *     callback(null, 'one', 'two');\n     * }\n     * function mySecondFunction(arg1, arg2, callback) {\n     *     // arg1 now equals 'one' and arg2 now equals 'two'\n     *     callback(null, 'three');\n     * }\n     * function myLastFunction(arg1, callback) {\n     *     // arg1 now equals 'three'\n     *     callback(null, 'done');\n     * }\n     */\n    function waterfall (tasks, callback) {\n        callback = once(callback);\n        if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n        if (!tasks.length) return callback();\n        var taskIndex = 0;\n\n        function nextTask(args) {\n            var task = wrapAsync(tasks[taskIndex++]);\n            task(...args, onlyOnce(next));\n        }\n\n        function next(err, ...args) {\n            if (err === false) return\n            if (err || taskIndex === tasks.length) {\n                return callback(err, ...args);\n            }\n            nextTask(args);\n        }\n\n        nextTask([]);\n    }\n\n    var waterfall$1 = awaitify(waterfall);\n\n    /**\n     * An \"async function\" in the context of Async is an asynchronous function with\n     * a variable number of parameters, with the final parameter being a callback.\n     * (`function (arg1, arg2, ..., callback) {}`)\n     * The final callback is of the form `callback(err, results...)`, which must be\n     * called once the function is completed.  The callback should be called with a\n     * Error as its first argument to signal that an error occurred.\n     * Otherwise, if no error occurred, it should be called with `null` as the first\n     * argument, and any additional `result` arguments that may apply, to signal\n     * successful completion.\n     * The callback must be called exactly once, ideally on a later tick of the\n     * JavaScript event loop.\n     *\n     * This type of function is also referred to as a \"Node-style async function\",\n     * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n     * library are themselves CPS/Node-style async functions, or functions that\n     * return CPS/Node-style async functions.\n     *\n     * Wherever we accept a Node-style async function, we also directly accept an\n     * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n     * In this case, the `async` function will not be passed a final callback\n     * argument, and any thrown error will be used as the `err` argument of the\n     * implicit callback, and the return value will be used as the `result` value.\n     * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n     * argument, and a `resolved` value becomes the `result`.)\n     *\n     * Note, due to JavaScript limitations, we can only detect native `async`\n     * functions and not transpilied implementations.\n     * Your environment must have `async`/`await` support for this to work.\n     * (e.g. Node > v7.6, or a recent version of a modern browser).\n     * If you are using `async` functions through a transpiler (e.g. Babel), you\n     * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n     * because the `async function` will be compiled to an ordinary function that\n     * returns a promise.\n     *\n     * @typedef {Function} AsyncFunction\n     * @static\n     */\n\n\n    var index = {\n        apply,\n        applyEach,\n        applyEachSeries,\n        asyncify,\n        auto,\n        autoInject,\n        cargo: cargo$1,\n        cargoQueue: cargo,\n        compose,\n        concat: concat$1,\n        concatLimit: concatLimit$1,\n        concatSeries: concatSeries$1,\n        constant: constant$1,\n        detect: detect$1,\n        detectLimit: detectLimit$1,\n        detectSeries: detectSeries$1,\n        dir,\n        doUntil,\n        doWhilst: doWhilst$1,\n        each,\n        eachLimit: eachLimit$1,\n        eachOf: eachOf$1,\n        eachOfLimit: eachOfLimit$1,\n        eachOfSeries: eachOfSeries$1,\n        eachSeries: eachSeries$1,\n        ensureAsync,\n        every: every$1,\n        everyLimit: everyLimit$1,\n        everySeries: everySeries$1,\n        filter: filter$1,\n        filterLimit: filterLimit$1,\n        filterSeries: filterSeries$1,\n        forever: forever$1,\n        groupBy,\n        groupByLimit: groupByLimit$1,\n        groupBySeries,\n        log,\n        map: map$1,\n        mapLimit: mapLimit$1,\n        mapSeries: mapSeries$1,\n        mapValues,\n        mapValuesLimit: mapValuesLimit$1,\n        mapValuesSeries,\n        memoize,\n        nextTick,\n        parallel,\n        parallelLimit,\n        priorityQueue,\n        queue,\n        race: race$1,\n        reduce: reduce$1,\n        reduceRight,\n        reflect,\n        reflectAll,\n        reject: reject$1,\n        rejectLimit: rejectLimit$1,\n        rejectSeries: rejectSeries$1,\n        retry,\n        retryable,\n        seq,\n        series,\n        setImmediate: setImmediate$1,\n        some: some$1,\n        someLimit: someLimit$1,\n        someSeries: someSeries$1,\n        sortBy: sortBy$1,\n        timeout,\n        times,\n        timesLimit,\n        timesSeries,\n        transform,\n        tryEach: tryEach$1,\n        unmemoize,\n        until,\n        waterfall: waterfall$1,\n        whilst: whilst$1,\n\n        // aliases\n        all: every$1,\n        allLimit: everyLimit$1,\n        allSeries: everySeries$1,\n        any: some$1,\n        anyLimit: someLimit$1,\n        anySeries: someSeries$1,\n        find: detect$1,\n        findLimit: detectLimit$1,\n        findSeries: detectSeries$1,\n        flatMap: concat$1,\n        flatMapLimit: concatLimit$1,\n        flatMapSeries: concatSeries$1,\n        forEach: each,\n        forEachSeries: eachSeries$1,\n        forEachLimit: eachLimit$1,\n        forEachOf: eachOf$1,\n        forEachOfSeries: eachOfSeries$1,\n        forEachOfLimit: eachOfLimit$1,\n        inject: reduce$1,\n        foldl: reduce$1,\n        foldr: reduceRight,\n        select: filter$1,\n        selectLimit: filterLimit$1,\n        selectSeries: filterSeries$1,\n        wrapSync: asyncify,\n        during: whilst$1,\n        doDuring: doWhilst$1\n    };\n\n    exports.all = every$1;\n    exports.allLimit = everyLimit$1;\n    exports.allSeries = everySeries$1;\n    exports.any = some$1;\n    exports.anyLimit = someLimit$1;\n    exports.anySeries = someSeries$1;\n    exports.apply = apply;\n    exports.applyEach = applyEach;\n    exports.applyEachSeries = applyEachSeries;\n    exports.asyncify = asyncify;\n    exports.auto = auto;\n    exports.autoInject = autoInject;\n    exports.cargo = cargo$1;\n    exports.cargoQueue = cargo;\n    exports.compose = compose;\n    exports.concat = concat$1;\n    exports.concatLimit = concatLimit$1;\n    exports.concatSeries = concatSeries$1;\n    exports.constant = constant$1;\n    exports.default = index;\n    exports.detect = detect$1;\n    exports.detectLimit = detectLimit$1;\n    exports.detectSeries = detectSeries$1;\n    exports.dir = dir;\n    exports.doDuring = doWhilst$1;\n    exports.doUntil = doUntil;\n    exports.doWhilst = doWhilst$1;\n    exports.during = whilst$1;\n    exports.each = each;\n    exports.eachLimit = eachLimit$1;\n    exports.eachOf = eachOf$1;\n    exports.eachOfLimit = eachOfLimit$1;\n    exports.eachOfSeries = eachOfSeries$1;\n    exports.eachSeries = eachSeries$1;\n    exports.ensureAsync = ensureAsync;\n    exports.every = every$1;\n    exports.everyLimit = everyLimit$1;\n    exports.everySeries = everySeries$1;\n    exports.filter = filter$1;\n    exports.filterLimit = filterLimit$1;\n    exports.filterSeries = filterSeries$1;\n    exports.find = detect$1;\n    exports.findLimit = detectLimit$1;\n    exports.findSeries = detectSeries$1;\n    exports.flatMap = concat$1;\n    exports.flatMapLimit = concatLimit$1;\n    exports.flatMapSeries = concatSeries$1;\n    exports.foldl = reduce$1;\n    exports.foldr = reduceRight;\n    exports.forEach = each;\n    exports.forEachLimit = eachLimit$1;\n    exports.forEachOf = eachOf$1;\n    exports.forEachOfLimit = eachOfLimit$1;\n    exports.forEachOfSeries = eachOfSeries$1;\n    exports.forEachSeries = eachSeries$1;\n    exports.forever = forever$1;\n    exports.groupBy = groupBy;\n    exports.groupByLimit = groupByLimit$1;\n    exports.groupBySeries = groupBySeries;\n    exports.inject = reduce$1;\n    exports.log = log;\n    exports.map = map$1;\n    exports.mapLimit = mapLimit$1;\n    exports.mapSeries = mapSeries$1;\n    exports.mapValues = mapValues;\n    exports.mapValuesLimit = mapValuesLimit$1;\n    exports.mapValuesSeries = mapValuesSeries;\n    exports.memoize = memoize;\n    exports.nextTick = nextTick;\n    exports.parallel = parallel;\n    exports.parallelLimit = parallelLimit;\n    exports.priorityQueue = priorityQueue;\n    exports.queue = queue;\n    exports.race = race$1;\n    exports.reduce = reduce$1;\n    exports.reduceRight = reduceRight;\n    exports.reflect = reflect;\n    exports.reflectAll = reflectAll;\n    exports.reject = reject$1;\n    exports.rejectLimit = rejectLimit$1;\n    exports.rejectSeries = rejectSeries$1;\n    exports.retry = retry;\n    exports.retryable = retryable;\n    exports.select = filter$1;\n    exports.selectLimit = filterLimit$1;\n    exports.selectSeries = filterSeries$1;\n    exports.seq = seq;\n    exports.series = series;\n    exports.setImmediate = setImmediate$1;\n    exports.some = some$1;\n    exports.someLimit = someLimit$1;\n    exports.someSeries = someSeries$1;\n    exports.sortBy = sortBy$1;\n    exports.timeout = timeout;\n    exports.times = times;\n    exports.timesLimit = timesLimit;\n    exports.timesSeries = timesSeries;\n    exports.transform = transform;\n    exports.tryEach = tryEach$1;\n    exports.unmemoize = unmemoize;\n    exports.until = until;\n    exports.waterfall = waterfall$1;\n    exports.whilst = whilst$1;\n    exports.wrapSync = asyncify;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"],"mappings":"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IAClD,IAAI2D,SAAS,GAAGvB,SAAS,CAACoB,QAAQ,CAAC;IACnC,OAAOsN,UAAU,CAACrM,IAAI,EAAEiB,KAAK,EAAE,CAACsL,GAAG,EAAEnN,MAAM,KAAK;MAC5CF,SAAS,CAACqN,GAAG,EAAE,CAACtP,GAAG,EAAE,GAAG7B,IAAI,KAAK;QAC7B,IAAI6B,GAAG,EAAE,OAAOmC,MAAM,CAACnC,GAAG,CAAC;QAC3B,OAAOmC,MAAM,CAACnC,GAAG,EAAE7B,IAAI,CAAC;MAC5B,CAAC,CAAC;IACN,CAAC,EAAE,CAAC6B,GAAG,EAAEuP,UAAU,KAAK;MACpB,IAAI5P,MAAM,GAAG,EAAE;MACf,KAAK,IAAIuD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqM,UAAU,CAACzO,MAAM,EAAEoC,CAAC,EAAE,EAAE;QACxC,IAAIqM,UAAU,CAACrM,CAAC,CAAC,EAAE;UACfvD,MAAM,GAAGA,MAAM,CAACgC,MAAM,CAAC,GAAG4N,UAAU,CAACrM,CAAC,CAAC,CAAC;QAC5C;MACJ;MAEA,OAAO5E,QAAQ,CAAC0B,GAAG,EAAEL,MAAM,CAAC;IAChC,CAAC,CAAC;EACN;EACA,IAAI6P,aAAa,GAAG5O,QAAQ,CAACyO,WAAW,EAAE,CAAC,CAAC;;EAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS1N,MAAMA,CAACoB,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IACtC,OAAOkR,aAAa,CAACzM,IAAI,EAAEsC,QAAQ,EAAEvD,QAAQ,EAAExD,QAAQ,CAAC;EAC5D;EACA,IAAImR,QAAQ,GAAG7O,QAAQ,CAACe,MAAM,EAAE,CAAC,CAAC;;EAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS+N,YAAYA,CAAC3M,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IAC5C,OAAOkR,aAAa,CAACzM,IAAI,EAAE,CAAC,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EACrD;EACA,IAAIqR,cAAc,GAAG/O,QAAQ,CAAC8O,YAAY,EAAE,CAAC,CAAC;;EAE9C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,UAAUA,CAAC,GAAGzR,IAAI,EAAE;IACzB,OAAO,UAAU,GAAG0R,WAAW,iBAAgB;MAC3C,IAAIvR,QAAQ,GAAGuR,WAAW,CAACtR,GAAG,CAAC,CAAC;MAChC,OAAOD,QAAQ,CAAC,IAAI,EAAE,GAAGH,IAAI,CAAC;IAClC,CAAC;EACL;EAEA,SAAS2R,aAAaA,CAACC,KAAK,EAAEC,SAAS,EAAE;IACrC,OAAO,CAAC3O,MAAM,EAAEQ,GAAG,EAAEI,SAAS,EAAEP,EAAE,KAAK;MACnC,IAAIuO,UAAU,GAAG,KAAK;MACtB,IAAIC,UAAU;MACd,MAAMpO,QAAQ,GAAGpB,SAAS,CAACuB,SAAS,CAAC;MACrCZ,MAAM,CAACQ,GAAG,EAAE,CAAC/B,KAAK,EAAEoC,CAAC,EAAE5D,QAAQ,KAAK;QAChCwD,QAAQ,CAAChC,KAAK,EAAE,CAACE,GAAG,EAAEL,MAAM,KAAK;UAC7B,IAAIK,GAAG,IAAIA,GAAG,KAAK,KAAK,EAAE,OAAO1B,QAAQ,CAAC0B,GAAG,CAAC;UAE9C,IAAI+P,KAAK,CAACpQ,MAAM,CAAC,IAAI,CAACuQ,UAAU,EAAE;YAC9BD,UAAU,GAAG,IAAI;YACjBC,UAAU,GAAGF,SAAS,CAAC,IAAI,EAAElQ,KAAK,CAAC;YACnC,OAAOxB,QAAQ,CAAC,IAAI,EAAEkE,WAAW,CAAC;UACtC;UACAlE,QAAQ,CAAC,CAAC;QACd,CAAC,CAAC;MACN,CAAC,EAAE0B,GAAG,IAAI;QACN,IAAIA,GAAG,EAAE,OAAO0B,EAAE,CAAC1B,GAAG,CAAC;QACvB0B,EAAE,CAAC,IAAI,EAAEuO,UAAU,GAAGC,UAAU,GAAGF,SAAS,CAAC,KAAK,CAAC,CAAC;MACxD,CAAC,CAAC;IACN,CAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI,SAASG,MAAMA,CAACpN,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IACtC,OAAOwR,aAAa,CAACM,IAAI,IAAIA,IAAI,EAAE,CAAClK,GAAG,EAAE3C,IAAI,KAAKA,IAAI,CAAC,CAACiC,QAAQ,EAAEzC,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EAC/F;EACA,IAAI+R,QAAQ,GAAGzP,QAAQ,CAACuP,MAAM,EAAE,CAAC,CAAC;;EAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASG,WAAWA,CAACvN,IAAI,EAAEiB,KAAK,EAAElC,QAAQ,EAAExD,QAAQ,EAAE;IAClD,OAAOwR,aAAa,CAACM,IAAI,IAAIA,IAAI,EAAE,CAAClK,GAAG,EAAE3C,IAAI,KAAKA,IAAI,CAAC,CAACmB,aAAa,CAACV,KAAK,CAAC,EAAEjB,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EAC3G;EACA,IAAIiS,aAAa,GAAG3P,QAAQ,CAAC0P,WAAW,EAAE,CAAC,CAAC;;EAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,YAAYA,CAACzN,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IAC5C,OAAOwR,aAAa,CAACM,IAAI,IAAIA,IAAI,EAAE,CAAClK,GAAG,EAAE3C,IAAI,KAAKA,IAAI,CAAC,CAACmB,aAAa,CAAC,CAAC,CAAC,EAAE3B,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EACvG;EAEA,IAAImS,cAAc,GAAG7P,QAAQ,CAAC4P,YAAY,EAAE,CAAC,CAAC;EAE9C,SAASE,WAAWA,CAACtG,IAAI,EAAE;IACvB,OAAO,CAAClM,EAAE,EAAE,GAAGC,IAAI,KAAKuC,SAAS,CAACxC,EAAE,CAAC,CAAC,GAAGC,IAAI,EAAE,CAAC6B,GAAG,EAAE,GAAG2Q,UAAU,KAAK;MACnE;MACA,IAAI,OAAOC,OAAO,KAAK,QAAQ,EAAE;QAC7B;QACA,IAAI5Q,GAAG,EAAE;UACL;UACA,IAAI4Q,OAAO,CAACzQ,KAAK,EAAE;YACfyQ,OAAO,CAACzQ,KAAK,CAACH,GAAG,CAAC;UACtB;QACJ,CAAC,MAAM,IAAI4Q,OAAO,CAACxG,IAAI,CAAC,EAAE;UAAE;UACxBuG,UAAU,CAAC5J,OAAO,CAAC2H,CAAC,IAAIkC,OAAO,CAACxG,IAAI,CAAC,CAACsE,CAAC,CAAC,CAAC;QAC7C;MACJ;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAImC,GAAG,GAAGH,WAAW,CAAC,KAAK,CAAC;;EAE5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASI,QAAQA,CAAChP,QAAQ,EAAEiP,IAAI,EAAEzS,QAAQ,EAAE;IACxCA,QAAQ,GAAGuF,QAAQ,CAACvF,QAAQ,CAAC;IAC7B,IAAI0S,GAAG,GAAGtQ,SAAS,CAACoB,QAAQ,CAAC;IAC7B,IAAImP,KAAK,GAAGvQ,SAAS,CAACqQ,IAAI,CAAC;IAC3B,IAAIhP,OAAO;IAEX,SAASqB,IAAIA,CAACpD,GAAG,EAAE,GAAG7B,IAAI,EAAE;MACxB,IAAI6B,GAAG,EAAE,OAAO1B,QAAQ,CAAC0B,GAAG,CAAC;MAC7B,IAAIA,GAAG,KAAK,KAAK,EAAE;MACnB+B,OAAO,GAAG5D,IAAI;MACd8S,KAAK,CAAC,GAAG9S,IAAI,EAAE4R,KAAK,CAAC;IACzB;IAEA,SAASA,KAAKA,CAAC/P,GAAG,EAAEkR,KAAK,EAAE;MACvB,IAAIlR,GAAG,EAAE,OAAO1B,QAAQ,CAAC0B,GAAG,CAAC;MAC7B,IAAIA,GAAG,KAAK,KAAK,EAAE;MACnB,IAAI,CAACkR,KAAK,EAAE,OAAO5S,QAAQ,CAAC,IAAI,EAAE,GAAGyD,OAAO,CAAC;MAC7CiP,GAAG,CAAC5N,IAAI,CAAC;IACb;IAEA,OAAO2M,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;EAC5B;EAEA,IAAIoB,UAAU,GAAGvQ,QAAQ,CAACkQ,QAAQ,EAAE,CAAC,CAAC;;EAEtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASM,OAAOA,CAACtP,QAAQ,EAAEiP,IAAI,EAAEzS,QAAQ,EAAE;IACvC,MAAM2S,KAAK,GAAGvQ,SAAS,CAACqQ,IAAI,CAAC;IAC7B,OAAOI,UAAU,CAACrP,QAAQ,EAAE,CAAC,GAAG3D,IAAI,KAAK;MACrC,MAAMuD,EAAE,GAAGvD,IAAI,CAACI,GAAG,CAAC,CAAC;MACrB0S,KAAK,CAAC,GAAG9S,IAAI,EAAE,CAAC6B,GAAG,EAAEkR,KAAK,KAAKxP,EAAE,CAAE1B,GAAG,EAAE,CAACkR,KAAK,CAAC,CAAC;IACpD,CAAC,EAAE5S,QAAQ,CAAC;EAChB;EAEA,SAAS+S,aAAaA,CAACvP,QAAQ,EAAE;IAC7B,OAAO,CAAChC,KAAK,EAAEsC,KAAK,EAAE9D,QAAQ,KAAKwD,QAAQ,CAAChC,KAAK,EAAExB,QAAQ,CAAC;EAChgT,WAAWA,CAACvO,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IAC3C,OAAOkH,QAAQ,CAACzC,IAAI,EAAEsO,aAAa,CAAC3Q,SAAS,CAACoB,QAAQ,CAAC,CAAC,EAAExD,QAAQ,CAAC;EACvE;EAEA,IAAIiT,IAAI,GAAG3Q,QAAQ,CAAC0Q,WAAW,EAAE,CAAC,CAAC;;EAEnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,SAASA,CAACzO,IAAI,EAAEiB,KAAK,EAAElC,QAAQ,EAAExD,QAAQ,EAAE;IAChD,OAAOoG,aAAa,CAACV,KAAK,CAAC,CAACjB,IAAI,EAAEsO,aAAa,CAAC3Q,SAAS,CAACoB,QAAQ,CAAC,CAAC,EAAExD,QAAQ,CAAC;EACnF;EACA,IAAImT,WAAW,GAAG7Q,QAAQ,CAAC4Q,SAAS,EAAE,CAAC,CAAC;;EAExC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI,SAASE,UAAUA,CAAC3O,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IAC1C,OAAOmT,WAAW,CAAC1O,IAAI,EAAE,CAAC,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EACnD;EACA,IAAIqT,YAAY,GAAG/Q,QAAQ,CAAC8Q,UAAU,EAAE,CAAC,CAAC;;EAE1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,WAAWA,CAAC1T,EAAE,EAAE;IACrB,IAAIsB,OAAO,CAACtB,EAAE,CAAC,EAAE,OAAOA,EAAE;IAC1B,OAAO,UAAU,GAAGC,IAAI,iBAAgB;MACpC,IAAIG,QAAQ,GAAGH,IAAI,CAACI,GAAG,CAAC,CAAC;MACzB,IAAIsT,IAAI,GAAG,IAAI;MACf1T,IAAI,CAACiJ,IAAI,CAAC,CAAC,GAAG0K,SAAS,KAAK;QACxB,IAAID,IAAI,EAAE;UACNxS,cAAc,CAAC,MAAMf,QAAQ,CAAC,GAAGwT,SAAS,CAAC,CAAC;QAChD,CAAC,MAAM;UACHxT,QAAQ,CAAC,GAAGwT,SAAS,CAAC;QAC1B;MACJ,CAAC,CAAC;MACF5T,EAAE,CAACD,KAAK,CAAC,IAAI,EAAEE,IAAI,CAAC;MACpB0T,IAAI,GAAG,KAAK;IAChB,CAAC;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,KA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AAOA,CAACtR,MAAM,EAAE0B,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IAC/C,IAAImO,MAAM,GAAGnK,WAAW,CAACS,IAAI,CAAC,GAAGsP,WAAW,GAAGE,aAAa;IAC5D,OAAO9F,MAAM,CAACpL,MAAM,EAAE0B,IAAI,EAAErC,SAAS,CAACoB,QAAQ,CAAC,EAAExD,QAAQ,CAAC;EAC9D;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASmO,MAAMA,CAAE1J,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IACvC,OAAOqU,OAAO,CAACnN,QAAQ,EAAEzC,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EACtD;EACA,IAAIsU,QAAQ,GAAGhS,QAAQ,CAAC6L,MAAM,EAAE,CAAC,CAAC;;EAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASoG,WAAWA,CAAE9P,IAAI,EAAEiB,KAAK,EAAElC,QAAQ,EAAExD,QAAQ,EAAE;IACnD,OAAOqU,OAAO,CAACjO,aAAa,CAACV,KAAK,CAAC,EAAEjB,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EAClE;EACA,IAAIwU,aAAa,GAAGlS,QAAQ,CAACiS,WAAW,EAAE,CAAC,CAAC;;EAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,YAAYA,CAAEhQ,IAAI,EAA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AAChH,GAAG,EAAE,GAAGL,MAAM,KAAK;QAChC,IAAIA,MAAM,CAACmB,MAAM,GAAG,CAAC,EAAE;UACnB,CAACnB,MAAM,CAAC,GAAGA,MAAM;QACrB;QACAoC,OAAO,CAACsB,GAAG,CAAC,GAAG1D,MAAM;QACrBuK,MAAM,CAAClK,GAAG,CAAC;MACf,CAAC,CAAC;IACN,CAAC,EAAEA,GAAG,IAAI1B,QAAQ,CAAC0B,GAAG,EAAE+B,OAAO,CAAC,CAAC;EACrC,CAAC,EAAE,CAAC,CAAC;;EAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASwS,QAAQA,CAAClO,KAAK,EAAE/H,QAAQ,EAAE;IAC/B,OAAOgW,SAAS,CAAC9O,QAAQ,EAAEa,KAAK,EAAE/H,QAAQ,CAAC;EAC/C;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASkW,aAAaA,CAACnO,KAAK,EAAErC,KAAK,EAAE1F,QAAQ,EAAE;IAC3C,OAAOgW,SAAS,CAAC5P,aAAa,CAACV,KAAK,CAAC,EAAEqC,KAAK,EAAE/H,QAAQ,CAAC;EAC3D;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASmW,KAAKA,CAAE/I,MAAM,EAAEpF,WAAW,EAAE;IACjC,IAAIsF,OAAO,GAAGlL,SAAS,CAACgL,MAAM,CAAC;IAC/B,OAAOD,OAAO,CAAC,CAACiJ,KAAK,EAAEhT,EAAE,KAAK;MAC1BkK,OAAO,CAAC8I,KAAK,CAAC,CAAC,CAAC,EAAEhT,EAAE,CAAC;IACzB,CAAC,EAAE4E,WAAW,EAAE,CAAC,CAAC;EACtB;;EAE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IACf;IACA,IAAIrW,KAAK,GAAIqW,IAAI,IAAIA,IAAI,CAACrW,KAAK,IAAKmG,IAAI,CAAClG,MAAM;IAC/C,IAAItB,OAAO,CAACwH,IAAI,CAAC,EAAE;MACfnG,KAAK,IAAI,CAAC;IACd;IACA,IAAI2W,KAAK,GAAG9W,SAAS,CAACsG,IAAI,CAAC;IAC3B,OAAO3I,aAAa,CAAC,CAACF,IAAI,EAAEG,QAAQ,KAAK;MACrC,IAAIH,IAAI,CAAC2C,MAAM,GAAGD,KAAK,GAAG,CAAC,IAAIvC,QAAQ,IAAI,IAAI,EAAE;QAC7CH,IAAI,CAACiJ,IAAI,CAAC9I,QAAQ,CAAC;QACnBA,QAAQ,GAAG2H,eAAe,CAAC,CAAC;MAChC;MACA,SAASqC,MAAMA,CAAC5G,EAAE,EAAE;QAChB8V,KAAK,CAAC,GAAGrZ,IAAI,EAAEuD,EAAE,CAAC;MACtB;MAEA,IAAIwV,IAAI,EAAED,KAAK,CAACC,IAAI,EAAE5O,MAAM,EAAEhK,QAAQ,CAAC,CAAC,KACnC2Y,KAAK,CAAC3O,MAAM,EAAEhK,QAAQ,CAAC;MAE5B,OAAOA,QAAQ,CAAC0H,cAAc,CAAC;IACnC,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS+R,MAAMA,CAAC1R,KAAK,EAAE/H,QAAQ,EAAE;IAC7B,OAAOgW,SAAS,CAAC1O,cAAc,EAAES,KAAK,EAAE/H,QAAQ,CAAC;EACrjV,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IACpC,OAAOwR,aAAa,CAACmI,OAAO,EAAE/R,GAAG,IAAIA,GAAG,CAAC,CAACV,QAAQ,EAAEzC,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EACjF;EACA,IAAI4Z,MAAM,GAAGtX,QAAQ,CAACoX,IAAI,EAAE,CAAC,CAAC;;EAE9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASG,SAASA,CAACpV,IAAI,EAAEiB,KAAK,EAAElC,QAAQ,EAAExD,QAAQ,EAAE;IAChD,OAAOwR,aAAa,CAACmI,OAAO,EAAE/R,GAAG,IAAIA,GAAG,CAAC,CAACxB,aAAa,CAACV,KAAK,CAAC,EAAEjB,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EAC7F;EACA,IAAI8Z,WAAW,GAAGxX,QAAQ,CAACuX,SAAS,EAAE,CAAC,CAAC;;EAExC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,UAAUA,CAACtV,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IAC1C,OAAOwR,aAAa,CAACmI,OAAO,EAAE/R,GAAG,IAAIA,GAAG,CAAC,CAACN,cAAc,EAAE7C,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,CAAC;EACvF;EACA,IAAIga,YAAY,GAAG1X,QAAQ,CAACyX,UAAU,EAAE,CAAC,CAAC;;EAE1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASE,MAAMA,CAAExV,IAAI,EAAEjB,QAAQ,EAAExD,QAAQ,EAAE;IACvC,IAAI2D,SAAS,GAAGvB,SAAS,CAACoB,QAAQ,CAAC;IACnC,OAAO4D,KAAK,CAAC3C,IAAI,EAAE,CAAC2L,CAAC,EAAEvM,MAAM,KAAK;MAC9BF,SAAS,CAACyM,CAAC,EAAE,CAAC1O,GAAG,EAAEwY,QAAQ,KAAK;QAC5B,IAAIxY,GAAG,EAAE,OAAOmC,MAAM,CAACnC,GAAG,CAAC;QAC3BmC,MAAM,CAACnC,GAAG,EAAE;UAACF,KAAK,EAAE4O,CAAC;UAAE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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}