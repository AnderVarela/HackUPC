{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst metaSchema = require(\"./schema.json\");\nconst applicator = require(\"./meta/applicator.json\");\nconst unevaluated = require(\"./meta/unevaluated.json\");\nconst content = require(\"./meta/content.json\");\nconst core = require(\"./meta/core.json\");\nconst format = require(\"./meta/format-annotation.json\");\nconst metadata = require(\"./meta/meta-data.json\");\nconst validation = require(\"./meta/validation.json\");\nconst META_SUPPORT_DATA = [\"/properties\"];\nfunction addMetaSchema2020($data) {\n  ;\n  [metaSchema, applicator, unevaluated, content, core, with$data(this, format), metadata, with$data(this, validation)].forEach(sch => this.addMetaSchema(sch, undefined, false));\n  return this;\n  function with$data(ajv, sch) {\n    return $data ? ajv.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch;\n  }\n}\nexports.default = addMetaSchema2020;","map":{"version":3,"names":["metaSchema","require","applicator","unevaluated","content","core","format","metadata","validation","META_SUPPORT_DATA","addMetaSchema2020","$data","with$data","forEach","sch","addMetaSchema","undefined","ajv","$dataMetaSchema","exports","default"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\refs\\json-schema-2020-12\\index.ts"],"sourcesContent":["import type Ajv from \"../../core\"\nimport type {AnySchemaObject} from \"../../types\"\nimport * as metaSchema from \"./schema.json\"\nimport * as applicator from \"./meta/applicator.json\"\nimport * as unevaluated from \"./meta/unevaluated.json\"\nimport * as content from \"./meta/content.json\"\nimport * as core from \"./meta/core.json\"\nimport * as format from \"./meta/format-annotation.json\"\nimport * as metadata from \"./meta/meta-data.json\"\nimport * as validation from \"./meta/validation.json\"\n\nconst META_SUPPORT_DATA = [\"/properties\"]\n\nexport default function addMetaSchema2020(this: Ajv, $data?: boolean): Ajv {\n  ;[\n    metaSchema,\n    applicator,\n    unevaluated,\n    content,\n    core,\n    with$data(this, format),\n    metadata,\n    with$data(this, validation),\n  ].forEach((sch) => this.addMetaSchema(sch, undefined, false))\n  return this\n\n  function with$data(ajv: Ajv, sch: AnySchemaObject): AnySchemaObject {\n    return $data ? ajv.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch\n  }\n}\n"],"mappings":";;;;;AAEA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,WAAA,GAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AACA,MAAAI,IAAA,GAAAJ,OAAA;AACA,MAAAK,MAAA,GAAAL,OAAA;AACA,MAAAM,QAAA,GAAAN,OAAA;AACA,MAAAO,UAAA,GAAAP,OAAA;AAEA,MAAMQ,iBAAiB,GAAG,CAAC,aAAa,CAAC;AAEzC,SAAwBC,iBAAiBA,CAAYC,KAAe;EAClE;EAAC,CACCX,UAAU,EACVE,UAAU,EACVC,WAAW,EACXC,OAAO,EACPC,IAAI,EACJO,SAAS,CAAC,IAAI,EAAEN,MAAM,CAAC,EACvBC,QAAQ,EACRK,SAAS,CAAC,IAAI,EAAEJ,UAAU,CAAC,CAC5B,CAACK,OAAO,CAAEC,GAAG,IAAK,IAAI,CAACC,aAAa,CAACD,GAAG,EAAEE,SAAS,EAAE,KAAK,CAAC,CAAC;EAC7D,OAAO,IAAI;EAEX,SAASJ,SAASA,CAACK,GAAQ,EAAEH,GAAoB;IAC/C,OAAOH,KAAK,GAAGM,GAAG,CAACC,eAAe,CAACJ,GAAG,EAAEL,iBAAiB,CAAC,GAAGK,GAAG;EAClE;AACF;AAhBAK,OAAA,CAAAC,OAAA,GAAAV,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}