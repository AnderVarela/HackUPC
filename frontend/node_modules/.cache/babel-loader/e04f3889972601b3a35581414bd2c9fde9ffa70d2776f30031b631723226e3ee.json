{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('comma-dangle');\nconst OPTION_VALUE_SCHEME = ['always-multiline', 'always', 'never', 'only-multiline'];\nconst DEFAULT_OPTION_VALUE = 'never';\nfunction normalizeOptions(options) {\n  var _a, _b, _c;\n  if (typeof options === 'string') {\n    return {\n      enums: options,\n      generics: options,\n      tuples: options\n    };\n  }\n  return {\n    enums: (_a = options.enums) !== null && _a !== void 0 ? _a : DEFAULT_OPTION_VALUE,\n    generics: (_b = options.generics) !== null && _b !== void 0 ? _b : DEFAULT_OPTION_VALUE,\n    tuples: (_c = options.tuples) !== null && _c !== void 0 ? _c : DEFAULT_OPTION_VALUE\n  };\n}\nexports.default = util.createRule({\n  name: 'comma-dangle',\n  meta: {\n    type: 'layout',\n    docs: {\n      description: 'Require or disallow trailing commas',\n      recommended: false,\n      extendsBaseRule: true\n    },\n    schema: {\n      $defs: {\n        value: {\n          enum: OPTION_VALUE_SCHEME\n        },\n        valueWithIgnore: {\n          enum: [...OPTION_VALUE_SCHEME, 'ignore']\n        }\n      },\n      type: 'array',\n      items: [{\n        oneOf: [{\n          $ref: '#/$defs/value'\n        }, {\n          type: 'object',\n          properties: {\n            arrays: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            objects: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            imports: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            exports: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            functions: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            enums: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            generics: {\n              $ref: '#/$defs/valueWithIgnore'\n            },\n            tuples: {\n              $ref: '#/$defs/valueWithIgnore'\n            }\n          },\n          additionalProperties: false\n        }]\n      }],\n      additionalProperties: false\n    },\n    fixable: 'code',\n    hasSuggestions: baseRule.meta.hasSuggestions,\n    messages: baseRule.meta.messages\n  },\n  defaultOptions: ['never'],\n  create(context, [options]) {\n    const rules = baseRule.create(context);\n    const sourceCode = context.getSourceCode();\n    const normalizedOptions = normalizeOptions(options);\n    const predicate = {\n      always: forceComma,\n      'always-multiline': forceCommaIfMultiline,\n      'only-multiline': allowCommaIfMultiline,\n      never: forbidComma,\n      ignore: () => {}\n    };\n    function last(nodes) {\n      var _a;\n      return (_a = nodes[nodes.length - 1]) !== null && _a !== void 0 ? _a : null;\n    }\n    function getLastItem(node) {\n      switch (node.type) {\n        case utils_1.AST_NODE_TYPES.TSEnumDeclaration:\n          return last(node.members);\n        case utils_1.AST_NODE_TYPES.TSTypeParameterDeclaration:\n          return last(node.params);\n        case utils_1.AST_NODE_TYPES.TSTupleType:\n          return last(node.elementTypes);\n        default:\n          return null;\n      }\n    }\n    function getTrailingToken(node) {\n      const last = getLastItem(node);\n      const trailing = last && sourceCode.getTokenAfter(last);\n      return trailing;\n    }\n    function isMultiline(node) {\n      const last = getLastItem(node);\n      const lastToken = sourceCode.getLastToken(node);\n      return (last === null || last === void 0 ? void 0 : last.loc.end.line) !== (lastToken === null || lastToken === void 0 ? void 0 : lastToken.loc.end.line);\n    }\n    function forbidComma(node) {\n      const last = getLastItem(node);\n      const trailing = getTrailingToken(node);\n      if (last && trailing && util.isCommaToken(trailing)) {\n        context.report({\n          node,\n          messageId: 'unexpected',\n          fix(fixer) {\n            return fixer.remove(trailing);\n          }\n        });\n      }\n    }\n    function forceComma(node) {\n      const last = getLastItem(node);\n      const trailing = getTrailingToken(node);\n      if (last && trailing && !util.isCommaToken(trailing)) {\n        context.report({\n          node,\n          messageId: 'missing',\n          fix(fixer) {\n            return fixer.insertTextAfter(last, ',');\n          }\n        });\n      }\n    }\n    function allowCommaIfMultiline(node) {\n      if (!isMultiline(node)) {\n        forbidComma(node);\n      }\n    }\n    function forceCommaIfMultiline(node) {\n      if (isMultiline(node)) {\n        forceComma(node);\n      } else {\n        forbidComma(node);\n      }\n    }\n    return Object.assign(Object.assign({}, rules), {\n      TSEnumDeclaration: predicate[normalizedOptions.enums],\n      TSTypeParameterDeclaration: predicate[normalizedOptions.generics],\n      TSTupleType: predicate[normalizedOptions.tuples]\n    });\n  }\n});","map":{"version":3,"names":["utils_1","require","util","__importStar","getESLintCoreRule_1","baseRule","getESLintCoreRule","OPTION_VALUE_SCHEME","DEFAULT_OPTION_VALUE","normalizeOptions","options","enums","generics","tuples","_a","_b","_c","exports","default","createRule","name","meta","type","docs","description","recommended","extendsBaseRule","schema","$defs","value","enum","valueWithIgnore","items","oneOf","$ref","properties","arrays","objects","imports","functions","additionalProperties","fixable","hasSuggestions","messages","defaultOptions","create","context","rules","sourceCode","getSourceCode","normalizedOptions","predicate","always","forceComma","forceCommaIfMultiline","allowCommaIfMultiline","never","forbidComma","ignore","last","nodes","length","getLastItem","node","AST_NODE_TYPES","TSEnumDeclaration","members","TSTypeParameterDeclaration","params","TSTupleType","elementTypes","getTrailingToken","trailing","getTokenAfter","isMultiline","lastToken","getLastToken","loc","end","line","isCommaToken","report","messageId","fix","fixer","remove","insertTextAfter","Object","assign"],"sources":["../../src/rules/comma-dangle.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}