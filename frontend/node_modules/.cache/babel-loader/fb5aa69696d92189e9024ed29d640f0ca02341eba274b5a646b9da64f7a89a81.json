{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;\nconst codegen_1 = require(\"./codegen\");\nconst code_1 = require(\"./codegen/code\");\n// TODO refactor to use Set\nfunction toHash(arr) {\n  const hash = {};\n  for (const item of arr) hash[item] = true;\n  return hash;\n}\nexports.toHash = toHash;\nfunction alwaysValidSchema(it, schema) {\n  if (typeof schema == \"boolean\") return schema;\n  if (Object.keys(schema).length === 0) return true;\n  checkUnknownRules(it, schema);\n  return !schemaHasRules(schema, it.self.RULES.all);\n}\nexports.alwaysValidSchema = alwaysValidSchema;\nfunction checkUnknownRules(it, schema = it.schema) {\n  const {\n    opts,\n    self\n  } = it;\n  if (!opts.strictSchema) return;\n  if (typeof schema === \"boolean\") return;\n  const rules = self.RULES.keywords;\n  for (const key in schema) {\n    if (!rules[key]) checkStrictMode(it, `unknown keyword: \"${key}\"`);\n  }\n}\nexports.checkUnknownRules = checkUnknownRules;\nfunction schemaHasRules(schema, rules) {\n  if (typeof schema == \"boolean\") return !schema;\n  for (const key in schema) if (rules[key]) return true;\n  return false;\n}\nexports.schemaHasRules = schemaHasRules;\nfunction schemaHasRulesButRef(schema, RULES) {\n  if (typeof schema == \"boolean\") return !schema;\n  for (const key in schema) if (key !== \"$ref\" && RULES.all[key]) return true;\n  return false;\n}\nexports.schemaHasRulesButRef = schemaHasRulesButRef;\nfunction schemaRefOrVal({\n  topSchemaRef,\n  schemaPath\n}, schema, keyword, $data) {\n  if (!$data) {\n    if (typeof schema == \"number\" || typeof schema == \"boolean\") return schema;\n    if (typeof schema == \"string\") return (0, codegen_1._)`${schema}`;\n  }\n  return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;\n}\nexports.schemaRefOrVal = schemaRefOrVal;\nfunction unescapeFragment(str) {\n  return unescapeJsonPointer(decodeURIComponent(str));\n}\nexports.unescapeFragment = unescapeFragment;\nfunction escapeFragment(str) {\n  return encodeURIComponent(escapeJsonPointer(str));\n}\nexports.escapeFragment = escapeFragment;\nfunction escapeJsonPointer(str) {\n  if (typeof str == \"number\") return `${str}`;\n  return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\nexports.escapeJsonPointer = escapeJsonPointer;\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nexports.unescapeJsonPointer = unescapeJsonPointer;\nfunction eachItem(xs, f) {\n  if (Array.isArray(xs)) {\n    for (const x of xs) f(x);\n  } else {\n    f(xs);\n  }\n}\nexports.eachItem = eachItem;\nfunction makeMergeEvaluated({\n  mergeNames,\n  mergeToName,\n  mergeValues,\n  resultToName\n}) {\n  return (gen, from, to, toName) => {\n    const res = to === undefined ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);\n    return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;\n  };\n}\nexports.mergeEvaluated = {\n  props: makeMergeEvaluated({\n    mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => {\n      gen.if((0, codegen_1._)`${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));\n    }),\n    mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {\n      if (from === true) {\n        gen.assign(to, true);\n      } else {\n        gen.assign(to, (0, codegen_1._)`${to} || {}`);\n        setEvaluated(gen, to, from);\n      }\n    }),\n    mergeValues: (from, to) => from === true ? true : {\n      ...from,\n      ...to\n    },\n    resultToName: evaluatedPropsToName\n  }),\n  items: makeMergeEvaluated({\n    mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),\n    mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),\n    mergeValues: (from, to) => from === true ? true : Math.max(from, to),\n    resultToName: (gen, items) => gen.var(\"items\", items)\n  })\n};\nfunction evaluatedPropsToName(gen, ps) {\n  if (ps === true) return gen.var(\"props\", true);\n  const props = gen.var(\"props\", (0, codegen_1._)`{}`);\n  if (ps !== undefined) setEvaluated(gen, props, ps);\n  return props;\n}\nexports.evaluatedPropsToName = evaluatedPropsToName;\nfunction setEvaluated(gen, props, ps) {\n  Object.keys(ps).forEach(p => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));\n}\nexports.setEvaluated = setEvaluated;\nconst snippets = {};\nfunction useFunc(gen, f) {\n  return gen.scopeValue(\"func\", {\n    ref: f,\n    code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))\n  });\n}\nexports.useFunc = useFunc;\nvar Type;\n(function (Type) {\n  Type[Type[\"Num\"] = 0] = \"Num\";\n  Type[Type[\"Str\"] = 1] = \"Str\";\n})(Type || (exports.Type = Type = {}));\nfunction getErrorPath(dataProp, dataPropType, jsPropertySyntax) {\n  // let path\n  if (dataProp instanceof codegen_1.Name) {\n    const isNumber = dataPropType === Type.Num;\n    return jsPropertySyntax ? isNumber ? (0, codegen_1._)`\"[\" + ${dataProp} + \"]\"` : (0, codegen_1._)`\"['\" + ${dataProp} + \"']\"` : isNumber ? (0, codegen_1._)`\"/\" + ${dataProp}` : (0, codegen_1._)`\"/\" + ${dataProp}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")`; // TODO maybe use global escapePointer\n  }\n  return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : \"/\" + escapeJsonPointer(dataProp);\n}\nexports.getErrorPath = getErrorPath;\nfunction checkStrictMode(it, msg, mode = it.opts.strictSchema) {\n  if (!mode) return;\n  msg = `strict mode: ${msg}`;\n  if (mode === true) throw new Error(msg);\n  it.self.logger.warn(msg);\n}\nexports.checkStrictMode = checkStrictMode;","map":{"version":3,"names":["codegen_1","require","code_1","toHash","arr","hash","item","exports","alwaysValidSchema","it","schema","Object","keys","length","checkUnknownRules","schemaHasRules","self","RULES","all","opts","strictSchema","rules","keywords","key","checkStrictMode","schemaHasRulesButRef","schemaRefOrVal","topSchemaRef","schemaPath","keyword","$data","_","getProperty","unescapeFragment","str","unescapeJsonPointer","decodeURIComponent","escapeFragment","encodeURIComponent","escapeJsonPointer","replace","eachItem","xs","f","Array","isArray","x","makeMergeEvaluated","mergeNames","mergeToName","mergeValues","resultToName","gen","from","to","toName","res","undefined","Name","mergeEvaluated","props","if","assign","code","setEvaluated","evaluatedPropsToName","items","Math","max","var","ps","forEach","p","snippets","useFunc","scopeValue","ref","_Code","Type","getErrorPath","dataProp","dataPropType","jsPropertySyntax","isNumber","Num","toString","msg","mode","Error","logger","warn"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\compile\\util.ts"],"sourcesContent":["import type {AnySchema, EvaluatedProperties, EvaluatedItems} from \"../types\"\nimport type {SchemaCxt, SchemaObjCxt} from \".\"\nimport {_, getProperty, Code, Name, CodeGen} from \"./codegen\"\nimport {_Code} from \"./codegen/code\"\nimport type {Rule, ValidationRules} from \"./rules\"\n\n// TODO refactor to use Set\nexport function toHash<T extends string = string>(arr: T[]): {[K in T]?: true} {\n  const hash: {[K in T]?: true} = {}\n  for (const item of arr) hash[item] = true\n  return hash\n}\n\nexport function alwaysValidSchema(it: SchemaCxt, schema: AnySchema): boolean | void {\n  if (typeof schema == \"boolean\") return schema\n  if (Object.keys(schema).length === 0) return true\n  checkUnknownRules(it, schema)\n  return !schemaHasRules(schema, it.self.RULES.all)\n}\n\nexport function checkUnknownRules(it: SchemaCxt, schema: AnySchema = it.schema): void {\n  const {opts, self} = it\n  if (!opts.strictSchema) return\n  if (typeof schema === \"boolean\") return\n  const rules = self.RULES.keywords\n  for (const key in schema) {\n    if (!rules[key]) checkStrictMode(it, `unknown keyword: \"${key}\"`)\n  }\n}\n\nexport function schemaHasRules(\n  schema: AnySchema,\n  rules: {[Key in string]?: boolean | Rule}\n): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (rules[key]) return true\n  return false\n}\n\nexport function schemaHasRulesButRef(schema: AnySchema, RULES: ValidationRules): boolean {\n  if (typeof schema == \"boolean\") return !schema\n  for (const key in schema) if (key !== \"$ref\" && RULES.all[key]) return true\n  return false\n}\n\nexport function schemaRefOrVal(\n  {topSchemaRef, schemaPath}: SchemaObjCxt,\n  schema: unknown,\n  keyword: string,\n  $data?: string | false\n): Code | number | boolean {\n  if (!$data) {\n    if (typeof schema == \"number\" || typeof schema == \"boolean\") return schema\n    if (typeof schema == \"string\") return _`${schema}`\n  }\n  return _`${topSchemaRef}${schemaPath}${getProperty(keyword)}`\n}\n\nexport function unescapeFragment(str: string): string {\n  return unescapeJsonPointer(decodeURIComponent(str))\n}\n\nexport function escapeFragment(str: string | number): string {\n  return encodeURIComponent(escapeJsonPointer(str))\n}\n\nexport function escapeJsonPointer(str: string | number): string {\n  if (typeof str == \"number\") return `${str}`\n  return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\")\n}\n\nexport function unescapeJsonPointer(str: string): string {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\")\n}\n\nexport function eachItem<T>(xs: T | T[], f: (x: T) => void): void {\n  if (Array.isArray(xs)) {\n    for (const x of xs) f(x)\n  } else {\n    f(xs)\n  }\n}\n\ntype SomeEvaluated = EvaluatedProperties | EvaluatedItems\n\ntype MergeEvaluatedFunc<T extends SomeEvaluated> = (\n  gen: CodeGen,\n  from: Name | T,\n  to: Name | Exclude<T, true> | undefined,\n  toName?: typeof Name\n) => Name | T\n\ninterface MakeMergeFuncArgs<T extends SomeEvaluated> {\n  mergeNames: (gen: CodeGen, from: Name, to: Name) => void\n  mergeToName: (gen: CodeGen, from: T, to: Name) => void\n  mergeValues: (from: T, to: Exclude<T, true>) => T\n  resultToName: (gen: CodeGen, res?: T) => Name\n}\n\nfunction makeMergeEvaluated<T extends SomeEvaluated>({\n  mergeNames,\n  mergeToName,\n  mergeValues,\n  resultToName,\n}: MakeMergeFuncArgs<T>): MergeEvaluatedFunc<T> {\n  return (gen, from, to, toName) => {\n    const res =\n      to === undefined\n        ? from\n        : to instanceof Name\n        ? (from instanceof Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)\n        : from instanceof Name\n        ? (mergeToName(gen, to, from), from)\n        : mergeValues(from, to)\n    return toName === Name && !(res instanceof Name) ? resultToName(gen, res) : res\n  }\n}\n\ninterface MergeEvaluated {\n  props: MergeEvaluatedFunc<EvaluatedProperties>\n  items: MergeEvaluatedFunc<EvaluatedItems>\n}\n\nexport const mergeEvaluated: MergeEvaluated = {\n  props: makeMergeEvaluated({\n    mergeNames: (gen, from, to) =>\n      gen.if(_`${to} !== true && ${from} !== undefined`, () => {\n        gen.if(\n          _`${from} === true`,\n          () => gen.assign(to, true),\n          () => gen.assign(to, _`${to} || {}`).code(_`Object.assign(${to}, ${from})`)\n        )\n      }),\n    mergeToName: (gen, from, to) =>\n      gen.if(_`${to} !== true`, () => {\n        if (from === true) {\n          gen.assign(to, true)\n        } else {\n          gen.assign(to, _`${to} || {}`)\n          setEvaluated(gen, to, from)\n        }\n      }),\n    mergeValues: (from, to) => (from === true ? true : {...from, ...to}),\n    resultToName: evaluatedPropsToName,\n  }),\n  items: makeMergeEvaluated({\n    mergeNames: (gen, from, to) =>\n      gen.if(_`${to} !== true && ${from} !== undefined`, () =>\n        gen.assign(to, _`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)\n      ),\n    mergeToName: (gen, from, to) =>\n      gen.if(_`${to} !== true`, () =>\n        gen.assign(to, from === true ? true : _`${to} > ${from} ? ${to} : ${from}`)\n      ),\n    mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),\n    resultToName: (gen, items) => gen.var(\"items\", items),\n  }),\n}\n\nexport function evaluatedPropsToName(gen: CodeGen, ps?: EvaluatedProperties): Name {\n  if (ps === true) return gen.var(\"props\", true)\n  const props = gen.var(\"props\", _`{}`)\n  if (ps !== undefined) setEvaluated(gen, props, ps)\n  return props\n}\n\nexport function setEvaluated(gen: CodeGen, props: Name, ps: {[K in string]?: true}): void {\n  Object.keys(ps).forEach((p) => gen.assign(_`${props}${getProperty(p)}`, true))\n}\n\nconst snippets: {[S in string]?: _Code} = {}\n\nexport function useFunc(gen: CodeGen, f: {code: string}): Name {\n  return gen.scopeValue(\"func\", {\n    ref: f,\n    code: snippets[f.code] || (snippets[f.code] = new _Code(f.code)),\n  })\n}\n\nexport enum Type {\n  Num,\n  Str,\n}\n\nexport function getErrorPath(\n  dataProp: Name | string | number,\n  dataPropType?: Type,\n  jsPropertySyntax?: boolean\n): Code | string {\n  // let path\n  if (dataProp instanceof Name) {\n    const isNumber = dataPropType === Type.Num\n    return jsPropertySyntax\n      ? isNumber\n        ? _`\"[\" + ${dataProp} + \"]\"`\n        : _`\"['\" + ${dataProp} + \"']\"`\n      : isNumber\n      ? _`\"/\" + ${dataProp}`\n      : _`\"/\" + ${dataProp}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")` // TODO maybe use global escapePointer\n  }\n  return jsPropertySyntax ? getProperty(dataProp).toString() : \"/\" + escapeJsonPointer(dataProp)\n}\n\nexport function checkStrictMode(\n  it: SchemaCxt,\n  msg: string,\n  mode: boolean | \"log\" = it.opts.strictSchema\n): void {\n  if (!mode) return\n  msg = `strict mode: ${msg}`\n  if (mode === true) throw new Error(msg)\n  it.self.logger.warn(msg)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}