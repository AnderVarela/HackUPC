{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\n/**\n * Reducer function that converts a codec list to a hash.\n * @throws Error on bad codec\n * @param {{name:string, decode:function, encode:function, root:function}} candidate A possible codec\n * @returns True where an error is not thrown\n */\nfunction testCodec(candidate) {\n  assert(!!candidate && typeof candidate === 'object', 'Codec must be an object');\n  assert(typeof candidate.name === 'string' && /^[\\w-]+$/.test(candidate.name), 'Codec.name must be a kebab-case string');\n  assert(typeof candidate.decode === 'function' && candidate.decode.length === 1, 'Codec.decode must be a function that accepts a single source string');\n  assert(typeof candidate.encode === 'undefined' || typeof candidate.encode === 'function' && candidate.encode.length === 1, 'Codec.encode must be a function that accepts a single absolute path string, or else be omitted');\n  assert(typeof candidate.root === 'undefined' || typeof candidate.root === 'function' && candidate.root.length === 0, 'Codec.root must be a function that accepts no arguments, or else be omitted');\n  return true;\n}\nmodule.exports = testCodec;","map":{"version":3,"names":["assert","require","testCodec","candidate","name","test","decode","length","encode","root","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/adjust-sourcemap-loader/lib/process/test-codec.js"],"sourcesContent":["'use strict';\n\nvar assert = require('assert');\n\n/**\n * Reducer function that converts a codec list to a hash.\n * @throws Error on bad codec\n * @param {{name:string, decode:function, encode:function, root:function}} candidate A possible codec\n * @returns True where an error is not thrown\n */\nfunction testCodec(candidate) {\n  assert(\n    !!candidate && (typeof candidate === 'object'),\n    'Codec must be an object'\n  );\n  assert(\n    (typeof candidate.name === 'string') && /^[\\w-]+$/.test(candidate.name),\n    'Codec.name must be a kebab-case string'\n  );\n  assert(\n    (typeof candidate.decode === 'function') && (candidate.decode.length === 1),\n    'Codec.decode must be a function that accepts a single source string'\n  );\n  assert(\n    (typeof candidate.encode === 'undefined') ||\n    ((typeof candidate.encode === 'function') && (candidate.encode.length === 1)),\n    'Codec.encode must be a function that accepts a single absolute path string, or else be omitted'\n  );\n  assert(\n    (typeof candidate.root === 'undefined') ||\n    (typeof candidate.root === 'function') && (candidate.root.length === 0),\n    'Codec.root must be a function that accepts no arguments, or else be omitted'\n  );\n  return true;\n}\n\nmodule.exports = testCodec;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,SAAS,EAAE;EAC5BH,MAAM,CACJ,CAAC,CAACG,SAAS,IAAK,OAAOA,SAAS,KAAK,QAAS,EAC9C,yBACF,CAAC;EACDH,MAAM,CACH,OAAOG,SAAS,CAACC,IAAI,KAAK,QAAQ,IAAK,UAAU,CAACC,IAAI,CAACF,SAAS,CAACC,IAAI,CAAC,EACvE,wCACF,CAAC;EACDJ,MAAM,CACH,OAAOG,SAAS,CAACG,MAAM,KAAK,UAAU,IAAMH,SAAS,CAACG,MAAM,CAACC,MAAM,KAAK,CAAE,EAC3E,qEACF,CAAC;EACDP,MAAM,CACH,OAAOG,SAAS,CAACK,MAAM,KAAK,WAAW,IACtC,OAAOL,SAAS,CAACK,MAAM,KAAK,UAAU,IAAML,SAAS,CAACK,MAAM,CAACD,MAAM,KAAK,CAAG,EAC7E,gGACF,CAAC;EACDP,MAAM,CACH,OAAOG,SAAS,CAACM,IAAI,KAAK,WAAW,IACrC,OAAON,SAAS,CAACM,IAAI,KAAK,UAAU,IAAMN,SAAS,CAACM,IAAI,CAACF,MAAM,KAAK,CAAE,EACvE,6EACF,CAAC;EACD,OAAO,IAAI;AACb;AAEAG,MAAM,CAACC,OAAO,GAAGT,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}