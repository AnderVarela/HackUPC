{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatLimitDefinition = void 0;\nconst ajv_1 = require(\"ajv\");\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\nconst ops = codegen_1.operators;\nconst KWDs = {\n  formatMaximum: {\n    okStr: \"<=\",\n    ok: ops.LTE,\n    fail: ops.GT\n  },\n  formatMinimum: {\n    okStr: \">=\",\n    ok: ops.GTE,\n    fail: ops.LT\n  },\n  formatExclusiveMaximum: {\n    okStr: \"<\",\n    ok: ops.LT,\n    fail: ops.GTE\n  },\n  formatExclusiveMinimum: {\n    okStr: \">\",\n    ok: ops.GT,\n    fail: ops.LTE\n  }\n};\nconst error = {\n  message: ({\n    keyword,\n    schemaCode\n  }) => codegen_1.str`should be ${KWDs[keyword].okStr} ${schemaCode}`,\n  params: ({\n    keyword,\n    schemaCode\n  }) => codegen_1._`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`\n};\nexports.formatLimitDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schemaCode,\n      keyword,\n      it\n    } = cxt;\n    const {\n      opts,\n      self\n    } = it;\n    if (!opts.validateFormats) return;\n    const fCxt = new ajv_1.KeywordCxt(it, self.RULES.all.format.definition, \"format\");\n    if (fCxt.$data) validate$DataFormat();else validateFormat();\n    function validate$DataFormat() {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats\n      });\n      const fmt = gen.const(\"fmt\", codegen_1._`${fmts}[${fCxt.schemaCode}]`);\n      cxt.fail$data(codegen_1.or(codegen_1._`typeof ${fmt} != \"object\"`, codegen_1._`${fmt} instanceof RegExp`, codegen_1._`typeof ${fmt}.compare != \"function\"`, compareCode(fmt)));\n    }\n    function validateFormat() {\n      const format = fCxt.schema;\n      const fmtDef = self.formats[format];\n      if (!fmtDef || fmtDef === true) return;\n      if (typeof fmtDef != \"object\" || fmtDef instanceof RegExp || typeof fmtDef.compare != \"function\") {\n        throw new Error(`\"${keyword}\": format \"${format}\" does not define \"compare\" function`);\n      }\n      const fmt = gen.scopeValue(\"formats\", {\n        key: format,\n        ref: fmtDef,\n        code: opts.code.formats ? codegen_1._`${opts.code.formats}${codegen_1.getProperty(format)}` : undefined\n      });\n      cxt.fail$data(compareCode(fmt));\n    }\n    function compareCode(fmt) {\n      return codegen_1._`${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;\n    }\n  },\n  dependencies: [\"format\"]\n};\nconst formatLimitPlugin = ajv => {\n  ajv.addKeyword(exports.formatLimitDefinition);\n  return ajv;\n};\nexports.default = formatLimitPlugin;","map":{"version":3,"names":["ajv_1","require","codegen_1","ops","operators","KWDs","formatMaximum","okStr","ok","LTE","fail","GT","formatMinimum","GTE","LT","formatExclusiveMaximum","formatExclusiveMinimum","error","message","keyword","schemaCode","str","params","_","exports","formatLimitDefinition","Object","keys","type","schemaType","$data","code","cxt","gen","data","it","opts","self","validateFormats","fCxt","KeywordCxt","RULES","all","format","definition","validate$DataFormat","validateFormat","fmts","scopeValue","ref","formats","fmt","const","fail$data","or","compareCode","schema","fmtDef","RegExp","compare","Error","key","getProperty","undefined","dependencies","formatLimitPlugin","ajv","addKeyword","default"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\ajv-formats\\src\\limit.ts"],"sourcesContent":["import type Ajv from \"ajv\"\nimport type {\n  Plugin,\n  CodeKeywordDefinition,\n  KeywordErrorDefinition,\n  Code,\n  Name,\n  ErrorObject,\n} from \"ajv\"\nimport type {AddedFormat} from \"ajv/dist/types\"\nimport type {Rule} from \"ajv/dist/compile/rules\"\nimport {KeywordCxt} from \"ajv\"\nimport {_, str, or, getProperty, operators} from \"ajv/dist/compile/codegen\"\n\ntype Kwd = \"formatMaximum\" | \"formatMinimum\" | \"formatExclusiveMaximum\" | \"formatExclusiveMinimum\"\n\ntype Comparison = \"<=\" | \">=\" | \"<\" | \">\"\n\nconst ops = operators\n\nconst KWDs: {[K in Kwd]: {okStr: Comparison; ok: Code; fail: Code}} = {\n  formatMaximum: {okStr: \"<=\", ok: ops.LTE, fail: ops.GT},\n  formatMinimum: {okStr: \">=\", ok: ops.GTE, fail: ops.LT},\n  formatExclusiveMaximum: {okStr: \"<\", ok: ops.LT, fail: ops.GTE},\n  formatExclusiveMinimum: {okStr: \">\", ok: ops.GT, fail: ops.LTE},\n}\n\nexport type LimitFormatError = ErrorObject<Kwd, {limit: string; comparison: Comparison}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({keyword, schemaCode}) => str`should be ${KWDs[keyword as Kwd].okStr} ${schemaCode}`,\n  params: ({keyword, schemaCode}) =>\n    _`{comparison: ${KWDs[keyword as Kwd].okStr}, limit: ${schemaCode}}`,\n}\n\nexport const formatLimitDefinition: CodeKeywordDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {gen, data, schemaCode, keyword, it} = cxt\n    const {opts, self} = it\n    if (!opts.validateFormats) return\n\n    const fCxt = new KeywordCxt(it, (self.RULES.all.format as Rule).definition, \"format\")\n    if (fCxt.$data) validate$DataFormat()\n    else validateFormat()\n\n    function validate$DataFormat(): void {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats,\n      })\n      const fmt = gen.const(\"fmt\", _`${fmts}[${fCxt.schemaCode}]`)\n      cxt.fail$data(\n        or(\n          _`typeof ${fmt} != \"object\"`,\n          _`${fmt} instanceof RegExp`,\n          _`typeof ${fmt}.compare != \"function\"`,\n          compareCode(fmt)\n        )\n      )\n    }\n\n    function validateFormat(): void {\n      const format = fCxt.schema as string\n      const fmtDef: AddedFormat | undefined = self.formats[format]\n      if (!fmtDef || fmtDef === true) return\n      if (\n        typeof fmtDef != \"object\" ||\n        fmtDef instanceof RegExp ||\n        typeof fmtDef.compare != \"function\"\n      ) {\n        throw new Error(`\"${keyword}\": format \"${format}\" does not define \"compare\" function`)\n      }\n      const fmt = gen.scopeValue(\"formats\", {\n        key: format,\n        ref: fmtDef,\n        code: opts.code.formats ? _`${opts.code.formats}${getProperty(format)}` : undefined,\n      })\n\n      cxt.fail$data(compareCode(fmt))\n    }\n\n    function compareCode(fmt: Name): Code {\n      return _`${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword as Kwd].fail} 0`\n    }\n  },\n  dependencies: [\"format\"],\n}\n\nconst formatLimitPlugin: Plugin<undefined> = (ajv: Ajv): Ajv => {\n  ajv.addKeyword(formatLimitDefinition)\n  return ajv\n}\n\nexport default formatLimitPlugin\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}