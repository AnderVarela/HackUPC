{"ast":null,"code":"/**\n * @filedescription Validation Strategy\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\n/**\n * Container class for several different validation strategies.\n */\nclass ValidationStrategy {\n  /**\n   * Validates that a value is an array.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n  static array(value) {\n    if (!Array.isArray(value)) {\n      throw new TypeError(\"Expected an array.\");\n    }\n  }\n\n  /**\n   * Validates that a value is a boolean.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n  static boolean(value) {\n    if (typeof value !== \"boolean\") {\n      throw new TypeError(\"Expected a Boolean.\");\n    }\n  }\n\n  /**\n   * Validates that a value is a number.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n  static number(value) {\n    if (typeof value !== \"number\") {\n      throw new TypeError(\"Expected a number.\");\n    }\n  }\n\n  /**\n   * Validates that a value is a object.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n  static object(value) {\n    if (!value || typeof value !== \"object\") {\n      throw new TypeError(\"Expected an object.\");\n    }\n  }\n\n  /**\n   * Validates that a value is a object or null.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n  static \"object?\"(value) {\n    if (typeof value !== \"object\") {\n      throw new TypeError(\"Expected an object or null.\");\n    }\n  }\n\n  /**\n   * Validates that a value is a string.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n  static string(value) {\n    if (typeof value !== \"string\") {\n      throw new TypeError(\"Expected a string.\");\n    }\n  }\n\n  /**\n   * Validates that a value is a non-empty string.\n   * @param {*} value The value to validate.\n   * @returns {void}\n   * @throws {TypeError} If the value is invalid. \n   */\n  static \"string!\"(value) {\n    if (typeof value !== \"string\" || value.length === 0) {\n      throw new TypeError(\"Expected a non-empty string.\");\n    }\n  }\n}\nexports.ValidationStrategy = ValidationStrategy;","map":{"version":3,"names":["ValidationStrategy","array","value","Array","isArray","TypeError","boolean","number","object","object?","string","string!","length","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@humanwhocodes/object-schema/src/validation-strategy.js"],"sourcesContent":["/**\n * @filedescription Validation Strategy\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Class\n//-----------------------------------------------------------------------------\n\n/**\n * Container class for several different validation strategies.\n */\nclass ValidationStrategy {\n\n    /**\n     * Validates that a value is an array.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static array(value) {\n        if (!Array.isArray(value)) {\n            throw new TypeError(\"Expected an array.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a boolean.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static boolean(value) {\n        if (typeof value !== \"boolean\") {\n            throw new TypeError(\"Expected a Boolean.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a number.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static number(value) {\n        if (typeof value !== \"number\") {\n            throw new TypeError(\"Expected a number.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a object.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static object(value) {\n        if (!value || typeof value !== \"object\") {\n            throw new TypeError(\"Expected an object.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a object or null.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static \"object?\"(value) {\n        if (typeof value !== \"object\") {\n            throw new TypeError(\"Expected an object or null.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a string.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static string(value) {\n        if (typeof value !== \"string\") {\n            throw new TypeError(\"Expected a string.\");\n        }\n    }\n\n    /**\n     * Validates that a value is a non-empty string.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid. \n     */\n    static \"string!\"(value) {\n        if (typeof value !== \"string\" || value.length === 0) {\n            throw new TypeError(\"Expected a non-empty string.\");\n        }\n    }\n\n}\n\nexports.ValidationStrategy = ValidationStrategy;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,kBAAkB,CAAC;EAErB;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOC,KAAKA,CAACC,KAAK,EAAE;IAChB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MACvB,MAAM,IAAIG,SAAS,CAAC,oBAAoB,CAAC;IAC7C;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOC,OAAOA,CAACJ,KAAK,EAAE;IAClB,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;MAC5B,MAAM,IAAIG,SAAS,CAAC,qBAAqB,CAAC;IAC9C;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOE,MAAMA,CAACL,KAAK,EAAE;IACjB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIG,SAAS,CAAC,oBAAoB,CAAC;IAC7C;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOG,MAAMA,CAACN,KAAK,EAAE;IACjB,IAAI,CAACA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MACrC,MAAM,IAAIG,SAAS,CAAC,qBAAqB,CAAC;IAC9C;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAO,SAASI,CAACP,KAAK,EAAE;IACpB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIG,SAAS,CAAC,6BAA6B,CAAC;IACtD;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOK,MAAMA,CAACR,KAAK,EAAE;IACjB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIG,SAAS,CAAC,oBAAoB,CAAC;IAC7C;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAO,SAASM,CAACT,KAAK,EAAE;IACpB,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACU,MAAM,KAAK,CAAC,EAAE;MACjD,MAAM,IAAIP,SAAS,CAAC,8BAA8B,CAAC;IACvD;EACJ;AAEJ;AAEAQ,OAAO,CAACb,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}