{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst metadata_1 = require(\"./metadata\");\nconst nullable_1 = require(\"./nullable\");\nconst error_1 = require(\"./error\");\nconst def = {\n  keyword: \"elements\",\n  schemaType: \"object\",\n  error: (0, error_1.typeError)(\"array\"),\n  code(cxt) {\n    (0, metadata_1.checkMetadata)(cxt);\n    const {\n      gen,\n      data,\n      schema,\n      it\n    } = cxt;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    const [valid] = (0, nullable_1.checkNullable)(cxt);\n    gen.if((0, codegen_1.not)(valid), () => gen.if((0, codegen_1._)`Array.isArray(${data})`, () => gen.assign(valid, (0, code_1.validateArray)(cxt)), () => cxt.error()));\n    cxt.ok(valid);\n  }\n};\nexports.default = def;","map":{"version":3,"names":["util_1","require","code_1","codegen_1","metadata_1","nullable_1","error_1","def","keyword","schemaType","error","typeError","code","cxt","checkMetadata","gen","data","schema","it","alwaysValidSchema","valid","checkNullable","if","not","_","assign","validateArray","ok","exports","default"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\css-minimizer-webpack-plugin\\node_modules\\ajv\\lib\\vocabularies\\jtd\\elements.ts"],"sourcesContent":["import type {CodeKeywordDefinition, SchemaObject} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {alwaysValidSchema} from \"../../compile/util\"\nimport {validateArray} from \"../code\"\nimport {_, not} from \"../../compile/codegen\"\nimport {checkMetadata} from \"./metadata\"\nimport {checkNullable} from \"./nullable\"\nimport {typeError, _JTDTypeError} from \"./error\"\n\nexport type JTDElementsError = _JTDTypeError<\"elements\", \"array\", SchemaObject>\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"elements\",\n  schemaType: \"object\",\n  error: typeError(\"array\"),\n  code(cxt: KeywordCxt) {\n    checkMetadata(cxt)\n    const {gen, data, schema, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const [valid] = checkNullable(cxt)\n    gen.if(not(valid), () =>\n      gen.if(\n        _`Array.isArray(${data})`,\n        () => gen.assign(valid, validateArray(cxt)),\n        () => cxt.error()\n      )\n    )\n    cxt.ok(valid)\n  },\n}\n\nexport default def\n"],"mappings":";;;;;AAEA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AACA,MAAAG,UAAA,GAAAH,OAAA;AACA,MAAAI,UAAA,GAAAJ,OAAA;AACA,MAAAK,OAAA,GAAAL,OAAA;AAIA,MAAMM,GAAG,GAA0B;EACjCC,OAAO,EAAE,UAAU;EACnBC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAAJ,OAAA,CAAAK,SAAS,EAAC,OAAO,CAAC;EACzBC,IAAIA,CAACC,GAAe;IAClB,IAAAT,UAAA,CAAAU,aAAa,EAACD,GAAG,CAAC;IAClB,MAAM;MAACE,GAAG;MAAEC,IAAI;MAAEC,MAAM;MAAEC;IAAE,CAAC,GAAGL,GAAG;IACnC,IAAI,IAAAb,MAAA,CAAAmB,iBAAiB,EAACD,EAAE,EAAED,MAAM,CAAC,EAAE;IACnC,MAAM,CAACG,KAAK,CAAC,GAAG,IAAAf,UAAA,CAAAgB,aAAa,EAACR,GAAG,CAAC;IAClCE,GAAG,CAACO,EAAE,CAAC,IAAAnB,SAAA,CAAAoB,GAAG,EAACH,KAAK,CAAC,EAAE,MACjBL,GAAG,CAACO,EAAE,CACJ,IAAAnB,SAAA,CAAAqB,CAAC,kBAAiBR,IAAI,GAAG,EACzB,MAAMD,GAAG,CAACU,MAAM,CAACL,KAAK,EAAE,IAAAlB,MAAA,CAAAwB,aAAa,EAACb,GAAG,CAAC,CAAC,EAC3C,MAAMA,GAAG,CAACH,KAAK,EAAE,CAClB,CACF;IACDG,GAAG,CAACc,EAAE,CAACP,KAAK,CAAC;EACf;CACD;AAEDQ,OAAA,CAAAC,OAAA,GAAetB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}