{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerSync = void 0;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _ExplorerBase = require(\"./ExplorerBase\");\nvar _readFile = require(\"./readFile\");\nvar _cacheWrapper = require(\"./cacheWrapper\");\nvar _getDirectory = require(\"./getDirectory\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass ExplorerSync extends _ExplorerBase.ExplorerBase {\n  constructor(options) {\n    super(options);\n  }\n  searchSync(searchFrom = process.cwd()) {\n    const startDirectory = (0, _getDirectory.getDirectorySync)(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n    return result;\n  }\n  searchFromDirectorySync(dir) {\n    const absoluteDir = _path.default.resolve(process.cwd(), dir);\n    const run = () => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n      const transformResult = this.config.transform(result);\n      return transformResult;\n    };\n    if (this.searchCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.searchCache, absoluteDir, run);\n    }\n    return run();\n  }\n  searchDirectorySync(dir) {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    } // config not found\n\n    return null;\n  }\n  loadSearchPlaceSync(dir, place) {\n    const filepath = _path.default.join(dir, place);\n    const content = (0, _readFile.readFileSync)(filepath);\n    const result = this.createCosmiconfigResultSync(filepath, content);\n    return result;\n  }\n  loadFileContentSync(filepath, content) {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n    return loaderResult;\n  }\n  createCosmiconfigResultSync(filepath, content) {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n    return result;\n  }\n  loadSync(filepath) {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n    const runLoadSync = () => {\n      const content = (0, _readFile.readFileSync)(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(absoluteFilePath, content);\n      const transformResult = this.config.transform(cosmiconfigResult);\n      return transformResult;\n    };\n    if (this.loadCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n    return runLoadSync();\n  }\n}\nexports.ExplorerSync = ExplorerSync;","map":{"version":3,"names":["_path","_interopRequireDefault","require","_ExplorerBase","_readFile","_cacheWrapper","_getDirectory","ExplorerSync","ExplorerBase","constructor","options","searchSync","searchFrom","process","cwd","startDirectory","getDirectorySync","result","searchFromDirectorySync","dir","absoluteDir","default","resolve","run","searchDirectorySync","nextDir","nextDirectoryToSearch","transformResult","config","transform","searchCache","cacheWrapperSync","place","searchPlaces","placeResult","loadSearchPlaceSync","shouldSearchStopWithResult","filepath","join","content","readFileSync","createCosmiconfigResultSync","loadFileContentSync","trim","undefined","loader","getLoaderEntryForFile","loaderResult","fileContent","loadedContentToCosmiconfigResult","loadSync","validateFilePath","absoluteFilePath","runLoadSync","throwNotFound","cosmiconfigResult","loadCache"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\cosmiconfig\\src\\ExplorerSync.ts"],"sourcesContent":["import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFileSync } from './readFile';\nimport { cacheWrapperSync } from './cacheWrapper';\nimport { getDirectorySync } from './getDirectory';\nimport {\n  CosmiconfigResult,\n  ExplorerOptionsSync,\n  LoadedFileContent,\n} from './types';\n\nclass ExplorerSync extends ExplorerBase<ExplorerOptionsSync> {\n  public constructor(options: ExplorerOptionsSync) {\n    super(options);\n  }\n\n  public searchSync(searchFrom: string = process.cwd()): CosmiconfigResult {\n    const startDirectory = getDirectorySync(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n\n    return result;\n  }\n\n  private searchFromDirectorySync(dir: string): CosmiconfigResult {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = (): CosmiconfigResult => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      const transformResult = this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapperSync(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private searchDirectorySync(dir: string): CosmiconfigResult {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private loadSearchPlaceSync(dir: string, place: string): CosmiconfigResult {\n    const filepath = path.join(dir, place);\n    const content = readFileSync(filepath);\n\n    const result = this.createCosmiconfigResultSync(filepath, content);\n\n    return result;\n  }\n\n  private loadFileContentSync(\n    filepath: string,\n    content: string | null,\n  ): LoadedFileContent {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n\n    return loaderResult;\n  }\n\n  private createCosmiconfigResultSync(\n    filepath: string,\n    content: string | null,\n  ): CosmiconfigResult {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public loadSync(filepath: string): CosmiconfigResult {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoadSync = (): CosmiconfigResult => {\n      const content = readFileSync(absoluteFilePath, { throwNotFound: true });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(\n        absoluteFilePath,\n        content,\n      );\n\n      const transformResult = this.config.transform(cosmiconfigResult);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapperSync(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n\n    return runLoadSync();\n  }\n}\n\nexport { ExplorerSync };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}