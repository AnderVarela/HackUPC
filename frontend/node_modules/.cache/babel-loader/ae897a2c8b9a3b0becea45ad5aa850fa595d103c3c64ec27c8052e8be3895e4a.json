{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n'use strict';\n\nconst UTIL = require('util'),\n  PATH = require('path'),\n  EOL = require('os').EOL,\n  Q = require('q'),\n  chalk = require('chalk'),\n  CoaObject = require('./coaobject'),\n  Opt = require('./opt'),\n  Arg = require('./arg'),\n  completion = require('./completion');\n\n/**\n * Command\n *\n * Top level entity. Commands may have options and arguments.\n *\n * @namespace\n * @class Cmd\n * @extends CoaObject\n */\nclass Cmd extends CoaObject {\n  /**\n   * @constructs\n   * @param {COA.Cmd} [cmd] parent command\n   */\n  constructor(cmd) {\n    super(cmd);\n    this._parent(cmd);\n    this._cmds = [];\n    this._cmdsByName = {};\n    this._opts = [];\n    this._optsByKey = {};\n    this._args = [];\n    this._api = null;\n    this._ext = false;\n  }\n  static create(cmd) {\n    return new Cmd(cmd);\n  }\n\n  /**\n   * Returns object containing all its subcommands as methods\n   * to use from other programs.\n   *\n   * @returns {Object}\n   */\n  get api() {\n    // Need _this here because of passed arguments into _api\n    const _this = this;\n    this._api || (this._api = function () {\n      return _this.invoke.apply(_this, arguments);\n    });\n    const cmds = this._cmdsByName;\n    Object.keys(cmds).forEach(cmd => {\n      this._api[cmd] = cmds[cmd].api;\n    });\n    return this._api;\n  }\n  _parent(cmd) {\n    this._cmd = cmd || this;\n    this.isRootCmd || cmd._cmds.push(this) && this._name && (this._cmd._cmdsByName[this._name] = this);\n    return this;\n  }\n  get isRootCmd() {\n    return this._cmd === this;\n  }\n\n  /**\n   * Set a canonical command identifier to be used anywhere in the API.\n   *\n   * @param {String} name - command name\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n  name(name) {\n    super.name(name);\n    this.isRootCmd || (this._cmd._cmdsByName[name] = this);\n    return this;\n  }\n\n  /**\n   * Create new or add existing subcommand for current command.\n   *\n   * @param {COA.Cmd} [cmd] existing command instance\n   * @returns {COA.Cmd} new subcommand instance\n   */\n  cmd(cmd) {\n    return cmd ? cmd._parent(this) : new Cmd(this);\n  }\n\n  /**\n   * Create option for current command.\n   *\n   * @returns {COA.Opt} new option instance\n   */\n  opt() {\n    return new Opt(this);\n  }\n\n  /**\n   * Create argument for current command.\n   *\n   * @returns {COA.Opt} new argument instance\n   */\n  arg() {\n    return new Arg(this);\n  }\n\n  /**\n   * Add (or set) action for current command.\n   *\n   * @param {Function} act - action function,\n   *         invoked in the context of command instance\n   *         and has the parameters:\n   *                 - {Object} opts - parsed options\n   *                 - {String[]} args - parsed arguments\n   *                 - {Object} res - actions result accumulator\n   *         It can return rejected promise by Cmd.reject (in case of error)\n   *         or any other value treated as result.\n   * @param {Boolean} [force=false] flag for set action instead add to existings\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n  act(act, force) {\n    if (!act) return this;\n    (!this._act || force) && (this._act = []);\n    this._act.push(act);\n    return this;\n  }\n\n  /**\n   * Make command \"helpful\", i.e. add -h --help flags for print usage.\n   *\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n  helpful() {\n    return this.opt().name('help').title('Help').short('h').long('help').flag().only().act(function () {\n      return this.usage();\n    }).end();\n  }\n\n  /**\n   * Adds shell completion to command, adds \"completion\" subcommand,\n   * that makes all the magic.\n   * Must be called only on root command.\n   *\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n  completable() {\n    return this.cmd().name('completion').apply(completion).end();\n  }\n\n  /**\n   * Allow command to be extendable by external node.js modules.\n   *\n   * @param {String} [pattern]  Pattern of node.js module to find subcommands at.\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n  extendable(pattern) {\n    this._ext = pattern || true;\n    return this;\n  }\n  _exit(msg, code) {\n    return process.once('exit', function (exitCode) {\n      msg && console[code === 0 ? 'log' : 'error'](msg);\n      process.exit(code || exitCode || 0);\n    });\n  }\n\n  /**\n   * Build full usage text for current command instance.\n   *\n   * @returns {String} usage text\n   */\n  usage() {\n    const res = [];\n    this._title && res.push(this._fullTitle());\n    res.push('', 'Usage:');\n    this._cmds.length && res.push(['', '', chalk.redBright(this._fullName()), chalk.blueBright('COMMAND'), chalk.greenBright('[OPTIONS]'), chalk.magentaBright('[ARGS]')].join(' '));\n    this._opts.length + this._args.length && res.push(['', '', chalk.redBright(this._fullName()), chalk.greenBright('[OPTIONS]'), chalk.magentaBright('[ARGS]')].join(' '));\n    res.push(this._usages(this._cmds, 'Commands'), this._usages(this._opts, 'Options'), this._usages(this._args, 'Arguments'));\n    return res.join(EOL);\n  }\n  _usage() {\n    return chalk.blueBright(this._name) + ' : ' + this._title;\n  }\n  _usages(os, title) {\n    if (!os.length) return;\n    return ['', title + ':'].concat(os.map(o => `  ${o._usage()}`)).join(EOL);\n  }\n  _fullTitle() {\n    return `${this.isRootCmd ? '' : this._cmd._fullTitle() + EOL}${this._title}`;\n  }\n  _fullName() {\n    return `${this.isRootCmd ? '' : this._cmd._fullName() + ' '}${PATH.basename(this._name)}`;\n  }\n  _ejectOpt(opts, opt) {\n    const pos = opts.indexOf(opt);\n    if (pos === -1) return;\n    return opts[pos]._arr ? opts[pos] : opts.splice(pos, 1)[0];\n  }\n  _checkRequired(opts, args) {\n    if (this._opts.some(opt => opt._only && opts.hasOwnProperty(opt._name))) return;\n    const all = this._opts.concat(this._args);\n    let i;\n    while (i = all.shift()) if (i._req && i._checkParsed(opts, args)) return this.reject(i._requiredText());\n  }\n  _parseCmd(argv, unparsed) {\n    unparsed || (unparsed = []);\n    let i,\n      optSeen = false;\n    while (i = argv.shift()) {\n      i.indexOf('-') || (optSeen = true);\n      if (optSeen || !/^\\w[\\w-_]*$/.test(i)) {\n        unparsed.push(i);\n        continue;\n      }\n      let pkg,\n        cmd = this._cmdsByName[i];\n      if (!cmd && this._ext) {\n        if (this._ext === true) {\n          pkg = i;\n          let c = this;\n          while (true) {\n            // eslint-disable-line\n            pkg = c._name + '-' + pkg;\n            if (c.isRootCmd) break;\n            c = c._cmd;\n          }\n        } else if (typeof this._ext === 'string') pkg = ~this._ext.indexOf('%s') ? UTIL.format(this._ext, i) : this._ext + i;\n        let cmdDesc;\n        try {\n          cmdDesc = require(pkg);\n        } catch (e) {\n          // Dummy\n        }\n        if (cmdDesc) {\n          if (typeof cmdDesc === 'function') {\n            this.cmd().name(i).apply(cmdDesc).end();\n          } else if (typeof cmdDesc === 'object') {\n            this.cmd(cmdDesc);\n            cmdDesc.name(i);\n          } else throw new Error('Error: Unsupported command declaration type, ' + 'should be a function or COA.Cmd() object');\n          cmd = this._cmdsByName[i];\n        }\n      }\n      if (cmd) return cmd._parseCmd(argv, unparsed);\n      unparsed.push(i);\n    }\n    return {\n      cmd: this,\n      argv: unparsed\n    };\n  }\n  _parseOptsAndArgs(argv) {\n    const opts = {},\n      args = {},\n      nonParsedOpts = this._opts.concat(),\n      nonParsedArgs = this._args.concat();\n    let res, i;\n    while (i = argv.shift()) {\n      if (i !== '--' && i[0] === '-') {\n        const m = i.match(/^(--\\w[\\w-_]*)=(.*)$/);\n        if (m) {\n          i = m[1];\n          this._optsByKey[i]._flag || argv.unshift(m[2]);\n        }\n        const opt = this._ejectOpt(nonParsedOpts, this._optsByKey[i]);\n        if (!opt) return this.reject(`Unknown option: ${i}`);\n        if (Q.isRejected(res = opt._parse(argv, opts))) return res;\n        continue;\n      }\n      i === '--' && (i = argv.splice(0));\n      Array.isArray(i) || (i = [i]);\n      let a;\n      while (a = i.shift()) {\n        let arg = nonParsedArgs.shift();\n        if (!arg) return this.reject(`Unknown argument: ${a}`);\n        arg._arr && nonParsedArgs.unshift(arg);\n        if (Q.isRejected(res = arg._parse(a, args))) return res;\n      }\n    }\n    return {\n      opts: this._setDefaults(opts, nonParsedOpts),\n      args: this._setDefaults(args, nonParsedArgs)\n    };\n  }\n  _setDefaults(params, desc) {\n    for (const item of desc) item._def !== undefined && !params.hasOwnProperty(item._name) && item._saveVal(params, item._def);\n    return params;\n  }\n  _processParams(params, desc) {\n    const notExists = [];\n    for (const item of desc) {\n      const n = item._name;\n      if (!params.hasOwnProperty(n)) {\n        notExists.push(item);\n        continue;\n      }\n      const vals = Array.isArray(params[n]) ? params[n] : [params[n]];\n      delete params[n];\n      let res;\n      for (const v of vals) if (Q.isRejected(res = item._saveVal(params, v))) return res;\n    }\n    return this._setDefaults(params, notExists);\n  }\n  _parseArr(argv) {\n    return Q.when(this._parseCmd(argv), p => Q.when(p.cmd._parseOptsAndArgs(p.argv), r => ({\n      cmd: p.cmd,\n      opts: r.opts,\n      args: r.args\n    })));\n  }\n  _do(inputPromise) {\n    return Q.when(inputPromise, input => {\n      return [this._checkRequired].concat(input.cmd._act || []).reduce((res, act) => Q.when(res, prev => act.call(input.cmd, input.opts, input.args, prev)), undefined);\n    });\n  }\n\n  /**\n   * Parse arguments from simple format like NodeJS process.argv\n   * and run ahead current program, i.e. call process.exit when all actions done.\n   *\n   * @param {String[]} argv - arguments\n   * @returns {COA.Cmd} - this instance (for chainability)\n   */\n  run(argv) {\n    argv || (argv = process.argv.slice(2));\n    const cb = code => res => res ? this._exit(res.stack || res.toString(), (res.hasOwnProperty('exitCode') ? res.exitCode : code) || 0) : this._exit();\n    Q.when(this.do(argv), cb(0), cb(1)).done();\n    return this;\n  }\n\n  /**\n   * Invoke specified (or current) command using provided\n   * options and arguments.\n   *\n   * @param {String|String[]} [cmds] - subcommand to invoke (optional)\n   * @param {Object} [opts] - command options (optional)\n   * @param {Object} [args] - command arguments (optional)\n   * @returns {Q.Promise}\n   */\n  invoke(cmds, opts, args) {\n    cmds || (cmds = []);\n    opts || (opts = {});\n    args || (args = {});\n    typeof cmds === 'string' && (cmds = cmds.split(' '));\n    if (arguments.length < 3 && !Array.isArray(cmds)) {\n      args = opts;\n      opts = cmds;\n      cmds = [];\n    }\n    return Q.when(this._parseCmd(cmds), p => {\n      if (p.argv.length) return this.reject(`Unknown command: ${cmds.join(' ')}`);\n      return Q.all([this._processParams(opts, this._opts), this._processParams(args, this._args)]).spread((_opts, _args) => this._do({\n        cmd: p.cmd,\n        opts: _opts,\n        args: _args\n      }).fail(res => res && res.exitCode === 0 ? res.toString() : this.reject(res)));\n    });\n  }\n}\n\n/**\n * Convenient function to run command from tests.\n *\n * @param {String[]} argv - arguments\n * @returns {Q.Promise}\n */\nCmd.prototype.do = function (argv) {\n  return this._do(this._parseArr(argv || []));\n};\nmodule.exports = Cmd;","map":{"version":3,"names":["UTIL","require","PATH","EOL","Q","chalk","CoaObject","Opt","Arg","completion","Cmd","constructor","cmd","_parent","_cmds","_cmdsByName","_opts","_optsByKey","_args","_api","_ext","create","api","_this","invoke","apply","arguments","cmds","Object","keys","forEach","_cmd","isRootCmd","push","_name","name","opt","arg","act","force","_act","helpful","title","short","long","flag","only","usage","end","completable","extendable","pattern","_exit","msg","code","process","once","exitCode","console","exit","res","_title","_fullTitle","length","redBright","_fullName","blueBright","greenBright","magentaBright","join","_usages","_usage","os","concat","map","o","basename","_ejectOpt","opts","pos","indexOf","_arr","splice","_checkRequired","args","some","_only","hasOwnProperty","all","i","shift","_req","_checkParsed","reject","_requiredText","_parseCmd","argv","unparsed","optSeen","test","pkg","c","format","cmdDesc","e","Error","_parseOptsAndArgs","nonParsedOpts","nonParsedArgs","m","match","_flag","unshift","isRejected","_parse","Array","isArray","a","_setDefaults","params","desc","item","_def","undefined","_saveVal","_processParams","notExists","n","vals","v","_parseArr","when","p","r","_do","inputPromise","input","reduce","prev","call","run","slice","cb","stack","toString","do","done","split","spread","fail","prototype","module","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/coa/lib/cmd.js"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n'use strict';\n\nconst\n    UTIL = require('util'),\n    PATH = require('path'),\n    EOL = require('os').EOL,\n\n    Q = require('q'),\n    chalk = require('chalk'),\n\n    CoaObject = require('./coaobject'),\n    Opt = require('./opt'),\n    Arg = require('./arg'),\n    completion = require('./completion');\n\n/**\n * Command\n *\n * Top level entity. Commands may have options and arguments.\n *\n * @namespace\n * @class Cmd\n * @extends CoaObject\n */\nclass Cmd extends CoaObject {\n    /**\n     * @constructs\n     * @param {COA.Cmd} [cmd] parent command\n     */\n    constructor(cmd) {\n        super(cmd);\n\n        this._parent(cmd);\n        this._cmds = [];\n        this._cmdsByName = {};\n        this._opts = [];\n        this._optsByKey = {};\n        this._args = [];\n        this._api = null;\n        this._ext = false;\n    }\n\n    static create(cmd) {\n        return new Cmd(cmd);\n    }\n\n    /**\n     * Returns object containing all its subcommands as methods\n     * to use from other programs.\n     *\n     * @returns {Object}\n     */\n    get api() {\n        // Need _this here because of passed arguments into _api\n        const _this = this;\n        this._api || (this._api = function () {\n            return _this.invoke.apply(_this, arguments);\n        });\n\n        const cmds = this._cmdsByName;\n        Object.keys(cmds).forEach(cmd => { this._api[cmd] = cmds[cmd].api; });\n\n        return this._api;\n    }\n\n    _parent(cmd) {\n        this._cmd = cmd || this;\n\n        this.isRootCmd ||\n            cmd._cmds.push(this) &&\n            this._name &&\n            (this._cmd._cmdsByName[this._name] = this);\n\n        return this;\n    }\n\n    get isRootCmd() {\n        return this._cmd === this;\n    }\n\n    /**\n     * Set a canonical command identifier to be used anywhere in the API.\n     *\n     * @param {String} name - command name\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    name(name) {\n        super.name(name);\n\n        this.isRootCmd ||\n            (this._cmd._cmdsByName[name] = this);\n\n        return this;\n    }\n\n    /**\n     * Create new or add existing subcommand for current command.\n     *\n     * @param {COA.Cmd} [cmd] existing command instance\n     * @returns {COA.Cmd} new subcommand instance\n     */\n    cmd(cmd) {\n        return cmd?\n            cmd._parent(this)\n            : new Cmd(this);\n    }\n\n    /**\n     * Create option for current command.\n     *\n     * @returns {COA.Opt} new option instance\n     */\n    opt() {\n        return new Opt(this);\n    }\n\n    /**\n     * Create argument for current command.\n     *\n     * @returns {COA.Opt} new argument instance\n     */\n    arg() {\n        return new Arg(this);\n    }\n\n    /**\n     * Add (or set) action for current command.\n     *\n     * @param {Function} act - action function,\n     *         invoked in the context of command instance\n     *         and has the parameters:\n     *                 - {Object} opts - parsed options\n     *                 - {String[]} args - parsed arguments\n     *                 - {Object} res - actions result accumulator\n     *         It can return rejected promise by Cmd.reject (in case of error)\n     *         or any other value treated as result.\n     * @param {Boolean} [force=false] flag for set action instead add to existings\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    act(act, force) {\n        if(!act) return this;\n\n        (!this._act || force) && (this._act = []);\n        this._act.push(act);\n\n        return this;\n    }\n\n    /**\n     * Make command \"helpful\", i.e. add -h --help flags for print usage.\n     *\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    helpful() {\n        return this.opt()\n            .name('help')\n            .title('Help')\n            .short('h')\n            .long('help')\n            .flag()\n            .only()\n            .act(function() {\n                return this.usage();\n            })\n            .end();\n    }\n\n    /**\n     * Adds shell completion to command, adds \"completion\" subcommand,\n     * that makes all the magic.\n     * Must be called only on root command.\n     *\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    completable() {\n        return this.cmd()\n            .name('completion')\n            .apply(completion)\n            .end();\n    }\n\n    /**\n     * Allow command to be extendable by external node.js modules.\n     *\n     * @param {String} [pattern]  Pattern of node.js module to find subcommands at.\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    extendable(pattern) {\n        this._ext = pattern || true;\n        return this;\n    }\n\n    _exit(msg, code) {\n        return process.once('exit', function(exitCode) {\n            msg && console[code === 0 ? 'log' : 'error'](msg);\n            process.exit(code || exitCode || 0);\n        });\n    }\n\n    /**\n     * Build full usage text for current command instance.\n     *\n     * @returns {String} usage text\n     */\n    usage() {\n        const res = [];\n\n        this._title && res.push(this._fullTitle());\n\n        res.push('', 'Usage:');\n\n        this._cmds.length\n            && res.push([\n                '', '', chalk.redBright(this._fullName()), chalk.blueBright('COMMAND'),\n                chalk.greenBright('[OPTIONS]'), chalk.magentaBright('[ARGS]')\n            ].join(' '));\n\n        (this._opts.length + this._args.length)\n            && res.push([\n                '', '', chalk.redBright(this._fullName()),\n                chalk.greenBright('[OPTIONS]'), chalk.magentaBright('[ARGS]')\n            ].join(' '));\n\n        res.push(\n            this._usages(this._cmds, 'Commands'),\n            this._usages(this._opts, 'Options'),\n            this._usages(this._args, 'Arguments')\n        );\n\n        return res.join(EOL);\n    }\n\n    _usage() {\n        return chalk.blueBright(this._name) + ' : ' + this._title;\n    }\n\n    _usages(os, title) {\n        if(!os.length) return;\n\n        return ['', title + ':']\n            .concat(os.map(o => `  ${o._usage()}`))\n            .join(EOL);\n    }\n\n    _fullTitle() {\n        return `${this.isRootCmd? '' : this._cmd._fullTitle() + EOL}${this._title}`;\n    }\n\n    _fullName() {\n        return `${this.isRootCmd? '' : this._cmd._fullName() + ' '}${PATH.basename(this._name)}`;\n    }\n\n    _ejectOpt(opts, opt) {\n        const pos = opts.indexOf(opt);\n        if(pos === -1) return;\n\n        return opts[pos]._arr?\n            opts[pos] :\n            opts.splice(pos, 1)[0];\n    }\n\n    _checkRequired(opts, args) {\n        if(this._opts.some(opt => opt._only && opts.hasOwnProperty(opt._name))) return;\n\n        const all = this._opts.concat(this._args);\n        let i;\n        while(i = all.shift())\n            if(i._req && i._checkParsed(opts, args))\n                return this.reject(i._requiredText());\n    }\n\n    _parseCmd(argv, unparsed) {\n        unparsed || (unparsed = []);\n\n        let i,\n            optSeen = false;\n        while(i = argv.shift()) {\n            i.indexOf('-') || (optSeen = true);\n\n            if(optSeen || !/^\\w[\\w-_]*$/.test(i)) {\n                unparsed.push(i);\n                continue;\n            }\n\n            let pkg, cmd = this._cmdsByName[i];\n            if(!cmd && this._ext) {\n                if(this._ext === true) {\n                    pkg = i;\n                    let c = this;\n                    while(true) { // eslint-disable-line\n                        pkg = c._name + '-' + pkg;\n                        if(c.isRootCmd) break;\n                        c = c._cmd;\n                    }\n                } else if(typeof this._ext === 'string')\n                    pkg = ~this._ext.indexOf('%s')?\n                        UTIL.format(this._ext, i) :\n                        this._ext + i;\n\n                let cmdDesc;\n                try {\n                    cmdDesc = require(pkg);\n                } catch(e) {\n                    // Dummy\n                }\n\n                if(cmdDesc) {\n                    if(typeof cmdDesc === 'function') {\n                        this.cmd().name(i).apply(cmdDesc).end();\n                    } else if(typeof cmdDesc === 'object') {\n                        this.cmd(cmdDesc);\n                        cmdDesc.name(i);\n                    } else throw new Error('Error: Unsupported command declaration type, '\n                        + 'should be a function or COA.Cmd() object');\n\n                    cmd = this._cmdsByName[i];\n                }\n            }\n\n            if(cmd) return cmd._parseCmd(argv, unparsed);\n\n            unparsed.push(i);\n        }\n\n        return { cmd : this, argv : unparsed };\n    }\n\n    _parseOptsAndArgs(argv) {\n        const opts = {},\n            args = {},\n            nonParsedOpts = this._opts.concat(),\n            nonParsedArgs = this._args.concat();\n\n        let res, i;\n        while(i = argv.shift()) {\n            if(i !== '--' && i[0] === '-') {\n                const m = i.match(/^(--\\w[\\w-_]*)=(.*)$/);\n                if(m) {\n                    i = m[1];\n                    this._optsByKey[i]._flag || argv.unshift(m[2]);\n                }\n\n                const opt = this._ejectOpt(nonParsedOpts, this._optsByKey[i]);\n                if(!opt) return this.reject(`Unknown option: ${i}`);\n\n                if(Q.isRejected(res = opt._parse(argv, opts))) return res;\n\n                continue;\n            }\n\n            i === '--' && (i = argv.splice(0));\n            Array.isArray(i) || (i = [i]);\n\n            let a;\n            while(a = i.shift()) {\n                let arg = nonParsedArgs.shift();\n                if(!arg) return this.reject(`Unknown argument: ${a}`);\n\n                arg._arr && nonParsedArgs.unshift(arg);\n                if(Q.isRejected(res = arg._parse(a, args))) return res;\n            }\n        }\n\n        return {\n            opts : this._setDefaults(opts, nonParsedOpts),\n            args : this._setDefaults(args, nonParsedArgs)\n        };\n    }\n\n    _setDefaults(params, desc) {\n        for(const item of desc)\n            item._def !== undefined &&\n                !params.hasOwnProperty(item._name) &&\n                item._saveVal(params, item._def);\n\n        return params;\n    }\n\n    _processParams(params, desc) {\n        const notExists = [];\n\n        for(const item of desc) {\n            const n = item._name;\n\n            if(!params.hasOwnProperty(n)) {\n                notExists.push(item);\n                continue;\n            }\n\n            const vals = Array.isArray(params[n])? params[n] : [params[n]];\n            delete params[n];\n\n            let res;\n            for(const v of vals)\n                if(Q.isRejected(res = item._saveVal(params, v)))\n                    return res;\n        }\n\n        return this._setDefaults(params, notExists);\n    }\n\n    _parseArr(argv) {\n        return Q.when(this._parseCmd(argv), p =>\n            Q.when(p.cmd._parseOptsAndArgs(p.argv), r => ({\n                cmd : p.cmd,\n                opts : r.opts,\n                args : r.args\n            })));\n    }\n\n    _do(inputPromise) {\n        return Q.when(inputPromise, input => {\n            return [this._checkRequired]\n                .concat(input.cmd._act || [])\n                .reduce((res, act) =>\n                    Q.when(res, prev => act.call(input.cmd, input.opts, input.args, prev)),\n                    undefined);\n        });\n    }\n\n    /**\n     * Parse arguments from simple format like NodeJS process.argv\n     * and run ahead current program, i.e. call process.exit when all actions done.\n     *\n     * @param {String[]} argv - arguments\n     * @returns {COA.Cmd} - this instance (for chainability)\n     */\n    run(argv) {\n        argv || (argv = process.argv.slice(2));\n\n        const cb = code =>\n            res => res?\n                this._exit(res.stack || res.toString(), (res.hasOwnProperty('exitCode')? res.exitCode : code) || 0) :\n                this._exit();\n\n        Q.when(this.do(argv), cb(0), cb(1)).done();\n\n        return this;\n    }\n\n    /**\n     * Invoke specified (or current) command using provided\n     * options and arguments.\n     *\n     * @param {String|String[]} [cmds] - subcommand to invoke (optional)\n     * @param {Object} [opts] - command options (optional)\n     * @param {Object} [args] - command arguments (optional)\n     * @returns {Q.Promise}\n     */\n    invoke(cmds, opts, args) {\n        cmds || (cmds = []);\n        opts || (opts = {});\n        args || (args = {});\n        typeof cmds === 'string' && (cmds = cmds.split(' '));\n\n        if(arguments.length < 3 && !Array.isArray(cmds)) {\n            args = opts;\n            opts = cmds;\n            cmds = [];\n        }\n\n        return Q.when(this._parseCmd(cmds), p => {\n            if(p.argv.length)\n                return this.reject(`Unknown command: ${cmds.join(' ')}`);\n\n            return Q.all([\n                this._processParams(opts, this._opts),\n                this._processParams(args, this._args)\n            ]).spread((_opts, _args) =>\n                this._do({\n                    cmd : p.cmd,\n                    opts : _opts,\n                    args : _args\n                })\n                .fail(res => (res && res.exitCode === 0)?\n                    res.toString() :\n                    this.reject(res)));\n        });\n    }\n}\n\n/**\n * Convenient function to run command from tests.\n *\n * @param {String[]} argv - arguments\n * @returns {Q.Promise}\n */\nCmd.prototype.do = function(argv) {\n    return this._do(this._parseArr(argv || []));\n};\n\nmodule.exports = Cmd;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}