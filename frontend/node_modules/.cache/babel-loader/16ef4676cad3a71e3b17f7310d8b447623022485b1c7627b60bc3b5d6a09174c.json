{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypeName = void 0;\nconst ts = __importStar(require(\"typescript\"));\n/**\n * Get the type name of a given type.\n * @param typeChecker The context sensitive TypeScript TypeChecker.\n * @param type The type to get the name of.\n */\nfunction getTypeName(typeChecker, type) {\n  // It handles `string` and string literal types as string.\n  if ((type.flags & ts.TypeFlags.StringLike) !== 0) {\n    return 'string';\n  }\n  // If the type is a type parameter which extends primitive string types,\n  // but it was not recognized as a string like. So check the constraint\n  // type of the type parameter.\n  if ((type.flags & ts.TypeFlags.TypeParameter) !== 0) {\n    // `type.getConstraint()` method doesn't return the constraint type of\n    // the type parameter for some reason. So this gets the constraint type\n    // via AST.\n    const symbol = type.getSymbol();\n    const decls = symbol === null || symbol === void 0 ? void 0 : symbol.getDeclarations();\n    const typeParamDecl = decls === null || decls === void 0 ? void 0 : decls[0];\n    if (ts.isTypeParameterDeclaration(typeParamDecl) && typeParamDecl.constraint != null) {\n      return getTypeName(typeChecker, typeChecker.getTypeFromTypeNode(typeParamDecl.constraint));\n    }\n  }\n  // If the type is a union and all types in the union are string like,\n  // return `string`. For example:\n  // - `\"a\" | \"b\"` is string.\n  // - `string | string[]` is not string.\n  if (type.isUnion() && type.types.map(value => getTypeName(typeChecker, value)).every(t => t === 'string')) {\n    return 'string';\n  }\n  // If the type is an intersection and a type in the intersection is string\n  // like, return `string`. For example: `string & {__htmlEscaped: void}`\n  if (type.isIntersection() && type.types.map(value => getTypeName(typeChecker, value)).some(t => t === 'string')) {\n    return 'string';\n  }\n  return typeChecker.typeToString(type);\n}\nexports.getTypeName = getTypeName;","map":{"version":3,"names":["ts","__importStar","require","getTypeName","typeChecker","type","flags","TypeFlags","StringLike","TypeParameter","symbol","getSymbol","decls","getDeclarations","typeParamDecl","isTypeParameterDeclaration","constraint","getTypeFromTypeNode","isUnion","types","map","value","every","t","isIntersection","some","typeToString","exports"],"sources":["../src/getTypeName.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,EAAA,GAAAC,YAAA,CAAAC,OAAA;AAEA;;;;;AAKA,SAAgBC,WAAWA,CACzBC,WAA2B,EAC3BC,IAAa;EAEb;EACA,IAAI,CAACA,IAAI,CAACC,KAAK,GAAGN,EAAE,CAACO,SAAS,CAACC,UAAU,MAAM,CAAC,EAAE;IAChD,OAAO,QAAQ;;EAGjB;EACA;EACA;EACA,IAAI,CAACH,IAAI,CAACC,KAAK,GAAGN,EAAE,CAACO,SAAS,CAACE,aAAa,MAAM,CAAC,EAAE;IACnD;IACA;IACA;IACA,MAAMC,MAAM,GAAGL,IAAI,CAACM,SAAS,EAAE;IAC/B,MAAMC,KAAK,GAAGF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,eAAe,EAAE;IACvC,MAAMC,aAAa,GAAGF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAG,CAAC,CAAgC;IAC/D,IACEZ,EAAE,CAACe,0BAA0B,CAACD,aAAa,CAAC,IAC5CA,aAAa,CAACE,UAAU,IAAI,IAAI,EAChC;MACA,OAAOb,WAAW,CAChBC,WAAW,EACXA,WAAW,CAACa,mBAAmB,CAACH,aAAa,CAACE,UAAU,CAAC,CAC1D;;;EAIL;EACA;EACA;EACA;EACA,IACEX,IAAI,CAACa,OAAO,EAAE,IACdb,IAAI,CAACc,KAAK,CACPC,GAAG,CAACC,KAAK,IAAIlB,WAAW,CAACC,WAAW,EAAEiB,KAAK,CAAC,CAAC,CAC7CC,KAAK,CAACC,CAAC,IAAIA,CAAC,KAAK,QAAQ,CAAC,EAC7B;IACA,OAAO,QAAQ;;EAGjB;EACA;EACA,IACElB,IAAI,CAACmB,cAAc,EAAE,IACrBnB,IAAI,CAACc,KAAK,CACPC,GAAG,CAACC,KAAK,IAAIlB,WAAW,CAACC,WAAW,EAAEiB,KAAK,CAAC,CAAC,CAC7CI,IAAI,CAACF,CAAC,IAAIA,CAAC,KAAK,QAAQ,CAAC,EAC5B;IACA,OAAO,QAAQ;;EAGjB,OAAOnB,WAAW,CAACsB,YAAY,CAACrB,IAAI,CAAC;AACvC;AAvDAsB,OAAA,CAAAxB,WAAA,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}