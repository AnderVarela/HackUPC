{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertAccessor = assertAccessor;\nexports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;\nexports.assertArgumentPlaceholder = assertArgumentPlaceholder;\nexports.assertArrayExpression = assertArrayExpression;\nexports.assertArrayPattern = assertArrayPattern;\nexports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;\nexports.assertArrowFunctionExpression = assertArrowFunctionExpression;\nexports.assertAssignmentExpression = assertAssignmentExpression;\nexports.assertAssignmentPattern = assertAssignmentPattern;\nexports.assertAwaitExpression = assertAwaitExpression;\nexports.assertBigIntLiteral = assertBigIntLiteral;\nexports.assertBinary = assertBinary;\nexports.assertBinaryExpression = assertBinaryExpression;\nexports.assertBindExpression = assertBindExpression;\nexports.assertBlock = assertBlock;\nexports.assertBlockParent = assertBlockParent;\nexports.assertBlockStatement = assertBlockStatement;\nexports.assertBooleanLiteral = assertBooleanLiteral;\nexports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;\nexports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;\nexports.assertBreakStatement = assertBreakStatement;\nexports.assertCallExpression = assertCallExpression;\nexports.assertCatchClause = assertCatchClause;\nexports.assertClass = assertClass;\nexports.assertClassAccessorProperty = assertClassAccessorProperty;\nexports.assertClassBody = assertClassBody;\nexports.assertClassDeclaration = assertClassDeclaration;\nexports.assertClassExpression = assertClassExpression;\nexports.assertClassImplements = assertClassImplements;\nexports.assertClassMethod = assertClassMethod;\nexports.assertClassPrivateMethod = assertClassPrivateMethod;\nexports.assertClassPrivateProperty = assertClassPrivateProperty;\nexports.assertClassProperty = assertClassProperty;\nexports.assertCompletionStatement = assertCompletionStatement;\nexports.assertConditional = assertConditional;\nexports.assertConditionalExpression = assertConditionalExpression;\nexports.assertContinueStatement = assertContinueStatement;\nexports.assertDebuggerStatement = assertDebuggerStatement;\nexports.assertDecimalLiteral = assertDecimalLiteral;\nexports.assertDeclaration = assertDeclaration;\nexports.assertDeclareClass = assertDeclareClass;\nexports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;\nexports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;\nexports.assertDeclareFunction = assertDeclareFunction;\nexports.assertDeclareInterface = assertDeclareInterface;\nexports.assertDeclareModule = assertDeclareModule;\nexports.assertDeclareModuleExports = assertDeclareModuleExports;\nexports.assertDeclareOpaqueType = assertDeclareOpaqueType;\nexports.assertDeclareTypeAlias = assertDeclareTypeAlias;\nexports.assertDeclareVariable = assertDeclareVariable;\nexports.assertDeclaredPredicate = assertDeclaredPredicate;\nexports.assertDecorator = assertDecorator;\nexports.assertDirective = assertDirective;\nexports.assertDirectiveLiteral = assertDirectiveLiteral;\nexports.assertDoExpression = assertDoExpression;\nexports.assertDoWhileStatement = assertDoWhileStatement;\nexports.assertEmptyStatement = assertEmptyStatement;\nexports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;\nexports.assertEnumBody = assertEnumBody;\nexports.assertEnumBooleanBody = assertEnumBooleanBody;\nexports.assertEnumBooleanMember = assertEnumBooleanMember;\nexports.assertEnumDeclaration = assertEnumDeclaration;\nexports.assertEnumDefaultedMember = assertEnumDefaultedMember;\nexports.assertEnumMember = assertEnumMember;\nexports.assertEnumNumberBody = assertEnumNumberBody;\nexports.assertEnumNumberMember = assertEnumNumberMember;\nexports.assertEnumStringBody = assertEnumStringBody;\nexports.assertEnumStringMember = assertEnumStringMember;\nexports.assertEnumSymbolBody = assertEnumSymbolBody;\nexports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;\nexports.assertExportAllDeclaration = assertExportAllDeclaration;\nexports.assertExportDeclaration = assertExportDeclaration;\nexports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;\nexports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;\nexports.assertExportNamedDeclaration = assertExportNamedDeclaration;\nexports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;\nexports.assertExportSpecifier = assertExportSpecifier;\nexports.assertExpression = assertExpression;\nexports.assertExpressionStatement = assertExpressionStatement;\nexports.assertExpressionWrapper = assertExpressionWrapper;\nexports.assertFile = assertFile;\nexports.assertFlow = assertFlow;\nexports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;\nexports.assertFlowDeclaration = assertFlowDeclaration;\nexports.assertFlowPredicate = assertFlowPredicate;\nexports.assertFlowType = assertFlowType;\nexports.assertFor = assertFor;\nexports.assertForInStatement = assertForInStatement;\nexports.assertForOfStatement = assertForOfStatement;\nexports.assertForStatement = assertForStatement;\nexports.assertForXStatement = assertForXStatement;\nexports.assertFunction = assertFunction;\nexports.assertFunctionDeclaration = assertFunctionDeclaration;\nexports.assertFunctionExpression = assertFunctionExpression;\nexports.assertFunctionParent = assertFunctionParent;\nexports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;\nexports.assertFunctionTypeParam = assertFunctionTypeParam;\nexports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;\nexports.assertIdentifier = assertIdentifier;\nexports.assertIfStatement = assertIfStatement;\nexports.assertImmutable = assertImmutable;\nexports.assertImport = assertImport;\nexports.assertImportAttribute = assertImportAttribute;\nexports.assertImportDeclaration = assertImportDeclaration;\nexports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;\nexports.assertImportExpression = assertImportExpression;\nexports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;\nexports.assertImportOrExportDeclaration = assertImportOrExportDeclaration;\nexports.assertImportSpecifier = assertImportSpecifier;\nexports.assertIndexedAccessType = assertIndexedAccessType;\nexports.assertInferredPredicate = assertInferredPredicate;\nexports.assertInterfaceDeclaration = assertInterfaceDeclaration;\nexports.assertInterfaceExtends = assertInterfaceExtends;\nexports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;\nexports.assertInterpreterDirective = assertInterpreterDirective;\nexports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;\nexports.assertJSX = assertJSX;\nexports.assertJSXAttribute = assertJSXAttribute;\nexports.assertJSXClosingElement = assertJSXClosingElement;\nexports.assertJSXClosingFragment = assertJSXClosingFragment;\nexports.assertJSXElement = assertJSXElement;\nexports.assertJSXEmptyExpression = assertJSXEmptyExpression;\nexports.assertJSXExpressionContainer = assertJSXExpressionContainer;\nexports.assertJSXFragment = assertJSXFragment;\nexports.assertJSXIdentifier = assertJSXIdentifier;\nexports.assertJSXMemberExpression = assertJSXMemberExpression;\nexports.assertJSXNamespacedName = assertJSXNamespacedName;\nexports.assertJSXOpeningElement = assertJSXOpeningElement;\nexports.assertJSXOpeningFragment = assertJSXOpeningFragment;\nexports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;\nexports.assertJSXSpreadChild = assertJSXSpreadChild;\nexports.assertJSXText = assertJSXText;\nexports.assertLVal = assertLVal;\nexports.assertLabeledStatement = assertLabeledStatement;\nexports.assertLiteral = assertLiteral;\nexports.assertLogicalExpression = assertLogicalExpression;\nexports.assertLoop = assertLoop;\nexports.assertMemberExpression = assertMemberExpression;\nexports.assertMetaProperty = assertMetaProperty;\nexports.assertMethod = assertMethod;\nexports.assertMiscellaneous = assertMiscellaneous;\nexports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;\nexports.assertModuleDeclaration = assertModuleDeclaration;\nexports.assertModuleExpression = assertModuleExpression;\nexports.assertModuleSpecifier = assertModuleSpecifier;\nexports.assertNewExpression = assertNewExpression;\nexports.assertNoop = assertNoop;\nexports.assertNullLiteral = assertNullLiteral;\nexports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;\nexports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;\nexports.assertNumberLiteral = assertNumberLiteral;\nexports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;\nexports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;\nexports.assertNumericLiteral = assertNumericLiteral;\nexports.assertObjectExpression = assertObjectExpression;\nexports.assertObjectMember = assertObjectMember;\nexports.assertObjectMethod = assertObjectMethod;\nexports.assertObjectPattern = assertObjectPattern;\nexports.assertObjectProperty = assertObjectProperty;\nexports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;\nexports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;\nexports.assertObjectTypeIndexer = assertObjectTypeIndexer;\nexports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;\nexports.assertObjectTypeProperty = assertObjectTypeProperty;\nexports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;\nexports.assertOpaqueType = assertOpaqueType;\nexports.assertOptionalCallExpression = assertOptionalCallExpression;\nexports.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;\nexports.assertOptionalMemberExpression = assertOptionalMemberExpression;\nexports.assertParenthesizedExpression = assertParenthesizedExpression;\nexports.assertPattern = assertPattern;\nexports.assertPatternLike = assertPatternLike;\nexports.assertPipelineBareFunction = assertPipelineBareFunction;\nexports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;\nexports.assertPipelineTopicExpression = assertPipelineTopicExpression;\nexports.assertPlaceholder = assertPlaceholder;\nexports.assertPrivate = assertPrivate;\nexports.assertPrivateName = assertPrivateName;\nexports.assertProgram = assertProgram;\nexports.assertProperty = assertProperty;\nexports.assertPureish = assertPureish;\nexports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;\nexports.assertRecordExpression = assertRecordExpression;\nexports.assertRegExpLiteral = assertRegExpLiteral;\nexports.assertRegexLiteral = assertRegexLiteral;\nexports.assertRestElement = assertRestElement;\nexports.assertRestProperty = assertRestProperty;\nexports.assertReturnStatement = assertReturnStatement;\nexports.assertScopable = assertScopable;\nexports.assertSequenceExpression = assertSequenceExpression;\nexports.assertSpreadElement = assertSpreadElement;\nexports.assertSpreadProperty = assertSpreadProperty;\nexports.assertStandardized = assertStandardized;\nexports.assertStatement = assertStatement;\nexports.assertStaticBlock = assertStaticBlock;\nexports.assertStringLiteral = assertStringLiteral;\nexports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;\nexports.assertStringTypeAnnotation = assertStringTypeAnnotation;\nexports.assertSuper = assertSuper;\nexports.assertSwitchCase = assertSwitchCase;\nexports.assertSwitchStatement = assertSwitchStatement;\nexports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;\nexports.assertTSAnyKeyword = assertTSAnyKeyword;\nexports.assertTSArrayType = assertTSArrayType;\nexports.assertTSAsExpression = assertTSAsExpression;\nexports.assertTSBaseType = assertTSBaseType;\nexports.assertTSBigIntKeyword = assertTSBigIntKeyword;\nexports.assertTSBooleanKeyword = assertTSBooleanKeyword;\nexports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;\nexports.assertTSConditionalType = assertTSConditionalType;\nexports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;\nexports.assertTSConstructorType = assertTSConstructorType;\nexports.assertTSDeclareFunction = assertTSDeclareFunction;\nexports.assertTSDeclareMethod = assertTSDeclareMethod;\nexports.assertTSEntityName = assertTSEntityName;\nexports.assertTSEnumDeclaration = assertTSEnumDeclaration;\nexports.assertTSEnumMember = assertTSEnumMember;\nexports.assertTSExportAssignment = assertTSExportAssignment;\nexports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;\nexports.assertTSExternalModuleReference = assertTSExternalModuleReference;\nexports.assertTSFunctionType = assertTSFunctionType;\nexports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;\nexports.assertTSImportType = assertTSImportType;\nexports.assertTSIndexSignature = assertTSIndexSignature;\nexports.assertTSIndexedAccessType = assertTSIndexedAccessType;\nexports.assertTSInferType = assertTSInferType;\nexports.assertTSInstantiationExpression = assertTSInstantiationExpression;\nexports.assertTSInterfaceBody = assertTSInterfaceBody;\nexports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;\nexports.assertTSIntersectionType = assertTSIntersectionType;\nexports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;\nexports.assertTSLiteralType = assertTSLiteralType;\nexports.assertTSMappedType = assertTSMappedType;\nexports.assertTSMethodSignature = assertTSMethodSignature;\nexports.assertTSModuleBlock = assertTSModuleBlock;\nexports.assertTSModuleDeclaration = assertTSModuleDeclaration;\nexports.assertTSNamedTupleMember = assertTSNamedTupleMember;\nexports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;\nexports.assertTSNeverKeyword = assertTSNeverKeyword;\nexports.assertTSNonNullExpression = assertTSNonNullExpression;\nexports.assertTSNullKeyword = assertTSNullKeyword;\nexports.assertTSNumberKeyword = assertTSNumberKeyword;\nexports.assertTSObjectKeyword = assertTSObjectKeyword;\nexports.assertTSOptionalType = assertTSOptionalType;\nexports.assertTSParameterProperty = assertTSParameterProperty;\nexports.assertTSParenthesizedType = assertTSParenthesizedType;\nexports.assertTSPropertySignature = assertTSPropertySignature;\nexports.assertTSQualifiedName = assertTSQualifiedName;\nexports.assertTSRestType = assertTSRestType;\nexports.assertTSSatisfiesExpression = assertTSSatisfiesExpression;\nexports.assertTSStringKeyword = assertTSStringKeyword;\nexports.assertTSSymbolKeyword = assertTSSymbolKeyword;\nexports.assertTSThisType = assertTSThisType;\nexports.assertTSTupleType = assertTSTupleType;\nexports.assertTSType = assertTSType;\nexports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;\nexports.assertTSTypeAnnotation = assertTSTypeAnnotation;\nexports.assertTSTypeAssertion = assertTSTypeAssertion;\nexports.assertTSTypeElement = assertTSTypeElement;\nexports.assertTSTypeLiteral = assertTSTypeLiteral;\nexports.assertTSTypeOperator = assertTSTypeOperator;\nexports.assertTSTypeParameter = assertTSTypeParameter;\nexports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;\nexports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;\nexports.assertTSTypePredicate = assertTSTypePredicate;\nexports.assertTSTypeQuery = assertTSTypeQuery;\nexports.assertTSTypeReference = assertTSTypeReference;\nexports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;\nexports.assertTSUnionType = assertTSUnionType;\nexports.assertTSUnknownKeyword = assertTSUnknownKeyword;\nexports.assertTSVoidKeyword = assertTSVoidKeyword;\nexports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;\nexports.assertTemplateElement = assertTemplateElement;\nexports.assertTemplateLiteral = assertTemplateLiteral;\nexports.assertTerminatorless = assertTerminatorless;\nexports.assertThisExpression = assertThisExpression;\nexports.assertThisTypeAnnotation = assertThisTypeAnnotation;\nexports.assertThrowStatement = assertThrowStatement;\nexports.assertTopicReference = assertTopicReference;\nexports.assertTryStatement = assertTryStatement;\nexports.assertTupleExpression = assertTupleExpression;\nexports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;\nexports.assertTypeAlias = assertTypeAlias;\nexports.assertTypeAnnotation = assertTypeAnnotation;\nexports.assertTypeCastExpression = assertTypeCastExpression;\nexports.assertTypeParameter = assertTypeParameter;\nexports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;\nexports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;\nexports.assertTypeScript = assertTypeScript;\nexports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;\nexports.assertUnaryExpression = assertUnaryExpression;\nexports.assertUnaryLike = assertUnaryLike;\nexports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;\nexports.assertUpdateExpression = assertUpdateExpression;\nexports.assertUserWhitespacable = assertUserWhitespacable;\nexports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;\nexports.assertVariableDeclaration = assertVariableDeclaration;\nexports.assertVariableDeclarator = assertVariableDeclarator;\nexports.assertVariance = assertVariance;\nexports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;\nexports.assertWhile = assertWhile;\nexports.assertWhileStatement = assertWhileStatement;\nexports.assertWithStatement = assertWithStatement;\nexports.assertYieldExpression = assertYieldExpression;\nvar _is = require(\"../../validators/is.js\");\nvar _deprecationWarning = require(\"../../utils/deprecationWarning.js\");\nfunction assert(type, node, opts) {\n  if (!(0, _is.default)(type, node, opts)) {\n    throw new Error(`Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` + `but instead got \"${node.type}\".`);\n  }\n}\nfunction assertArrayExpression(node, opts) {\n  assert(\"ArrayExpression\", node, opts);\n}\nfunction assertAssignmentExpression(node, opts) {\n  assert(\"AssignmentExpression\", node, opts);\n}\nfunction assertBinaryExpression(node, opts) {\n  assert(\"BinaryExpression\", node, opts);\n}\nfunction assertInterpreterDirective(node, opts) {\n  assert(\"InterpreterDirective\", node, opts);\n}\nfunction assertDirective(node, opts) {\n  assert(\"Directive\", node, opts);\n}\nfunction assertDirectiveLiteral(node, opts) {\n  assert(\"DirectiveLiteral\", node, opts);\n}\nfunction assertBlockStatement(node, opts) {\n  assert(\"BlockStatement\", node, opts);\n}\nfunction assertBreakStatement(node, opts) {\n  assert(\"BreakStatement\", node, opts);\n}\nfunction assertCallExpression(node, opts) {\n  assert(\"CallExpression\", node, opts);\n}\nfunction assertCatchClause(node, opts) {\n  assert(\"CatchClause\", node, opts);\n}\nfunction assertConditionalExpression(node, opts) {\n  assert(\"ConditionalExpression\", node, opts);\n}\nfunction assertContinueStatement(node, opts) {\n  assert(\"ContinueStatement\", node, opts);\n}\nfunction assertDebuggerStatement(node, opts) {\n  assert(\"DebuggerStatement\", node, opts);\n}\nfunction assertDoWhileStatement(node, opts) {\n  assert(\"DoWhileStatement\", node, opts);\n}\nfunction assertEmptyStatement(node, opts) {\n  assert(\"EmptyStatement\", node, opts);\n}\nfunction assertExpressionStatement(node, opts) {\n  assert(\"ExpressionStatement\", node, opts);\n}\nfunction assertFile(node, opts) {\n  assert(\"File\", node, opts);\n}\nfunction assertForInStatement(node, opts) {\n  assert(\"ForInStatement\", node, opts);\n}\nfunction assertForStatement(node, opts) {\n  assert(\"ForStatement\", node, opts);\n}\nfunction assertFunctionDeclaration(node, opts) {\n  assert(\"FunctionDeclaration\", node, opts);\n}\nfunction assertFunctionExpression(node, opts) {\n  assert(\"FunctionExpression\", node, opts);\n}\nfunction assertIdentifier(node, opts) {\n  assert(\"Identifier\", node, opts);\n}\nfunction assertIfStatement(node, opts) {\n  assert(\"IfStatement\", node, opts);\n}\nfunction assertLabeledStatement(node, opts) {\n  assert(\"LabeledStatement\", node, opts);\n}\nfunction assertStringLiteral(node, opts) {\n  assert(\"StringLiteral\", node, opts);\n}\nfunction assertNumericLiteral(node, opts) {\n  assert(\"NumericLiteral\", node, opts);\n}\nfunction assertNullLiteral(node, opts) {\n  assert(\"NullLiteral\", node, opts);\n}\nfunction assertBooleanLiteral(node, opts) {\n  assert(\"BooleanLiteral\", node, opts);\n}\nfunction assertRegExpLiteral(node, opts) {\n  assert(\"RegExpLiteral\", node, opts);\n}\nfunction assertLogicalExpression(node, opts) {\n  assert(\"LogicalExpression\", node, opts);\n}\nfunction assertMemberExpression(node, opts) {\n  assert(\"MemberExpression\", node, opts);\n}\nfunction assertNewExpression(node, opts) {\n  assert(\"NewExpression\", node, opts);\n}\nfunction assertProgram(node, opts) {\n  assert(\"Program\", node, opts);\n}\nfunction assertObjectExpression(node, opts) {\n  assert(\"ObjectExpression\", node, opts);\n}\nfunction assertObjectMethod(node, opts) {\n  assert(\"ObjectMethod\", node, opts);\n}\nfunction assertObjectProperty(node, opts) {\n  assert(\"ObjectProperty\", node, opts);\n}\nfunction assertRestElement(node, opts) {\n  assert(\"RestElement\", node, opts);\n}\nfunction assertReturnStatement(node, opts) {\n  assert(\"ReturnStatement\", node, opts);\n}\nfunction assertSequenceExpression(node, opts) {\n  assert(\"SequenceExpression\", node, opts);\n}\nfunction assertParenthesizedExpression(node, opts) {\n  assert(\"ParenthesizedExpression\", node, opts);\n}\nfunction assertSwitchCase(node, opts) {\n  assert(\"SwitchCase\", node, opts);\n}\nfunction assertSwitchStatement(node, opts) {\n  assert(\"SwitchStatement\", node, opts);\n}\nfunction assertThisExpression(node, opts) {\n  assert(\"ThisExpression\", node, opts);\n}\nfunction assertThrowStatement(node, opts) {\n  assert(\"ThrowStatement\", node, opts);\n}\nfunction assertTryStatement(node, opts) {\n  assert(\"TryStatement\", node, opts);\n}\nfunction assertUnaryExpression(node, opts) {\n  assert(\"UnaryExpression\", node, opts);\n}\nfunction assertUpdateExpression(node, opts) {\n  assert(\"UpdateExpression\", node, opts);\n}\nfunction assertVariableDeclaration(node, opts) {\n  assert(\"VariableDeclaration\", node, opts);\n}\nfunction assertVariableDeclarator(node, opts) {\n  assert(\"VariableDeclarator\", node, opts);\n}\nfunction assertWhileStatement(node, opts) {\n  assert(\"WhileStatement\", node, opts);\n}\nfunction assertWithStatement(node, opts) {\n  assert(\"WithStatement\", node, opts);\n}\nfunction assertAssignmentPattern(node, opts) {\n  assert(\"AssignmentPattern\", node, opts);\n}\nfunction assertArrayPattern(node, opts) {\n  assert(\"ArrayPattern\", node, opts);\n}\nfunction assertArrowFunctionExpression(node, opts) {\n  assert(\"ArrowFunctionExpression\", node, opts);\n}\nfunction assertClassBody(node, opts) {\n  assert(\"ClassBody\", node, opts);\n}\nfunction assertClassExpression(node, opts) {\n  assert(\"ClassExpression\", node, opts);\n}\nfunction assertClassDeclaration(node, opts) {\n  assert(\"ClassDeclaration\", node, opts);\n}\nfunction assertExportAllDeclaration(node, opts) {\n  assert(\"ExportAllDeclaration\", node, opts);\n}\nfunction assertExportDefaultDeclaration(node, opts) {\n  assert(\"ExportDefaultDeclaration\", node, opts);\n}\nfunction assertExportNamedDeclaration(node, opts) {\n  assert(\"ExportNamedDeclaration\", node, opts);\n}\nfunction assertExportSpecifier(node, opts) {\n  assert(\"ExportSpecifier\", node, opts);\n}\nfunction assertForOfStatement(node, opts) {\n  assert(\"ForOfStatement\", node, opts);\n}\nfunction assertImportDeclaration(node, opts) {\n  assert(\"ImportDeclaration\", node, opts);\n}\nfunction assertImportDefaultSpecifier(node, opts) {\n  assert(\"ImportDefaultSpecifier\", node, opts);\n}\nfunction assertImportNamespaceSpecifier(node, opts) {\n  assert(\"ImportNamespaceSpecifier\", node, opts);\n}\nfunction assertImportSpecifier(node, opts) {\n  assert(\"ImportSpecifier\", node, opts);\n}\nfunction assertImportExpression(node, opts) {\n  assert(\"ImportExpression\", node, opts);\n}\nfunction assertMetaProperty(node, opts) {\n  assert(\"MetaProperty\", node, opts);\n}\nfunction assertClassMethod(node, opts) {\n  assert(\"ClassMethod\", node, opts);\n}\nfunction assertObjectPattern(node, opts) {\n  assert(\"ObjectPattern\", node, opts);\n}\nfunction assertSpreadElement(node, opts) {\n  assert(\"SpreadElement\", node, opts);\n}\nfunction assertSuper(node, opts) {\n  assert(\"Super\", node, opts);\n}\nfunction assertTaggedTemplateExpression(node, opts) {\n  assert(\"TaggedTemplateExpression\", node, opts);\n}\nfunction assertTemplateElement(node, opts) {\n  assert(\"TemplateElement\", node, opts);\n}\nfunction assertTemplateLiteral(node, opts) {\n  assert(\"TemplateLiteral\", node, opts);\n}\nfunction assertYieldExpression(node, opts) {\n  assert(\"YieldExpression\", node, opts);\n}\nfunction assertAwaitExpression(node, opts) {\n  assert(\"AwaitExpression\", node, opts);\n}\nfunction assertImport(node, opts) {\n  assert(\"Import\", node, opts);\n}\nfunction assertBigIntLiteral(node, opts) {\n  assert(\"BigIntLiteral\", node, opts);\n}\nfunction assertExportNamespaceSpecifier(node, opts) {\n  assert(\"ExportNamespaceSpecifier\", node, opts);\n}\nfunction assertOptionalMemberExpression(node, opts) {\n  assert(\"OptionalMemberExpression\", node, opts);\n}\nfunction assertOptionalCallExpression(node, opts) {\n  assert(\"OptionalCallExpression\", node, opts);\n}\nfunction assertClassProperty(node, opts) {\n  assert(\"ClassProperty\", node, opts);\n}\nfunction assertClassAccessorProperty(node, opts) {\n  assert(\"ClassAccessorProperty\", node, opts);\n}\nfunction assertClassPrivateProperty(node, opts) {\n  assert(\"ClassPrivateProperty\", node, opts);\n}\nfunction assertClassPrivateMethod(node, opts) {\n  assert(\"ClassPrivateMethod\", node, opts);\n}\nfunction assertPrivateName(node, opts) {\n  assert(\"PrivateName\", node, opts);\n}\nfunction assertStaticBlock(node, opts) {\n  assert(\"StaticBlock\", node, opts);\n}\nfunction assertAnyTypeAnnotation(node, opts) {\n  assert(\"AnyTypeAnnotation\", node, opts);\n}\nfunction assertArrayTypeAnnotation(node, opts) {\n  assert(\"ArrayTypeAnnotation\", node, opts);\n}\nfunction assertBooleanTypeAnnotation(node, opts) {\n  assert(\"BooleanTypeAnnotation\", node, opts);\n}\nfunction assertBooleanLiteralTypeAnnotation(node, opts) {\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n}\nfunction assertNullLiteralTypeAnnotation(node, opts) {\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\n}\nfunction assertClassImplements(node, opts) {\n  assert(\"ClassImplements\", node, opts);\n}\nfunction assertDeclareClass(node, opts) {\n  assert(\"DeclareClass\", node, opts);\n}\nfunction assertDeclareFunction(node, opts) {\n  assert(\"DeclareFunction\", node, opts);\n}\nfunction assertDeclareInterface(node, opts) {\n  assert(\"DeclareInterface\", node, opts);\n}\nfunction assertDeclareModule(node, opts) {\n  assert(\"DeclareModule\", node, opts);\n}\nfunction assertDeclareModuleExports(node, opts) {\n  assert(\"DeclareModuleExports\", node, opts);\n}\nfunction assertDeclareTypeAlias(node, opts) {\n  assert(\"DeclareTypeAlias\", node, opts);\n}\nfunction assertDeclareOpaqueType(node, opts) {\n  assert(\"DeclareOpaqueType\", node, opts);\n}\nfunction assertDeclareVariable(node, opts) {\n  assert(\"DeclareVariable\", node, opts);\n}\nfunction assertDeclareExportDeclaration(node, opts) {\n  assert(\"DeclareExportDeclaration\", node, opts);\n}\nfunction assertDeclareExportAllDeclaration(node, opts) {\n  assert(\"DeclareExportAllDeclaration\", node, opts);\n}\nfunction assertDeclaredPredicate(node, opts) {\n  assert(\"DeclaredPredicate\", node, opts);\n}\nfunction assertExistsTypeAnnotation(node, opts) {\n  assert(\"ExistsTypeAnnotation\", node, opts);\n}\nfunction assertFunctionTypeAnnotation(node, opts) {\n  assert(\"FunctionTypeAnnotation\", node, opts);\n}\nfunction assertFunctionTypeParam(node, opts) {\n  assert(\"FunctionTypeParam\", node, opts);\n}\nfunction assertGenericTypeAnnotation(node, opts) {\n  assert(\"GenericTypeAnnotation\", node, opts);\n}\nfunction assertInferredPredicate(node, opts) {\n  assert(\"InferredPredicate\", node, opts);\n}\nfunction assertInterfaceExtends(node, opts) {\n  assert(\"InterfaceExtends\", node, opts);\n}\nfunction assertInterfaceDeclaration(node, opts) {\n  assert(\"InterfaceDeclaration\", node, opts);\n}\nfunction assertInterfaceTypeAnnotation(node, opts) {\n  assert(\"InterfaceTypeAnnotation\", node, opts);\n}\nfunction assertIntersectionTypeAnnotation(node, opts) {\n  assert(\"IntersectionTypeAnnotation\", node, opts);\n}\nfunction assertMixedTypeAnnotation(node, opts) {\n  assert(\"MixedTypeAnnotation\", node, opts);\n}\nfunction assertEmptyTypeAnnotation(node, opts) {\n  assert(\"EmptyTypeAnnotation\", node, opts);\n}\nfunction assertNullableTypeAnnotation(node, opts) {\n  assert(\"NullableTypeAnnotation\", node, opts);\n}\nfunction assertNumberLiteralTypeAnnotation(node, opts) {\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\n}\nfunction assertNumberTypeAnnotation(node, opts) {\n  assert(\"NumberTypeAnnotation\", node, opts);\n}\nfunction assertObjectTypeAnnotation(node, opts) {\n  assert(\"ObjectTypeAnnotation\", node, opts);\n}\nfunction assertObjectTypeInternalSlot(node, opts) {\n  assert(\"ObjectTypeInternalSlot\", node, opts);\n}\nfunction assertObjectTypeCallProperty(node, opts) {\n  assert(\"ObjectTypeCallProperty\", node, opts);\n}\nfunction assertObjectTypeIndexer(node, opts) {\n  assert(\"ObjectTypeIndexer\", node, opts);\n}\nfunction assertObjectTypeProperty(node, opts) {\n  assert(\"ObjectTypeProperty\", node, opts);\n}\nfunction assertObjectTypeSpreadProperty(node, opts) {\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\n}\nfunction assertOpaqueType(node, opts) {\n  assert(\"OpaqueType\", node, opts);\n}\nfunction assertQualifiedTypeIdentifier(node, opts) {\n  assert(\"QualifiedTypeIdentifier\", node, opts);\n}\nfunction assertStringLiteralTypeAnnotation(node, opts) {\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\n}\nfunction assertStringTypeAnnotation(node, opts) {\n  assert(\"StringTypeAnnotation\", node, opts);\n}\nfunction assertSymbolTypeAnnotation(node, opts) {\n  assert(\"SymbolTypeAnnotation\", node, opts);\n}\nfunction assertThisTypeAnnotation(node, opts) {\n  assert(\"ThisTypeAnnotation\", node, opts);\n}\nfunction assertTupleTypeAnnotation(node, opts) {\n  assert(\"TupleTypeAnnotation\", node, opts);\n}\nfunction assertTypeofTypeAnnotation(node, opts) {\n  assert(\"TypeofTypeAnnotation\", node, opts);\n}\nfunction assertTypeAlias(node, opts) {\n  assert(\"TypeAlias\", node, opts);\n}\nfunction assertTypeAnnotation(node, opts) {\n  assert(\"TypeAnnotation\", node, opts);\n}\nfunction assertTypeCastExpression(node, opts) {\n  assert(\"TypeCastExpression\", node, opts);\n}\nfunction assertTypeParameter(node, opts) {\n  assert(\"TypeParameter\", node, opts);\n}\nfunction assertTypeParameterDeclaration(node, opts) {\n  assert(\"TypeParameterDeclaration\", node, opts);\n}\nfunction assertTypeParameterInstantiation(node, opts) {\n  assert(\"TypeParameterInstantiation\", node, opts);\n}\nfunction assertUnionTypeAnnotation(node, opts) {\n  assert(\"UnionTypeAnnotation\", node, opts);\n}\nfunction assertVariance(node, opts) {\n  assert(\"Variance\", node, opts);\n}\nfunction assertVoidTypeAnnotation(node, opts) {\n  assert(\"VoidTypeAnnotation\", node, opts);\n}\nfunction assertEnumDeclaration(node, opts) {\n  assert(\"EnumDeclaration\", node, opts);\n}\nfunction assertEnumBooleanBody(node, opts) {\n  assert(\"EnumBooleanBody\", node, opts);\n}\nfunction assertEnumNumberBody(node, opts) {\n  assert(\"EnumNumberBody\", node, opts);\n}\nfunction assertEnumStringBody(node, opts) {\n  assert(\"EnumStringBody\", node, opts);\n}\nfunction assertEnumSymbolBody(node, opts) {\n  assert(\"EnumSymbolBody\", node, opts);\n}\nfunction assertEnumBooleanMember(node, opts) {\n  assert(\"EnumBooleanMember\", node, opts);\n}\nfunction assertEnumNumberMember(node, opts) {\n  assert(\"EnumNumberMember\", node, opts);\n}\nfunction assertEnumStringMember(node, opts) {\n  assert(\"EnumStringMember\", node, opts);\n}\nfunction assertEnumDefaultedMember(node, opts) {\n  assert(\"EnumDefaultedMember\", node, opts);\n}\nfunction assertIndexedAccessType(node, opts) {\n  assert(\"IndexedAccessType\", node, opts);\n}\nfunction assertOptionalIndexedAccessType(node, opts) {\n  assert(\"OptionalIndexedAccessType\", node, opts);\n}\nfunction assertJSXAttribute(node, opts) {\n  assert(\"JSXAttribute\", node, opts);\n}\nfunction assertJSXClosingElement(node, opts) {\n  assert(\"JSXClosingElement\", node, opts);\n}\nfunction assertJSXElement(node, opts) {\n  assert(\"JSXElement\", node, opts);\n}\nfunction assertJSXEmptyExpression(node, opts) {\n  assert(\"JSXEmptyExpression\", node, opts);\n}\nfunction assertJSXExpressionContainer(node, opts) {\n  assert(\"JSXExpressionContainer\", node, opts);\n}\nfunction assertJSXSpreadChild(node, opts) {\n  assert(\"JSXSpreadChild\", node, opts);\n}\nfunction assertJSXIdentifier(node, opts) {\n  assert(\"JSXIdentifier\", node, opts);\n}\nfunction assertJSXMemberExpression(node, opts) {\n  assert(\"JSXMemberExpression\", node, opts);\n}\nfunction assertJSXNamespacedName(node, opts) {\n  assert(\"JSXNamespacedName\", node, opts);\n}\nfunction assertJSXOpeningElement(node, opts) {\n  assert(\"JSXOpeningElement\", node, opts);\n}\nfunction assertJSXSpreadAttribute(node, opts) {\n  assert(\"JSXSpreadAttribute\", node, opts);\n}\nfunction assertJSXText(node, opts) {\n  assert(\"JSXText\", node, opts);\n}\nfunction assertJSXFragment(node, opts) {\n  assert(\"JSXFragment\", node, opts);\n}\nfunction assertJSXOpeningFragment(node, opts) {\n  assert(\"JSXOpeningFragment\", node, opts);\n}\nfunction assertJSXClosingFragment(node, opts) {\n  assert(\"JSXClosingFragment\", node, opts);\n}\nfunction assertNoop(node, opts) {\n  assert(\"Noop\", node, opts);\n}\nfunction assertPlaceholder(node, opts) {\n  assert(\"Placeholder\", node, opts);\n}\nfunction assertV8IntrinsicIdentifier(node, opts) {\n  assert(\"V8IntrinsicIdentifier\", node, opts);\n}\nfunction assertArgumentPlaceholder(node, opts) {\n  assert(\"ArgumentPlaceholder\", node, opts);\n}\nfunction assertBindExpression(node, opts) {\n  assert(\"BindExpression\", node, opts);\n}\nfunction assertImportAttribute(node, opts) {\n  assert(\"ImportAttribute\", node, opts);\n}\nfunction assertDecorator(node, opts) {\n  assert(\"Decorator\", node, opts);\n}\nfunction assertDoExpression(node, opts) {\n  assert(\"DoExpression\", node, opts);\n}\nfunction assertExportDefaultSpecifier(node, opts) {\n  assert(\"ExportDefaultSpecifier\", node, opts);\n}\nfunction assertRecordExpression(node, opts) {\n  assert(\"RecordExpression\", node, opts);\n}\nfunction assertTupleExpression(node, opts) {\n  assert(\"TupleExpression\", node, opts);\n}\nfunction assertDecimalLiteral(node, opts) {\n  assert(\"DecimalLiteral\", node, opts);\n}\nfunction assertModuleExpression(node, opts) {\n  assert(\"ModuleExpression\", node, opts);\n}\nfunction assertTopicReference(node, opts) {\n  assert(\"TopicReference\", node, opts);\n}\nfunction assertPipelineTopicExpression(node, opts) {\n  assert(\"PipelineTopicExpression\", node, opts);\n}\nfunction assertPipelineBareFunction(node, opts) {\n  assert(\"PipelineBareFunction\", node, opts);\n}\nfunction assertPipelinePrimaryTopicReference(node, opts) {\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\n}\nfunction assertTSParameterProperty(node, opts) {\n  assert(\"TSParameterProperty\", node, opts);\n}\nfunction assertTSDeclareFunction(node, opts) {\n  assert(\"TSDeclareFunction\", node, opts);\n}\nfunction assertTSDeclareMethod(node, opts) {\n  assert(\"TSDeclareMethod\", node, opts);\n}\nfunction assertTSQualifiedName(node, opts) {\n  assert(\"TSQualifiedName\", node, opts);\n}\nfunction assertTSCallSignatureDeclaration(node, opts) {\n  assert(\"TSCallSignatureDeclaration\", node, opts);\n}\nfunction assertTSConstructSignatureDeclaration(node, opts) {\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\n}\nfunction assertTSPropertySignature(node, opts) {\n  assert(\"TSPropertySignature\", node, opts);\n}\nfunction assertTSMethodSignature(node, opts) {\n  assert(\"TSMethodSignature\", node, opts);\n}\nfunction assertTSIndexSignature(node, opts) {\n  assert(\"TSIndexSignature\", node, opts);\n}\nfunction assertTSAnyKeyword(node, opts) {\n  assert(\"TSAnyKeyword\", node, opts);\n}\nfunction assertTSBooleanKeyword(node, opts) {\n  assert(\"TSBooleanKeyword\", node, opts);\n}\nfunction assertTSBigIntKeyword(node, opts) {\n  assert(\"TSBigIntKeyword\", node, opts);\n}\nfunction assertTSIntrinsicKeyword(node, opts) {\n  assert(\"TSIntrinsicKeyword\", node, opts);\n}\nfunction assertTSNeverKeyword(node, opts) {\n  assert(\"TSNeverKeyword\", node, opts);\n}\nfunction assertTSNullKeyword(node, opts) {\n  assert(\"TSNullKeyword\", node, opts);\n}\nfunction assertTSNumberKeyword(node, opts) {\n  assert(\"TSNumberKeyword\", node, opts);\n}\nfunction assertTSObjectKeyword(node, opts) {\n  assert(\"TSObjectKeyword\", node, opts);\n}\nfunction assertTSStringKeyword(node, opts) {\n  assert(\"TSStringKeyword\", node, opts);\n}\nfunction assertTSSymbolKeyword(node, opts) {\n  assert(\"TSSymbolKeyword\", node, opts);\n}\nfunction assertTSUndefinedKeyword(node, opts) {\n  assert(\"TSUndefinedKeyword\", node, opts);\n}\nfunction assertTSUnknownKeyword(node, opts) {\n  assert(\"TSUnknownKeyword\", node, opts);\n}\nfunction assertTSVoidKeyword(node, opts) {\n  assert(\"TSVoidKeyword\", node, opts);\n}\nfunction assertTSThisType(node, opts) {\n  assert(\"TSThisType\", node, opts);\n}\nfunction assertTSFunctionType(node, opts) {\n  assert(\"TSFunctionType\", node, opts);\n}\nfunction assertTSConstructorType(node, opts) {\n  assert(\"TSConstructorType\", node, opts);\n}\nfunction assertTSTypeReference(node, opts) {\n  assert(\"TSTypeReference\", node, opts);\n}\nfunction assertTSTypePredicate(node, opts) {\n  assert(\"TSTypePredicate\", node, opts);\n}\nfunction assertTSTypeQuery(node, opts) {\n  assert(\"TSTypeQuery\", node, opts);\n}\nfunction assertTSTypeLiteral(node, opts) {\n  assert(\"TSTypeLiteral\", node, opts);\n}\nfunction assertTSArrayType(node, opts) {\n  assert(\"TSArrayType\", node, opts);\n}\nfunction assertTSTupleType(node, opts) {\n  assert(\"TSTupleType\", node, opts);\n}\nfunction assertTSOptionalType(node, opts) {\n  assert(\"TSOptionalType\", node, opts);\n}\nfunction assertTSRestType(node, opts) {\n  assert(\"TSRestType\", node, opts);\n}\nfunction assertTSNamedTupleMember(node, opts) {\n  assert(\"TSNamedTupleMember\", node, opts);\n}\nfunction assertTSUnionType(node, opts) {\n  assert(\"TSUnionType\", node, opts);\n}\nfunction assertTSIntersectionType(node, opts) {\n  assert(\"TSIntersectionType\", node, opts);\n}\nfunction assertTSConditionalType(node, opts) {\n  assert(\"TSConditionalType\", node, opts);\n}\nfunction assertTSInferType(node, opts) {\n  assert(\"TSInferType\", node, opts);\n}\nfunction assertTSParenthesizedType(node, opts) {\n  assert(\"TSParenthesizedType\", node, opts);\n}\nfunction assertTSTypeOperator(node, opts) {\n  assert(\"TSTypeOperator\", node, opts);\n}\nfunction assertTSIndexedAccessType(node, opts) {\n  assert(\"TSIndexedAccessType\", node, opts);\n}\nfunction assertTSMappedType(node, opts) {\n  assert(\"TSMappedType\", node, opts);\n}\nfunction assertTSLiteralType(node, opts) {\n  assert(\"TSLiteralType\", node, opts);\n}\nfunction assertTSExpressionWithTypeArguments(node, opts) {\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\n}\nfunction assertTSInterfaceDeclaration(node, opts) {\n  assert(\"TSInterfaceDeclaration\", node, opts);\n}\nfunction assertTSInterfaceBody(node, opts) {\n  assert(\"TSInterfaceBody\", node, opts);\n}\nfunction assertTSTypeAliasDeclaration(node, opts) {\n  assert(\"TSTypeAliasDeclaration\", node, opts);\n}\nfunction assertTSInstantiationExpression(node, opts) {\n  assert(\"TSInstantiationExpression\", node, opts);\n}\nfunction assertTSAsExpression(node, opts) {\n  assert(\"TSAsExpression\", node, opts);\n}\nfunction assertTSSatisfiesExpression(node, opts) {\n  assert(\"TSSatisfiesExpression\", node, opts);\n}\nfunction assertTSTypeAssertion(node, opts) {\n  assert(\"TSTypeAssertion\", node, opts);\n}\nfunction assertTSEnumDeclaration(node, opts) {\n  assert(\"TSEnumDeclaration\", node, opts);\n}\nfunction assertTSEnumMember(node, opts) {\n  assert(\"TSEnumMember\", node, opts);\n}\nfunction assertTSModuleDeclaration(node, opts) {\n  assert(\"TSModuleDeclaration\", node, opts);\n}\nfunction assertTSModuleBlock(node, opts) {\n  assert(\"TSModuleBlock\", node, opts);\n}\nfunction assertTSImportType(node, opts) {\n  assert(\"TSImportType\", node, opts);\n}\nfunction assertTSImportEqualsDeclaration(node, opts) {\n  assert(\"TSImportEqualsDeclaration\", node, opts);\n}\nfunction assertTSExternalModuleReference(node, opts) {\n  assert(\"TSExternalModuleReference\", node, opts);\n}\nfunction assertTSNonNullExpression(node, opts) {\n  assert(\"TSNonNullExpression\", node, opts);\n}\nfunction assertTSExportAssignment(node, opts) {\n  assert(\"TSExportAssignment\", node, opts);\n}\nfunction assertTSNamespaceExportDeclaration(node, opts) {\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\n}\nfunction assertTSTypeAnnotation(node, opts) {\n  assert(\"TSTypeAnnotation\", node, opts);\n}\nfunction assertTSTypeParameterInstantiation(node, opts) {\n  assert(\"TSTypeParameterInstantiation\", node, opts);\n}\nfunction assertTSTypeParameterDeclaration(node, opts) {\n  assert(\"TSTypeParameterDeclaration\", node, opts);\n}\nfunction assertTSTypeParameter(node, opts) {\n  assert(\"TSTypeParameter\", node, opts);\n}\nfunction assertStandardized(node, opts) {\n  assert(\"Standardized\", node, opts);\n}\nfunction assertExpression(node, opts) {\n  assert(\"Expression\", node, opts);\n}\nfunction assertBinary(node, opts) {\n  assert(\"Binary\", node, opts);\n}\nfunction assertScopable(node, opts) {\n  assert(\"Scopable\", node, opts);\n}\nfunction assertBlockParent(node, opts) {\n  assert(\"BlockParent\", node, opts);\n}\nfunction assertBlock(node, opts) {\n  assert(\"Block\", node, opts);\n}\nfunction assertStatement(node, opts) {\n  assert(\"Statement\", node, opts);\n}\nfunction assertTerminatorless(node, opts) {\n  assert(\"Terminatorless\", node, opts);\n}\nfunction assertCompletionStatement(node, opts) {\n  assert(\"CompletionStatement\", node, opts);\n}\nfunction assertConditional(node, opts) {\n  assert(\"Conditional\", node, opts);\n}\nfunction assertLoop(node, opts) {\n  assert(\"Loop\", node, opts);\n}\nfunction assertWhile(node, opts) {\n  assert(\"While\", node, opts);\n}\nfunction assertExpressionWrapper(node, opts) {\n  assert(\"ExpressionWrapper\", node, opts);\n}\nfunction assertFor(node, opts) {\n  assert(\"For\", node, opts);\n}\nfunction assertForXStatement(node, opts) {\n  assert(\"ForXStatement\", node, opts);\n}\nfunction assertFunction(node, opts) {\n  assert(\"Function\", node, opts);\n}\nfunction assertFunctionParent(node, opts) {\n  assert(\"FunctionParent\", node, opts);\n}\nfunction assertPureish(node, opts) {\n  assert(\"Pureish\", node, opts);\n}\nfunction assertDeclaration(node, opts) {\n  assert(\"Declaration\", node, opts);\n}\nfunction assertPatternLike(node, opts) {\n  assert(\"PatternLike\", node, opts);\n}\nfunction assertLVal(node, opts) {\n  assert(\"LVal\", node, opts);\n}\nfunction assertTSEntityName(node, opts) {\n  assert(\"TSEntityName\", node, opts);\n}\nfunction assertLiteral(node, opts) {\n  assert(\"Literal\", node, opts);\n}\nfunction assertImmutable(node, opts) {\n  assert(\"Immutable\", node, opts);\n}\nfunction assertUserWhitespacable(node, opts) {\n  assert(\"UserWhitespacable\", node, opts);\n}\nfunction assertMethod(node, opts) {\n  assert(\"Method\", node, opts);\n}\nfunction assertObjectMember(node, opts) {\n  assert(\"ObjectMember\", node, opts);\n}\nfunction assertProperty(node, opts) {\n  assert(\"Property\", node, opts);\n}\nfunction assertUnaryLike(node, opts) {\n  assert(\"UnaryLike\", node, opts);\n}\nfunction assertPattern(node, opts) {\n  assert(\"Pattern\", node, opts);\n}\nfunction assertClass(node, opts) {\n  assert(\"Class\", node, opts);\n}\nfunction assertImportOrExportDeclaration(node, opts) {\n  assert(\"ImportOrExportDeclaration\", node, opts);\n}\nfunction assertExportDeclaration(node, opts) {\n  assert(\"ExportDeclaration\", node, opts);\n}\nfunction assertModuleSpecifier(node, opts) {\n  assert(\"ModuleSpecifier\", node, opts);\n}\nfunction assertAccessor(node, opts) {\n  assert(\"Accessor\", node, opts);\n}\nfunction assertPrivate(node, opts) {\n  assert(\"Private\", node, opts);\n}\nfunction assertFlow(node, opts) {\n  assert(\"Flow\", node, opts);\n}\nfunction assertFlowType(node, opts) {\n  assert(\"FlowType\", node, opts);\n}\nfunction assertFlowBaseAnnotation(node, opts) {\n  assert(\"FlowBaseAnnotation\", node, opts);\n}\nfunction assertFlowDeclaration(node, opts) {\n  assert(\"FlowDeclaration\", node, opts);\n}\nfunction assertFlowPredicate(node, opts) {\n  assert(\"FlowPredicate\", node, opts);\n}\nfunction assertEnumBody(node, opts) {\n  assert(\"EnumBody\", node, opts);\n}\nfunction assertEnumMember(node, opts) {\n  assert(\"EnumMember\", node, opts);\n}\nfunction assertJSX(node, opts) {\n  assert(\"JSX\", node, opts);\n}\nfunction assertMiscellaneous(node, opts) {\n  assert(\"Miscellaneous\", node, opts);\n}\nfunction assertTypeScript(node, opts) {\n  assert(\"TypeScript\", node, opts);\n}\nfunction assertTSTypeElement(node, opts) {\n  assert(\"TSTypeElement\", node, opts);\n}\nfunction assertTSType(node, opts) {\n  assert(\"TSType\", node, opts);\n}\nfunction assertTSBaseType(node, opts) {\n  assert(\"TSBaseType\", node, opts);\n}\nfunction assertNumberLiteral(node, opts) {\n  (0, _deprecationWarning.default)(\"assertNumberLiteral\", \"assertNumericLiteral\");\n  assert(\"NumberLiteral\", node, opts);\n}\nfunction assertRegexLiteral(node, opts) {\n  (0, _deprecationWarning.default)(\"assertRegexLiteral\", \"assertRegExpLiteral\");\n  assert(\"RegexLiteral\", node, opts);\n}\nfunction assertRestProperty(node, opts) {\n  (0, _deprecationWarning.default)(\"assertRestProperty\", \"assertRestElement\");\n  assert(\"RestProperty\", node, opts);\n}\nfunction assertSpreadProperty(node, opts) {\n  (0, _deprecationWarning.default)(\"assertSpreadProperty\", \"assertSpreadElement\");\n  assert(\"SpreadProperty\", node, opts);\n}\nfunction assertModuleDeclaration(node, opts) {\n  (0, _deprecationWarning.default)(\"assertModuleDeclaration\", \"assertImportOrExportDeclaration\");\n  assert(\"ModuleDeclaration\", node, opts);\n}","map":{"version":3,"names":["_is","require","_deprecationWarning","assert","type","node","opts","default","Error","JSON","stringify","assertArrayExpression","assertAssignmentExpression","assertBinaryExpression","assertInterpreterDirective","assertDirective","assertDirectiveLiteral","assertBlockStatement","assertBreakStatement","assertCallExpression","assertCatchClause","assertConditionalExpression","assertContinueStatement","assertDebuggerStatement","assertDoWhileStatement","assertEmptyStatement","assertExpressionStatement","assertFile","assertForInStatement","assertForStatement","assertFunctionDeclaration","assertFunctionExpression","assertIdentifier","assertIfStatement","assertLabeledStatement","assertStringLiteral","assertNumericLiteral","assertNullLiteral","assertBooleanLiteral","assertRegExpLiteral","assertLogicalExpression","assertMemberExpression","assertNewExpression","assertProgram","assertObjectExpression","assertObjectMethod","assertObjectProperty","assertRestElement","assertReturnStatement","assertSequenceExpression","assertParenthesizedExpression","assertSwitchCase","assertSwitchStatement","assertThisExpression","assertThrowStatement","assertTryStatement","assertUnaryExpression","assertUpdateExpression","assertVariableDeclaration","assertVariableDeclarator","assertWhileStatement","assertWithStatement","assertAssignmentPattern","assertArrayPattern","assertArrowFunctionExpression","assertClassBody","assertClassExpression","assertClassDeclaration","assertExportAllDeclaration","assertExportDefaultDeclaration","assertExportNamedDeclaration","assertExportSpecifier","assertForOfStatement","assertImportDeclaration","assertImportDefaultSpecifier","assertImportNamespaceSpecifier","assertImportSpecifier","assertImportExpression","assertMetaProperty","assertClassMethod","assertObjectPattern","assertSpreadElement","assertSuper","assertTaggedTemplateExpression","assertTemplateElement","assertTemplateLiteral","assertYieldExpression","assertAwaitExpression","assertImport","assertBigIntLiteral","assertExportNamespaceSpecifier","assertOptionalMemberExpression","assertOptionalCallExpression","assertClassProperty","assertClassAccessorProperty","assertClassPrivateProperty","assertClassPrivateMethod","assertPrivateName","assertStaticBlock","assertAnyTypeAnnotation","assertArrayTypeAnnotation","assertBooleanTypeAnnotation","assertBooleanLiteralTypeAnnotation","assertNullLiteralTypeAnnotation","assertClassImplements","assertDeclareClass","assertDeclareFunction","assertDeclareInterface","assertDeclareModule","assertDeclareModuleExports","assertDeclareTypeAlias","assertDeclareOpaqueType","assertDeclareVariable","assertDeclareExportDeclaration","assertDeclareExportAllDeclaration","assertDeclaredPredicate","assertExistsTypeAnnotation","assertFunctionTypeAnnotation","assertFunctionTypeParam","assertGenericTypeAnnotation","assertInferredPredicate","assertInterfaceExtends","assertInterfaceDeclaration","assertInterfaceTypeAnnotation","assertIntersectionTypeAnnotation","assertMixedTypeAnnotation","assertEmptyTypeAnnotation","assertNullableTypeAnnotation","assertNumberLiteralTypeAnnotation","assertNumberTypeAnnotation","assertObjectTypeAnnotation","assertObjectTypeInternalSlot","assertObjectTypeCallProperty","assertObjectTypeIndexer","assertObjectTypeProperty","assertObjectTypeSpreadProperty","assertOpaqueType","assertQualifiedTypeIdentifier","assertStringLiteralTypeAnnotation","assertStringTypeAnnotation","assertSymbolTypeAnnotation","assertThisTypeAnnotation","assertTupleTypeAnnotation","assertTypeofTypeAnnotation","assertTypeAlias","assertTypeAnnotation","assertTypeCastExpression","assertTypeParameter","assertTypeParameterDeclaration","assertTypeParameterInstantiation","assertUnionTypeAnnotation","assertVariance","assertVoidTypeAnnotation","assertEnumDeclaration","assertEnumBooleanBody","assertEnumNumberBody","assertEnumStringBody","assertEnumSymbolBody","assertEnumBooleanMember","assertEnumNumberMember","assertEnumStringMember","assertEnumDefaultedMember","assertIndexedAccessType","assertOptionalIndexedAccessType","assertJSXAttribute","assertJSXClosingElement","assertJSXElement","assertJSXEmptyExpression","assertJSXExpressionContainer","assertJSXSpreadChild","assertJSXIdentifier","assertJSXMemberExpression","assertJSXNamespacedName","assertJSXOpeningElement","assertJSXSpreadAttribute","assertJSXText","assertJSXFragment","assertJSXOpeningFragment","assertJSXClosingFragment","assertNoop","assertPlaceholder","assertV8IntrinsicIdentifier","assertArgumentPlaceholder","assertBindExpression","assertImportAttribute","assertDecorator","assertDoExpression","assertExportDefaultSpecifier","assertRecordExpression","assertTupleExpression","assertDecimalLiteral","assertModuleExpression","assertTopicReference","assertPipelineTopicExpression","assertPipelineBareFunction","assertPipelinePrimaryTopicReference","assertTSParameterProperty","assertTSDeclareFunction","assertTSDeclareMethod","assertTSQualifiedName","assertTSCallSignatureDeclaration","assertTSConstructSignatureDeclaration","assertTSPropertySignature","assertTSMethodSignature","assertTSIndexSignature","assertTSAnyKeyword","assertTSBooleanKeyword","assertTSBigIntKeyword","assertTSIntrinsicKeyword","assertTSNeverKeyword","assertTSNullKeyword","assertTSNumberKeyword","assertTSObjectKeyword","assertTSStringKeyword","assertTSSymbolKeyword","assertTSUndefinedKeyword","assertTSUnknownKeyword","assertTSVoidKeyword","assertTSThisType","assertTSFunctionType","assertTSConstructorType","assertTSTypeReference","assertTSTypePredicate","assertTSTypeQuery","assertTSTypeLiteral","assertTSArrayType","assertTSTupleType","assertTSOptionalType","assertTSRestType","assertTSNamedTupleMember","assertTSUnionType","assertTSIntersectionType","assertTSConditionalType","assertTSInferType","assertTSParenthesizedType","assertTSTypeOperator","assertTSIndexedAccessType","assertTSMappedType","assertTSLiteralType","assertTSExpressionWithTypeArguments","assertTSInterfaceDeclaration","assertTSInterfaceBody","assertTSTypeAliasDeclaration","assertTSInstantiationExpression","assertTSAsExpression","assertTSSatisfiesExpression","assertTSTypeAssertion","assertTSEnumDeclaration","assertTSEnumMember","assertTSModuleDeclaration","assertTSModuleBlock","assertTSImportType","assertTSImportEqualsDeclaration","assertTSExternalModuleReference","assertTSNonNullExpression","assertTSExportAssignment","assertTSNamespaceExportDeclaration","assertTSTypeAnnotation","assertTSTypeParameterInstantiation","assertTSTypeParameterDeclaration","assertTSTypeParameter","assertStandardized","assertExpression","assertBinary","assertScopable","assertBlockParent","assertBlock","assertStatement","assertTerminatorless","assertCompletionStatement","assertConditional","assertLoop","assertWhile","assertExpressionWrapper","assertFor","assertForXStatement","assertFunction","assertFunctionParent","assertPureish","assertDeclaration","assertPatternLike","assertLVal","assertTSEntityName","assertLiteral","assertImmutable","assertUserWhitespacable","assertMethod","assertObjectMember","assertProperty","assertUnaryLike","assertPattern","assertClass","assertImportOrExportDeclaration","assertExportDeclaration","assertModuleSpecifier","assertAccessor","assertPrivate","assertFlow","assertFlowType","assertFlowBaseAnnotation","assertFlowDeclaration","assertFlowPredicate","assertEnumBody","assertEnumMember","assertJSX","assertMiscellaneous","assertTypeScript","assertTSTypeElement","assertTSType","assertTSBaseType","assertNumberLiteral","assertRegexLiteral","assertRestProperty","assertSpreadProperty","assertModuleDeclaration"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@babel\\types\\src\\asserts\\generated\\index.ts"],"sourcesContent":["/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      `Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` +\n        `but instead got \"${node.type}\".`,\n    );\n  }\n}\n\nexport function assertArrayExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayExpression {\n  assert(\"ArrayExpression\", node, opts);\n}\nexport function assertAssignmentExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentExpression {\n  assert(\"AssignmentExpression\", node, opts);\n}\nexport function assertBinaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BinaryExpression {\n  assert(\"BinaryExpression\", node, opts);\n}\nexport function assertInterpreterDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterpreterDirective {\n  assert(\"InterpreterDirective\", node, opts);\n}\nexport function assertDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Directive {\n  assert(\"Directive\", node, opts);\n}\nexport function assertDirectiveLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DirectiveLiteral {\n  assert(\"DirectiveLiteral\", node, opts);\n}\nexport function assertBlockStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockStatement {\n  assert(\"BlockStatement\", node, opts);\n}\nexport function assertBreakStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BreakStatement {\n  assert(\"BreakStatement\", node, opts);\n}\nexport function assertCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CallExpression {\n  assert(\"CallExpression\", node, opts);\n}\nexport function assertCatchClause(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CatchClause {\n  assert(\"CatchClause\", node, opts);\n}\nexport function assertConditionalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ConditionalExpression {\n  assert(\"ConditionalExpression\", node, opts);\n}\nexport function assertContinueStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ContinueStatement {\n  assert(\"ContinueStatement\", node, opts);\n}\nexport function assertDebuggerStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DebuggerStatement {\n  assert(\"DebuggerStatement\", node, opts);\n}\nexport function assertDoWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoWhileStatement {\n  assert(\"DoWhileStatement\", node, opts);\n}\nexport function assertEmptyStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyStatement {\n  assert(\"EmptyStatement\", node, opts);\n}\nexport function assertExpressionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionStatement {\n  assert(\"ExpressionStatement\", node, opts);\n}\nexport function assertFile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.File {\n  assert(\"File\", node, opts);\n}\nexport function assertForInStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForInStatement {\n  assert(\"ForInStatement\", node, opts);\n}\nexport function assertForStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForStatement {\n  assert(\"ForStatement\", node, opts);\n}\nexport function assertFunctionDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionDeclaration {\n  assert(\"FunctionDeclaration\", node, opts);\n}\nexport function assertFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionExpression {\n  assert(\"FunctionExpression\", node, opts);\n}\nexport function assertIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Identifier {\n  assert(\"Identifier\", node, opts);\n}\nexport function assertIfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IfStatement {\n  assert(\"IfStatement\", node, opts);\n}\nexport function assertLabeledStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LabeledStatement {\n  assert(\"LabeledStatement\", node, opts);\n}\nexport function assertStringLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteral {\n  assert(\"StringLiteral\", node, opts);\n}\nexport function assertNumericLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumericLiteral {\n  assert(\"NumericLiteral\", node, opts);\n}\nexport function assertNullLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteral {\n  assert(\"NullLiteral\", node, opts);\n}\nexport function assertBooleanLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteral {\n  assert(\"BooleanLiteral\", node, opts);\n}\nexport function assertRegExpLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RegExpLiteral {\n  assert(\"RegExpLiteral\", node, opts);\n}\nexport function assertLogicalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LogicalExpression {\n  assert(\"LogicalExpression\", node, opts);\n}\nexport function assertMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MemberExpression {\n  assert(\"MemberExpression\", node, opts);\n}\nexport function assertNewExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NewExpression {\n  assert(\"NewExpression\", node, opts);\n}\nexport function assertProgram(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Program {\n  assert(\"Program\", node, opts);\n}\nexport function assertObjectExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectExpression {\n  assert(\"ObjectExpression\", node, opts);\n}\nexport function assertObjectMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMethod {\n  assert(\"ObjectMethod\", node, opts);\n}\nexport function assertObjectProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectProperty {\n  assert(\"ObjectProperty\", node, opts);\n}\nexport function assertRestElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RestElement {\n  assert(\"RestElement\", node, opts);\n}\nexport function assertReturnStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ReturnStatement {\n  assert(\"ReturnStatement\", node, opts);\n}\nexport function assertSequenceExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SequenceExpression {\n  assert(\"SequenceExpression\", node, opts);\n}\nexport function assertParenthesizedExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ParenthesizedExpression {\n  assert(\"ParenthesizedExpression\", node, opts);\n}\nexport function assertSwitchCase(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchCase {\n  assert(\"SwitchCase\", node, opts);\n}\nexport function assertSwitchStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchStatement {\n  assert(\"SwitchStatement\", node, opts);\n}\nexport function assertThisExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisExpression {\n  assert(\"ThisExpression\", node, opts);\n}\nexport function assertThrowStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThrowStatement {\n  assert(\"ThrowStatement\", node, opts);\n}\nexport function assertTryStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TryStatement {\n  assert(\"TryStatement\", node, opts);\n}\nexport function assertUnaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryExpression {\n  assert(\"UnaryExpression\", node, opts);\n}\nexport function assertUpdateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UpdateExpression {\n  assert(\"UpdateExpression\", node, opts);\n}\nexport function assertVariableDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclaration {\n  assert(\"VariableDeclaration\", node, opts);\n}\nexport function assertVariableDeclarator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclarator {\n  assert(\"VariableDeclarator\", node, opts);\n}\nexport function assertWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WhileStatement {\n  assert(\"WhileStatement\", node, opts);\n}\nexport function assertWithStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WithStatement {\n  assert(\"WithStatement\", node, opts);\n}\nexport function assertAssignmentPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentPattern {\n  assert(\"AssignmentPattern\", node, opts);\n}\nexport function assertArrayPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayPattern {\n  assert(\"ArrayPattern\", node, opts);\n}\nexport function assertArrowFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrowFunctionExpression {\n  assert(\"ArrowFunctionExpression\", node, opts);\n}\nexport function assertClassBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassBody {\n  assert(\"ClassBody\", node, opts);\n}\nexport function assertClassExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassExpression {\n  assert(\"ClassExpression\", node, opts);\n}\nexport function assertClassDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassDeclaration {\n  assert(\"ClassDeclaration\", node, opts);\n}\nexport function assertExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportAllDeclaration {\n  assert(\"ExportAllDeclaration\", node, opts);\n}\nexport function assertExportDefaultDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultDeclaration {\n  assert(\"ExportDefaultDeclaration\", node, opts);\n}\nexport function assertExportNamedDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamedDeclaration {\n  assert(\"ExportNamedDeclaration\", node, opts);\n}\nexport function assertExportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportSpecifier {\n  assert(\"ExportSpecifier\", node, opts);\n}\nexport function assertForOfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForOfStatement {\n  assert(\"ForOfStatement\", node, opts);\n}\nexport function assertImportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDeclaration {\n  assert(\"ImportDeclaration\", node, opts);\n}\nexport function assertImportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDefaultSpecifier {\n  assert(\"ImportDefaultSpecifier\", node, opts);\n}\nexport function assertImportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportNamespaceSpecifier {\n  assert(\"ImportNamespaceSpecifier\", node, opts);\n}\nexport function assertImportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportSpecifier {\n  assert(\"ImportSpecifier\", node, opts);\n}\nexport function assertImportExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportExpression {\n  assert(\"ImportExpression\", node, opts);\n}\nexport function assertMetaProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MetaProperty {\n  assert(\"MetaProperty\", node, opts);\n}\nexport function assertClassMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassMethod {\n  assert(\"ClassMethod\", node, opts);\n}\nexport function assertObjectPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectPattern {\n  assert(\"ObjectPattern\", node, opts);\n}\nexport function assertSpreadElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SpreadElement {\n  assert(\"SpreadElement\", node, opts);\n}\nexport function assertSuper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Super {\n  assert(\"Super\", node, opts);\n}\nexport function assertTaggedTemplateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TaggedTemplateExpression {\n  assert(\"TaggedTemplateExpression\", node, opts);\n}\nexport function assertTemplateElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateElement {\n  assert(\"TemplateElement\", node, opts);\n}\nexport function assertTemplateLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateLiteral {\n  assert(\"TemplateLiteral\", node, opts);\n}\nexport function assertYieldExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.YieldExpression {\n  assert(\"YieldExpression\", node, opts);\n}\nexport function assertAwaitExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AwaitExpression {\n  assert(\"AwaitExpression\", node, opts);\n}\nexport function assertImport(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Import {\n  assert(\"Import\", node, opts);\n}\nexport function assertBigIntLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BigIntLiteral {\n  assert(\"BigIntLiteral\", node, opts);\n}\nexport function assertExportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamespaceSpecifier {\n  assert(\"ExportNamespaceSpecifier\", node, opts);\n}\nexport function assertOptionalMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalMemberExpression {\n  assert(\"OptionalMemberExpression\", node, opts);\n}\nexport function assertOptionalCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalCallExpression {\n  assert(\"OptionalCallExpression\", node, opts);\n}\nexport function assertClassProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassProperty {\n  assert(\"ClassProperty\", node, opts);\n}\nexport function assertClassAccessorProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassAccessorProperty {\n  assert(\"ClassAccessorProperty\", node, opts);\n}\nexport function assertClassPrivateProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateProperty {\n  assert(\"ClassPrivateProperty\", node, opts);\n}\nexport function assertClassPrivateMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateMethod {\n  assert(\"ClassPrivateMethod\", node, opts);\n}\nexport function assertPrivateName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PrivateName {\n  assert(\"PrivateName\", node, opts);\n}\nexport function assertStaticBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StaticBlock {\n  assert(\"StaticBlock\", node, opts);\n}\nexport function assertAnyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AnyTypeAnnotation {\n  assert(\"AnyTypeAnnotation\", node, opts);\n}\nexport function assertArrayTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayTypeAnnotation {\n  assert(\"ArrayTypeAnnotation\", node, opts);\n}\nexport function assertBooleanTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanTypeAnnotation {\n  assert(\"BooleanTypeAnnotation\", node, opts);\n}\nexport function assertBooleanLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteralTypeAnnotation {\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNullLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteralTypeAnnotation {\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\n}\nexport function assertClassImplements(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassImplements {\n  assert(\"ClassImplements\", node, opts);\n}\nexport function assertDeclareClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareClass {\n  assert(\"DeclareClass\", node, opts);\n}\nexport function assertDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareFunction {\n  assert(\"DeclareFunction\", node, opts);\n}\nexport function assertDeclareInterface(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareInterface {\n  assert(\"DeclareInterface\", node, opts);\n}\nexport function assertDeclareModule(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModule {\n  assert(\"DeclareModule\", node, opts);\n}\nexport function assertDeclareModuleExports(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModuleExports {\n  assert(\"DeclareModuleExports\", node, opts);\n}\nexport function assertDeclareTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareTypeAlias {\n  assert(\"DeclareTypeAlias\", node, opts);\n}\nexport function assertDeclareOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareOpaqueType {\n  assert(\"DeclareOpaqueType\", node, opts);\n}\nexport function assertDeclareVariable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareVariable {\n  assert(\"DeclareVariable\", node, opts);\n}\nexport function assertDeclareExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportDeclaration {\n  assert(\"DeclareExportDeclaration\", node, opts);\n}\nexport function assertDeclareExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportAllDeclaration {\n  assert(\"DeclareExportAllDeclaration\", node, opts);\n}\nexport function assertDeclaredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclaredPredicate {\n  assert(\"DeclaredPredicate\", node, opts);\n}\nexport function assertExistsTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExistsTypeAnnotation {\n  assert(\"ExistsTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeAnnotation {\n  assert(\"FunctionTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeParam(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeParam {\n  assert(\"FunctionTypeParam\", node, opts);\n}\nexport function assertGenericTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.GenericTypeAnnotation {\n  assert(\"GenericTypeAnnotation\", node, opts);\n}\nexport function assertInferredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InferredPredicate {\n  assert(\"InferredPredicate\", node, opts);\n}\nexport function assertInterfaceExtends(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceExtends {\n  assert(\"InterfaceExtends\", node, opts);\n}\nexport function assertInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceDeclaration {\n  assert(\"InterfaceDeclaration\", node, opts);\n}\nexport function assertInterfaceTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceTypeAnnotation {\n  assert(\"InterfaceTypeAnnotation\", node, opts);\n}\nexport function assertIntersectionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IntersectionTypeAnnotation {\n  assert(\"IntersectionTypeAnnotation\", node, opts);\n}\nexport function assertMixedTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MixedTypeAnnotation {\n  assert(\"MixedTypeAnnotation\", node, opts);\n}\nexport function assertEmptyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyTypeAnnotation {\n  assert(\"EmptyTypeAnnotation\", node, opts);\n}\nexport function assertNullableTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullableTypeAnnotation {\n  assert(\"NullableTypeAnnotation\", node, opts);\n}\nexport function assertNumberLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberLiteralTypeAnnotation {\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNumberTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberTypeAnnotation {\n  assert(\"NumberTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeAnnotation {\n  assert(\"ObjectTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeInternalSlot(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeInternalSlot {\n  assert(\"ObjectTypeInternalSlot\", node, opts);\n}\nexport function assertObjectTypeCallProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeCallProperty {\n  assert(\"ObjectTypeCallProperty\", node, opts);\n}\nexport function assertObjectTypeIndexer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeIndexer {\n  assert(\"ObjectTypeIndexer\", node, opts);\n}\nexport function assertObjectTypeProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeProperty {\n  assert(\"ObjectTypeProperty\", node, opts);\n}\nexport function assertObjectTypeSpreadProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeSpreadProperty {\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\n}\nexport function assertOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OpaqueType {\n  assert(\"OpaqueType\", node, opts);\n}\nexport function assertQualifiedTypeIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.QualifiedTypeIdentifier {\n  assert(\"QualifiedTypeIdentifier\", node, opts);\n}\nexport function assertStringLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteralTypeAnnotation {\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\n}\nexport function assertStringTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringTypeAnnotation {\n  assert(\"StringTypeAnnotation\", node, opts);\n}\nexport function assertSymbolTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SymbolTypeAnnotation {\n  assert(\"SymbolTypeAnnotation\", node, opts);\n}\nexport function assertThisTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisTypeAnnotation {\n  assert(\"ThisTypeAnnotation\", node, opts);\n}\nexport function assertTupleTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleTypeAnnotation {\n  assert(\"TupleTypeAnnotation\", node, opts);\n}\nexport function assertTypeofTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeofTypeAnnotation {\n  assert(\"TypeofTypeAnnotation\", node, opts);\n}\nexport function assertTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAlias {\n  assert(\"TypeAlias\", node, opts);\n}\nexport function assertTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAnnotation {\n  assert(\"TypeAnnotation\", node, opts);\n}\nexport function assertTypeCastExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeCastExpression {\n  assert(\"TypeCastExpression\", node, opts);\n}\nexport function assertTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameter {\n  assert(\"TypeParameter\", node, opts);\n}\nexport function assertTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterDeclaration {\n  assert(\"TypeParameterDeclaration\", node, opts);\n}\nexport function assertTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterInstantiation {\n  assert(\"TypeParameterInstantiation\", node, opts);\n}\nexport function assertUnionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnionTypeAnnotation {\n  assert(\"UnionTypeAnnotation\", node, opts);\n}\nexport function assertVariance(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Variance {\n  assert(\"Variance\", node, opts);\n}\nexport function assertVoidTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VoidTypeAnnotation {\n  assert(\"VoidTypeAnnotation\", node, opts);\n}\nexport function assertEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDeclaration {\n  assert(\"EnumDeclaration\", node, opts);\n}\nexport function assertEnumBooleanBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanBody {\n  assert(\"EnumBooleanBody\", node, opts);\n}\nexport function assertEnumNumberBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberBody {\n  assert(\"EnumNumberBody\", node, opts);\n}\nexport function assertEnumStringBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringBody {\n  assert(\"EnumStringBody\", node, opts);\n}\nexport function assertEnumSymbolBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumSymbolBody {\n  assert(\"EnumSymbolBody\", node, opts);\n}\nexport function assertEnumBooleanMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanMember {\n  assert(\"EnumBooleanMember\", node, opts);\n}\nexport function assertEnumNumberMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberMember {\n  assert(\"EnumNumberMember\", node, opts);\n}\nexport function assertEnumStringMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringMember {\n  assert(\"EnumStringMember\", node, opts);\n}\nexport function assertEnumDefaultedMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDefaultedMember {\n  assert(\"EnumDefaultedMember\", node, opts);\n}\nexport function assertIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IndexedAccessType {\n  assert(\"IndexedAccessType\", node, opts);\n}\nexport function assertOptionalIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalIndexedAccessType {\n  assert(\"OptionalIndexedAccessType\", node, opts);\n}\nexport function assertJSXAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXAttribute {\n  assert(\"JSXAttribute\", node, opts);\n}\nexport function assertJSXClosingElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingElement {\n  assert(\"JSXClosingElement\", node, opts);\n}\nexport function assertJSXElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXElement {\n  assert(\"JSXElement\", node, opts);\n}\nexport function assertJSXEmptyExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXEmptyExpression {\n  assert(\"JSXEmptyExpression\", node, opts);\n}\nexport function assertJSXExpressionContainer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXExpressionContainer {\n  assert(\"JSXExpressionContainer\", node, opts);\n}\nexport function assertJSXSpreadChild(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadChild {\n  assert(\"JSXSpreadChild\", node, opts);\n}\nexport function assertJSXIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXIdentifier {\n  assert(\"JSXIdentifier\", node, opts);\n}\nexport function assertJSXMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXMemberExpression {\n  assert(\"JSXMemberExpression\", node, opts);\n}\nexport function assertJSXNamespacedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXNamespacedName {\n  assert(\"JSXNamespacedName\", node, opts);\n}\nexport function assertJSXOpeningElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningElement {\n  assert(\"JSXOpeningElement\", node, opts);\n}\nexport function assertJSXSpreadAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadAttribute {\n  assert(\"JSXSpreadAttribute\", node, opts);\n}\nexport function assertJSXText(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXText {\n  assert(\"JSXText\", node, opts);\n}\nexport function assertJSXFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXFragment {\n  assert(\"JSXFragment\", node, opts);\n}\nexport function assertJSXOpeningFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningFragment {\n  assert(\"JSXOpeningFragment\", node, opts);\n}\nexport function assertJSXClosingFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingFragment {\n  assert(\"JSXClosingFragment\", node, opts);\n}\nexport function assertNoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Noop {\n  assert(\"Noop\", node, opts);\n}\nexport function assertPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Placeholder {\n  assert(\"Placeholder\", node, opts);\n}\nexport function assertV8IntrinsicIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.V8IntrinsicIdentifier {\n  assert(\"V8IntrinsicIdentifier\", node, opts);\n}\nexport function assertArgumentPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArgumentPlaceholder {\n  assert(\"ArgumentPlaceholder\", node, opts);\n}\nexport function assertBindExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BindExpression {\n  assert(\"BindExpression\", node, opts);\n}\nexport function assertImportAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportAttribute {\n  assert(\"ImportAttribute\", node, opts);\n}\nexport function assertDecorator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Decorator {\n  assert(\"Decorator\", node, opts);\n}\nexport function assertDoExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoExpression {\n  assert(\"DoExpression\", node, opts);\n}\nexport function assertExportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultSpecifier {\n  assert(\"ExportDefaultSpecifier\", node, opts);\n}\nexport function assertRecordExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RecordExpression {\n  assert(\"RecordExpression\", node, opts);\n}\nexport function assertTupleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleExpression {\n  assert(\"TupleExpression\", node, opts);\n}\nexport function assertDecimalLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DecimalLiteral {\n  assert(\"DecimalLiteral\", node, opts);\n}\nexport function assertModuleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleExpression {\n  assert(\"ModuleExpression\", node, opts);\n}\nexport function assertTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TopicReference {\n  assert(\"TopicReference\", node, opts);\n}\nexport function assertPipelineTopicExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineTopicExpression {\n  assert(\"PipelineTopicExpression\", node, opts);\n}\nexport function assertPipelineBareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineBareFunction {\n  assert(\"PipelineBareFunction\", node, opts);\n}\nexport function assertPipelinePrimaryTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelinePrimaryTopicReference {\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\n}\nexport function assertTSParameterProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParameterProperty {\n  assert(\"TSParameterProperty\", node, opts);\n}\nexport function assertTSDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareFunction {\n  assert(\"TSDeclareFunction\", node, opts);\n}\nexport function assertTSDeclareMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareMethod {\n  assert(\"TSDeclareMethod\", node, opts);\n}\nexport function assertTSQualifiedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSQualifiedName {\n  assert(\"TSQualifiedName\", node, opts);\n}\nexport function assertTSCallSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSCallSignatureDeclaration {\n  assert(\"TSCallSignatureDeclaration\", node, opts);\n}\nexport function assertTSConstructSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructSignatureDeclaration {\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\n}\nexport function assertTSPropertySignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSPropertySignature {\n  assert(\"TSPropertySignature\", node, opts);\n}\nexport function assertTSMethodSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMethodSignature {\n  assert(\"TSMethodSignature\", node, opts);\n}\nexport function assertTSIndexSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexSignature {\n  assert(\"TSIndexSignature\", node, opts);\n}\nexport function assertTSAnyKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAnyKeyword {\n  assert(\"TSAnyKeyword\", node, opts);\n}\nexport function assertTSBooleanKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBooleanKeyword {\n  assert(\"TSBooleanKeyword\", node, opts);\n}\nexport function assertTSBigIntKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBigIntKeyword {\n  assert(\"TSBigIntKeyword\", node, opts);\n}\nexport function assertTSIntrinsicKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntrinsicKeyword {\n  assert(\"TSIntrinsicKeyword\", node, opts);\n}\nexport function assertTSNeverKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNeverKeyword {\n  assert(\"TSNeverKeyword\", node, opts);\n}\nexport function assertTSNullKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNullKeyword {\n  assert(\"TSNullKeyword\", node, opts);\n}\nexport function assertTSNumberKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNumberKeyword {\n  assert(\"TSNumberKeyword\", node, opts);\n}\nexport function assertTSObjectKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSObjectKeyword {\n  assert(\"TSObjectKeyword\", node, opts);\n}\nexport function assertTSStringKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSStringKeyword {\n  assert(\"TSStringKeyword\", node, opts);\n}\nexport function assertTSSymbolKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSymbolKeyword {\n  assert(\"TSSymbolKeyword\", node, opts);\n}\nexport function assertTSUndefinedKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUndefinedKeyword {\n  assert(\"TSUndefinedKeyword\", node, opts);\n}\nexport function assertTSUnknownKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnknownKeyword {\n  assert(\"TSUnknownKeyword\", node, opts);\n}\nexport function assertTSVoidKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSVoidKeyword {\n  assert(\"TSVoidKeyword\", node, opts);\n}\nexport function assertTSThisType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSThisType {\n  assert(\"TSThisType\", node, opts);\n}\nexport function assertTSFunctionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSFunctionType {\n  assert(\"TSFunctionType\", node, opts);\n}\nexport function assertTSConstructorType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructorType {\n  assert(\"TSConstructorType\", node, opts);\n}\nexport function assertTSTypeReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeReference {\n  assert(\"TSTypeReference\", node, opts);\n}\nexport function assertTSTypePredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypePredicate {\n  assert(\"TSTypePredicate\", node, opts);\n}\nexport function assertTSTypeQuery(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeQuery {\n  assert(\"TSTypeQuery\", node, opts);\n}\nexport function assertTSTypeLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeLiteral {\n  assert(\"TSTypeLiteral\", node, opts);\n}\nexport function assertTSArrayType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSArrayType {\n  assert(\"TSArrayType\", node, opts);\n}\nexport function assertTSTupleType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTupleType {\n  assert(\"TSTupleType\", node, opts);\n}\nexport function assertTSOptionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSOptionalType {\n  assert(\"TSOptionalType\", node, opts);\n}\nexport function assertTSRestType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSRestType {\n  assert(\"TSRestType\", node, opts);\n}\nexport function assertTSNamedTupleMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamedTupleMember {\n  assert(\"TSNamedTupleMember\", node, opts);\n}\nexport function assertTSUnionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnionType {\n  assert(\"TSUnionType\", node, opts);\n}\nexport function assertTSIntersectionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntersectionType {\n  assert(\"TSIntersectionType\", node, opts);\n}\nexport function assertTSConditionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConditionalType {\n  assert(\"TSConditionalType\", node, opts);\n}\nexport function assertTSInferType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInferType {\n  assert(\"TSInferType\", node, opts);\n}\nexport function assertTSParenthesizedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParenthesizedType {\n  assert(\"TSParenthesizedType\", node, opts);\n}\nexport function assertTSTypeOperator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeOperator {\n  assert(\"TSTypeOperator\", node, opts);\n}\nexport function assertTSIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexedAccessType {\n  assert(\"TSIndexedAccessType\", node, opts);\n}\nexport function assertTSMappedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMappedType {\n  assert(\"TSMappedType\", node, opts);\n}\nexport function assertTSLiteralType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSLiteralType {\n  assert(\"TSLiteralType\", node, opts);\n}\nexport function assertTSExpressionWithTypeArguments(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExpressionWithTypeArguments {\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\n}\nexport function assertTSInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceDeclaration {\n  assert(\"TSInterfaceDeclaration\", node, opts);\n}\nexport function assertTSInterfaceBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceBody {\n  assert(\"TSInterfaceBody\", node, opts);\n}\nexport function assertTSTypeAliasDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAliasDeclaration {\n  assert(\"TSTypeAliasDeclaration\", node, opts);\n}\nexport function assertTSInstantiationExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInstantiationExpression {\n  assert(\"TSInstantiationExpression\", node, opts);\n}\nexport function assertTSAsExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAsExpression {\n  assert(\"TSAsExpression\", node, opts);\n}\nexport function assertTSSatisfiesExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSatisfiesExpression {\n  assert(\"TSSatisfiesExpression\", node, opts);\n}\nexport function assertTSTypeAssertion(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAssertion {\n  assert(\"TSTypeAssertion\", node, opts);\n}\nexport function assertTSEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumDeclaration {\n  assert(\"TSEnumDeclaration\", node, opts);\n}\nexport function assertTSEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumMember {\n  assert(\"TSEnumMember\", node, opts);\n}\nexport function assertTSModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleDeclaration {\n  assert(\"TSModuleDeclaration\", node, opts);\n}\nexport function assertTSModuleBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleBlock {\n  assert(\"TSModuleBlock\", node, opts);\n}\nexport function assertTSImportType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportType {\n  assert(\"TSImportType\", node, opts);\n}\nexport function assertTSImportEqualsDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportEqualsDeclaration {\n  assert(\"TSImportEqualsDeclaration\", node, opts);\n}\nexport function assertTSExternalModuleReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExternalModuleReference {\n  assert(\"TSExternalModuleReference\", node, opts);\n}\nexport function assertTSNonNullExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNonNullExpression {\n  assert(\"TSNonNullExpression\", node, opts);\n}\nexport function assertTSExportAssignment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExportAssignment {\n  assert(\"TSExportAssignment\", node, opts);\n}\nexport function assertTSNamespaceExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamespaceExportDeclaration {\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\n}\nexport function assertTSTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAnnotation {\n  assert(\"TSTypeAnnotation\", node, opts);\n}\nexport function assertTSTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterInstantiation {\n  assert(\"TSTypeParameterInstantiation\", node, opts);\n}\nexport function assertTSTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterDeclaration {\n  assert(\"TSTypeParameterDeclaration\", node, opts);\n}\nexport function assertTSTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameter {\n  assert(\"TSTypeParameter\", node, opts);\n}\nexport function assertStandardized(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Standardized {\n  assert(\"Standardized\", node, opts);\n}\nexport function assertExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Expression {\n  assert(\"Expression\", node, opts);\n}\nexport function assertBinary(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Binary {\n  assert(\"Binary\", node, opts);\n}\nexport function assertScopable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Scopable {\n  assert(\"Scopable\", node, opts);\n}\nexport function assertBlockParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockParent {\n  assert(\"BlockParent\", node, opts);\n}\nexport function assertBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Block {\n  assert(\"Block\", node, opts);\n}\nexport function assertStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Statement {\n  assert(\"Statement\", node, opts);\n}\nexport function assertTerminatorless(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Terminatorless {\n  assert(\"Terminatorless\", node, opts);\n}\nexport function assertCompletionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CompletionStatement {\n  assert(\"CompletionStatement\", node, opts);\n}\nexport function assertConditional(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Conditional {\n  assert(\"Conditional\", node, opts);\n}\nexport function assertLoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Loop {\n  assert(\"Loop\", node, opts);\n}\nexport function assertWhile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.While {\n  assert(\"While\", node, opts);\n}\nexport function assertExpressionWrapper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionWrapper {\n  assert(\"ExpressionWrapper\", node, opts);\n}\nexport function assertFor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.For {\n  assert(\"For\", node, opts);\n}\nexport function assertForXStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForXStatement {\n  assert(\"ForXStatement\", node, opts);\n}\nexport function assertFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Function {\n  assert(\"Function\", node, opts);\n}\nexport function assertFunctionParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionParent {\n  assert(\"FunctionParent\", node, opts);\n}\nexport function assertPureish(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pureish {\n  assert(\"Pureish\", node, opts);\n}\nexport function assertDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Declaration {\n  assert(\"Declaration\", node, opts);\n}\nexport function assertPatternLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PatternLike {\n  assert(\"PatternLike\", node, opts);\n}\nexport function assertLVal(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LVal {\n  assert(\"LVal\", node, opts);\n}\nexport function assertTSEntityName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEntityName {\n  assert(\"TSEntityName\", node, opts);\n}\nexport function assertLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Literal {\n  assert(\"Literal\", node, opts);\n}\nexport function assertImmutable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Immutable {\n  assert(\"Immutable\", node, opts);\n}\nexport function assertUserWhitespacable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UserWhitespacable {\n  assert(\"UserWhitespacable\", node, opts);\n}\nexport function assertMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Method {\n  assert(\"Method\", node, opts);\n}\nexport function assertObjectMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMember {\n  assert(\"ObjectMember\", node, opts);\n}\nexport function assertProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Property {\n  assert(\"Property\", node, opts);\n}\nexport function assertUnaryLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryLike {\n  assert(\"UnaryLike\", node, opts);\n}\nexport function assertPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pattern {\n  assert(\"Pattern\", node, opts);\n}\nexport function assertClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Class {\n  assert(\"Class\", node, opts);\n}\nexport function assertImportOrExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportOrExportDeclaration {\n  assert(\"ImportOrExportDeclaration\", node, opts);\n}\nexport function assertExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDeclaration {\n  assert(\"ExportDeclaration\", node, opts);\n}\nexport function assertModuleSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleSpecifier {\n  assert(\"ModuleSpecifier\", node, opts);\n}\nexport function assertAccessor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Accessor {\n  assert(\"Accessor\", node, opts);\n}\nexport function assertPrivate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Private {\n  assert(\"Private\", node, opts);\n}\nexport function assertFlow(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Flow {\n  assert(\"Flow\", node, opts);\n}\nexport function assertFlowType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowType {\n  assert(\"FlowType\", node, opts);\n}\nexport function assertFlowBaseAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowBaseAnnotation {\n  assert(\"FlowBaseAnnotation\", node, opts);\n}\nexport function assertFlowDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowDeclaration {\n  assert(\"FlowDeclaration\", node, opts);\n}\nexport function assertFlowPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowPredicate {\n  assert(\"FlowPredicate\", node, opts);\n}\nexport function assertEnumBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBody {\n  assert(\"EnumBody\", node, opts);\n}\nexport function assertEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumMember {\n  assert(\"EnumMember\", node, opts);\n}\nexport function assertJSX(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSX {\n  assert(\"JSX\", node, opts);\n}\nexport function assertMiscellaneous(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Miscellaneous {\n  assert(\"Miscellaneous\", node, opts);\n}\nexport function assertTypeScript(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeScript {\n  assert(\"TypeScript\", node, opts);\n}\nexport function assertTSTypeElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeElement {\n  assert(\"TSTypeElement\", node, opts);\n}\nexport function assertTSType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSType {\n  assert(\"TSType\", node, opts);\n}\nexport function assertTSBaseType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBaseType {\n  assert(\"TSBaseType\", node, opts);\n}\nexport function assertNumberLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertNumberLiteral\", \"assertNumericLiteral\");\n  assert(\"NumberLiteral\", node, opts);\n}\nexport function assertRegexLiteral(node: any, opts: any): void {\n  deprecationWarning(\"assertRegexLiteral\", \"assertRegExpLiteral\");\n  assert(\"RegexLiteral\", node, opts);\n}\nexport function assertRestProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertRestProperty\", \"assertRestElement\");\n  assert(\"RestProperty\", node, opts);\n}\nexport function assertSpreadProperty(node: any, opts: any): void {\n  deprecationWarning(\"assertSpreadProperty\", \"assertSpreadElement\");\n  assert(\"SpreadProperty\", node, opts);\n}\nexport function assertModuleDeclaration(node: any, opts: any): void {\n  deprecationWarning(\n    \"assertModuleDeclaration\",\n    \"assertImportOrExportDeclaration\",\n  );\n  assert(\"ModuleDeclaration\", node, opts);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAAA,GAAA,GAAAC,OAAA;AAEA,IAAAC,mBAAA,GAAAD,OAAA;AAEA,SAASE,MAAMA,CAACC,IAAY,EAAEC,IAAS,EAAEC,IAAU,EAAQ;EACzD,IAAI,CAAC,IAAAN,GAAA,CAAAO,OAAE,EAACH,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC,EAAE;IACzB,MAAM,IAAIE,KAAK,CACZ,kBAAiBJ,IAAK,iBAAgBK,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAE,IAAG,GAC5D,oBAAmBD,IAAI,CAACD,IAAK,IAClC,CAAC;EACH;AACF;AAEO,SAASO,qBAAqBA,CACnCN,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASM,0BAA0BA,CACxCP,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAASO,sBAAsBA,CACpCR,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASQ,0BAA0BA,CACxCT,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAASS,eAAeA,CAC7BV,IAA+B,EAC/BC,IAAoB,EACS;EAC7BH,MAAM,CAAC,WAAW,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjC;AACO,SAASU,sBAAsBA,CACpCX,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASW,oBAAoBA,CAClCZ,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASY,oBAAoBA,CAClCb,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASa,oBAAoBA,CAClCd,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASc,iBAAiBA,CAC/Bf,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAASe,2BAA2BA,CACzChB,IAA+B,EAC/BC,IAAoB,EACqB;EACzCH,MAAM,CAAC,uBAAuB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7C;AACO,SAASgB,uBAAuBA,CACrCjB,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASiB,uBAAuBA,CACrClB,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASkB,sBAAsBA,CACpCnB,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASmB,oBAAoBA,CAClCpB,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASoB,yBAAyBA,CACvCrB,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASqB,UAAUA,CACxBtB,IAA+B,EAC/BC,IAAoB,EACI;EACxBH,MAAM,CAAC,MAAM,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5B;AACO,SAASsB,oBAAoBA,CAClCvB,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASuB,kBAAkBA,CAChCxB,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASwB,yBAAyBA,CACvCzB,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASyB,wBAAwBA,CACtC1B,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAAS0B,gBAAgBA,CAC9B3B,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAAS2B,iBAAiBA,CAC/B5B,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS4B,sBAAsBA,CACpC7B,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAAS6B,mBAAmBA,CACjC9B,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAAS8B,oBAAoBA,CAClC/B,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAAS+B,iBAAiBA,CAC/BhC,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAASgC,oBAAoBA,CAClCjC,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASiC,mBAAmBA,CACjClC,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASkC,uBAAuBA,CACrCnC,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASmC,sBAAsBA,CACpCpC,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASoC,mBAAmBA,CACjCrC,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASqC,aAAaA,CAC3BtC,IAA+B,EAC/BC,IAAoB,EACO;EAC3BH,MAAM,CAAC,SAAS,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/B;AACO,SAASsC,sBAAsBA,CACpCvC,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASuC,kBAAkBA,CAChCxC,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASwC,oBAAoBA,CAClCzC,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASyC,iBAAiBA,CAC/B1C,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS0C,qBAAqBA,CACnC3C,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS2C,wBAAwBA,CACtC5C,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAAS4C,6BAA6BA,CAC3C7C,IAA+B,EAC/BC,IAAoB,EACuB;EAC3CH,MAAM,CAAC,yBAAyB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/C;AACO,SAAS6C,gBAAgBA,CAC9B9C,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAAS8C,qBAAqBA,CACnC/C,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS+C,oBAAoBA,CAClChD,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASgD,oBAAoBA,CAClCjD,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASiD,kBAAkBA,CAChClD,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASkD,qBAAqBA,CACnCnD,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASmD,sBAAsBA,CACpCpD,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASoD,yBAAyBA,CACvCrD,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASqD,wBAAwBA,CACtCtD,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASsD,oBAAoBA,CAClCvD,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASuD,mBAAmBA,CACjCxD,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASwD,uBAAuBA,CACrCzD,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASyD,kBAAkBA,CAChC1D,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAAS0D,6BAA6BA,CAC3C3D,IAA+B,EAC/BC,IAAoB,EACuB;EAC3CH,MAAM,CAAC,yBAAyB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/C;AACO,SAAS2D,eAAeA,CAC7B5D,IAA+B,EAC/BC,IAAoB,EACS;EAC7BH,MAAM,CAAC,WAAW,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjC;AACO,SAAS4D,qBAAqBA,CACnC7D,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS6D,sBAAsBA,CACpC9D,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAAS8D,0BAA0BA,CACxC/D,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAAS+D,8BAA8BA,CAC5ChE,IAA+B,EAC/BC,IAAoB,EACwB;EAC5CH,MAAM,CAAC,0BAA0B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChD;AACO,SAASgE,4BAA4BA,CAC1CjE,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAASiE,qBAAqBA,CACnClE,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASkE,oBAAoBA,CAClCnE,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASmE,uBAAuBA,CACrCpE,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASoE,4BAA4BA,CAC1CrE,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAASqE,8BAA8BA,CAC5CtE,IAA+B,EAC/BC,IAAoB,EACwB;EAC5CH,MAAM,CAAC,0BAA0B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChD;AACO,SAASsE,qBAAqBA,CACnCvE,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASuE,sBAAsBA,CACpCxE,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASwE,kBAAkBA,CAChCzE,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASyE,iBAAiBA,CAC/B1E,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS0E,mBAAmBA,CACjC3E,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAAS2E,mBAAmBA,CACjC5E,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAAS4E,WAAWA,CACzB7E,IAA+B,EAC/BC,IAAoB,EACK;EACzBH,MAAM,CAAC,OAAO,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7B;AACO,SAAS6E,8BAA8BA,CAC5C9E,IAA+B,EAC/BC,IAAoB,EACwB;EAC5CH,MAAM,CAAC,0BAA0B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChD;AACO,SAAS8E,qBAAqBA,CACnC/E,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS+E,qBAAqBA,CACnChF,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASgF,qBAAqBA,CACnCjF,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASiF,qBAAqBA,CACnClF,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASkF,YAAYA,CAC1BnF,IAA+B,EAC/BC,IAAoB,EACM;EAC1BH,MAAM,CAAC,QAAQ,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9B;AACO,SAASmF,mBAAmBA,CACjCpF,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASoF,8BAA8BA,CAC5CrF,IAA+B,EAC/BC,IAAoB,EACwB;EAC5CH,MAAM,CAAC,0BAA0B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChD;AACO,SAASqF,8BAA8BA,CAC5CtF,IAA+B,EAC/BC,IAAoB,EACwB;EAC5CH,MAAM,CAAC,0BAA0B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChD;AACO,SAASsF,4BAA4BA,CAC1CvF,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAASuF,mBAAmBA,CACjCxF,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASwF,2BAA2BA,CACzCzF,IAA+B,EAC/BC,IAAoB,EACqB;EACzCH,MAAM,CAAC,uBAAuB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7C;AACO,SAASyF,0BAA0BA,CACxC1F,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAAS0F,wBAAwBA,CACtC3F,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAAS2F,iBAAiBA,CAC/B5F,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS4F,iBAAiBA,CAC/B7F,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS6F,uBAAuBA,CACrC9F,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAAS8F,yBAAyBA,CACvC/F,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAAS+F,2BAA2BA,CACzChG,IAA+B,EAC/BC,IAAoB,EACqB;EACzCH,MAAM,CAAC,uBAAuB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7C;AACO,SAASgG,kCAAkCA,CAChDjG,IAA+B,EAC/BC,IAAoB,EAC4B;EAChDH,MAAM,CAAC,8BAA8B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpD;AACO,SAASiG,+BAA+BA,CAC7ClG,IAA+B,EAC/BC,IAAoB,EACyB;EAC7CH,MAAM,CAAC,2BAA2B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjD;AACO,SAASkG,qBAAqBA,CACnCnG,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASmG,kBAAkBA,CAChCpG,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASoG,qBAAqBA,CACnCrG,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASqG,sBAAsBA,CACpCtG,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASsG,mBAAmBA,CACjCvG,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASuG,0BAA0BA,CACxCxG,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAASwG,sBAAsBA,CACpCzG,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASyG,uBAAuBA,CACrC1G,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAAS0G,qBAAqBA,CACnC3G,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS2G,8BAA8BA,CAC5C5G,IAA+B,EAC/BC,IAAoB,EACwB;EAC5CH,MAAM,CAAC,0BAA0B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChD;AACO,SAAS4G,iCAAiCA,CAC/C7G,IAA+B,EAC/BC,IAAoB,EAC2B;EAC/CH,MAAM,CAAC,6BAA6B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnD;AACO,SAAS6G,uBAAuBA,CACrC9G,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAAS8G,0BAA0BA,CACxC/G,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAAS+G,4BAA4BA,CAC1ChH,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAASgH,uBAAuBA,CACrCjH,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASiH,2BAA2BA,CACzClH,IAA+B,EAC/BC,IAAoB,EACqB;EACzCH,MAAM,CAAC,uBAAuB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7C;AACO,SAASkH,uBAAuBA,CACrCnH,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASmH,sBAAsBA,CACpCpH,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASoH,0BAA0BA,CACxCrH,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAASqH,6BAA6BA,CAC3CtH,IAA+B,EAC/BC,IAAoB,EACuB;EAC3CH,MAAM,CAAC,yBAAyB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/C;AACO,SAASsH,gCAAgCA,CAC9CvH,IAA+B,EAC/BC,IAAoB,EAC0B;EAC9CH,MAAM,CAAC,4BAA4B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClD;AACO,SAASuH,yBAAyBA,CACvCxH,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASwH,yBAAyBA,CACvCzH,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASyH,4BAA4BA,CAC1C1H,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAAS0H,iCAAiCA,CAC/C3H,IAA+B,EAC/BC,IAAoB,EAC2B;EAC/CH,MAAM,CAAC,6BAA6B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnD;AACO,SAAS2H,0BAA0BA,CACxC5H,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAAS4H,0BAA0BA,CACxC7H,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAAS6H,4BAA4BA,CAC1C9H,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAAS8H,4BAA4BA,CAC1C/H,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAAS+H,uBAAuBA,CACrChI,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASgI,wBAAwBA,CACtCjI,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASiI,8BAA8BA,CAC5ClI,IAA+B,EAC/BC,IAAoB,EACwB;EAC5CH,MAAM,CAAC,0BAA0B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChD;AACO,SAASkI,gBAAgBA,CAC9BnI,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAASmI,6BAA6BA,CAC3CpI,IAA+B,EAC/BC,IAAoB,EACuB;EAC3CH,MAAM,CAAC,yBAAyB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/C;AACO,SAASoI,iCAAiCA,CAC/CrI,IAA+B,EAC/BC,IAAoB,EAC2B;EAC/CH,MAAM,CAAC,6BAA6B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnD;AACO,SAASqI,0BAA0BA,CACxCtI,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAASsI,0BAA0BA,CACxCvI,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAASuI,wBAAwBA,CACtCxI,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASwI,yBAAyBA,CACvCzI,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASyI,0BAA0BA,CACxC1I,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAAS0I,eAAeA,CAC7B3I,IAA+B,EAC/BC,IAAoB,EACS;EAC7BH,MAAM,CAAC,WAAW,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjC;AACO,SAAS2I,oBAAoBA,CAClC5I,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAAS4I,wBAAwBA,CACtC7I,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAAS6I,mBAAmBA,CACjC9I,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAAS8I,8BAA8BA,CAC5C/I,IAA+B,EAC/BC,IAAoB,EACwB;EAC5CH,MAAM,CAAC,0BAA0B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChD;AACO,SAAS+I,gCAAgCA,CAC9ChJ,IAA+B,EAC/BC,IAAoB,EAC0B;EAC9CH,MAAM,CAAC,4BAA4B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClD;AACO,SAASgJ,yBAAyBA,CACvCjJ,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASiJ,cAAcA,CAC5BlJ,IAA+B,EAC/BC,IAAoB,EACQ;EAC5BH,MAAM,CAAC,UAAU,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChC;AACO,SAASkJ,wBAAwBA,CACtCnJ,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASmJ,qBAAqBA,CACnCpJ,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASoJ,qBAAqBA,CACnCrJ,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASqJ,oBAAoBA,CAClCtJ,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASsJ,oBAAoBA,CAClCvJ,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASuJ,oBAAoBA,CAClCxJ,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASwJ,uBAAuBA,CACrCzJ,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASyJ,sBAAsBA,CACpC1J,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAAS0J,sBAAsBA,CACpC3J,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAAS2J,yBAAyBA,CACvC5J,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAAS4J,uBAAuBA,CACrC7J,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAAS6J,+BAA+BA,CAC7C9J,IAA+B,EAC/BC,IAAoB,EACyB;EAC7CH,MAAM,CAAC,2BAA2B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjD;AACO,SAAS8J,kBAAkBA,CAChC/J,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAAS+J,uBAAuBA,CACrChK,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASgK,gBAAgBA,CAC9BjK,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAASiK,wBAAwBA,CACtClK,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASkK,4BAA4BA,CAC1CnK,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAASmK,oBAAoBA,CAClCpK,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASoK,mBAAmBA,CACjCrK,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASqK,yBAAyBA,CACvCtK,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASsK,uBAAuBA,CACrCvK,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASuK,uBAAuBA,CACrCxK,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASwK,wBAAwBA,CACtCzK,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASyK,aAAaA,CAC3B1K,IAA+B,EAC/BC,IAAoB,EACO;EAC3BH,MAAM,CAAC,SAAS,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/B;AACO,SAAS0K,iBAAiBA,CAC/B3K,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS2K,wBAAwBA,CACtC5K,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAAS4K,wBAAwBA,CACtC7K,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAAS6K,UAAUA,CACxB9K,IAA+B,EAC/BC,IAAoB,EACI;EACxBH,MAAM,CAAC,MAAM,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5B;AACO,SAAS8K,iBAAiBA,CAC/B/K,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS+K,2BAA2BA,CACzChL,IAA+B,EAC/BC,IAAoB,EACqB;EACzCH,MAAM,CAAC,uBAAuB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7C;AACO,SAASgL,yBAAyBA,CACvCjL,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASiL,oBAAoBA,CAClClL,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASkL,qBAAqBA,CACnCnL,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASmL,eAAeA,CAC7BpL,IAA+B,EAC/BC,IAAoB,EACS;EAC7BH,MAAM,CAAC,WAAW,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjC;AACO,SAASoL,kBAAkBA,CAChCrL,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASqL,4BAA4BA,CAC1CtL,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAASsL,sBAAsBA,CACpCvL,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASuL,qBAAqBA,CACnCxL,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASwL,oBAAoBA,CAClCzL,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASyL,sBAAsBA,CACpC1L,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAAS0L,oBAAoBA,CAClC3L,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAAS2L,6BAA6BA,CAC3C5L,IAA+B,EAC/BC,IAAoB,EACuB;EAC3CH,MAAM,CAAC,yBAAyB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/C;AACO,SAAS4L,0BAA0BA,CACxC7L,IAA+B,EAC/BC,IAAoB,EACoB;EACxCH,MAAM,CAAC,sBAAsB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5C;AACO,SAAS6L,mCAAmCA,CACjD9L,IAA+B,EAC/BC,IAAoB,EAC6B;EACjDH,MAAM,CAAC,+BAA+B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrD;AACO,SAAS8L,yBAAyBA,CACvC/L,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAAS+L,uBAAuBA,CACrChM,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASgM,qBAAqBA,CACnCjM,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASiM,qBAAqBA,CACnClM,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASkM,gCAAgCA,CAC9CnM,IAA+B,EAC/BC,IAAoB,EAC0B;EAC9CH,MAAM,CAAC,4BAA4B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClD;AACO,SAASmM,qCAAqCA,CACnDpM,IAA+B,EAC/BC,IAAoB,EAC+B;EACnDH,MAAM,CAAC,iCAAiC,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvD;AACO,SAASoM,yBAAyBA,CACvCrM,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASqM,uBAAuBA,CACrCtM,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASsM,sBAAsBA,CACpCvM,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASuM,kBAAkBA,CAChCxM,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASwM,sBAAsBA,CACpCzM,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASyM,qBAAqBA,CACnC1M,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS0M,wBAAwBA,CACtC3M,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAAS2M,oBAAoBA,CAClC5M,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAAS4M,mBAAmBA,CACjC7M,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAAS6M,qBAAqBA,CACnC9M,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS8M,qBAAqBA,CACnC/M,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS+M,qBAAqBA,CACnChN,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASgN,qBAAqBA,CACnCjN,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASiN,wBAAwBA,CACtClN,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASkN,sBAAsBA,CACpCnN,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAASmN,mBAAmBA,CACjCpN,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASoN,gBAAgBA,CAC9BrN,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAASqN,oBAAoBA,CAClCtN,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASsN,uBAAuBA,CACrCvN,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASuN,qBAAqBA,CACnCxN,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASwN,qBAAqBA,CACnCzN,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASyN,iBAAiBA,CAC/B1N,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS0N,mBAAmBA,CACjC3N,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAAS2N,iBAAiBA,CAC/B5N,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS4N,iBAAiBA,CAC/B7N,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAAS6N,oBAAoBA,CAClC9N,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAAS8N,gBAAgBA,CAC9B/N,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAAS+N,wBAAwBA,CACtChO,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASgO,iBAAiBA,CAC/BjO,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAASiO,wBAAwBA,CACtClO,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASkO,uBAAuBA,CACrCnO,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASmO,iBAAiBA,CAC/BpO,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAASoO,yBAAyBA,CACvCrO,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASqO,oBAAoBA,CAClCtO,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASsO,yBAAyBA,CACvCvO,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASuO,kBAAkBA,CAChCxO,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASwO,mBAAmBA,CACjCzO,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASyO,mCAAmCA,CACjD1O,IAA+B,EAC/BC,IAAoB,EAC6B;EACjDH,MAAM,CAAC,+BAA+B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrD;AACO,SAAS0O,4BAA4BA,CAC1C3O,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAAS2O,qBAAqBA,CACnC5O,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS4O,4BAA4BA,CAC1C7O,IAA+B,EAC/BC,IAAoB,EACsB;EAC1CH,MAAM,CAAC,wBAAwB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9C;AACO,SAAS6O,+BAA+BA,CAC7C9O,IAA+B,EAC/BC,IAAoB,EACyB;EAC7CH,MAAM,CAAC,2BAA2B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjD;AACO,SAAS8O,oBAAoBA,CAClC/O,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAAS+O,2BAA2BA,CACzChP,IAA+B,EAC/BC,IAAoB,EACqB;EACzCH,MAAM,CAAC,uBAAuB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7C;AACO,SAASgP,qBAAqBA,CACnCjP,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASiP,uBAAuBA,CACrClP,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASkP,kBAAkBA,CAChCnP,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASmP,yBAAyBA,CACvCpP,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASoP,mBAAmBA,CACjCrP,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASqP,kBAAkBA,CAChCtP,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASsP,+BAA+BA,CAC7CvP,IAA+B,EAC/BC,IAAoB,EACyB;EAC7CH,MAAM,CAAC,2BAA2B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjD;AACO,SAASuP,+BAA+BA,CAC7CxP,IAA+B,EAC/BC,IAAoB,EACyB;EAC7CH,MAAM,CAAC,2BAA2B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjD;AACO,SAASwP,yBAAyBA,CACvCzP,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASyP,wBAAwBA,CACtC1P,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAAS0P,kCAAkCA,CAChD3P,IAA+B,EAC/BC,IAAoB,EAC4B;EAChDH,MAAM,CAAC,8BAA8B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpD;AACO,SAAS2P,sBAAsBA,CACpC5P,IAA+B,EAC/BC,IAAoB,EACgB;EACpCH,MAAM,CAAC,kBAAkB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACxC;AACO,SAAS4P,kCAAkCA,CAChD7P,IAA+B,EAC/BC,IAAoB,EAC4B;EAChDH,MAAM,CAAC,8BAA8B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpD;AACO,SAAS6P,gCAAgCA,CAC9C9P,IAA+B,EAC/BC,IAAoB,EAC0B;EAC9CH,MAAM,CAAC,4BAA4B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClD;AACO,SAAS8P,qBAAqBA,CACnC/P,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAAS+P,kBAAkBA,CAChChQ,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASgQ,gBAAgBA,CAC9BjQ,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAASiQ,YAAYA,CAC1BlQ,IAA+B,EAC/BC,IAAoB,EACM;EAC1BH,MAAM,CAAC,QAAQ,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9B;AACO,SAASkQ,cAAcA,CAC5BnQ,IAA+B,EAC/BC,IAAoB,EACQ;EAC5BH,MAAM,CAAC,UAAU,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChC;AACO,SAASmQ,iBAAiBA,CAC/BpQ,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAASoQ,WAAWA,CACzBrQ,IAA+B,EAC/BC,IAAoB,EACK;EACzBH,MAAM,CAAC,OAAO,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7B;AACO,SAASqQ,eAAeA,CAC7BtQ,IAA+B,EAC/BC,IAAoB,EACS;EAC7BH,MAAM,CAAC,WAAW,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjC;AACO,SAASsQ,oBAAoBA,CAClCvQ,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASuQ,yBAAyBA,CACvCxQ,IAA+B,EAC/BC,IAAoB,EACmB;EACvCH,MAAM,CAAC,qBAAqB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3C;AACO,SAASwQ,iBAAiBA,CAC/BzQ,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAASyQ,UAAUA,CACxB1Q,IAA+B,EAC/BC,IAAoB,EACI;EACxBH,MAAM,CAAC,MAAM,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5B;AACO,SAAS0Q,WAAWA,CACzB3Q,IAA+B,EAC/BC,IAAoB,EACK;EACzBH,MAAM,CAAC,OAAO,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7B;AACO,SAAS2Q,uBAAuBA,CACrC5Q,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAAS4Q,SAASA,CACvB7Q,IAA+B,EAC/BC,IAAoB,EACG;EACvBH,MAAM,CAAC,KAAK,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3B;AACO,SAAS6Q,mBAAmBA,CACjC9Q,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAAS8Q,cAAcA,CAC5B/Q,IAA+B,EAC/BC,IAAoB,EACQ;EAC5BH,MAAM,CAAC,UAAU,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChC;AACO,SAAS+Q,oBAAoBA,CAClChR,IAA+B,EAC/BC,IAAoB,EACc;EAClCH,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASgR,aAAaA,CAC3BjR,IAA+B,EAC/BC,IAAoB,EACO;EAC3BH,MAAM,CAAC,SAAS,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/B;AACO,SAASiR,iBAAiBA,CAC/BlR,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAASkR,iBAAiBA,CAC/BnR,IAA+B,EAC/BC,IAAoB,EACW;EAC/BH,MAAM,CAAC,aAAa,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACnC;AACO,SAASmR,UAAUA,CACxBpR,IAA+B,EAC/BC,IAAoB,EACI;EACxBH,MAAM,CAAC,MAAM,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5B;AACO,SAASoR,kBAAkBA,CAChCrR,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASqR,aAAaA,CAC3BtR,IAA+B,EAC/BC,IAAoB,EACO;EAC3BH,MAAM,CAAC,SAAS,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/B;AACO,SAASsR,eAAeA,CAC7BvR,IAA+B,EAC/BC,IAAoB,EACS;EAC7BH,MAAM,CAAC,WAAW,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjC;AACO,SAASuR,uBAAuBA,CACrCxR,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASwR,YAAYA,CAC1BzR,IAA+B,EAC/BC,IAAoB,EACM;EAC1BH,MAAM,CAAC,QAAQ,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9B;AACO,SAASyR,kBAAkBA,CAChC1R,IAA+B,EAC/BC,IAAoB,EACY;EAChCH,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAAS0R,cAAcA,CAC5B3R,IAA+B,EAC/BC,IAAoB,EACQ;EAC5BH,MAAM,CAAC,UAAU,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChC;AACO,SAAS2R,eAAeA,CAC7B5R,IAA+B,EAC/BC,IAAoB,EACS;EAC7BH,MAAM,CAAC,WAAW,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjC;AACO,SAAS4R,aAAaA,CAC3B7R,IAA+B,EAC/BC,IAAoB,EACO;EAC3BH,MAAM,CAAC,SAAS,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/B;AACO,SAAS6R,WAAWA,CACzB9R,IAA+B,EAC/BC,IAAoB,EACK;EACzBH,MAAM,CAAC,OAAO,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC7B;AACO,SAAS8R,+BAA+BA,CAC7C/R,IAA+B,EAC/BC,IAAoB,EACyB;EAC7CH,MAAM,CAAC,2BAA2B,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACjD;AACO,SAAS+R,uBAAuBA,CACrChS,IAA+B,EAC/BC,IAAoB,EACiB;EACrCH,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC;AACO,SAASgS,qBAAqBA,CACnCjS,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASiS,cAAcA,CAC5BlS,IAA+B,EAC/BC,IAAoB,EACQ;EAC5BH,MAAM,CAAC,UAAU,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChC;AACO,SAASkS,aAAaA,CAC3BnS,IAA+B,EAC/BC,IAAoB,EACO;EAC3BH,MAAM,CAAC,SAAS,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC/B;AACO,SAASmS,UAAUA,CACxBpS,IAA+B,EAC/BC,IAAoB,EACI;EACxBH,MAAM,CAAC,MAAM,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC5B;AACO,SAASoS,cAAcA,CAC5BrS,IAA+B,EAC/BC,IAAoB,EACQ;EAC5BH,MAAM,CAAC,UAAU,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChC;AACO,SAASqS,wBAAwBA,CACtCtS,IAA+B,EAC/BC,IAAoB,EACkB;EACtCH,MAAM,CAAC,oBAAoB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC1C;AACO,SAASsS,qBAAqBA,CACnCvS,IAA+B,EAC/BC,IAAoB,EACe;EACnCH,MAAM,CAAC,iBAAiB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACvC;AACO,SAASuS,mBAAmBA,CACjCxS,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASwS,cAAcA,CAC5BzS,IAA+B,EAC/BC,IAAoB,EACQ;EAC5BH,MAAM,CAAC,UAAU,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAChC;AACO,SAASyS,gBAAgBA,CAC9B1S,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAAS0S,SAASA,CACvB3S,IAA+B,EAC/BC,IAAoB,EACG;EACvBH,MAAM,CAAC,KAAK,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC3B;AACO,SAAS2S,mBAAmBA,CACjC5S,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAAS4S,gBAAgBA,CAC9B7S,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAAS6S,mBAAmBA,CACjC9S,IAA+B,EAC/BC,IAAoB,EACa;EACjCH,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAAS8S,YAAYA,CAC1B/S,IAA+B,EAC/BC,IAAoB,EACM;EAC1BH,MAAM,CAAC,QAAQ,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAC9B;AACO,SAAS+S,gBAAgBA,CAC9BhT,IAA+B,EAC/BC,IAAoB,EACU;EAC9BH,MAAM,CAAC,YAAY,EAAEE,IAAI,EAAEC,IAAI,CAAC;AAClC;AACO,SAASgT,mBAAmBA,CAACjT,IAAS,EAAEC,IAAS,EAAQ;EAC9D,IAAAJ,mBAAA,CAAAK,OAAkB,EAAC,qBAAqB,EAAE,sBAAsB,CAAC;EACjEJ,MAAM,CAAC,eAAe,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACrC;AACO,SAASiT,kBAAkBA,CAAClT,IAAS,EAAEC,IAAS,EAAQ;EAC7D,IAAAJ,mBAAA,CAAAK,OAAkB,EAAC,oBAAoB,EAAE,qBAAqB,CAAC;EAC/DJ,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASkT,kBAAkBA,CAACnT,IAAS,EAAEC,IAAS,EAAQ;EAC7D,IAAAJ,mBAAA,CAAAK,OAAkB,EAAC,oBAAoB,EAAE,mBAAmB,CAAC;EAC7DJ,MAAM,CAAC,cAAc,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACpC;AACO,SAASmT,oBAAoBA,CAACpT,IAAS,EAAEC,IAAS,EAAQ;EAC/D,IAAAJ,mBAAA,CAAAK,OAAkB,EAAC,sBAAsB,EAAE,qBAAqB,CAAC;EACjEJ,MAAM,CAAC,gBAAgB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACtC;AACO,SAASoT,uBAAuBA,CAACrT,IAAS,EAAEC,IAAS,EAAQ;EAClE,IAAAJ,mBAAA,CAAAK,OAAkB,EAChB,yBAAyB,EACzB,iCACF,CAAC;EACDJ,MAAM,CAAC,mBAAmB,EAAEE,IAAI,EAAEC,IAAI,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}