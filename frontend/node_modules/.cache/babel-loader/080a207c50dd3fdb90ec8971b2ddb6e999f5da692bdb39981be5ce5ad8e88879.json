{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst positionMethod = {\n  start: 'unshiftContainer',\n  end: 'pushContainer'\n};\nconst addJSXAttribute = ({\n  types: t,\n  template\n}, opts) => {\n  function getAttributeValue({\n    literal,\n    value\n  }) {\n    if (typeof value === 'boolean') {\n      return t.jsxExpressionContainer(t.booleanLiteral(value));\n    }\n    if (typeof value === 'number') {\n      return t.jsxExpressionContainer(t.numericLiteral(value));\n    }\n    if (typeof value === 'string' && literal) {\n      return t.jsxExpressionContainer(template.ast(value).expression);\n    }\n    if (typeof value === 'string') {\n      return t.stringLiteral(value);\n    }\n    return null;\n  }\n  function getAttribute({\n    spread,\n    name,\n    value,\n    literal\n  }) {\n    if (spread) {\n      return t.jsxSpreadAttribute(t.identifier(name));\n    }\n    return t.jsxAttribute(t.jsxIdentifier(name), getAttributeValue({\n      value,\n      literal\n    }));\n  }\n  return {\n    visitor: {\n      JSXOpeningElement(path) {\n        if (!opts.elements.includes(path.node.name.name)) return;\n        opts.attributes.forEach(({\n          name,\n          value = null,\n          spread = false,\n          literal = false,\n          position = 'end'\n        }) => {\n          const method = positionMethod[position];\n          const newAttribute = getAttribute({\n            spread,\n            name,\n            value,\n            literal\n          });\n          const attributes = path.get('attributes');\n          const isEqualAttribute = attribute => {\n            if (spread) {\n              return attribute.get('argument').isIdentifier({\n                name\n              });\n            }\n            return attribute.get('name').isJSXIdentifier({\n              name\n            });\n          };\n          const replaced = attributes.some(attribute => {\n            if (!isEqualAttribute(attribute)) return false;\n            attribute.replaceWith(newAttribute);\n            return true;\n          });\n          if (!replaced) {\n            path[method]('attributes', newAttribute);\n          }\n        });\n      }\n    }\n  };\n};\nvar _default = addJSXAttribute;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","positionMethod","start","end","addJSXAttribute","types","t","template","opts","getAttributeValue","literal","value","jsxExpressionContainer","booleanLiteral","numericLiteral","ast","expression","stringLiteral","getAttribute","spread","name","jsxSpreadAttribute","identifier","jsxAttribute","jsxIdentifier","visitor","JSXOpeningElement","path","elements","includes","node","attributes","forEach","position","method","newAttribute","get","isEqualAttribute","attribute","isIdentifier","isJSXIdentifier","replaced","some","replaceWith","_default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@svgr/babel-plugin-add-jsx-attribute/lib/index.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nconst positionMethod = {\n  start: 'unshiftContainer',\n  end: 'pushContainer'\n};\n\nconst addJSXAttribute = ({\n  types: t,\n  template\n}, opts) => {\n  function getAttributeValue({\n    literal,\n    value\n  }) {\n    if (typeof value === 'boolean') {\n      return t.jsxExpressionContainer(t.booleanLiteral(value));\n    }\n\n    if (typeof value === 'number') {\n      return t.jsxExpressionContainer(t.numericLiteral(value));\n    }\n\n    if (typeof value === 'string' && literal) {\n      return t.jsxExpressionContainer(template.ast(value).expression);\n    }\n\n    if (typeof value === 'string') {\n      return t.stringLiteral(value);\n    }\n\n    return null;\n  }\n\n  function getAttribute({\n    spread,\n    name,\n    value,\n    literal\n  }) {\n    if (spread) {\n      return t.jsxSpreadAttribute(t.identifier(name));\n    }\n\n    return t.jsxAttribute(t.jsxIdentifier(name), getAttributeValue({\n      value,\n      literal\n    }));\n  }\n\n  return {\n    visitor: {\n      JSXOpeningElement(path) {\n        if (!opts.elements.includes(path.node.name.name)) return;\n        opts.attributes.forEach(({\n          name,\n          value = null,\n          spread = false,\n          literal = false,\n          position = 'end'\n        }) => {\n          const method = positionMethod[position];\n          const newAttribute = getAttribute({\n            spread,\n            name,\n            value,\n            literal\n          });\n          const attributes = path.get('attributes');\n\n          const isEqualAttribute = attribute => {\n            if (spread) {\n              return attribute.get('argument').isIdentifier({\n                name\n              });\n            }\n\n            return attribute.get('name').isJSXIdentifier({\n              name\n            });\n          };\n\n          const replaced = attributes.some(attribute => {\n            if (!isEqualAttribute(attribute)) return false;\n            attribute.replaceWith(newAttribute);\n            return true;\n          });\n\n          if (!replaced) {\n            path[method]('attributes', newAttribute);\n          }\n        });\n      }\n\n    }\n  };\n};\n\nvar _default = addJSXAttribute;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}