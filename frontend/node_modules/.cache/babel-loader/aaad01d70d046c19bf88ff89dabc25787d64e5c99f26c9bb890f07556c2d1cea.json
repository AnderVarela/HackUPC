{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ScopeManager_options;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScopeManager = void 0;\nconst assert_1 = require(\"./assert\");\nconst scope_1 = require(\"./scope\");\nconst ClassFieldInitializerScope_1 = require(\"./scope/ClassFieldInitializerScope\");\nconst ClassStaticBlockScope_1 = require(\"./scope/ClassStaticBlockScope\");\nclass ScopeManager {\n  get variables() {\n    const variables = new Set();\n    function recurse(scope) {\n      scope.variables.forEach(v => variables.add(v));\n      scope.childScopes.forEach(recurse);\n    }\n    this.scopes.forEach(recurse);\n    return Array.from(variables).sort((a, b) => a.$id - b.$id);\n  }\n  constructor(options) {\n    _ScopeManager_options.set(this, void 0);\n    this.scopes = [];\n    this.globalScope = null;\n    this.nodeToScope = new WeakMap();\n    this.currentScope = null;\n    __classPrivateFieldSet(this, _ScopeManager_options, options, \"f\");\n    this.declaredVariables = new WeakMap();\n  }\n  isGlobalReturn() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").globalReturn === true;\n  }\n  isModule() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").sourceType === 'module';\n  }\n  isImpliedStrict() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").impliedStrict === true;\n  }\n  isStrictModeSupported() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").ecmaVersion != null && __classPrivateFieldGet(this, _ScopeManager_options, \"f\").ecmaVersion >= 5;\n  }\n  isES6() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").ecmaVersion != null && __classPrivateFieldGet(this, _ScopeManager_options, \"f\").ecmaVersion >= 6;\n  }\n  /**\n   * Get the variables that a given AST node defines. The gotten variables' `def[].node`/`def[].parent` property is the node.\n   * If the node does not define any variable, this returns an empty array.\n   * @param node An AST node to get their variables.\n   * @public\n   */\n  getDeclaredVariables(node) {\n    var _a;\n    return (_a = this.declaredVariables.get(node)) !== null && _a !== void 0 ? _a : [];\n  }\n  /**\n   * Get the scope of a given AST node. The gotten scope's `block` property is the node.\n   * This method never returns `function-expression-name` scope. If the node does not have their scope, this returns `null`.\n   *\n   * @param node An AST node to get their scope.\n   * @param inner If the node has multiple scopes, this returns the outermost scope normally.\n   *                If `inner` is `true` then this returns the innermost scope.\n   * @public\n   */\n  acquire(node, inner = false) {\n    var _a;\n    function predicate(testScope) {\n      if (testScope.type === 'function' && testScope.functionExpressionScope) {\n        return false;\n      }\n      return true;\n    }\n    const scopes = this.nodeToScope.get(node);\n    if (!scopes || scopes.length === 0) {\n      return null;\n    }\n    // Heuristic selection from all scopes.\n    // If you would like to get all scopes, please use ScopeManager#acquireAll.\n    if (scopes.length === 1) {\n      return scopes[0];\n    }\n    if (inner) {\n      for (let i = scopes.length - 1; i >= 0; --i) {\n        const scope = scopes[i];\n        if (predicate(scope)) {\n          return scope;\n        }\n      }\n      return null;\n    }\n    return (_a = scopes.find(predicate)) !== null && _a !== void 0 ? _a : null;\n  }\n  nestScope(scope) {\n    if (scope instanceof scope_1.GlobalScope) {\n      (0, assert_1.assert)(this.currentScope == null);\n      this.globalScope = scope;\n    }\n    this.currentScope = scope;\n    return scope;\n  }\n  nestBlockScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.BlockScope(this, this.currentScope, node));\n  }\n  nestCatchScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.CatchScope(this, this.currentScope, node));\n  }\n  nestClassScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.ClassScope(this, this.currentScope, node));\n  }\n  nestClassFieldInitializerScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new ClassFieldInitializerScope_1.ClassFieldInitializerScope(this, this.currentScope, node));\n  }\n  nestClassStaticBlockScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new ClassStaticBlockScope_1.ClassStaticBlockScope(this, this.currentScope, node));\n  }\n  nestConditionalTypeScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.ConditionalTypeScope(this, this.currentScope, node));\n  }\n  nestForScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.ForScope(this, this.currentScope, node));\n  }\n  nestFunctionExpressionNameScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.FunctionExpressionNameScope(this, this.currentScope, node));\n  }\n  nestFunctionScope(node, isMethodDefinition) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.FunctionScope(this, this.currentScope, node, isMethodDefinition));\n  }\n  nestFunctionTypeScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.FunctionTypeScope(this, this.currentScope, node));\n  }\n  nestGlobalScope(node) {\n    return this.nestScope(new scope_1.GlobalScope(this, node));\n  }\n  nestMappedTypeScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.MappedTypeScope(this, this.currentScope, node));\n  }\n  nestModuleScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.ModuleScope(this, this.currentScope, node));\n  }\n  nestSwitchScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.SwitchScope(this, this.currentScope, node));\n  }\n  nestTSEnumScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.TSEnumScope(this, this.currentScope, node));\n  }\n  nestTSModuleScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.TSModuleScope(this, this.currentScope, node));\n  }\n  nestTypeScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.TypeScope(this, this.currentScope, node));\n  }\n  nestWithScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.WithScope(this, this.currentScope, node));\n  }\n}\nexports.ScopeManager = ScopeManager;\n_ScopeManager_options = new WeakMap();","map":{"version":3,"names":["assert_1","require","scope_1","ClassFieldInitializerScope_1","ClassStaticBlockScope_1","ScopeManager","variables","Set","recurse","scope","forEach","v","add","childScopes","scopes","Array","from","sort","a","b","$id","constructor","options","_ScopeManager_options","set","globalScope","nodeToScope","WeakMap","currentScope","__classPrivateFieldSet","declaredVariables","isGlobalReturn","__classPrivateFieldGet","globalReturn","isModule","sourceType","isImpliedStrict","impliedStrict","isStrictModeSupported","ecmaVersion","isES6","getDeclaredVariables","node","_a","get","acquire","inner","predicate","testScope","type","functionExpressionScope","length","i","find","nestScope","GlobalScope","assert","nestBlockScope","BlockScope","nestCatchScope","CatchScope","nestClassScope","ClassScope","nestClassFieldInitializerScope","ClassFieldInitializerScope","nestClassStaticBlockScope","ClassStaticBlockScope","nestConditionalTypeScope","ConditionalTypeScope","nestForScope","ForScope","nestFunctionExpressionNameScope","FunctionExpressionNameScope","nestFunctionScope","isMethodDefinition","FunctionScope","nestFunctionTypeScope","FunctionTypeScope","nestGlobalScope","nestMappedTypeScope","MappedTypeScope","nestModuleScope","ModuleScope","nestSwitchScope","SwitchScope","nestTSEnumScope","TSEnumScope","nestTSModuleScope","TSModuleScope","nestTypeScope","TypeScope","nestWithScope","WithScope","exports"],"sources":["../src/ScopeManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}