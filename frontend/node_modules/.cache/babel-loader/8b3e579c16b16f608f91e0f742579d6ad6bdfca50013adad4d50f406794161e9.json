{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\nvar _jestMatcherUtils = require('jest-matcher-utils');\nvar _jestMatchersObject = require('./jestMatchersObject');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst resetAssertionsLocalState = () => {\n  (0, _jestMatchersObject.setState)({\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false\n  });\n}; // Create and format all errors related to the mismatched number of `expect`\n// calls and reset the matcher's state.\n\nconst extractExpectedAssertionsErrors = () => {\n  const result = [];\n  const {\n    assertionCalls,\n    expectedAssertionsNumber,\n    expectedAssertionsNumberError,\n    isExpectingAssertions,\n    isExpectingAssertionsError\n  } = (0, _jestMatchersObject.getState)();\n  resetAssertionsLocalState();\n  if (typeof expectedAssertionsNumber === 'number' && assertionCalls !== expectedAssertionsNumber) {\n    const numOfAssertionsExpected = (0, _jestMatcherUtils.EXPECTED_COLOR)((0, _jestMatcherUtils.pluralize)('assertion', expectedAssertionsNumber));\n    expectedAssertionsNumberError.message = (0, _jestMatcherUtils.matcherHint)('.assertions', '', String(expectedAssertionsNumber), {\n      isDirectExpectCall: true\n    }) + '\\n\\n' + `Expected ${numOfAssertionsExpected} to be called but received ` + (0, _jestMatcherUtils.RECEIVED_COLOR)((0, _jestMatcherUtils.pluralize)('assertion call', assertionCalls || 0)) + '.';\n    result.push({\n      actual: assertionCalls.toString(),\n      error: expectedAssertionsNumberError,\n      expected: expectedAssertionsNumber.toString()\n    });\n  }\n  if (isExpectingAssertions && assertionCalls === 0) {\n    const expected = (0, _jestMatcherUtils.EXPECTED_COLOR)('at least one assertion');\n    const received = (0, _jestMatcherUtils.RECEIVED_COLOR)('received none');\n    isExpectingAssertionsError.message = (0, _jestMatcherUtils.matcherHint)('.hasAssertions', '', '', {\n      isDirectExpectCall: true\n    }) + '\\n\\n' + `Expected ${expected} to be called but ${received}.`;\n    result.push({\n      actual: 'none',\n      error: isExpectingAssertionsError,\n      expected: 'at least one'\n    });\n  }\n  return result;\n};\nvar _default = extractExpectedAssertionsErrors;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_jestMatcherUtils","require","_jestMatchersObject","resetAssertionsLocalState","setState","assertionCalls","expectedAssertionsNumber","isExpectingAssertions","extractExpectedAssertionsErrors","result","expectedAssertionsNumberError","isExpectingAssertionsError","getState","numOfAssertionsExpected","EXPECTED_COLOR","pluralize","message","matcherHint","String","isDirectExpectCall","RECEIVED_COLOR","push","actual","toString","error","expected","received","_default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@jest/globals/node_modules/expect/build/extractExpectedAssertionsErrors.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _jestMatchersObject = require('./jestMatchersObject');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst resetAssertionsLocalState = () => {\n  (0, _jestMatchersObject.setState)({\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false\n  });\n}; // Create and format all errors related to the mismatched number of `expect`\n// calls and reset the matcher's state.\n\nconst extractExpectedAssertionsErrors = () => {\n  const result = [];\n  const {\n    assertionCalls,\n    expectedAssertionsNumber,\n    expectedAssertionsNumberError,\n    isExpectingAssertions,\n    isExpectingAssertionsError\n  } = (0, _jestMatchersObject.getState)();\n  resetAssertionsLocalState();\n\n  if (\n    typeof expectedAssertionsNumber === 'number' &&\n    assertionCalls !== expectedAssertionsNumber\n  ) {\n    const numOfAssertionsExpected = (0, _jestMatcherUtils.EXPECTED_COLOR)(\n      (0, _jestMatcherUtils.pluralize)('assertion', expectedAssertionsNumber)\n    );\n    expectedAssertionsNumberError.message =\n      (0, _jestMatcherUtils.matcherHint)(\n        '.assertions',\n        '',\n        String(expectedAssertionsNumber),\n        {\n          isDirectExpectCall: true\n        }\n      ) +\n      '\\n\\n' +\n      `Expected ${numOfAssertionsExpected} to be called but received ` +\n      (0, _jestMatcherUtils.RECEIVED_COLOR)(\n        (0, _jestMatcherUtils.pluralize)('assertion call', assertionCalls || 0)\n      ) +\n      '.';\n    result.push({\n      actual: assertionCalls.toString(),\n      error: expectedAssertionsNumberError,\n      expected: expectedAssertionsNumber.toString()\n    });\n  }\n\n  if (isExpectingAssertions && assertionCalls === 0) {\n    const expected = (0, _jestMatcherUtils.EXPECTED_COLOR)(\n      'at least one assertion'\n    );\n    const received = (0, _jestMatcherUtils.RECEIVED_COLOR)('received none');\n    isExpectingAssertionsError.message =\n      (0, _jestMatcherUtils.matcherHint)('.hasAssertions', '', '', {\n        isDirectExpectCall: true\n      }) +\n      '\\n\\n' +\n      `Expected ${expected} to be called but ${received}.`;\n    result.push({\n      actual: 'none',\n      error: isExpectingAssertionsError,\n      expected: 'at least one'\n    });\n  }\n\n  return result;\n};\n\nvar _default = extractExpectedAssertionsErrors;\nexports.default = _default;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAErD,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,sBAAsB,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,yBAAyB,GAAGA,CAAA,KAAM;EACtC,CAAC,CAAC,EAAED,mBAAmB,CAACE,QAAQ,EAAE;IAChCC,cAAc,EAAE,CAAC;IACjBC,wBAAwB,EAAE,IAAI;IAC9BC,qBAAqB,EAAE;EACzB,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AACH;;AAEA,MAAMC,+BAA+B,GAAGA,CAAA,KAAM;EAC5C,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAM;IACJJ,cAAc;IACdC,wBAAwB;IACxBI,6BAA6B;IAC7BH,qBAAqB;IACrBI;EACF,CAAC,GAAG,CAAC,CAAC,EAAET,mBAAmB,CAACU,QAAQ,EAAE,CAAC;EACvCT,yBAAyB,CAAC,CAAC;EAE3B,IACE,OAAOG,wBAAwB,KAAK,QAAQ,IAC5CD,cAAc,KAAKC,wBAAwB,EAC3C;IACA,MAAMO,uBAAuB,GAAG,CAAC,CAAC,EAAEb,iBAAiB,CAACc,cAAc,EAClE,CAAC,CAAC,EAAEd,iBAAiB,CAACe,SAAS,EAAE,WAAW,EAAET,wBAAwB,CACxE,CAAC;IACDI,6BAA6B,CAACM,OAAO,GACnC,CAAC,CAAC,EAAEhB,iBAAiB,CAACiB,WAAW,EAC/B,aAAa,EACb,EAAE,EACFC,MAAM,CAACZ,wBAAwB,CAAC,EAChC;MACEa,kBAAkB,EAAE;IACtB,CACF,CAAC,GACD,MAAM,GACL,YAAWN,uBAAwB,6BAA4B,GAChE,CAAC,CAAC,EAAEb,iBAAiB,CAACoB,cAAc,EAClC,CAAC,CAAC,EAAEpB,iBAAiB,CAACe,SAAS,EAAE,gBAAgB,EAAEV,cAAc,IAAI,CAAC,CACxE,CAAC,GACD,GAAG;IACLI,MAAM,CAACY,IAAI,CAAC;MACVC,MAAM,EAAEjB,cAAc,CAACkB,QAAQ,CAAC,CAAC;MACjCC,KAAK,EAAEd,6BAA6B;MACpCe,QAAQ,EAAEnB,wBAAwB,CAACiB,QAAQ,CAAC;IAC9C,CAAC,CAAC;EACJ;EAEA,IAAIhB,qBAAqB,IAAIF,cAAc,KAAK,CAAC,EAAE;IACjD,MAAMoB,QAAQ,GAAG,CAAC,CAAC,EAAEzB,iBAAiB,CAACc,cAAc,EACnD,wBACF,CAAC;IACD,MAAMY,QAAQ,GAAG,CAAC,CAAC,EAAE1B,iBAAiB,CAACoB,cAAc,EAAE,eAAe,CAAC;IACvET,0BAA0B,CAACK,OAAO,GAChC,CAAC,CAAC,EAAEhB,iBAAiB,CAACiB,WAAW,EAAE,gBAAgB,EAAE,EAAE,EAAE,EAAE,EAAE;MAC3DE,kBAAkB,EAAE;IACtB,CAAC,CAAC,GACF,MAAM,GACL,YAAWM,QAAS,qBAAoBC,QAAS,GAAE;IACtDjB,MAAM,CAACY,IAAI,CAAC;MACVC,MAAM,EAAE,MAAM;MACdE,KAAK,EAAEb,0BAA0B;MACjCc,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ;EAEA,OAAOhB,MAAM;AACf,CAAC;AAED,IAAIkB,QAAQ,GAAGnB,+BAA+B;AAC9CX,OAAO,CAACE,OAAO,GAAG4B,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}