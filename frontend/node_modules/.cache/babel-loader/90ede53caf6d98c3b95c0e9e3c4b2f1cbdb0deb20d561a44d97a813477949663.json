{"ast":null,"code":"const EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst {\n  Argument,\n  humanReadableArgName\n} = require('./argument.js');\nconst {\n  CommanderError\n} = require('./error.js');\nconst {\n  Help\n} = require('./help.js');\nconst {\n  Option,\n  splitOptionFlags\n} = require('./option.js');\nconst {\n  suggestSimilar\n} = require('./suggestSimilar');\n\n// @ts-check\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this._args = [];\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default < config < env < cli\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {boolean | string} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = false;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: str => process.stdout.write(str),\n      writeErr: str => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} returns `this` for executable command\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._hasHelpOption = sourceCommand._hasHelpOption;\n    this._helpFlags = sourceCommand._helpFlags;\n    this._helpDescription = sourceCommand._helpDescription;\n    this._helpShortFlag = sourceCommand._helpShortFlag;\n    this._helpLongFlag = sourceCommand._helpLongFlag;\n    this._helpCommandName = sourceCommand._helpCommandName;\n    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n    this._helpCommandDescription = sourceCommand._helpCommandDescription;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n    return this;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this.commands.push(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n    if (desc) return this;\n    return cmd;\n  }\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {boolean|string} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) throw new Error('Command passed to .addCommand() must have a name');\n\n    // To keep things simple, block automatic name generation for deeply nested executables.\n    // Fail fast and detect when adding rather than later when parsing.\n    function checkExplicitNames(commandArray) {\n      commandArray.forEach(cmd => {\n        if (cmd._executableHandler && !cmd._executableFile) {\n          throw new Error(`Must specify executableFile for deeply nested executable: ${cmd.name()}`);\n        }\n        checkExplicitNames(cmd.commands);\n      });\n    }\n    checkExplicitNames(cmd.commands);\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  }\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names.split(/ +/).forEach(detail => {\n      this.argument(detail);\n    });\n    return this;\n  }\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this._args.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n    }\n    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n    }\n    this._args.push(argument);\n    return this;\n  }\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  }\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  }\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = err => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = args => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this._args.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n    let defaultValue = option.defaultValue;\n\n    // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value\n    if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {\n      // when --no-foo we make sure default is true, unless a --foo option is already defined\n      if (option.negate) {\n        const positiveLongFlag = option.long.replace(/^--no-/, '--');\n        defaultValue = this._findOption(positiveLongFlag) ? this.getOptionValue(name) : true;\n      }\n      // preassign only if we have a default\n      if (defaultValue !== undefined) {\n        this.setOptionValueWithSource(name, defaultValue, 'default');\n      }\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // Note: using closure to access lots of lexical scoped variables.\n      const oldValue = this.getOptionValue(name);\n\n      // custom processing\n      if (val !== null && option.parseArg) {\n        try {\n          val = option.parseArg(val, oldValue === undefined ? defaultValue : oldValue);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `${invalidValueMessage} ${err.message}`;\n            this._displayError(err.exitCode, err.code, message);\n          }\n          throw err;\n        }\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // unassigned or boolean value\n      if (typeof oldValue === 'boolean' || typeof oldValue === 'undefined') {\n        // if no value, negate false, and we have a default, then use it!\n        if (val == null) {\n          this.setOptionValueWithSource(name, option.negate ? false : defaultValue || true, valueSource);\n        } else {\n          this.setOptionValueWithSource(name, val, valueSource);\n        }\n      } else if (val !== null) {\n        // reassign\n        this.setOptionValueWithSource(name, option.negate ? false : val, valueSource);\n      }\n    };\n    this.on('option:' + oname, val => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, val => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description` and optional\n   * coercion `fn`.\n   *\n   * The `flags` string contains the short and/or long flags,\n   * separated by comma, a pipe or space. The following are all valid\n   * all will output this way when `--help` is used.\n   *\n   *     \"-p, --pepper\"\n   *     \"-p|--pepper\"\n   *     \"-p --pepper\"\n   *\n   * @example\n   * // simple boolean defaulting to undefined\n   * program.option('-p, --pepper', 'add pepper');\n   *\n   * program.pepper\n   * // => undefined\n   *\n   * --pepper\n   * program.pepper\n   * // => true\n   *\n   * // simple boolean defaulting to true (unless non-negated option is also defined)\n   * program.option('-C, --no-cheese', 'remove cheese');\n   *\n   * program.cheese\n   * // => true\n   *\n   * --no-cheese\n   * program.cheese\n   * // => false\n   *\n   * // required argument\n   * program.option('-C, --chdir <path>', 'change the working directory');\n   *\n   * --chdir /tmp\n   * program.chdir\n   * // => \"/tmp\"\n   *\n   * // optional argument\n   * program.option('-c, --cheese [type]', 'add cheese [marble]');\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, fn, defaultValue) {\n    return this._optionEx({}, flags, description, fn, defaultValue);\n  }\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [fn] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, fn, defaultValue) {\n    return this._optionEx({\n      mandatory: true\n    }, flags, description, fn, defaultValue);\n  }\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n    }\n    return this;\n  }\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    return this;\n  }\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {Object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    return this;\n  }\n  /**\n   * Store option value and where the value came from.\n    *\n    * @param {string} key\n    * @param {Object} value\n    * @param {string} source - expected values are default/config/env/cli\n    * @return {Command} `this` command for chaining\n    */\n\n  setOptionValueWithSource(key, value, source) {\n    this.setOptionValue(key, value);\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n    * Get source of option value.\n    * Expected values are default | config | env | cli\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n  /**\n   * Get user arguments implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included application, and use that to set implicit command name.\n   *\n   * @api private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n    if (!this._scriptPath && require.main) {\n      this._scriptPath = require.main.filename;\n    }\n\n    // Guess name, used in usage in help.\n    this._name = this._name || this._scriptPath && path.basename(this._scriptPath, path.extname(this._scriptPath));\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * program.parse(process.argv);\n   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n    return this;\n  }\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * await program.parseAsync(process.argv);\n   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n    return this;\n  }\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n\n    // Want the entry script as the reference for command name and directory for searching for other files.\n    let scriptPath = this._scriptPath;\n    // Fallback in case not set, due to how Command created or called.\n    if (!scriptPath && require.main) {\n      scriptPath = require.main.filename;\n    }\n    let baseDir;\n    try {\n      const resolvedLink = fs.realpathSync(scriptPath);\n      baseDir = path.dirname(resolvedLink);\n    } catch (e) {\n      baseDir = '.'; // dummy, probably not going to find executable!\n    }\n\n    // name of the subcommand, like `pm-install`\n    let bin = path.basename(scriptPath, path.extname(scriptPath)) + '-' + subcommand._name;\n    if (subcommand._executableFile) {\n      bin = subcommand._executableFile;\n    }\n    const localBin = path.join(baseDir, bin);\n    if (fs.existsSync(localBin)) {\n      // prefer local `./<bin>` to bin in the $PATH\n      bin = localBin;\n    } else {\n      // Look for source files.\n      sourceExt.forEach(ext => {\n        if (fs.existsSync(`${localBin}${ext}`)) {\n          bin = `${localBin}${ext}`;\n        }\n      });\n    }\n    launchWithNode = sourceExt.includes(path.extname(bin));\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(bin);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n        proc = childProcess.spawn(process.argv[0], args, {\n          stdio: 'inherit'\n        });\n      } else {\n        proc = childProcess.spawn(bin, args, {\n          stdio: 'inherit'\n        });\n      }\n    } else {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, {\n        stdio: 'inherit'\n      });\n    }\n    const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n    signals.forEach(signal => {\n      // @ts-ignore\n      process.on(signal, () => {\n        if (proc.killed === false && proc.exitCode === null) {\n          proc.kill(signal);\n        }\n      });\n    });\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', err => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableMissing = `'${bin}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name`;\n        throw new Error(executableMissing);\n        // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${bin}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n  /**\n   * @api private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({\n      error: true\n    });\n    if (subCommand._executableHandler) {\n      this._executeSubCommand(subCommand, operands.concat(unknown));\n    } else {\n      return subCommand._parseCommand(operands, unknown);\n    }\n  }\n  /**\n   * Check this.args against expected this._args.\n   *\n   * @api private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this._args.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {\n      return;\n    }\n    if (this.args.length > this._args.length) {\n      this._excessArguments(this.args);\n    }\n  }\n  /**\n   * Process this.args using this._args and save as this.processedArgs!\n   *\n   * @api private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        try {\n          parsedValue = argument.parseArg(value, previous);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;\n            this._displayError(err.exitCode, err.code, message);\n          }\n          throw err;\n        }\n      }\n      return parsedValue;\n    };\n    this._checkNumberOfArguments();\n    const processedArgs = [];\n    this._args.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {Promise|undefined} promise\n   * @param {Function} fn\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    getCommandAndParents(this).reverse().filter(cmd => cmd._lifeCycleHooks[event] !== undefined).forEach(hookedCommand => {\n      hookedCommand._lifeCycleHooks[event].forEach(callback => {\n        hooks.push({\n          hookedCommand,\n          callback\n        });\n      });\n    });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n    hooks.forEach(hookDetail => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      if (operands.length === 1) {\n        this.help();\n      }\n      return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\n    }\n    if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    }\n    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({\n        error: true\n      });\n    }\n    outputHelpIfRequested(this, parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n      let actionResult;\n      actionResult = this._chainOrCallHooks(actionResult, 'preAction');\n      actionResult = this._chainOrCall(actionResult, () => this._actionHandler(this.processedArgs));\n      if (this.parent) this.parent.emit(commandEvent, operands, unknown); // legacy\n      actionResult = this._chainOrCallHooks(actionResult, 'postAction');\n      return actionResult;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) {\n        // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({\n        error: true\n      });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  }\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  }\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Lazy calling after checking for help flags from leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd.options.forEach(anOption => {\n        if (anOption.mandatory && cmd.getOptionValue(anOption.attributeName()) === undefined) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    }\n  }\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else {\n            // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || option.optional && this._combineFlagAndOptionalValue) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n    return {\n      operands,\n      unknown\n    };\n  }\n  /**\n   * Return an object containing options as key-value pairs\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n    return this._optionValues;\n  }\n  /**\n   * Internal bottleneck for handling of parsing errors.\n   *\n   * @api private\n   */\n  _displayError(exitCode, code, message) {\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({\n        error: true\n      });\n    }\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @api private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach(option => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {\n          if (option.required || option.optional) {\n            // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else {\n            // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this._displayError(1, 'commander.missingArgument', message);\n  }\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this._displayError(1, 'commander.optionMissingArgument', message);\n  }\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this._displayError(1, 'commander.missingMandatoryOptionValue', message);\n  }\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      let command = this;\n      do {\n        const moreFlags = command.createHelp().visibleOptions(command).filter(option => option.long).map(option => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this._displayError(1, 'commander.unknownOption', message);\n  }\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n    const expected = this._args.length;\n    const s = expected === 1 ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this._displayError(1, 'commander.excessArguments', message);\n  }\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp().visibleCommands(this).forEach(command => {\n        candidateNames.push(command.name());\n        // just visible alias\n        if (command.alias()) candidateNames.push(command.alias());\n      });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this._displayError(1, 'commander.unknownCommand', message);\n  }\n  /**\n   * Set the program version to `str`.\n   *\n   * This method auto-registers the \"-V, --version\" flag\n   * which will print the version number when passed.\n   *\n   * You can optionally supply the  flags and description to override the defaults.\n   *\n   * @param {string} str\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n  /**\n   * Set the description to `str`.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n    command._aliases.push(alias);\n    return this;\n  }\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n    aliases.forEach(alias => this.alias(alias));\n    return this;\n  }\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n      const args = this._args.map(arg => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(this.options.length || this._hasHelpOption ? '[options]' : [], this.commands.length ? '[command]' : [], this._args.length ? args : []).join(' ');\n    }\n    this._usage = str;\n    return this;\n  }\n  /**\n   * Get or set the name of the command\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = contextOptions && contextOptions.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = {\n      error: !!contextOptions.error\n    };\n    let write;\n    if (context.error) {\n      write = arg => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = arg => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n    getCommandAndParents(this).reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n    this.emit(this._helpLongFlag); // deprecated\n    this.emit('afterHelp', context);\n    getCommandAndParents(this).forEach(command => command.emit('afterAllHelp', context));\n  }\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n    const helpFlags = splitOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n    return this;\n  }\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, context => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({\n          error: context.error,\n          command: context.command\n        });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n}\n;\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map(arg => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\n/**\n * @param {Command} startCommand\n * @returns {Command[]}\n * @api private\n */\n\nfunction getCommandAndParents(startCommand) {\n  const result = [];\n  for (let command = startCommand; command; command = command.parent) {\n    result.push(command);\n  }\n  return result;\n}\nexports.Command = Command;","map":{"version":3,"names":["EventEmitter","require","childProcess","path","fs","Argument","humanReadableArgName","CommanderError","Help","Option","splitOptionFlags","suggestSimilar","Command","constructor","name","commands","options","parent","_allowUnknownOption","_allowExcessArguments","_args","args","rawArgs","processedArgs","_scriptPath","_name","_optionValues","_optionValueSources","_storeOptionsAsProperties","_actionHandler","_executableHandler","_executableFile","_defaultCommandName","_exitCallback","_aliases","_combineFlagAndOptionalValue","_description","_argsDescription","undefined","_enablePositionalOptions","_passThroughOptions","_lifeCycleHooks","_showHelpAfterError","_showSuggestionAfterError","_outputConfiguration","writeOut","str","process","stdout","write","writeErr","stderr","getOutHelpWidth","isTTY","columns","getErrHelpWidth","outputError","_hidden","_hasHelpOption","_helpFlags","_helpDescription","_helpShortFlag","_helpLongFlag","_addImplicitHelpCommand","_helpCommandName","_helpCommandnameAndArgs","_helpCommandDescription","_helpConfiguration","copyInheritedSettings","sourceCommand","command","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","match","cmd","createCommand","description","isDefault","noHelp","hidden","executableFile","arguments","push","createHelp","Object","assign","configureHelp","configuration","configureOutput","showHelpAfterError","displayHelp","showSuggestionAfterError","displaySuggestion","addCommand","Error","checkExplicitNames","commandArray","forEach","createArgument","argument","fn","defaultValue","default","argParser","addArgument","names","split","detail","previousArgument","slice","variadic","required","parseArg","addHelpCommand","enableOrNameAndArgs","_hasImplicitHelpCommand","length","_findCommand","hook","event","listener","allowedValues","includes","join","exitOverride","err","code","_exit","exitCode","message","exit","action","expectedArgsCount","actionArgs","apply","createOption","flags","addOption","option","oname","attributeName","negate","optional","positiveLongFlag","long","replace","_findOption","getOptionValue","setOptionValueWithSource","handleOptionValue","val","invalidValueMessage","valueSource","oldValue","_displayError","_concatValue","on","envVar","_optionEx","config","makeOptionMandatory","mandatory","RegExp","regex","def","m","exec","requiredOption","combineFlagAndOptionalValue","combine","allowUnknownOption","allowUnknown","allowExcessArguments","allowExcess","enablePositionalOptions","positional","passThroughOptions","passThrough","storeOptionsAsProperties","storeAsProperties","key","setOptionValue","value","source","getOptionValueSource","_prepareUserArgs","argv","parseOptions","Array","isArray","versions","electron","from","userArgs","defaultApp","main","filename","basename","extname","parse","_parseCommand","parseAsync","_executeSubCommand","subcommand","launchWithNode","sourceExt","_checkForMissingMandatoryOptions","scriptPath","baseDir","resolvedLink","realpathSync","dirname","e","bin","localBin","existsSync","ext","proc","platform","unshift","incrementNodeInspectorPort","execArgv","concat","spawn","stdio","execPath","signals","signal","killed","kill","exitCallback","bind","executableMissing","wrappedError","nestedError","runningCommand","_dispatchSubcommand","commandName","operands","unknown","subCommand","help","error","_checkNumberOfArguments","arg","i","missingArgument","_excessArguments","_processArguments","myParseArg","previous","parsedValue","declaredArg","index","reduce","processed","v","_chainOrCall","promise","then","_chainOrCallHooks","result","hooks","getCommandAndParents","reverse","filter","hookedCommand","callback","hookDetail","parsed","_parseOptionsEnv","outputHelpIfRequested","checkForUnknownOptions","unknownOption","commandEvent","actionResult","emit","listenerCount","unknownCommand","find","is","anOption","missingMandatoryOptionValue","dest","maybeOption","activeVariadicOption","shift","optionMissingArgument","test","indexOf","len","_versionOptionName","_version","outputHelp","env","optionKey","flag","suggestion","startsWith","candidateFlags","moreFlags","visibleOptions","map","receivedArgs","expected","s","forSubcommand","unknownName","candidateNames","visibleCommands","alias","version","versionOption","argsDescription","aliases","usage","_usage","helpInformation","contextOptions","helper","helpWidth","formatHelp","_getHelpContext","context","deprecatedCallback","Buffer","isBuffer","helpOption","helpFlags","shortFlag","longFlag","addHelpText","position","text","helpEvent","helpStr","debugOption","debugHost","debugPort","parseInt","startCommand","exports"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/commander/lib/command.js"],"sourcesContent":["const EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, splitOptionFlags } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\n// @ts-check\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this._args = [];\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default < config < env < cli\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {boolean | string} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = false;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} returns `this` for executable command\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._hasHelpOption = sourceCommand._hasHelpOption;\n    this._helpFlags = sourceCommand._helpFlags;\n    this._helpDescription = sourceCommand._helpDescription;\n    this._helpShortFlag = sourceCommand._helpShortFlag;\n    this._helpLongFlag = sourceCommand._helpLongFlag;\n    this._helpCommandName = sourceCommand._helpCommandName;\n    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n    this._helpCommandDescription = sourceCommand._helpCommandDescription;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this.commands.push(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  };\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  };\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  };\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {boolean|string} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) throw new Error('Command passed to .addCommand() must have a name');\n\n    // To keep things simple, block automatic name generation for deeply nested executables.\n    // Fail fast and detect when adding rather than later when parsing.\n    function checkExplicitNames(commandArray) {\n      commandArray.forEach((cmd) => {\n        if (cmd._executableHandler && !cmd._executableFile) {\n          throw new Error(`Must specify executableFile for deeply nested executable: ${cmd.name()}`);\n        }\n        checkExplicitNames(cmd.commands);\n      });\n    }\n    checkExplicitNames(cmd.commands);\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  };\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  };\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names.split(/ +/).forEach((detail) => {\n      this.argument(detail);\n    });\n    return this;\n  };\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this._args.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n    }\n    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n    }\n    this._args.push(argument);\n    return this;\n  }\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  };\n\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  };\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  };\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  };\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this._args.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  };\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  };\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n\n    let defaultValue = option.defaultValue;\n\n    // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value\n    if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {\n      // when --no-foo we make sure default is true, unless a --foo option is already defined\n      if (option.negate) {\n        const positiveLongFlag = option.long.replace(/^--no-/, '--');\n        defaultValue = this._findOption(positiveLongFlag) ? this.getOptionValue(name) : true;\n      }\n      // preassign only if we have a default\n      if (defaultValue !== undefined) {\n        this.setOptionValueWithSource(name, defaultValue, 'default');\n      }\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // Note: using closure to access lots of lexical scoped variables.\n      const oldValue = this.getOptionValue(name);\n\n      // custom processing\n      if (val !== null && option.parseArg) {\n        try {\n          val = option.parseArg(val, oldValue === undefined ? defaultValue : oldValue);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `${invalidValueMessage} ${err.message}`;\n            this._displayError(err.exitCode, err.code, message);\n          }\n          throw err;\n        }\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // unassigned or boolean value\n      if (typeof oldValue === 'boolean' || typeof oldValue === 'undefined') {\n        // if no value, negate false, and we have a default, then use it!\n        if (val == null) {\n          this.setOptionValueWithSource(name, option.negate ? false : defaultValue || true, valueSource);\n        } else {\n          this.setOptionValueWithSource(name, val, valueSource);\n        }\n      } else if (val !== null) {\n        // reassign\n        this.setOptionValueWithSource(name, option.negate ? false : val, valueSource);\n      }\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description` and optional\n   * coercion `fn`.\n   *\n   * The `flags` string contains the short and/or long flags,\n   * separated by comma, a pipe or space. The following are all valid\n   * all will output this way when `--help` is used.\n   *\n   *     \"-p, --pepper\"\n   *     \"-p|--pepper\"\n   *     \"-p --pepper\"\n   *\n   * @example\n   * // simple boolean defaulting to undefined\n   * program.option('-p, --pepper', 'add pepper');\n   *\n   * program.pepper\n   * // => undefined\n   *\n   * --pepper\n   * program.pepper\n   * // => true\n   *\n   * // simple boolean defaulting to true (unless non-negated option is also defined)\n   * program.option('-C, --no-cheese', 'remove cheese');\n   *\n   * program.cheese\n   * // => true\n   *\n   * --no-cheese\n   * program.cheese\n   * // => false\n   *\n   * // required argument\n   * program.option('-C, --chdir <path>', 'change the working directory');\n   *\n   * --chdir /tmp\n   * program.chdir\n   * // => \"/tmp\"\n   *\n   * // optional argument\n   * program.option('-c, --cheese [type]', 'add cheese [marble]');\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, fn, defaultValue) {\n    return this._optionEx({}, flags, description, fn, defaultValue);\n  };\n\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [fn] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, fn, defaultValue) {\n    return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);\n  };\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  };\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  };\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  };\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  };\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n    }\n    return this;\n  };\n\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    return this;\n  };\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {Object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  };\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    return this;\n  };\n\n  /**\n   * Store option value and where the value came from.\n    *\n    * @param {string} key\n    * @param {Object} value\n    * @param {string} source - expected values are default/config/env/cli\n    * @return {Command} `this` command for chaining\n    */\n\n  setOptionValueWithSource(key, value, source) {\n    this.setOptionValue(key, value);\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n    * Get source of option value.\n    * Expected values are default | config | env | cli\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  };\n\n  /**\n   * Get user arguments implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included application, and use that to set implicit command name.\n   *\n   * @api private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n    if (!this._scriptPath && require.main) {\n      this._scriptPath = require.main.filename;\n    }\n\n    // Guess name, used in usage in help.\n    this._name = this._name || (this._scriptPath && path.basename(this._scriptPath, path.extname(this._scriptPath)));\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * program.parse(process.argv);\n   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  };\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * await program.parseAsync(process.argv);\n   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  };\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n\n    // Want the entry script as the reference for command name and directory for searching for other files.\n    let scriptPath = this._scriptPath;\n    // Fallback in case not set, due to how Command created or called.\n    if (!scriptPath && require.main) {\n      scriptPath = require.main.filename;\n    }\n\n    let baseDir;\n    try {\n      const resolvedLink = fs.realpathSync(scriptPath);\n      baseDir = path.dirname(resolvedLink);\n    } catch (e) {\n      baseDir = '.'; // dummy, probably not going to find executable!\n    }\n\n    // name of the subcommand, like `pm-install`\n    let bin = path.basename(scriptPath, path.extname(scriptPath)) + '-' + subcommand._name;\n    if (subcommand._executableFile) {\n      bin = subcommand._executableFile;\n    }\n\n    const localBin = path.join(baseDir, bin);\n    if (fs.existsSync(localBin)) {\n      // prefer local `./<bin>` to bin in the $PATH\n      bin = localBin;\n    } else {\n      // Look for source files.\n      sourceExt.forEach((ext) => {\n        if (fs.existsSync(`${localBin}${ext}`)) {\n          bin = `${localBin}${ext}`;\n        }\n      });\n    }\n    launchWithNode = sourceExt.includes(path.extname(bin));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(bin);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(bin, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n    signals.forEach((signal) => {\n      // @ts-ignore\n      process.on(signal, () => {\n        if (proc.killed === false && proc.exitCode === null) {\n          proc.kill(signal);\n        }\n      });\n    });\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', (err) => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableMissing = `'${bin}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name`;\n        throw new Error(executableMissing);\n      // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${bin}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  };\n\n  /**\n   * @api private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    if (subCommand._executableHandler) {\n      this._executeSubCommand(subCommand, operands.concat(unknown));\n    } else {\n      return subCommand._parseCommand(operands, unknown);\n    }\n  };\n\n  /**\n   * Check this.args against expected this._args.\n   *\n   * @api private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this._args.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {\n      return;\n    }\n    if (this.args.length > this._args.length) {\n      this._excessArguments(this.args);\n    }\n  };\n\n  /**\n   * Process this.args using this._args and save as this.processedArgs!\n   *\n   * @api private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        try {\n          parsedValue = argument.parseArg(value, previous);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;\n            this._displayError(err.exitCode, err.code, message);\n          }\n          throw err;\n        }\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this._args.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {Promise|undefined} promise\n   * @param {Function} fn\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    getCommandAndParents(this)\n      .reverse()\n      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach(hookedCommand => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      if (operands.length === 1) {\n        this.help();\n      }\n      return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\n    }\n    if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    }\n    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    outputHelpIfRequested(this, parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let actionResult;\n      actionResult = this._chainOrCallHooks(actionResult, 'preAction');\n      actionResult = this._chainOrCall(actionResult, () => this._actionHandler(this.processedArgs));\n      if (this.parent) this.parent.emit(commandEvent, operands, unknown); // legacy\n      actionResult = this._chainOrCallHooks(actionResult, 'postAction');\n      return actionResult;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) { // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  };\n\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  };\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  };\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Lazy calling after checking for help flags from leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd.options.forEach((anOption) => {\n        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    }\n  };\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else { // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  };\n\n  /**\n   * Return an object containing options as key-value pairs\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  };\n\n  /**\n   * Internal bottleneck for handling of parsing errors.\n   *\n   * @api private\n   */\n  _displayError(exitCode, code, message) {\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @api private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {\n          if (option.required || option.optional) { // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else { // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this._displayError(1, 'commander.missingArgument', message);\n  };\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this._displayError(1, 'commander.optionMissingArgument', message);\n  };\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this._displayError(1, 'commander.missingMandatoryOptionValue', message);\n  };\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      let command = this;\n      do {\n        const moreFlags = command.createHelp().visibleOptions(command)\n          .filter(option => option.long)\n          .map(option => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this._displayError(1, 'commander.unknownOption', message);\n  };\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this._args.length;\n    const s = (expected === 1) ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this._displayError(1, 'commander.excessArguments', message);\n  };\n\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp().visibleCommands(this).forEach((command) => {\n        candidateNames.push(command.name());\n        // just visible alias\n        if (command.alias()) candidateNames.push(command.alias());\n      });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this._displayError(1, 'commander.unknownCommand', message);\n  };\n\n  /**\n   * Set the program version to `str`.\n   *\n   * This method auto-registers the \"-V, --version\" flag\n   * which will print the version number when passed.\n   *\n   * You can optionally supply the  flags and description to override the defaults.\n   *\n   * @param {string} str\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  };\n\n  /**\n   * Set the description to `str`.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  };\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n    command._aliases.push(alias);\n    return this;\n  };\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  };\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this._args.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\n        (this.commands.length ? '[command]' : []),\n        (this._args.length ? args : [])\n      ).join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  };\n\n  /**\n   * Get or set the name of the command\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  };\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  };\n\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    getCommandAndParents(this).reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    this.emit(this._helpLongFlag); // deprecated\n    this.emit('afterHelp', context);\n    getCommandAndParents(this).forEach(command => command.emit('afterAllHelp', context));\n  };\n\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n\n    const helpFlags = splitOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n\n    return this;\n  };\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  };\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n};\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\n/**\n * @param {Command} startCommand\n * @returns {Command[]}\n * @api private\n */\n\nfunction getCommandAndParents(startCommand) {\n  const result = [];\n  for (let command = startCommand; command; command = command.parent) {\n    result.push(command);\n  }\n  return result;\n}\n\nexports.Command = Command;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}