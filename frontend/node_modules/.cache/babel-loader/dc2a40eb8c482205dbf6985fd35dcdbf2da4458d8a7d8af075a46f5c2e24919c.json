{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NullThrowsReasons = exports.nullThrows = void 0;\n/**\n * A set of common reasons for calling nullThrows\n */\nconst NullThrowsReasons = {\n  MissingParent: 'Expected node to have a parent.',\n  MissingToken: (token, thing) => `Expected to find a ${token} for the ${thing}.`\n};\nexports.NullThrowsReasons = NullThrowsReasons;\n/**\n * Assert that a value must not be null or undefined.\n * This is a nice explicit alternative to the non-null assertion operator.\n */\nfunction nullThrows(value, message) {\n  // this function is primarily used to keep types happy in a safe way\n  // i.e. is used when we expect that a value is never nullish\n  // this means that it's pretty much impossible to test the below if...\n  // so ignore it in coverage metrics.\n  /* istanbul ignore if */\n  if (value == null) {\n    throw new Error(`Non-null Assertion Failed: ${message}`);\n  }\n  return value;\n}\nexports.nullThrows = nullThrows;","map":{"version":3,"names":["NullThrowsReasons","MissingParent","MissingToken","token","thing","exports","nullThrows","value","message","Error"],"sources":["../../src/eslint-utils/nullThrows.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA;;;AAGA,MAAMA,iBAAiB,GAAG;EACxBC,aAAa,EAAE,iCAAiC;EAChDC,YAAY,EAAEA,CAACC,KAAa,EAAEC,KAAa,KACzC,sBAAsBD,KAAK,YAAYC,KAAK;CACtC;AAoBWC,OAAA,CAAAL,iBAAA,GAAAA,iBAAA;AAlBrB;;;;AAIA,SAASM,UAAUA,CAAIC,KAA2B,EAAEC,OAAe;EACjE;EACA;EACA;EAEA;EACA;EACA,IAAID,KAAK,IAAI,IAAI,EAAE;IACjB,MAAM,IAAIE,KAAK,CAAC,8BAA8BD,OAAO,EAAE,CAAC;;EAG1D,OAAOD,KAAK;AACd;AAESF,OAAA,CAAAC,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}