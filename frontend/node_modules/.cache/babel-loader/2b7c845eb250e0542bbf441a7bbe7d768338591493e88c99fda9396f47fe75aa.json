{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runEslintAsync = void 0;\nconst get_eslint_cli_1 = require(\"./utils/get-eslint-cli\");\nasync function runEslintAsync(files, mode) {\n  const cwd = process.cwd();\n  const eslintPath = (0, get_eslint_cli_1.getEslintPath)(cwd);\n  const {\n    ESLint\n  } = require(eslintPath);\n  const eslint = new ESLint({\n    useEslintrc: true,\n    cwd\n  });\n  let results;\n  try {\n    results = await eslint.lintFiles(files);\n  } catch (e) {\n    throw new Error(`@rushstack/eslint-bulk execution error: ${e.message}`);\n  }\n  const {\n    write,\n    prune\n  } = await Promise.resolve().then(() => __importStar(require('../bulk-suppressions-patch')));\n  switch (mode) {\n    case 'suppress':\n      {\n        await write();\n        break;\n      }\n    case 'prune':\n      {\n        await prune();\n        break;\n      }\n  }\n  if (results.length > 0) {\n    const stylishFormatter = await eslint.loadFormatter();\n    const formattedResults = stylishFormatter.format(results);\n    console.log(formattedResults);\n  }\n  console.log('@rushstack/eslint-bulk: Successfully pruned unused suppressions in all .eslint-bulk-suppressions.json ' + `files under directory ${cwd}`);\n}\nexports.runEslintAsync = runEslintAsync;","map":{"version":3,"names":["get_eslint_cli_1","require","runEslintAsync","files","mode","cwd","process","eslintPath","getEslintPath","ESLint","eslint","useEslintrc","results","lintFiles","e","Error","message","write","prune","Promise","resolve","then","__importStar","length","stylishFormatter","loadFormatter","formattedResults","format","console","log","exports"],"sources":["C:\\Users\\chest\\OneDrive\\Documentos\\GitHub\\HackUPC\\frontend\\node_modules\\@rushstack\\eslint-patch\\src\\eslint-bulk-suppressions\\cli\\runEslint.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ESLint } from 'eslint';\nimport { getEslintPath } from './utils/get-eslint-cli';\n\nexport async function runEslintAsync(files: string[], mode: 'suppress' | 'prune'): Promise<void> {\n  const cwd: string = process.cwd();\n  const eslintPath: string = getEslintPath(cwd);\n  const { ESLint }: typeof import('eslint') = require(eslintPath);\n  const eslint: ESLint = new ESLint({\n    useEslintrc: true,\n    cwd\n  });\n\n  let results: ESLint.LintResult[];\n  try {\n    results = await eslint.lintFiles(files);\n  } catch (e) {\n    throw new Error(`@rushstack/eslint-bulk execution error: ${e.message}`);\n  }\n\n  const { write, prune } = await import('../bulk-suppressions-patch');\n  switch (mode) {\n    case 'suppress': {\n      await write();\n      break;\n    }\n\n    case 'prune': {\n      await prune();\n      break;\n    }\n  }\n\n  if (results.length > 0) {\n    const stylishFormatter: ESLint.Formatter = await eslint.loadFormatter();\n    const formattedResults: string = stylishFormatter.format(results);\n    console.log(formattedResults);\n  }\n\n  console.log(\n    '@rushstack/eslint-bulk: Successfully pruned unused suppressions in all .eslint-bulk-suppressions.json ' +\n      `files under directory ${cwd}`\n  );\n}\n"],"mappings":";;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAAA,gBAAA,GAAAC,OAAA;AAEO,eAAeC,cAAcA,CAACC,KAAe,EAAEC,IAA0B;EAC9E,MAAMC,GAAG,GAAWC,OAAO,CAACD,GAAG,EAAE;EACjC,MAAME,UAAU,GAAW,IAAAP,gBAAA,CAAAQ,aAAa,EAACH,GAAG,CAAC;EAC7C,MAAM;IAAEI;EAAM,CAAE,GAA4BR,OAAO,CAACM,UAAU,CAAC;EAC/D,MAAMG,MAAM,GAAW,IAAID,MAAM,CAAC;IAChCE,WAAW,EAAE,IAAI;IACjBN;GACD,CAAC;EAEF,IAAIO,OAA4B;EAChC,IAAI;IACFA,OAAO,GAAG,MAAMF,MAAM,CAACG,SAAS,CAACV,KAAK,CAAC;EACzC,CAAC,CAAC,OAAOW,CAAC,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,2CAA2CD,CAAC,CAACE,OAAO,EAAE,CAAC;EACzE;EAEA,MAAM;IAAEC,KAAK;IAAEC;EAAK,CAAE,GAAG,MAAAC,OAAA,CAAAC,OAAA,GAAAC,IAAA,OAAAC,YAAA,CAAArB,OAAA,CAAa,4BAA4B,GAAC;EACnE,QAAQG,IAAI;IACV,KAAK,UAAU;MAAE;QACf,MAAMa,KAAK,EAAE;QACb;MACF;IAEA,KAAK,OAAO;MAAE;QACZ,MAAMC,KAAK,EAAE;QACb;MACF;EACF;EAEA,IAAIN,OAAO,CAACW,MAAM,GAAG,CAAC,EAAE;IACtB,MAAMC,gBAAgB,GAAqB,MAAMd,MAAM,CAACe,aAAa,EAAE;IACvE,MAAMC,gBAAgB,GAAWF,gBAAgB,CAACG,MAAM,CAACf,OAAO,CAAC;IACjEgB,OAAO,CAACC,GAAG,CAACH,gBAAgB,CAAC;EAC/B;EAEAE,OAAO,CAACC,GAAG,CACT,wGAAwG,GACtG,yBAAyBxB,GAAG,EAAE,CACjC;AACH;AAvCAyB,OAAA,CAAA5B,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}