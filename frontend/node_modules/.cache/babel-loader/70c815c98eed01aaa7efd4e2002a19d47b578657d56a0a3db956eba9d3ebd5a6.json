{"ast":null,"code":"\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\nvar calledInOrder = require(\"./called-in-order\");\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\nvar testObject1 = {\n  someFunction: function () {\n    return;\n  }\n};\nvar testObject2 = {\n  otherFunction: function () {\n    return;\n  }\n};\nvar testObject3 = {\n  thirdFunction: function () {\n    return;\n  }\n};\nfunction testMethod() {\n  testObject1.someFunction();\n  testObject2.otherFunction();\n  testObject2.otherFunction();\n  testObject2.otherFunction();\n  testObject3.thirdFunction();\n}\ndescribe(\"calledInOrder\", function () {\n  beforeEach(function () {\n    sinon.stub(testObject1, \"someFunction\");\n    sinon.stub(testObject2, \"otherFunction\");\n    sinon.stub(testObject3, \"thirdFunction\");\n    testMethod();\n  });\n  afterEach(function () {\n    testObject1.someFunction.restore();\n    testObject2.otherFunction.restore();\n    testObject3.thirdFunction.restore();\n  });\n  describe(\"given single array argument\", function () {\n    describe(\"when stubs were called in expected order\", function () {\n      it(\"returns true\", function () {\n        assert.isTrue(calledInOrder([testObject1.someFunction, testObject2.otherFunction]));\n        assert.isTrue(calledInOrder([testObject1.someFunction, testObject2.otherFunction, testObject2.otherFunction, testObject3.thirdFunction]));\n      });\n    });\n    describe(\"when stubs were called in unexpected order\", function () {\n      it(\"returns false\", function () {\n        assert.isFalse(calledInOrder([testObject2.otherFunction, testObject1.someFunction]));\n        assert.isFalse(calledInOrder([testObject2.otherFunction, testObject1.someFunction, testObject1.someFunction, testObject3.thirdFunction]));\n      });\n    });\n  });\n  describe(\"given multiple arguments\", function () {\n    describe(\"when stubs were called in expected order\", function () {\n      it(\"returns true\", function () {\n        assert.isTrue(calledInOrder(testObject1.someFunction, testObject2.otherFunction));\n        assert.isTrue(calledInOrder(testObject1.someFunction, testObject2.otherFunction, testObject3.thirdFunction));\n      });\n    });\n    describe(\"when stubs were called in unexpected order\", function () {\n      it(\"returns false\", function () {\n        assert.isFalse(calledInOrder(testObject2.otherFunction, testObject1.someFunction));\n        assert.isFalse(calledInOrder(testObject2.otherFunction, testObject1.someFunction, testObject3.thirdFunction));\n      });\n    });\n  });\n});","map":{"version":3,"names":["assert","require","calledInOrder","sinon","testObject1","someFunction","testObject2","otherFunction","testObject3","thirdFunction","testMethod","describe","beforeEach","stub","afterEach","restore","it","isTrue","isFalse"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/@sinonjs/commons/lib/called-in-order.test.js"],"sourcesContent":["\"use strict\";\n\nvar assert = require(\"@sinonjs/referee-sinon\").assert;\nvar calledInOrder = require(\"./called-in-order\");\nvar sinon = require(\"@sinonjs/referee-sinon\").sinon;\n\nvar testObject1 = {\n    someFunction: function () {\n        return;\n    },\n};\nvar testObject2 = {\n    otherFunction: function () {\n        return;\n    },\n};\nvar testObject3 = {\n    thirdFunction: function () {\n        return;\n    },\n};\n\nfunction testMethod() {\n    testObject1.someFunction();\n    testObject2.otherFunction();\n    testObject2.otherFunction();\n    testObject2.otherFunction();\n    testObject3.thirdFunction();\n}\n\ndescribe(\"calledInOrder\", function () {\n    beforeEach(function () {\n        sinon.stub(testObject1, \"someFunction\");\n        sinon.stub(testObject2, \"otherFunction\");\n        sinon.stub(testObject3, \"thirdFunction\");\n        testMethod();\n    });\n    afterEach(function () {\n        testObject1.someFunction.restore();\n        testObject2.otherFunction.restore();\n        testObject3.thirdFunction.restore();\n    });\n\n    describe(\"given single array argument\", function () {\n        describe(\"when stubs were called in expected order\", function () {\n            it(\"returns true\", function () {\n                assert.isTrue(\n                    calledInOrder([\n                        testObject1.someFunction,\n                        testObject2.otherFunction,\n                    ])\n                );\n                assert.isTrue(\n                    calledInOrder([\n                        testObject1.someFunction,\n                        testObject2.otherFunction,\n                        testObject2.otherFunction,\n                        testObject3.thirdFunction,\n                    ])\n                );\n            });\n        });\n\n        describe(\"when stubs were called in unexpected order\", function () {\n            it(\"returns false\", function () {\n                assert.isFalse(\n                    calledInOrder([\n                        testObject2.otherFunction,\n                        testObject1.someFunction,\n                    ])\n                );\n                assert.isFalse(\n                    calledInOrder([\n                        testObject2.otherFunction,\n                        testObject1.someFunction,\n                        testObject1.someFunction,\n                        testObject3.thirdFunction,\n                    ])\n                );\n            });\n        });\n    });\n\n    describe(\"given multiple arguments\", function () {\n        describe(\"when stubs were called in expected order\", function () {\n            it(\"returns true\", function () {\n                assert.isTrue(\n                    calledInOrder(\n                        testObject1.someFunction,\n                        testObject2.otherFunction\n                    )\n                );\n                assert.isTrue(\n                    calledInOrder(\n                        testObject1.someFunction,\n                        testObject2.otherFunction,\n                        testObject3.thirdFunction\n                    )\n                );\n            });\n        });\n\n        describe(\"when stubs were called in unexpected order\", function () {\n            it(\"returns false\", function () {\n                assert.isFalse(\n                    calledInOrder(\n                        testObject2.otherFunction,\n                        testObject1.someFunction\n                    )\n                );\n                assert.isFalse(\n                    calledInOrder(\n                        testObject2.otherFunction,\n                        testObject1.someFunction,\n                        testObject3.thirdFunction\n                    )\n                );\n            });\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}