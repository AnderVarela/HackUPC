{"ast":null,"code":"'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (isLastCharLower && UPPERCASE.test(character)) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n    }\n  }\n  return string;\n};\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n  LEADING_CAPITAL.lastIndex = 0;\n  return input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\nconst postProcess = (input, toUpperCase) => {\n  SEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n  NUMBERS_AND_IDENTIFIER.lastIndex = 0;\n  return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier)).replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\nconst camelCase = (input, options) => {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n  options = {\n    pascalCase: false,\n    preserveConsecutiveUppercase: false,\n    ...options\n  };\n  if (Array.isArray(input)) {\n    input = input.map(x => x.trim()).filter(x => x.length).join('-');\n  } else {\n    input = input.trim();\n  }\n  if (input.length === 0) {\n    return '';\n  }\n  const toLowerCase = options.locale === false ? string => string.toLowerCase() : string => string.toLocaleLowerCase(options.locale);\n  const toUpperCase = options.locale === false ? string => string.toUpperCase() : string => string.toLocaleUpperCase(options.locale);\n  if (input.length === 1) {\n    return options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n  }\n  const hasUpperCase = input !== toLowerCase(input);\n  if (hasUpperCase) {\n    input = preserveCamelCase(input, toLowerCase, toUpperCase);\n  }\n  input = input.replace(LEADING_SEPARATORS, '');\n  if (options.preserveConsecutiveUppercase) {\n    input = preserveConsecutiveUppercase(input, toLowerCase);\n  } else {\n    input = toLowerCase(input);\n  }\n  if (options.pascalCase) {\n    input = toUpperCase(input.charAt(0)) + input.slice(1);\n  }\n  return postProcess(input, toUpperCase);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;","map":{"version":3,"names":["UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","preserveCamelCase","string","toLowerCase","toUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","length","character","test","slice","preserveConsecutiveUppercase","input","lastIndex","replace","m1","postProcess","_","identifier","m","camelCase","options","Array","isArray","TypeError","pascalCase","map","x","trim","filter","join","locale","toLocaleLowerCase","toLocaleUpperCase","hasUpperCase","charAt","module","exports","default"],"sources":["C:/Users/chest/OneDrive/Documentos/GitHub/HackUPC/frontend/node_modules/camelcase/index.js"],"sourcesContent":["'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}